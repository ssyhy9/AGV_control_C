
AGV_control_C.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000f36c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002c8  0800f500  0800f500  0001f500  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800f7c8  0800f7c8  00020078  2**0
                  CONTENTS
  4 .ARM          00000008  0800f7c8  0800f7c8  0001f7c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800f7d0  0800f7d0  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800f7d0  0800f7d0  0001f7d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800f7d4  0800f7d4  0001f7d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  0800f7d8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000053e0  20000078  0800f850  00020078  2**2
                  ALLOC
 10 ._user_heap_stack 00004000  20005458  0800f850  00025458  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 12 .debug_info   00032777  00000000  00000000  000200a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00006867  00000000  00000000  0005281f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000021d0  00000000  00000000  00059088  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001f40  00000000  00000000  0005b258  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000093c2  00000000  00000000  0005d198  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002b1bd  00000000  00000000  0006655a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e65bc  00000000  00000000  00091717  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00177cd3  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00009238  00000000  00000000  00177d28  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000078 	.word	0x20000078
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800f4e4 	.word	0x0800f4e4

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000007c 	.word	0x2000007c
 80001cc:	0800f4e4 	.word	0x0800f4e4

080001d0 <__aeabi_drsub>:
 80001d0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001d4:	e002      	b.n	80001dc <__adddf3>
 80001d6:	bf00      	nop

080001d8 <__aeabi_dsub>:
 80001d8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001dc <__adddf3>:
 80001dc:	b530      	push	{r4, r5, lr}
 80001de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001e6:	ea94 0f05 	teq	r4, r5
 80001ea:	bf08      	it	eq
 80001ec:	ea90 0f02 	teqeq	r0, r2
 80001f0:	bf1f      	itttt	ne
 80001f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000202:	f000 80e2 	beq.w	80003ca <__adddf3+0x1ee>
 8000206:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800020a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800020e:	bfb8      	it	lt
 8000210:	426d      	neglt	r5, r5
 8000212:	dd0c      	ble.n	800022e <__adddf3+0x52>
 8000214:	442c      	add	r4, r5
 8000216:	ea80 0202 	eor.w	r2, r0, r2
 800021a:	ea81 0303 	eor.w	r3, r1, r3
 800021e:	ea82 0000 	eor.w	r0, r2, r0
 8000222:	ea83 0101 	eor.w	r1, r3, r1
 8000226:	ea80 0202 	eor.w	r2, r0, r2
 800022a:	ea81 0303 	eor.w	r3, r1, r3
 800022e:	2d36      	cmp	r5, #54	; 0x36
 8000230:	bf88      	it	hi
 8000232:	bd30      	pophi	{r4, r5, pc}
 8000234:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000238:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800023c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000240:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000244:	d002      	beq.n	800024c <__adddf3+0x70>
 8000246:	4240      	negs	r0, r0
 8000248:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800024c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000250:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000254:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000258:	d002      	beq.n	8000260 <__adddf3+0x84>
 800025a:	4252      	negs	r2, r2
 800025c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000260:	ea94 0f05 	teq	r4, r5
 8000264:	f000 80a7 	beq.w	80003b6 <__adddf3+0x1da>
 8000268:	f1a4 0401 	sub.w	r4, r4, #1
 800026c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000270:	db0d      	blt.n	800028e <__adddf3+0xb2>
 8000272:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000276:	fa22 f205 	lsr.w	r2, r2, r5
 800027a:	1880      	adds	r0, r0, r2
 800027c:	f141 0100 	adc.w	r1, r1, #0
 8000280:	fa03 f20e 	lsl.w	r2, r3, lr
 8000284:	1880      	adds	r0, r0, r2
 8000286:	fa43 f305 	asr.w	r3, r3, r5
 800028a:	4159      	adcs	r1, r3
 800028c:	e00e      	b.n	80002ac <__adddf3+0xd0>
 800028e:	f1a5 0520 	sub.w	r5, r5, #32
 8000292:	f10e 0e20 	add.w	lr, lr, #32
 8000296:	2a01      	cmp	r2, #1
 8000298:	fa03 fc0e 	lsl.w	ip, r3, lr
 800029c:	bf28      	it	cs
 800029e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002a2:	fa43 f305 	asr.w	r3, r3, r5
 80002a6:	18c0      	adds	r0, r0, r3
 80002a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002ac:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002b0:	d507      	bpl.n	80002c2 <__adddf3+0xe6>
 80002b2:	f04f 0e00 	mov.w	lr, #0
 80002b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80002ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002be:	eb6e 0101 	sbc.w	r1, lr, r1
 80002c2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002c6:	d31b      	bcc.n	8000300 <__adddf3+0x124>
 80002c8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002cc:	d30c      	bcc.n	80002e8 <__adddf3+0x10c>
 80002ce:	0849      	lsrs	r1, r1, #1
 80002d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80002d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d8:	f104 0401 	add.w	r4, r4, #1
 80002dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002e4:	f080 809a 	bcs.w	800041c <__adddf3+0x240>
 80002e8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002ec:	bf08      	it	eq
 80002ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002f2:	f150 0000 	adcs.w	r0, r0, #0
 80002f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002fa:	ea41 0105 	orr.w	r1, r1, r5
 80002fe:	bd30      	pop	{r4, r5, pc}
 8000300:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000304:	4140      	adcs	r0, r0
 8000306:	eb41 0101 	adc.w	r1, r1, r1
 800030a:	3c01      	subs	r4, #1
 800030c:	bf28      	it	cs
 800030e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000312:	d2e9      	bcs.n	80002e8 <__adddf3+0x10c>
 8000314:	f091 0f00 	teq	r1, #0
 8000318:	bf04      	itt	eq
 800031a:	4601      	moveq	r1, r0
 800031c:	2000      	moveq	r0, #0
 800031e:	fab1 f381 	clz	r3, r1
 8000322:	bf08      	it	eq
 8000324:	3320      	addeq	r3, #32
 8000326:	f1a3 030b 	sub.w	r3, r3, #11
 800032a:	f1b3 0220 	subs.w	r2, r3, #32
 800032e:	da0c      	bge.n	800034a <__adddf3+0x16e>
 8000330:	320c      	adds	r2, #12
 8000332:	dd08      	ble.n	8000346 <__adddf3+0x16a>
 8000334:	f102 0c14 	add.w	ip, r2, #20
 8000338:	f1c2 020c 	rsb	r2, r2, #12
 800033c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000340:	fa21 f102 	lsr.w	r1, r1, r2
 8000344:	e00c      	b.n	8000360 <__adddf3+0x184>
 8000346:	f102 0214 	add.w	r2, r2, #20
 800034a:	bfd8      	it	le
 800034c:	f1c2 0c20 	rsble	ip, r2, #32
 8000350:	fa01 f102 	lsl.w	r1, r1, r2
 8000354:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000358:	bfdc      	itt	le
 800035a:	ea41 010c 	orrle.w	r1, r1, ip
 800035e:	4090      	lslle	r0, r2
 8000360:	1ae4      	subs	r4, r4, r3
 8000362:	bfa2      	ittt	ge
 8000364:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000368:	4329      	orrge	r1, r5
 800036a:	bd30      	popge	{r4, r5, pc}
 800036c:	ea6f 0404 	mvn.w	r4, r4
 8000370:	3c1f      	subs	r4, #31
 8000372:	da1c      	bge.n	80003ae <__adddf3+0x1d2>
 8000374:	340c      	adds	r4, #12
 8000376:	dc0e      	bgt.n	8000396 <__adddf3+0x1ba>
 8000378:	f104 0414 	add.w	r4, r4, #20
 800037c:	f1c4 0220 	rsb	r2, r4, #32
 8000380:	fa20 f004 	lsr.w	r0, r0, r4
 8000384:	fa01 f302 	lsl.w	r3, r1, r2
 8000388:	ea40 0003 	orr.w	r0, r0, r3
 800038c:	fa21 f304 	lsr.w	r3, r1, r4
 8000390:	ea45 0103 	orr.w	r1, r5, r3
 8000394:	bd30      	pop	{r4, r5, pc}
 8000396:	f1c4 040c 	rsb	r4, r4, #12
 800039a:	f1c4 0220 	rsb	r2, r4, #32
 800039e:	fa20 f002 	lsr.w	r0, r0, r2
 80003a2:	fa01 f304 	lsl.w	r3, r1, r4
 80003a6:	ea40 0003 	orr.w	r0, r0, r3
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	fa21 f004 	lsr.w	r0, r1, r4
 80003b2:	4629      	mov	r1, r5
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	f094 0f00 	teq	r4, #0
 80003ba:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003be:	bf06      	itte	eq
 80003c0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003c4:	3401      	addeq	r4, #1
 80003c6:	3d01      	subne	r5, #1
 80003c8:	e74e      	b.n	8000268 <__adddf3+0x8c>
 80003ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ce:	bf18      	it	ne
 80003d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003d4:	d029      	beq.n	800042a <__adddf3+0x24e>
 80003d6:	ea94 0f05 	teq	r4, r5
 80003da:	bf08      	it	eq
 80003dc:	ea90 0f02 	teqeq	r0, r2
 80003e0:	d005      	beq.n	80003ee <__adddf3+0x212>
 80003e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80003e6:	bf04      	itt	eq
 80003e8:	4619      	moveq	r1, r3
 80003ea:	4610      	moveq	r0, r2
 80003ec:	bd30      	pop	{r4, r5, pc}
 80003ee:	ea91 0f03 	teq	r1, r3
 80003f2:	bf1e      	ittt	ne
 80003f4:	2100      	movne	r1, #0
 80003f6:	2000      	movne	r0, #0
 80003f8:	bd30      	popne	{r4, r5, pc}
 80003fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003fe:	d105      	bne.n	800040c <__adddf3+0x230>
 8000400:	0040      	lsls	r0, r0, #1
 8000402:	4149      	adcs	r1, r1
 8000404:	bf28      	it	cs
 8000406:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800040a:	bd30      	pop	{r4, r5, pc}
 800040c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000410:	bf3c      	itt	cc
 8000412:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000416:	bd30      	popcc	{r4, r5, pc}
 8000418:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800041c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000420:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000424:	f04f 0000 	mov.w	r0, #0
 8000428:	bd30      	pop	{r4, r5, pc}
 800042a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800042e:	bf1a      	itte	ne
 8000430:	4619      	movne	r1, r3
 8000432:	4610      	movne	r0, r2
 8000434:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000438:	bf1c      	itt	ne
 800043a:	460b      	movne	r3, r1
 800043c:	4602      	movne	r2, r0
 800043e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000442:	bf06      	itte	eq
 8000444:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000448:	ea91 0f03 	teqeq	r1, r3
 800044c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000450:	bd30      	pop	{r4, r5, pc}
 8000452:	bf00      	nop

08000454 <__aeabi_ui2d>:
 8000454:	f090 0f00 	teq	r0, #0
 8000458:	bf04      	itt	eq
 800045a:	2100      	moveq	r1, #0
 800045c:	4770      	bxeq	lr
 800045e:	b530      	push	{r4, r5, lr}
 8000460:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000464:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000468:	f04f 0500 	mov.w	r5, #0
 800046c:	f04f 0100 	mov.w	r1, #0
 8000470:	e750      	b.n	8000314 <__adddf3+0x138>
 8000472:	bf00      	nop

08000474 <__aeabi_i2d>:
 8000474:	f090 0f00 	teq	r0, #0
 8000478:	bf04      	itt	eq
 800047a:	2100      	moveq	r1, #0
 800047c:	4770      	bxeq	lr
 800047e:	b530      	push	{r4, r5, lr}
 8000480:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000484:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000488:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800048c:	bf48      	it	mi
 800048e:	4240      	negmi	r0, r0
 8000490:	f04f 0100 	mov.w	r1, #0
 8000494:	e73e      	b.n	8000314 <__adddf3+0x138>
 8000496:	bf00      	nop

08000498 <__aeabi_f2d>:
 8000498:	0042      	lsls	r2, r0, #1
 800049a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800049e:	ea4f 0131 	mov.w	r1, r1, rrx
 80004a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004a6:	bf1f      	itttt	ne
 80004a8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004ac:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004b0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004b4:	4770      	bxne	lr
 80004b6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004ba:	bf08      	it	eq
 80004bc:	4770      	bxeq	lr
 80004be:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004c2:	bf04      	itt	eq
 80004c4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004c8:	4770      	bxeq	lr
 80004ca:	b530      	push	{r4, r5, lr}
 80004cc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004d0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004d4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004d8:	e71c      	b.n	8000314 <__adddf3+0x138>
 80004da:	bf00      	nop

080004dc <__aeabi_ul2d>:
 80004dc:	ea50 0201 	orrs.w	r2, r0, r1
 80004e0:	bf08      	it	eq
 80004e2:	4770      	bxeq	lr
 80004e4:	b530      	push	{r4, r5, lr}
 80004e6:	f04f 0500 	mov.w	r5, #0
 80004ea:	e00a      	b.n	8000502 <__aeabi_l2d+0x16>

080004ec <__aeabi_l2d>:
 80004ec:	ea50 0201 	orrs.w	r2, r0, r1
 80004f0:	bf08      	it	eq
 80004f2:	4770      	bxeq	lr
 80004f4:	b530      	push	{r4, r5, lr}
 80004f6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004fa:	d502      	bpl.n	8000502 <__aeabi_l2d+0x16>
 80004fc:	4240      	negs	r0, r0
 80004fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000502:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000506:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800050a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800050e:	f43f aed8 	beq.w	80002c2 <__adddf3+0xe6>
 8000512:	f04f 0203 	mov.w	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000522:	bf18      	it	ne
 8000524:	3203      	addne	r2, #3
 8000526:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800052a:	f1c2 0320 	rsb	r3, r2, #32
 800052e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000532:	fa20 f002 	lsr.w	r0, r0, r2
 8000536:	fa01 fe03 	lsl.w	lr, r1, r3
 800053a:	ea40 000e 	orr.w	r0, r0, lr
 800053e:	fa21 f102 	lsr.w	r1, r1, r2
 8000542:	4414      	add	r4, r2
 8000544:	e6bd      	b.n	80002c2 <__adddf3+0xe6>
 8000546:	bf00      	nop

08000548 <__aeabi_dmul>:
 8000548:	b570      	push	{r4, r5, r6, lr}
 800054a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800054e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000552:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000556:	bf1d      	ittte	ne
 8000558:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800055c:	ea94 0f0c 	teqne	r4, ip
 8000560:	ea95 0f0c 	teqne	r5, ip
 8000564:	f000 f8de 	bleq	8000724 <__aeabi_dmul+0x1dc>
 8000568:	442c      	add	r4, r5
 800056a:	ea81 0603 	eor.w	r6, r1, r3
 800056e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000572:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000576:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800057a:	bf18      	it	ne
 800057c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000580:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000584:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000588:	d038      	beq.n	80005fc <__aeabi_dmul+0xb4>
 800058a:	fba0 ce02 	umull	ip, lr, r0, r2
 800058e:	f04f 0500 	mov.w	r5, #0
 8000592:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000596:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800059a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800059e:	f04f 0600 	mov.w	r6, #0
 80005a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005a6:	f09c 0f00 	teq	ip, #0
 80005aa:	bf18      	it	ne
 80005ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80005b0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005b4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005b8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005bc:	d204      	bcs.n	80005c8 <__aeabi_dmul+0x80>
 80005be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005c2:	416d      	adcs	r5, r5
 80005c4:	eb46 0606 	adc.w	r6, r6, r6
 80005c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005dc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005e0:	bf88      	it	hi
 80005e2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005e6:	d81e      	bhi.n	8000626 <__aeabi_dmul+0xde>
 80005e8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005ec:	bf08      	it	eq
 80005ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005f2:	f150 0000 	adcs.w	r0, r0, #0
 80005f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005fa:	bd70      	pop	{r4, r5, r6, pc}
 80005fc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000600:	ea46 0101 	orr.w	r1, r6, r1
 8000604:	ea40 0002 	orr.w	r0, r0, r2
 8000608:	ea81 0103 	eor.w	r1, r1, r3
 800060c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000610:	bfc2      	ittt	gt
 8000612:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000616:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800061a:	bd70      	popgt	{r4, r5, r6, pc}
 800061c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000620:	f04f 0e00 	mov.w	lr, #0
 8000624:	3c01      	subs	r4, #1
 8000626:	f300 80ab 	bgt.w	8000780 <__aeabi_dmul+0x238>
 800062a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800062e:	bfde      	ittt	le
 8000630:	2000      	movle	r0, #0
 8000632:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000636:	bd70      	pople	{r4, r5, r6, pc}
 8000638:	f1c4 0400 	rsb	r4, r4, #0
 800063c:	3c20      	subs	r4, #32
 800063e:	da35      	bge.n	80006ac <__aeabi_dmul+0x164>
 8000640:	340c      	adds	r4, #12
 8000642:	dc1b      	bgt.n	800067c <__aeabi_dmul+0x134>
 8000644:	f104 0414 	add.w	r4, r4, #20
 8000648:	f1c4 0520 	rsb	r5, r4, #32
 800064c:	fa00 f305 	lsl.w	r3, r0, r5
 8000650:	fa20 f004 	lsr.w	r0, r0, r4
 8000654:	fa01 f205 	lsl.w	r2, r1, r5
 8000658:	ea40 0002 	orr.w	r0, r0, r2
 800065c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000660:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000664:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000668:	fa21 f604 	lsr.w	r6, r1, r4
 800066c:	eb42 0106 	adc.w	r1, r2, r6
 8000670:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000674:	bf08      	it	eq
 8000676:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800067a:	bd70      	pop	{r4, r5, r6, pc}
 800067c:	f1c4 040c 	rsb	r4, r4, #12
 8000680:	f1c4 0520 	rsb	r5, r4, #32
 8000684:	fa00 f304 	lsl.w	r3, r0, r4
 8000688:	fa20 f005 	lsr.w	r0, r0, r5
 800068c:	fa01 f204 	lsl.w	r2, r1, r4
 8000690:	ea40 0002 	orr.w	r0, r0, r2
 8000694:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000698:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800069c:	f141 0100 	adc.w	r1, r1, #0
 80006a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006a4:	bf08      	it	eq
 80006a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f1c4 0520 	rsb	r5, r4, #32
 80006b0:	fa00 f205 	lsl.w	r2, r0, r5
 80006b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80006b8:	fa20 f304 	lsr.w	r3, r0, r4
 80006bc:	fa01 f205 	lsl.w	r2, r1, r5
 80006c0:	ea43 0302 	orr.w	r3, r3, r2
 80006c4:	fa21 f004 	lsr.w	r0, r1, r4
 80006c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006cc:	fa21 f204 	lsr.w	r2, r1, r4
 80006d0:	ea20 0002 	bic.w	r0, r0, r2
 80006d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006dc:	bf08      	it	eq
 80006de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006e2:	bd70      	pop	{r4, r5, r6, pc}
 80006e4:	f094 0f00 	teq	r4, #0
 80006e8:	d10f      	bne.n	800070a <__aeabi_dmul+0x1c2>
 80006ea:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006ee:	0040      	lsls	r0, r0, #1
 80006f0:	eb41 0101 	adc.w	r1, r1, r1
 80006f4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006f8:	bf08      	it	eq
 80006fa:	3c01      	subeq	r4, #1
 80006fc:	d0f7      	beq.n	80006ee <__aeabi_dmul+0x1a6>
 80006fe:	ea41 0106 	orr.w	r1, r1, r6
 8000702:	f095 0f00 	teq	r5, #0
 8000706:	bf18      	it	ne
 8000708:	4770      	bxne	lr
 800070a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800070e:	0052      	lsls	r2, r2, #1
 8000710:	eb43 0303 	adc.w	r3, r3, r3
 8000714:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000718:	bf08      	it	eq
 800071a:	3d01      	subeq	r5, #1
 800071c:	d0f7      	beq.n	800070e <__aeabi_dmul+0x1c6>
 800071e:	ea43 0306 	orr.w	r3, r3, r6
 8000722:	4770      	bx	lr
 8000724:	ea94 0f0c 	teq	r4, ip
 8000728:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800072c:	bf18      	it	ne
 800072e:	ea95 0f0c 	teqne	r5, ip
 8000732:	d00c      	beq.n	800074e <__aeabi_dmul+0x206>
 8000734:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000738:	bf18      	it	ne
 800073a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800073e:	d1d1      	bne.n	80006e4 <__aeabi_dmul+0x19c>
 8000740:	ea81 0103 	eor.w	r1, r1, r3
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	f04f 0000 	mov.w	r0, #0
 800074c:	bd70      	pop	{r4, r5, r6, pc}
 800074e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000752:	bf06      	itte	eq
 8000754:	4610      	moveq	r0, r2
 8000756:	4619      	moveq	r1, r3
 8000758:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800075c:	d019      	beq.n	8000792 <__aeabi_dmul+0x24a>
 800075e:	ea94 0f0c 	teq	r4, ip
 8000762:	d102      	bne.n	800076a <__aeabi_dmul+0x222>
 8000764:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000768:	d113      	bne.n	8000792 <__aeabi_dmul+0x24a>
 800076a:	ea95 0f0c 	teq	r5, ip
 800076e:	d105      	bne.n	800077c <__aeabi_dmul+0x234>
 8000770:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000774:	bf1c      	itt	ne
 8000776:	4610      	movne	r0, r2
 8000778:	4619      	movne	r1, r3
 800077a:	d10a      	bne.n	8000792 <__aeabi_dmul+0x24a>
 800077c:	ea81 0103 	eor.w	r1, r1, r3
 8000780:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000784:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000788:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800078c:	f04f 0000 	mov.w	r0, #0
 8000790:	bd70      	pop	{r4, r5, r6, pc}
 8000792:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000796:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800079a:	bd70      	pop	{r4, r5, r6, pc}

0800079c <__aeabi_ddiv>:
 800079c:	b570      	push	{r4, r5, r6, lr}
 800079e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007a2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007aa:	bf1d      	ittte	ne
 80007ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007b0:	ea94 0f0c 	teqne	r4, ip
 80007b4:	ea95 0f0c 	teqne	r5, ip
 80007b8:	f000 f8a7 	bleq	800090a <__aeabi_ddiv+0x16e>
 80007bc:	eba4 0405 	sub.w	r4, r4, r5
 80007c0:	ea81 0e03 	eor.w	lr, r1, r3
 80007c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007cc:	f000 8088 	beq.w	80008e0 <__aeabi_ddiv+0x144>
 80007d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007d4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007f0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007f4:	429d      	cmp	r5, r3
 80007f6:	bf08      	it	eq
 80007f8:	4296      	cmpeq	r6, r2
 80007fa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007fe:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000802:	d202      	bcs.n	800080a <__aeabi_ddiv+0x6e>
 8000804:	085b      	lsrs	r3, r3, #1
 8000806:	ea4f 0232 	mov.w	r2, r2, rrx
 800080a:	1ab6      	subs	r6, r6, r2
 800080c:	eb65 0503 	sbc.w	r5, r5, r3
 8000810:	085b      	lsrs	r3, r3, #1
 8000812:	ea4f 0232 	mov.w	r2, r2, rrx
 8000816:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800081a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800081e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000822:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000826:	bf22      	ittt	cs
 8000828:	1ab6      	subcs	r6, r6, r2
 800082a:	4675      	movcs	r5, lr
 800082c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000830:	085b      	lsrs	r3, r3, #1
 8000832:	ea4f 0232 	mov.w	r2, r2, rrx
 8000836:	ebb6 0e02 	subs.w	lr, r6, r2
 800083a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800083e:	bf22      	ittt	cs
 8000840:	1ab6      	subcs	r6, r6, r2
 8000842:	4675      	movcs	r5, lr
 8000844:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000848:	085b      	lsrs	r3, r3, #1
 800084a:	ea4f 0232 	mov.w	r2, r2, rrx
 800084e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000852:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000856:	bf22      	ittt	cs
 8000858:	1ab6      	subcs	r6, r6, r2
 800085a:	4675      	movcs	r5, lr
 800085c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000860:	085b      	lsrs	r3, r3, #1
 8000862:	ea4f 0232 	mov.w	r2, r2, rrx
 8000866:	ebb6 0e02 	subs.w	lr, r6, r2
 800086a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086e:	bf22      	ittt	cs
 8000870:	1ab6      	subcs	r6, r6, r2
 8000872:	4675      	movcs	r5, lr
 8000874:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000878:	ea55 0e06 	orrs.w	lr, r5, r6
 800087c:	d018      	beq.n	80008b0 <__aeabi_ddiv+0x114>
 800087e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000882:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000886:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800088a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800088e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000892:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000896:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800089a:	d1c0      	bne.n	800081e <__aeabi_ddiv+0x82>
 800089c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008a0:	d10b      	bne.n	80008ba <__aeabi_ddiv+0x11e>
 80008a2:	ea41 0100 	orr.w	r1, r1, r0
 80008a6:	f04f 0000 	mov.w	r0, #0
 80008aa:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008ae:	e7b6      	b.n	800081e <__aeabi_ddiv+0x82>
 80008b0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008b4:	bf04      	itt	eq
 80008b6:	4301      	orreq	r1, r0
 80008b8:	2000      	moveq	r0, #0
 80008ba:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008be:	bf88      	it	hi
 80008c0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008c4:	f63f aeaf 	bhi.w	8000626 <__aeabi_dmul+0xde>
 80008c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80008cc:	bf04      	itt	eq
 80008ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008d6:	f150 0000 	adcs.w	r0, r0, #0
 80008da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008de:	bd70      	pop	{r4, r5, r6, pc}
 80008e0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008ec:	bfc2      	ittt	gt
 80008ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008f6:	bd70      	popgt	{r4, r5, r6, pc}
 80008f8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008fc:	f04f 0e00 	mov.w	lr, #0
 8000900:	3c01      	subs	r4, #1
 8000902:	e690      	b.n	8000626 <__aeabi_dmul+0xde>
 8000904:	ea45 0e06 	orr.w	lr, r5, r6
 8000908:	e68d      	b.n	8000626 <__aeabi_dmul+0xde>
 800090a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800090e:	ea94 0f0c 	teq	r4, ip
 8000912:	bf08      	it	eq
 8000914:	ea95 0f0c 	teqeq	r5, ip
 8000918:	f43f af3b 	beq.w	8000792 <__aeabi_dmul+0x24a>
 800091c:	ea94 0f0c 	teq	r4, ip
 8000920:	d10a      	bne.n	8000938 <__aeabi_ddiv+0x19c>
 8000922:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000926:	f47f af34 	bne.w	8000792 <__aeabi_dmul+0x24a>
 800092a:	ea95 0f0c 	teq	r5, ip
 800092e:	f47f af25 	bne.w	800077c <__aeabi_dmul+0x234>
 8000932:	4610      	mov	r0, r2
 8000934:	4619      	mov	r1, r3
 8000936:	e72c      	b.n	8000792 <__aeabi_dmul+0x24a>
 8000938:	ea95 0f0c 	teq	r5, ip
 800093c:	d106      	bne.n	800094c <__aeabi_ddiv+0x1b0>
 800093e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000942:	f43f aefd 	beq.w	8000740 <__aeabi_dmul+0x1f8>
 8000946:	4610      	mov	r0, r2
 8000948:	4619      	mov	r1, r3
 800094a:	e722      	b.n	8000792 <__aeabi_dmul+0x24a>
 800094c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000950:	bf18      	it	ne
 8000952:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000956:	f47f aec5 	bne.w	80006e4 <__aeabi_dmul+0x19c>
 800095a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800095e:	f47f af0d 	bne.w	800077c <__aeabi_dmul+0x234>
 8000962:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000966:	f47f aeeb 	bne.w	8000740 <__aeabi_dmul+0x1f8>
 800096a:	e712      	b.n	8000792 <__aeabi_dmul+0x24a>

0800096c <__gedf2>:
 800096c:	f04f 3cff 	mov.w	ip, #4294967295
 8000970:	e006      	b.n	8000980 <__cmpdf2+0x4>
 8000972:	bf00      	nop

08000974 <__ledf2>:
 8000974:	f04f 0c01 	mov.w	ip, #1
 8000978:	e002      	b.n	8000980 <__cmpdf2+0x4>
 800097a:	bf00      	nop

0800097c <__cmpdf2>:
 800097c:	f04f 0c01 	mov.w	ip, #1
 8000980:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000984:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000988:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800098c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000990:	bf18      	it	ne
 8000992:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000996:	d01b      	beq.n	80009d0 <__cmpdf2+0x54>
 8000998:	b001      	add	sp, #4
 800099a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800099e:	bf0c      	ite	eq
 80009a0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009a4:	ea91 0f03 	teqne	r1, r3
 80009a8:	bf02      	ittt	eq
 80009aa:	ea90 0f02 	teqeq	r0, r2
 80009ae:	2000      	moveq	r0, #0
 80009b0:	4770      	bxeq	lr
 80009b2:	f110 0f00 	cmn.w	r0, #0
 80009b6:	ea91 0f03 	teq	r1, r3
 80009ba:	bf58      	it	pl
 80009bc:	4299      	cmppl	r1, r3
 80009be:	bf08      	it	eq
 80009c0:	4290      	cmpeq	r0, r2
 80009c2:	bf2c      	ite	cs
 80009c4:	17d8      	asrcs	r0, r3, #31
 80009c6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009ca:	f040 0001 	orr.w	r0, r0, #1
 80009ce:	4770      	bx	lr
 80009d0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009d4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009d8:	d102      	bne.n	80009e0 <__cmpdf2+0x64>
 80009da:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009de:	d107      	bne.n	80009f0 <__cmpdf2+0x74>
 80009e0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009e4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e8:	d1d6      	bne.n	8000998 <__cmpdf2+0x1c>
 80009ea:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009ee:	d0d3      	beq.n	8000998 <__cmpdf2+0x1c>
 80009f0:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009f4:	4770      	bx	lr
 80009f6:	bf00      	nop

080009f8 <__aeabi_cdrcmple>:
 80009f8:	4684      	mov	ip, r0
 80009fa:	4610      	mov	r0, r2
 80009fc:	4662      	mov	r2, ip
 80009fe:	468c      	mov	ip, r1
 8000a00:	4619      	mov	r1, r3
 8000a02:	4663      	mov	r3, ip
 8000a04:	e000      	b.n	8000a08 <__aeabi_cdcmpeq>
 8000a06:	bf00      	nop

08000a08 <__aeabi_cdcmpeq>:
 8000a08:	b501      	push	{r0, lr}
 8000a0a:	f7ff ffb7 	bl	800097c <__cmpdf2>
 8000a0e:	2800      	cmp	r0, #0
 8000a10:	bf48      	it	mi
 8000a12:	f110 0f00 	cmnmi.w	r0, #0
 8000a16:	bd01      	pop	{r0, pc}

08000a18 <__aeabi_dcmpeq>:
 8000a18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a1c:	f7ff fff4 	bl	8000a08 <__aeabi_cdcmpeq>
 8000a20:	bf0c      	ite	eq
 8000a22:	2001      	moveq	r0, #1
 8000a24:	2000      	movne	r0, #0
 8000a26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a2a:	bf00      	nop

08000a2c <__aeabi_dcmplt>:
 8000a2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a30:	f7ff ffea 	bl	8000a08 <__aeabi_cdcmpeq>
 8000a34:	bf34      	ite	cc
 8000a36:	2001      	movcc	r0, #1
 8000a38:	2000      	movcs	r0, #0
 8000a3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a3e:	bf00      	nop

08000a40 <__aeabi_dcmple>:
 8000a40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a44:	f7ff ffe0 	bl	8000a08 <__aeabi_cdcmpeq>
 8000a48:	bf94      	ite	ls
 8000a4a:	2001      	movls	r0, #1
 8000a4c:	2000      	movhi	r0, #0
 8000a4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a52:	bf00      	nop

08000a54 <__aeabi_dcmpge>:
 8000a54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a58:	f7ff ffce 	bl	80009f8 <__aeabi_cdrcmple>
 8000a5c:	bf94      	ite	ls
 8000a5e:	2001      	movls	r0, #1
 8000a60:	2000      	movhi	r0, #0
 8000a62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a66:	bf00      	nop

08000a68 <__aeabi_dcmpgt>:
 8000a68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a6c:	f7ff ffc4 	bl	80009f8 <__aeabi_cdrcmple>
 8000a70:	bf34      	ite	cc
 8000a72:	2001      	movcc	r0, #1
 8000a74:	2000      	movcs	r0, #0
 8000a76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a7a:	bf00      	nop

08000a7c <__aeabi_dcmpun>:
 8000a7c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a84:	d102      	bne.n	8000a8c <__aeabi_dcmpun+0x10>
 8000a86:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8a:	d10a      	bne.n	8000aa2 <__aeabi_dcmpun+0x26>
 8000a8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a94:	d102      	bne.n	8000a9c <__aeabi_dcmpun+0x20>
 8000a96:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9a:	d102      	bne.n	8000aa2 <__aeabi_dcmpun+0x26>
 8000a9c:	f04f 0000 	mov.w	r0, #0
 8000aa0:	4770      	bx	lr
 8000aa2:	f04f 0001 	mov.w	r0, #1
 8000aa6:	4770      	bx	lr

08000aa8 <__aeabi_d2iz>:
 8000aa8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000aac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ab0:	d215      	bcs.n	8000ade <__aeabi_d2iz+0x36>
 8000ab2:	d511      	bpl.n	8000ad8 <__aeabi_d2iz+0x30>
 8000ab4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ab8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000abc:	d912      	bls.n	8000ae4 <__aeabi_d2iz+0x3c>
 8000abe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ac2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ac6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aca:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000ace:	fa23 f002 	lsr.w	r0, r3, r2
 8000ad2:	bf18      	it	ne
 8000ad4:	4240      	negne	r0, r0
 8000ad6:	4770      	bx	lr
 8000ad8:	f04f 0000 	mov.w	r0, #0
 8000adc:	4770      	bx	lr
 8000ade:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ae2:	d105      	bne.n	8000af0 <__aeabi_d2iz+0x48>
 8000ae4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ae8:	bf08      	it	eq
 8000aea:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000aee:	4770      	bx	lr
 8000af0:	f04f 0000 	mov.w	r0, #0
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop

08000af8 <__aeabi_d2f>:
 8000af8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000afc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000b00:	bf24      	itt	cs
 8000b02:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000b06:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b0a:	d90d      	bls.n	8000b28 <__aeabi_d2f+0x30>
 8000b0c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b10:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b14:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b18:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b1c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b20:	bf08      	it	eq
 8000b22:	f020 0001 	biceq.w	r0, r0, #1
 8000b26:	4770      	bx	lr
 8000b28:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b2c:	d121      	bne.n	8000b72 <__aeabi_d2f+0x7a>
 8000b2e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b32:	bfbc      	itt	lt
 8000b34:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b38:	4770      	bxlt	lr
 8000b3a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b3e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b42:	f1c2 0218 	rsb	r2, r2, #24
 8000b46:	f1c2 0c20 	rsb	ip, r2, #32
 8000b4a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b4e:	fa20 f002 	lsr.w	r0, r0, r2
 8000b52:	bf18      	it	ne
 8000b54:	f040 0001 	orrne.w	r0, r0, #1
 8000b58:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b5c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b60:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b64:	ea40 000c 	orr.w	r0, r0, ip
 8000b68:	fa23 f302 	lsr.w	r3, r3, r2
 8000b6c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b70:	e7cc      	b.n	8000b0c <__aeabi_d2f+0x14>
 8000b72:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b76:	d107      	bne.n	8000b88 <__aeabi_d2f+0x90>
 8000b78:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b7c:	bf1e      	ittt	ne
 8000b7e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b82:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b86:	4770      	bxne	lr
 8000b88:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b8c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b90:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b94:	4770      	bx	lr
 8000b96:	bf00      	nop

08000b98 <__aeabi_uldivmod>:
 8000b98:	b953      	cbnz	r3, 8000bb0 <__aeabi_uldivmod+0x18>
 8000b9a:	b94a      	cbnz	r2, 8000bb0 <__aeabi_uldivmod+0x18>
 8000b9c:	2900      	cmp	r1, #0
 8000b9e:	bf08      	it	eq
 8000ba0:	2800      	cmpeq	r0, #0
 8000ba2:	bf1c      	itt	ne
 8000ba4:	f04f 31ff 	movne.w	r1, #4294967295
 8000ba8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bac:	f000 b96e 	b.w	8000e8c <__aeabi_idiv0>
 8000bb0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bb4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bb8:	f000 f806 	bl	8000bc8 <__udivmoddi4>
 8000bbc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bc0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bc4:	b004      	add	sp, #16
 8000bc6:	4770      	bx	lr

08000bc8 <__udivmoddi4>:
 8000bc8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bcc:	9d08      	ldr	r5, [sp, #32]
 8000bce:	4604      	mov	r4, r0
 8000bd0:	468c      	mov	ip, r1
 8000bd2:	2b00      	cmp	r3, #0
 8000bd4:	f040 8083 	bne.w	8000cde <__udivmoddi4+0x116>
 8000bd8:	428a      	cmp	r2, r1
 8000bda:	4617      	mov	r7, r2
 8000bdc:	d947      	bls.n	8000c6e <__udivmoddi4+0xa6>
 8000bde:	fab2 f282 	clz	r2, r2
 8000be2:	b142      	cbz	r2, 8000bf6 <__udivmoddi4+0x2e>
 8000be4:	f1c2 0020 	rsb	r0, r2, #32
 8000be8:	fa24 f000 	lsr.w	r0, r4, r0
 8000bec:	4091      	lsls	r1, r2
 8000bee:	4097      	lsls	r7, r2
 8000bf0:	ea40 0c01 	orr.w	ip, r0, r1
 8000bf4:	4094      	lsls	r4, r2
 8000bf6:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000bfa:	0c23      	lsrs	r3, r4, #16
 8000bfc:	fbbc f6f8 	udiv	r6, ip, r8
 8000c00:	fa1f fe87 	uxth.w	lr, r7
 8000c04:	fb08 c116 	mls	r1, r8, r6, ip
 8000c08:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c0c:	fb06 f10e 	mul.w	r1, r6, lr
 8000c10:	4299      	cmp	r1, r3
 8000c12:	d909      	bls.n	8000c28 <__udivmoddi4+0x60>
 8000c14:	18fb      	adds	r3, r7, r3
 8000c16:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c1a:	f080 8119 	bcs.w	8000e50 <__udivmoddi4+0x288>
 8000c1e:	4299      	cmp	r1, r3
 8000c20:	f240 8116 	bls.w	8000e50 <__udivmoddi4+0x288>
 8000c24:	3e02      	subs	r6, #2
 8000c26:	443b      	add	r3, r7
 8000c28:	1a5b      	subs	r3, r3, r1
 8000c2a:	b2a4      	uxth	r4, r4
 8000c2c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c30:	fb08 3310 	mls	r3, r8, r0, r3
 8000c34:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c38:	fb00 fe0e 	mul.w	lr, r0, lr
 8000c3c:	45a6      	cmp	lr, r4
 8000c3e:	d909      	bls.n	8000c54 <__udivmoddi4+0x8c>
 8000c40:	193c      	adds	r4, r7, r4
 8000c42:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c46:	f080 8105 	bcs.w	8000e54 <__udivmoddi4+0x28c>
 8000c4a:	45a6      	cmp	lr, r4
 8000c4c:	f240 8102 	bls.w	8000e54 <__udivmoddi4+0x28c>
 8000c50:	3802      	subs	r0, #2
 8000c52:	443c      	add	r4, r7
 8000c54:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c58:	eba4 040e 	sub.w	r4, r4, lr
 8000c5c:	2600      	movs	r6, #0
 8000c5e:	b11d      	cbz	r5, 8000c68 <__udivmoddi4+0xa0>
 8000c60:	40d4      	lsrs	r4, r2
 8000c62:	2300      	movs	r3, #0
 8000c64:	e9c5 4300 	strd	r4, r3, [r5]
 8000c68:	4631      	mov	r1, r6
 8000c6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c6e:	b902      	cbnz	r2, 8000c72 <__udivmoddi4+0xaa>
 8000c70:	deff      	udf	#255	; 0xff
 8000c72:	fab2 f282 	clz	r2, r2
 8000c76:	2a00      	cmp	r2, #0
 8000c78:	d150      	bne.n	8000d1c <__udivmoddi4+0x154>
 8000c7a:	1bcb      	subs	r3, r1, r7
 8000c7c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000c80:	fa1f f887 	uxth.w	r8, r7
 8000c84:	2601      	movs	r6, #1
 8000c86:	fbb3 fcfe 	udiv	ip, r3, lr
 8000c8a:	0c21      	lsrs	r1, r4, #16
 8000c8c:	fb0e 331c 	mls	r3, lr, ip, r3
 8000c90:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000c94:	fb08 f30c 	mul.w	r3, r8, ip
 8000c98:	428b      	cmp	r3, r1
 8000c9a:	d907      	bls.n	8000cac <__udivmoddi4+0xe4>
 8000c9c:	1879      	adds	r1, r7, r1
 8000c9e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000ca2:	d202      	bcs.n	8000caa <__udivmoddi4+0xe2>
 8000ca4:	428b      	cmp	r3, r1
 8000ca6:	f200 80e9 	bhi.w	8000e7c <__udivmoddi4+0x2b4>
 8000caa:	4684      	mov	ip, r0
 8000cac:	1ac9      	subs	r1, r1, r3
 8000cae:	b2a3      	uxth	r3, r4
 8000cb0:	fbb1 f0fe 	udiv	r0, r1, lr
 8000cb4:	fb0e 1110 	mls	r1, lr, r0, r1
 8000cb8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000cbc:	fb08 f800 	mul.w	r8, r8, r0
 8000cc0:	45a0      	cmp	r8, r4
 8000cc2:	d907      	bls.n	8000cd4 <__udivmoddi4+0x10c>
 8000cc4:	193c      	adds	r4, r7, r4
 8000cc6:	f100 33ff 	add.w	r3, r0, #4294967295
 8000cca:	d202      	bcs.n	8000cd2 <__udivmoddi4+0x10a>
 8000ccc:	45a0      	cmp	r8, r4
 8000cce:	f200 80d9 	bhi.w	8000e84 <__udivmoddi4+0x2bc>
 8000cd2:	4618      	mov	r0, r3
 8000cd4:	eba4 0408 	sub.w	r4, r4, r8
 8000cd8:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000cdc:	e7bf      	b.n	8000c5e <__udivmoddi4+0x96>
 8000cde:	428b      	cmp	r3, r1
 8000ce0:	d909      	bls.n	8000cf6 <__udivmoddi4+0x12e>
 8000ce2:	2d00      	cmp	r5, #0
 8000ce4:	f000 80b1 	beq.w	8000e4a <__udivmoddi4+0x282>
 8000ce8:	2600      	movs	r6, #0
 8000cea:	e9c5 0100 	strd	r0, r1, [r5]
 8000cee:	4630      	mov	r0, r6
 8000cf0:	4631      	mov	r1, r6
 8000cf2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cf6:	fab3 f683 	clz	r6, r3
 8000cfa:	2e00      	cmp	r6, #0
 8000cfc:	d14a      	bne.n	8000d94 <__udivmoddi4+0x1cc>
 8000cfe:	428b      	cmp	r3, r1
 8000d00:	d302      	bcc.n	8000d08 <__udivmoddi4+0x140>
 8000d02:	4282      	cmp	r2, r0
 8000d04:	f200 80b8 	bhi.w	8000e78 <__udivmoddi4+0x2b0>
 8000d08:	1a84      	subs	r4, r0, r2
 8000d0a:	eb61 0103 	sbc.w	r1, r1, r3
 8000d0e:	2001      	movs	r0, #1
 8000d10:	468c      	mov	ip, r1
 8000d12:	2d00      	cmp	r5, #0
 8000d14:	d0a8      	beq.n	8000c68 <__udivmoddi4+0xa0>
 8000d16:	e9c5 4c00 	strd	r4, ip, [r5]
 8000d1a:	e7a5      	b.n	8000c68 <__udivmoddi4+0xa0>
 8000d1c:	f1c2 0320 	rsb	r3, r2, #32
 8000d20:	fa20 f603 	lsr.w	r6, r0, r3
 8000d24:	4097      	lsls	r7, r2
 8000d26:	fa01 f002 	lsl.w	r0, r1, r2
 8000d2a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d2e:	40d9      	lsrs	r1, r3
 8000d30:	4330      	orrs	r0, r6
 8000d32:	0c03      	lsrs	r3, r0, #16
 8000d34:	fbb1 f6fe 	udiv	r6, r1, lr
 8000d38:	fa1f f887 	uxth.w	r8, r7
 8000d3c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000d40:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d44:	fb06 f108 	mul.w	r1, r6, r8
 8000d48:	4299      	cmp	r1, r3
 8000d4a:	fa04 f402 	lsl.w	r4, r4, r2
 8000d4e:	d909      	bls.n	8000d64 <__udivmoddi4+0x19c>
 8000d50:	18fb      	adds	r3, r7, r3
 8000d52:	f106 3cff 	add.w	ip, r6, #4294967295
 8000d56:	f080 808d 	bcs.w	8000e74 <__udivmoddi4+0x2ac>
 8000d5a:	4299      	cmp	r1, r3
 8000d5c:	f240 808a 	bls.w	8000e74 <__udivmoddi4+0x2ac>
 8000d60:	3e02      	subs	r6, #2
 8000d62:	443b      	add	r3, r7
 8000d64:	1a5b      	subs	r3, r3, r1
 8000d66:	b281      	uxth	r1, r0
 8000d68:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d6c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d70:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d74:	fb00 f308 	mul.w	r3, r0, r8
 8000d78:	428b      	cmp	r3, r1
 8000d7a:	d907      	bls.n	8000d8c <__udivmoddi4+0x1c4>
 8000d7c:	1879      	adds	r1, r7, r1
 8000d7e:	f100 3cff 	add.w	ip, r0, #4294967295
 8000d82:	d273      	bcs.n	8000e6c <__udivmoddi4+0x2a4>
 8000d84:	428b      	cmp	r3, r1
 8000d86:	d971      	bls.n	8000e6c <__udivmoddi4+0x2a4>
 8000d88:	3802      	subs	r0, #2
 8000d8a:	4439      	add	r1, r7
 8000d8c:	1acb      	subs	r3, r1, r3
 8000d8e:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000d92:	e778      	b.n	8000c86 <__udivmoddi4+0xbe>
 8000d94:	f1c6 0c20 	rsb	ip, r6, #32
 8000d98:	fa03 f406 	lsl.w	r4, r3, r6
 8000d9c:	fa22 f30c 	lsr.w	r3, r2, ip
 8000da0:	431c      	orrs	r4, r3
 8000da2:	fa20 f70c 	lsr.w	r7, r0, ip
 8000da6:	fa01 f306 	lsl.w	r3, r1, r6
 8000daa:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000dae:	fa21 f10c 	lsr.w	r1, r1, ip
 8000db2:	431f      	orrs	r7, r3
 8000db4:	0c3b      	lsrs	r3, r7, #16
 8000db6:	fbb1 f9fe 	udiv	r9, r1, lr
 8000dba:	fa1f f884 	uxth.w	r8, r4
 8000dbe:	fb0e 1119 	mls	r1, lr, r9, r1
 8000dc2:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000dc6:	fb09 fa08 	mul.w	sl, r9, r8
 8000dca:	458a      	cmp	sl, r1
 8000dcc:	fa02 f206 	lsl.w	r2, r2, r6
 8000dd0:	fa00 f306 	lsl.w	r3, r0, r6
 8000dd4:	d908      	bls.n	8000de8 <__udivmoddi4+0x220>
 8000dd6:	1861      	adds	r1, r4, r1
 8000dd8:	f109 30ff 	add.w	r0, r9, #4294967295
 8000ddc:	d248      	bcs.n	8000e70 <__udivmoddi4+0x2a8>
 8000dde:	458a      	cmp	sl, r1
 8000de0:	d946      	bls.n	8000e70 <__udivmoddi4+0x2a8>
 8000de2:	f1a9 0902 	sub.w	r9, r9, #2
 8000de6:	4421      	add	r1, r4
 8000de8:	eba1 010a 	sub.w	r1, r1, sl
 8000dec:	b2bf      	uxth	r7, r7
 8000dee:	fbb1 f0fe 	udiv	r0, r1, lr
 8000df2:	fb0e 1110 	mls	r1, lr, r0, r1
 8000df6:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000dfa:	fb00 f808 	mul.w	r8, r0, r8
 8000dfe:	45b8      	cmp	r8, r7
 8000e00:	d907      	bls.n	8000e12 <__udivmoddi4+0x24a>
 8000e02:	19e7      	adds	r7, r4, r7
 8000e04:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e08:	d22e      	bcs.n	8000e68 <__udivmoddi4+0x2a0>
 8000e0a:	45b8      	cmp	r8, r7
 8000e0c:	d92c      	bls.n	8000e68 <__udivmoddi4+0x2a0>
 8000e0e:	3802      	subs	r0, #2
 8000e10:	4427      	add	r7, r4
 8000e12:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e16:	eba7 0708 	sub.w	r7, r7, r8
 8000e1a:	fba0 8902 	umull	r8, r9, r0, r2
 8000e1e:	454f      	cmp	r7, r9
 8000e20:	46c6      	mov	lr, r8
 8000e22:	4649      	mov	r1, r9
 8000e24:	d31a      	bcc.n	8000e5c <__udivmoddi4+0x294>
 8000e26:	d017      	beq.n	8000e58 <__udivmoddi4+0x290>
 8000e28:	b15d      	cbz	r5, 8000e42 <__udivmoddi4+0x27a>
 8000e2a:	ebb3 020e 	subs.w	r2, r3, lr
 8000e2e:	eb67 0701 	sbc.w	r7, r7, r1
 8000e32:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000e36:	40f2      	lsrs	r2, r6
 8000e38:	ea4c 0202 	orr.w	r2, ip, r2
 8000e3c:	40f7      	lsrs	r7, r6
 8000e3e:	e9c5 2700 	strd	r2, r7, [r5]
 8000e42:	2600      	movs	r6, #0
 8000e44:	4631      	mov	r1, r6
 8000e46:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e4a:	462e      	mov	r6, r5
 8000e4c:	4628      	mov	r0, r5
 8000e4e:	e70b      	b.n	8000c68 <__udivmoddi4+0xa0>
 8000e50:	4606      	mov	r6, r0
 8000e52:	e6e9      	b.n	8000c28 <__udivmoddi4+0x60>
 8000e54:	4618      	mov	r0, r3
 8000e56:	e6fd      	b.n	8000c54 <__udivmoddi4+0x8c>
 8000e58:	4543      	cmp	r3, r8
 8000e5a:	d2e5      	bcs.n	8000e28 <__udivmoddi4+0x260>
 8000e5c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000e60:	eb69 0104 	sbc.w	r1, r9, r4
 8000e64:	3801      	subs	r0, #1
 8000e66:	e7df      	b.n	8000e28 <__udivmoddi4+0x260>
 8000e68:	4608      	mov	r0, r1
 8000e6a:	e7d2      	b.n	8000e12 <__udivmoddi4+0x24a>
 8000e6c:	4660      	mov	r0, ip
 8000e6e:	e78d      	b.n	8000d8c <__udivmoddi4+0x1c4>
 8000e70:	4681      	mov	r9, r0
 8000e72:	e7b9      	b.n	8000de8 <__udivmoddi4+0x220>
 8000e74:	4666      	mov	r6, ip
 8000e76:	e775      	b.n	8000d64 <__udivmoddi4+0x19c>
 8000e78:	4630      	mov	r0, r6
 8000e7a:	e74a      	b.n	8000d12 <__udivmoddi4+0x14a>
 8000e7c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000e80:	4439      	add	r1, r7
 8000e82:	e713      	b.n	8000cac <__udivmoddi4+0xe4>
 8000e84:	3802      	subs	r0, #2
 8000e86:	443c      	add	r4, r7
 8000e88:	e724      	b.n	8000cd4 <__udivmoddi4+0x10c>
 8000e8a:	bf00      	nop

08000e8c <__aeabi_idiv0>:
 8000e8c:	4770      	bx	lr
 8000e8e:	bf00      	nop

08000e90 <get_INS_angle_point>:
  * @brief          get the euler angle, 0:yaw, 1:pitch, 2:roll, unit: rad
  * @param[in]      none
  * @retval         the pointer of INS_angle
  */
const float32_t get_INS_angle_point(void)
{
 8000e90:	b480      	push	{r7}
 8000e92:	af00      	add	r7, sp, #0
//    return INS_angle;
	return INS_angle[0];
 8000e94:	4b04      	ldr	r3, [pc, #16]	; (8000ea8 <get_INS_angle_point+0x18>)
 8000e96:	681b      	ldr	r3, [r3, #0]
 8000e98:	ee07 3a90 	vmov	s15, r3
}
 8000e9c:	eeb0 0a67 	vmov.f32	s0, s15
 8000ea0:	46bd      	mov	sp, r7
 8000ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea6:	4770      	bx	lr
 8000ea8:	20000094 	.word	0x20000094

08000eac <chassis_task>:
  *					->send all current command through CAN
  * @param[in]      pvParameters: null
  * @retval         none
  */
void chassis_task(void *pvParameters)
{
 8000eac:	b580      	push	{r7, lr}
 8000eae:	b08a      	sub	sp, #40	; 0x28
 8000eb0:	af00      	add	r7, sp, #0
 8000eb2:	6078      	str	r0, [r7, #4]
    //wait for a period initially
    vTaskDelay(CHASSIS_TASK_INIT_TIME);
 8000eb4:	f240 1065 	movw	r0, #357	; 0x165
 8000eb8:	f00a f92c 	bl	800b114 <vTaskDelay>

    //chassis initialization
    chassis_init(&chassis_move);
 8000ebc:	480a      	ldr	r0, [pc, #40]	; (8000ee8 <chassis_task+0x3c>)
 8000ebe:	f000 f817 	bl	8000ef0 <chassis_init>
//
//        //when mode changes, some data may needs changing
//        chassis_mode_change_control_transit(&chassis_move);

        //chassis data update
        chassis_feedback_update(&chassis_move);
 8000ec2:	4809      	ldr	r0, [pc, #36]	; (8000ee8 <chassis_task+0x3c>)
 8000ec4:	f000 f82b 	bl	8000f1e <chassis_feedback_update>

        //set chassis control set-point
        chassis_set_control(&chassis_move);
 8000ec8:	4807      	ldr	r0, [pc, #28]	; (8000ee8 <chassis_task+0x3c>)
 8000eca:	f000 f90d 	bl	80010e8 <chassis_set_control>
//            	//send control current of MB    angel
//            	CAN_cmd_chassis_MB(chassis_move.motor_chassis[4].give_current, chassis_move.motor_chassis[5].give_current, \
//            			chassis_move.motor_chassis[6].give_current, chassis_move.motor_chassis[7].give_current);

        //OS delay
        vTaskDelay(CHASSIS_CONTROL_TIME_MS);
 8000ece:	2002      	movs	r0, #2
 8000ed0:	f00a f920 	bl	800b114 <vTaskDelay>

#if INCLUDE_uxTaskGetStackHighWaterMark
        chassis_high_water = uxTaskGetStackHighWaterMark(NULL);
 8000ed4:	2000      	movs	r0, #0
 8000ed6:	f00a fd65 	bl	800b9a4 <uxTaskGetStackHighWaterMark>
 8000eda:	4603      	mov	r3, r0
 8000edc:	4a03      	ldr	r2, [pc, #12]	; (8000eec <chassis_task+0x40>)
 8000ede:	6013      	str	r3, [r2, #0]
//            }//end of "else"
//
//        }//end of detect-pending "if"

        //OS delay
        vTaskDelay(CHASSIS_CONTROL_TIME_MS);
 8000ee0:	2002      	movs	r0, #2
 8000ee2:	f00a f917 	bl	800b114 <vTaskDelay>
    {
 8000ee6:	e7ec      	b.n	8000ec2 <chassis_task+0x16>
 8000ee8:	20004a20 	.word	0x20004a20
 8000eec:	20004a1c 	.word	0x20004a1c

08000ef0 <chassis_init>:
  *                 ->maximum speed for chassis and each motor initialization
  * @param[out]     chassis_move_init: "chassis_move" pointer
  * @retval         none
  */
static void chassis_init(chassis_move_t *chassis_move_init)
{
 8000ef0:	b580      	push	{r7, lr}
 8000ef2:	b082      	sub	sp, #8
 8000ef4:	af00      	add	r7, sp, #0
 8000ef6:	6078      	str	r0, [r7, #4]
    if (chassis_move_init == NULL)
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	2b00      	cmp	r3, #0
 8000efc:	d00b      	beq.n	8000f16 <chassis_init+0x26>
    {
        return;
    }

    //get remote control data pointer
    chassis_move_init->chassis_RC = get_remote_control_point();
 8000efe:	f000 fb1f 	bl	8001540 <get_remote_control_point>
 8000f02:	4602      	mov	r2, r0
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	601a      	str	r2, [r3, #0]
    
    // initialize of chassis mode (for test only, other modes would be added later)
    chassis_move_init->chassis_mode = CHASSIS_VECTOR_FOLLOW_GIMBAL_YAW;
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	2200      	movs	r2, #0
 8000f0c:	711a      	strb	r2, [r3, #4]
    
    //update data
    chassis_feedback_update(chassis_move_init);
 8000f0e:	6878      	ldr	r0, [r7, #4]
 8000f10:	f000 f805 	bl	8000f1e <chassis_feedback_update>
 8000f14:	e000      	b.n	8000f18 <chassis_init+0x28>
        return;
 8000f16:	bf00      	nop

}
 8000f18:	3708      	adds	r7, #8
 8000f1a:	46bd      	mov	sp, r7
 8000f1c:	bd80      	pop	{r7, pc}

08000f1e <chassis_feedback_update>:
  *                 such as rc data, euler angle, self-rotation speed, motor speed and robot speed
  * @param[out]     chassis_move_update: "chassis_move" pointer
  * @retval         none
  */
static void chassis_feedback_update(chassis_move_t *chassis_move_update)
{
 8000f1e:	b580      	push	{r7, lr}
 8000f20:	b082      	sub	sp, #8
 8000f22:	af00      	add	r7, sp, #0
 8000f24:	6078      	str	r0, [r7, #4]
    if (chassis_move_update == NULL)
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	2b00      	cmp	r3, #0
 8000f2a:	d014      	beq.n	8000f56 <chassis_feedback_update+0x38>
    {
        return;
    }

    chassis_rc_to_control_vector(chassis_move_update);
 8000f2c:	6878      	ldr	r0, [r7, #4]
 8000f2e:	f000 f817 	bl	8000f60 <chassis_rc_to_control_vector>

    //update the values return from remote controller
    chassis_move_update->chassis_RC = get_remote_control_point();
 8000f32:	f000 fb05 	bl	8001540 <get_remote_control_point>
 8000f36:	4602      	mov	r2, r0
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	601a      	str	r2, [r3, #0]

    //update the chassis relative angle
    chassis_move_update->chassis_relative_angle = get_INS_angle_point();
 8000f3c:	f7ff ffa8 	bl	8000e90 <get_INS_angle_point>
 8000f40:	eef0 7a40 	vmov.f32	s15, s0
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	edc3 7a22 	vstr	s15, [r3, #136]	; 0x88

    //update the gimbal relative angle (give the value of 0, for test only)
    chassis_move_update->relative_angle_from_gimbal = 0;
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	f04f 0200 	mov.w	r2, #0
 8000f50:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
 8000f54:	e000      	b.n	8000f58 <chassis_feedback_update+0x3a>
        return;
 8000f56:	bf00      	nop

}
 8000f58:	3708      	adds	r7, #8
 8000f5a:	46bd      	mov	sp, r7
 8000f5c:	bd80      	pop	{r7, pc}
	...

08000f60 <chassis_rc_to_control_vector>:
  * @param[out]     vy_set: horizontal speed set-point
  * @param[out]     chassis_move_rc_to_vector: "chassis_move" pointer
  * @retval         none
  */
void chassis_rc_to_control_vector(chassis_move_t *chassis_move_rc_to_vector)
{
 8000f60:	b480      	push	{r7}
 8000f62:	b085      	sub	sp, #20
 8000f64:	af00      	add	r7, sp, #0
 8000f66:	6078      	str	r0, [r7, #4]
    if (chassis_move_rc_to_vector == NULL)
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	2b00      	cmp	r3, #0
 8000f6c:	f000 80af 	beq.w	80010ce <chassis_rc_to_control_vector+0x16e>
    int16_t y_channel;			//original data return from remote controller's channel 0
    int16_t wz_channel;			//original data return from remote controller's channel 4

    //update the values get from remote controller
    //pay attention to the sign of "y" here
    x_channel = chassis_move_rc_to_vector->chassis_RC->rc.ch[CHASSIS_X_CHANNEL];
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	681b      	ldr	r3, [r3, #0]
 8000f74:	789a      	ldrb	r2, [r3, #2]
 8000f76:	78db      	ldrb	r3, [r3, #3]
 8000f78:	021b      	lsls	r3, r3, #8
 8000f7a:	4313      	orrs	r3, r2
 8000f7c:	041b      	lsls	r3, r3, #16
 8000f7e:	141b      	asrs	r3, r3, #16
 8000f80:	81fb      	strh	r3, [r7, #14]
    y_channel = -chassis_move_rc_to_vector->chassis_RC->rc.ch[CHASSIS_Y_CHANNEL];
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	681b      	ldr	r3, [r3, #0]
 8000f86:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000f8a:	b21b      	sxth	r3, r3
 8000f8c:	b29b      	uxth	r3, r3
 8000f8e:	425b      	negs	r3, r3
 8000f90:	b29b      	uxth	r3, r3
 8000f92:	81bb      	strh	r3, [r7, #12]
    wz_channel = chassis_move_rc_to_vector->chassis_RC->rc.ch[CHASSIS_WZ_CHANNEL];
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	681b      	ldr	r3, [r3, #0]
 8000f98:	7a1a      	ldrb	r2, [r3, #8]
 8000f9a:	7a5b      	ldrb	r3, [r3, #9]
 8000f9c:	021b      	lsls	r3, r3, #8
 8000f9e:	4313      	orrs	r3, r2
 8000fa0:	041b      	lsls	r3, r3, #16
 8000fa2:	141b      	asrs	r3, r3, #16
 8000fa4:	817b      	strh	r3, [r7, #10]

    chassis_move_rc_to_vector->x_set = x_channel * CHASSIS_X_RC_SEN;
 8000fa6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000faa:	ee07 3a90 	vmov	s15, r3
 8000fae:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000fb2:	ed9f 7a4a 	vldr	s14, [pc, #296]	; 80010dc <chassis_rc_to_control_vector+0x17c>
 8000fb6:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	edc3 7a25 	vstr	s15, [r3, #148]	; 0x94
    chassis_move_rc_to_vector->y_set = y_channel * CHASSIS_Y_RC_SEN;
 8000fc0:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8000fc4:	ee07 3a90 	vmov	s15, r3
 8000fc8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000fcc:	ed9f 7a43 	vldr	s14, [pc, #268]	; 80010dc <chassis_rc_to_control_vector+0x17c>
 8000fd0:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	edc3 7a26 	vstr	s15, [r3, #152]	; 0x98
    chassis_move_rc_to_vector->wz_set = wz_channel * CHASSIS_WZ_RC_SEN;
 8000fda:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8000fde:	ee07 3a90 	vmov	s15, r3
 8000fe2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000fe6:	ed9f 7a3e 	vldr	s14, [pc, #248]	; 80010e0 <chassis_rc_to_control_vector+0x180>
 8000fea:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	edc3 7a27 	vstr	s15, [r3, #156]	; 0x9c

    chassis_move_rc_to_vector->x_channel_origin = x_channel;
 8000ff4:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000ff8:	ee07 3a90 	vmov	s15, r3
 8000ffc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	edc3 7a28 	vstr	s15, [r3, #160]	; 0xa0
    chassis_move_rc_to_vector->y_channel_origin = y_channel;
 8001006:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800100a:	ee07 3a90 	vmov	s15, r3
 800100e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	edc3 7a29 	vstr	s15, [r3, #164]	; 0xa4
    chassis_move_rc_to_vector->wz_channel_origin = wz_channel;
 8001018:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800101c:	ee07 3a90 	vmov	s15, r3
 8001020:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	edc3 7a2a 	vstr	s15, [r3, #168]	; 0xa8

    //dead zone limit, because some remote control need be calibrated
    //the value of joy stick is not zero in middle place
    rc_deadband_limit(chassis_move_rc_to_vector->chassis_RC->rc.ch[CHASSIS_X_CHANNEL], x_channel, CHASSIS_RC_DEADLINE);
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	681b      	ldr	r3, [r3, #0]
 800102e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001032:	b21b      	sxth	r3, r3
 8001034:	2b0a      	cmp	r3, #10
 8001036:	dc07      	bgt.n	8001048 <chassis_rc_to_control_vector+0xe8>
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	681b      	ldr	r3, [r3, #0]
 800103c:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001040:	b21b      	sxth	r3, r3
 8001042:	f113 0f0a 	cmn.w	r3, #10
 8001046:	da09      	bge.n	800105c <chassis_rc_to_control_vector+0xfc>
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	681b      	ldr	r3, [r3, #0]
 800104c:	789a      	ldrb	r2, [r3, #2]
 800104e:	78db      	ldrb	r3, [r3, #3]
 8001050:	021b      	lsls	r3, r3, #8
 8001052:	4313      	orrs	r3, r2
 8001054:	041b      	lsls	r3, r3, #16
 8001056:	141b      	asrs	r3, r3, #16
 8001058:	81fb      	strh	r3, [r7, #14]
 800105a:	e001      	b.n	8001060 <chassis_rc_to_control_vector+0x100>
 800105c:	2300      	movs	r3, #0
 800105e:	81fb      	strh	r3, [r7, #14]
    rc_deadband_limit(-chassis_move_rc_to_vector->chassis_RC->rc.ch[CHASSIS_Y_CHANNEL], y_channel, CHASSIS_RC_DEADLINE);
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	681b      	ldr	r3, [r3, #0]
 8001064:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001068:	b21b      	sxth	r3, r3
 800106a:	f113 0f0a 	cmn.w	r3, #10
 800106e:	db06      	blt.n	800107e <chassis_rc_to_control_vector+0x11e>
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	681b      	ldr	r3, [r3, #0]
 8001074:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001078:	b21b      	sxth	r3, r3
 800107a:	2b0a      	cmp	r3, #10
 800107c:	dd09      	ble.n	8001092 <chassis_rc_to_control_vector+0x132>
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	681b      	ldr	r3, [r3, #0]
 8001082:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001086:	b21b      	sxth	r3, r3
 8001088:	b29b      	uxth	r3, r3
 800108a:	425b      	negs	r3, r3
 800108c:	b29b      	uxth	r3, r3
 800108e:	81bb      	strh	r3, [r7, #12]
 8001090:	e001      	b.n	8001096 <chassis_rc_to_control_vector+0x136>
 8001092:	2300      	movs	r3, #0
 8001094:	81bb      	strh	r3, [r7, #12]
    rc_deadband_limit(chassis_move_rc_to_vector->chassis_RC->rc.ch[CHASSIS_WZ_CHANNEL], wz_channel, CHASSIS_RC_DEADLINE);
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	681b      	ldr	r3, [r3, #0]
 800109a:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800109e:	b21b      	sxth	r3, r3
 80010a0:	2b0a      	cmp	r3, #10
 80010a2:	dc07      	bgt.n	80010b4 <chassis_rc_to_control_vector+0x154>
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	681b      	ldr	r3, [r3, #0]
 80010a8:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80010ac:	b21b      	sxth	r3, r3
 80010ae:	f113 0f0a 	cmn.w	r3, #10
 80010b2:	da09      	bge.n	80010c8 <chassis_rc_to_control_vector+0x168>
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	681b      	ldr	r3, [r3, #0]
 80010b8:	7a1a      	ldrb	r2, [r3, #8]
 80010ba:	7a5b      	ldrb	r3, [r3, #9]
 80010bc:	021b      	lsls	r3, r3, #8
 80010be:	4313      	orrs	r3, r2
 80010c0:	041b      	lsls	r3, r3, #16
 80010c2:	141b      	asrs	r3, r3, #16
 80010c4:	817b      	strh	r3, [r7, #10]
 80010c6:	e003      	b.n	80010d0 <chassis_rc_to_control_vector+0x170>
 80010c8:	2300      	movs	r3, #0
 80010ca:	817b      	strh	r3, [r7, #10]
 80010cc:	e000      	b.n	80010d0 <chassis_rc_to_control_vector+0x170>
        return;
 80010ce:	bf00      	nop

}
 80010d0:	3714      	adds	r7, #20
 80010d2:	46bd      	mov	sp, r7
 80010d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d8:	4770      	bx	lr
 80010da:	bf00      	nop
 80010dc:	3c03126f 	.word	0x3c03126f
 80010e0:	3ba3d70a 	.word	0x3ba3d70a
 80010e4:	00000000 	.word	0x00000000

080010e8 <chassis_set_control>:

/**
 * @brief	chassis_move_mode selection
 */
static void chassis_set_control(chassis_move_t *chassis_move_control)
{
 80010e8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80010ec:	b08c      	sub	sp, #48	; 0x30
 80010ee:	af00      	add	r7, sp, #0
 80010f0:	6078      	str	r0, [r7, #4]
    if (chassis_move_control == NULL)
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	2b00      	cmp	r3, #0
 80010f6:	f000 8210 	beq.w	800151a <chassis_set_control+0x432>
    {
        return;
    }

    chassis_feedback_update(chassis_move_control);
 80010fa:	6878      	ldr	r0, [r7, #4]
 80010fc:	f7ff ff0f 	bl	8000f1e <chassis_feedback_update>
    chassis_rc_to_control_vector(chassis_move_control);
 8001100:	6878      	ldr	r0, [r7, #4]
 8001102:	f7ff ff2d 	bl	8000f60 <chassis_rc_to_control_vector>

    if (chassis_move_control->chassis_mode == CHASSIS_VECTOR_FOLLOW_GIMBAL_YAW)
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	791b      	ldrb	r3, [r3, #4]
 800110a:	2b00      	cmp	r3, #0
 800110c:	f040 8206 	bne.w	800151c <chassis_set_control+0x434>
    {
    	float32_t vxy_to_gimbal, gimbal_angle_to_chassis;
    	float32_t vx_to_wheel_system, vy_to_wheel_system;
    	float32_t relative_angle_set_to_get;

    	vxy_to_gimbal = sqrt(pow(chassis_move_control->x_set, 2) + pow(chassis_move_control->y_set, 2));
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001116:	4618      	mov	r0, r3
 8001118:	f7ff f9be 	bl	8000498 <__aeabi_f2d>
 800111c:	4602      	mov	r2, r0
 800111e:	460b      	mov	r3, r1
 8001120:	ed9f 1b91 	vldr	d1, [pc, #580]	; 8001368 <chassis_set_control+0x280>
 8001124:	ec43 2b10 	vmov	d0, r2, r3
 8001128:	f00c f840 	bl	800d1ac <pow>
 800112c:	ec55 4b10 	vmov	r4, r5, d0
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001136:	4618      	mov	r0, r3
 8001138:	f7ff f9ae 	bl	8000498 <__aeabi_f2d>
 800113c:	4602      	mov	r2, r0
 800113e:	460b      	mov	r3, r1
 8001140:	ed9f 1b89 	vldr	d1, [pc, #548]	; 8001368 <chassis_set_control+0x280>
 8001144:	ec43 2b10 	vmov	d0, r2, r3
 8001148:	f00c f830 	bl	800d1ac <pow>
 800114c:	ec53 2b10 	vmov	r2, r3, d0
 8001150:	4620      	mov	r0, r4
 8001152:	4629      	mov	r1, r5
 8001154:	f7ff f842 	bl	80001dc <__adddf3>
 8001158:	4602      	mov	r2, r0
 800115a:	460b      	mov	r3, r1
 800115c:	ec43 2b17 	vmov	d7, r2, r3
 8001160:	eeb0 0a47 	vmov.f32	s0, s14
 8001164:	eef0 0a67 	vmov.f32	s1, s15
 8001168:	f00c f8ce 	bl	800d308 <sqrt>
 800116c:	ec53 2b10 	vmov	r2, r3, d0
 8001170:	4610      	mov	r0, r2
 8001172:	4619      	mov	r1, r3
 8001174:	f7ff fcc0 	bl	8000af8 <__aeabi_d2f>
 8001178:	4603      	mov	r3, r0
 800117a:	62bb      	str	r3, [r7, #40]	; 0x28
    	gimbal_angle_to_chassis = chassis_move_control->relative_angle_from_gimbal - chassis_move_control->chassis_relative_angle;
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	ed93 7a23 	vldr	s14, [r3, #140]	; 0x8c
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	edd3 7a22 	vldr	s15, [r3, #136]	; 0x88
 8001188:	ee77 7a67 	vsub.f32	s15, s14, s15
 800118c:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24

    	float32_t vxy_to_gimbal_f32[4] =
    	{
    	  chassis_move_control->x_set, chassis_move_control->y_set, 0.0, 1.0
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
    	float32_t vxy_to_gimbal_f32[4] =
 8001196:	60bb      	str	r3, [r7, #8]
    	  chassis_move_control->x_set, chassis_move_control->y_set, 0.0, 1.0
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
    	float32_t vxy_to_gimbal_f32[4] =
 800119e:	60fb      	str	r3, [r7, #12]
 80011a0:	f04f 0300 	mov.w	r3, #0
 80011a4:	613b      	str	r3, [r7, #16]
 80011a6:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 80011aa:	617b      	str	r3, [r7, #20]
    	};

    	for (uint8_t i = 0; i < 4; i++)
 80011ac:	2300      	movs	r3, #0
 80011ae:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 80011b2:	e1ac      	b.n	800150e <chassis_set_control+0x426>
    	{
    		vx_to_wheel_system = vxy_to_gimbal * cos(chassis_move_control->vxy_relative_angle_to_gimbal - (gimbal_angle_to_chassis)) + chassis_move_control->wz_set * sin(WHEEL_POSITION[i]);
 80011b4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80011b6:	f7ff f96f 	bl	8000498 <__aeabi_f2d>
 80011ba:	4604      	mov	r4, r0
 80011bc:	460d      	mov	r5, r1
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	ed93 7a24 	vldr	s14, [r3, #144]	; 0x90
 80011c4:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80011c8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80011cc:	ee17 0a90 	vmov	r0, s15
 80011d0:	f7ff f962 	bl	8000498 <__aeabi_f2d>
 80011d4:	4602      	mov	r2, r0
 80011d6:	460b      	mov	r3, r1
 80011d8:	ec43 2b10 	vmov	d0, r2, r3
 80011dc:	f00b ff08 	bl	800cff0 <cos>
 80011e0:	ec53 2b10 	vmov	r2, r3, d0
 80011e4:	4620      	mov	r0, r4
 80011e6:	4629      	mov	r1, r5
 80011e8:	f7ff f9ae 	bl	8000548 <__aeabi_dmul>
 80011ec:	4602      	mov	r2, r0
 80011ee:	460b      	mov	r3, r1
 80011f0:	4690      	mov	r8, r2
 80011f2:	4699      	mov	r9, r3
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80011fa:	4618      	mov	r0, r3
 80011fc:	f7ff f94c 	bl	8000498 <__aeabi_f2d>
 8001200:	4604      	mov	r4, r0
 8001202:	460d      	mov	r5, r1
 8001204:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001208:	4a59      	ldr	r2, [pc, #356]	; (8001370 <chassis_set_control+0x288>)
 800120a:	009b      	lsls	r3, r3, #2
 800120c:	4413      	add	r3, r2
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	4618      	mov	r0, r3
 8001212:	f7ff f941 	bl	8000498 <__aeabi_f2d>
 8001216:	4602      	mov	r2, r0
 8001218:	460b      	mov	r3, r1
 800121a:	ec43 2b10 	vmov	d0, r2, r3
 800121e:	f00b ff37 	bl	800d090 <sin>
 8001222:	ec53 2b10 	vmov	r2, r3, d0
 8001226:	4620      	mov	r0, r4
 8001228:	4629      	mov	r1, r5
 800122a:	f7ff f98d 	bl	8000548 <__aeabi_dmul>
 800122e:	4602      	mov	r2, r0
 8001230:	460b      	mov	r3, r1
 8001232:	4640      	mov	r0, r8
 8001234:	4649      	mov	r1, r9
 8001236:	f7fe ffd1 	bl	80001dc <__adddf3>
 800123a:	4602      	mov	r2, r0
 800123c:	460b      	mov	r3, r1
 800123e:	4610      	mov	r0, r2
 8001240:	4619      	mov	r1, r3
 8001242:	f7ff fc59 	bl	8000af8 <__aeabi_d2f>
 8001246:	4603      	mov	r3, r0
 8001248:	623b      	str	r3, [r7, #32]
    		vy_to_wheel_system = vxy_to_gimbal * sin(chassis_move_control->vxy_relative_angle_to_gimbal - (gimbal_angle_to_chassis)) + chassis_move_control->wz_set * cos(WHEEL_POSITION[i]);
 800124a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800124c:	f7ff f924 	bl	8000498 <__aeabi_f2d>
 8001250:	4604      	mov	r4, r0
 8001252:	460d      	mov	r5, r1
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	ed93 7a24 	vldr	s14, [r3, #144]	; 0x90
 800125a:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800125e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001262:	ee17 0a90 	vmov	r0, s15
 8001266:	f7ff f917 	bl	8000498 <__aeabi_f2d>
 800126a:	4602      	mov	r2, r0
 800126c:	460b      	mov	r3, r1
 800126e:	ec43 2b10 	vmov	d0, r2, r3
 8001272:	f00b ff0d 	bl	800d090 <sin>
 8001276:	ec53 2b10 	vmov	r2, r3, d0
 800127a:	4620      	mov	r0, r4
 800127c:	4629      	mov	r1, r5
 800127e:	f7ff f963 	bl	8000548 <__aeabi_dmul>
 8001282:	4602      	mov	r2, r0
 8001284:	460b      	mov	r3, r1
 8001286:	4690      	mov	r8, r2
 8001288:	4699      	mov	r9, r3
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8001290:	4618      	mov	r0, r3
 8001292:	f7ff f901 	bl	8000498 <__aeabi_f2d>
 8001296:	4604      	mov	r4, r0
 8001298:	460d      	mov	r5, r1
 800129a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800129e:	4a34      	ldr	r2, [pc, #208]	; (8001370 <chassis_set_control+0x288>)
 80012a0:	009b      	lsls	r3, r3, #2
 80012a2:	4413      	add	r3, r2
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	4618      	mov	r0, r3
 80012a8:	f7ff f8f6 	bl	8000498 <__aeabi_f2d>
 80012ac:	4602      	mov	r2, r0
 80012ae:	460b      	mov	r3, r1
 80012b0:	ec43 2b10 	vmov	d0, r2, r3
 80012b4:	f00b fe9c 	bl	800cff0 <cos>
 80012b8:	ec53 2b10 	vmov	r2, r3, d0
 80012bc:	4620      	mov	r0, r4
 80012be:	4629      	mov	r1, r5
 80012c0:	f7ff f942 	bl	8000548 <__aeabi_dmul>
 80012c4:	4602      	mov	r2, r0
 80012c6:	460b      	mov	r3, r1
 80012c8:	4640      	mov	r0, r8
 80012ca:	4649      	mov	r1, r9
 80012cc:	f7fe ff86 	bl	80001dc <__adddf3>
 80012d0:	4602      	mov	r2, r0
 80012d2:	460b      	mov	r3, r1
 80012d4:	4610      	mov	r0, r2
 80012d6:	4619      	mov	r1, r3
 80012d8:	f7ff fc0e 	bl	8000af8 <__aeabi_d2f>
 80012dc:	4603      	mov	r3, r0
 80012de:	61fb      	str	r3, [r7, #28]

//    		chassis_move_control->motor_chassis[i].wheel_dir_flag = 0;
//    		chassis_move_control->motor_chassis[i].speed_set = sqrt(pow(vx_to_chassis, 2) + pow(vy_to_chassis, 2));
    		//for single wheel system test only
    		chassis_move_control->chassis_board[i].speed_set = vx_to_wheel_system;
 80012e0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80012e4:	687a      	ldr	r2, [r7, #4]
 80012e6:	015b      	lsls	r3, r3, #5
 80012e8:	4413      	add	r3, r2
 80012ea:	330c      	adds	r3, #12
 80012ec:	6a3a      	ldr	r2, [r7, #32]
 80012ee:	601a      	str	r2, [r3, #0]
    		chassis_move_control->chassis_board[i].motor_ecd_speed_set = vy_to_wheel_system;
 80012f0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80012f4:	687a      	ldr	r2, [r7, #4]
 80012f6:	015b      	lsls	r3, r3, #5
 80012f8:	4413      	add	r3, r2
 80012fa:	3318      	adds	r3, #24
 80012fc:	69fa      	ldr	r2, [r7, #28]
 80012fe:	601a      	str	r2, [r3, #0]

    		if (vy_to_wheel_system < 0) {
 8001300:	edd7 7a07 	vldr	s15, [r7, #28]
 8001304:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001308:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800130c:	d536      	bpl.n	800137c <chassis_set_control+0x294>
    			chassis_move_control->chassis_board[i].direction_wheel_angle_set = - acos(vx_to_wheel_system / chassis_move_control->chassis_board[i].speed_set);
 800130e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001312:	687a      	ldr	r2, [r7, #4]
 8001314:	015b      	lsls	r3, r3, #5
 8001316:	4413      	add	r3, r2
 8001318:	330c      	adds	r3, #12
 800131a:	edd3 7a00 	vldr	s15, [r3]
 800131e:	ed97 7a08 	vldr	s14, [r7, #32]
 8001322:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8001326:	ee16 0a90 	vmov	r0, s13
 800132a:	f7ff f8b5 	bl	8000498 <__aeabi_f2d>
 800132e:	4602      	mov	r2, r0
 8001330:	460b      	mov	r3, r1
 8001332:	ec43 2b10 	vmov	d0, r2, r3
 8001336:	f00b feff 	bl	800d138 <acos>
 800133a:	ec53 2b10 	vmov	r2, r3, d0
 800133e:	4610      	mov	r0, r2
 8001340:	4619      	mov	r1, r3
 8001342:	f7ff fbd9 	bl	8000af8 <__aeabi_d2f>
 8001346:	4602      	mov	r2, r0
 8001348:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800134c:	ee07 2a90 	vmov	s15, r2
 8001350:	eef1 7a67 	vneg.f32	s15, s15
 8001354:	687a      	ldr	r2, [r7, #4]
 8001356:	3301      	adds	r3, #1
 8001358:	015b      	lsls	r3, r3, #5
 800135a:	4413      	add	r3, r2
 800135c:	edc3 7a00 	vstr	s15, [r3]
 8001360:	e030      	b.n	80013c4 <chassis_set_control+0x2dc>
 8001362:	bf00      	nop
 8001364:	f3af 8000 	nop.w
 8001368:	00000000 	.word	0x00000000
 800136c:	40000000 	.word	0x40000000
 8001370:	0800f52c 	.word	0x0800f52c
 8001374:	3fc90fdb 	.word	0x3fc90fdb
 8001378:	3d4ccccd 	.word	0x3d4ccccd
    		}
    		else {
    			chassis_move_control->chassis_board[i].direction_wheel_angle_set = acos(vx_to_wheel_system / chassis_move_control->chassis_board[i].speed_set);
 800137c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001380:	687a      	ldr	r2, [r7, #4]
 8001382:	015b      	lsls	r3, r3, #5
 8001384:	4413      	add	r3, r2
 8001386:	330c      	adds	r3, #12
 8001388:	edd3 7a00 	vldr	s15, [r3]
 800138c:	ed97 7a08 	vldr	s14, [r7, #32]
 8001390:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8001394:	ee16 0a90 	vmov	r0, s13
 8001398:	f7ff f87e 	bl	8000498 <__aeabi_f2d>
 800139c:	4602      	mov	r2, r0
 800139e:	460b      	mov	r3, r1
 80013a0:	ec43 2b10 	vmov	d0, r2, r3
 80013a4:	f00b fec8 	bl	800d138 <acos>
 80013a8:	ec53 2b10 	vmov	r2, r3, d0
 80013ac:	f897 402f 	ldrb.w	r4, [r7, #47]	; 0x2f
 80013b0:	4610      	mov	r0, r2
 80013b2:	4619      	mov	r1, r3
 80013b4:	f7ff fba0 	bl	8000af8 <__aeabi_d2f>
 80013b8:	4601      	mov	r1, r0
 80013ba:	687a      	ldr	r2, [r7, #4]
 80013bc:	1c63      	adds	r3, r4, #1
 80013be:	015b      	lsls	r3, r3, #5
 80013c0:	4413      	add	r3, r2
 80013c2:	6019      	str	r1, [r3, #0]
    		}

    		relative_angle_set_to_get = fabs(chassis_move_control->chassis_board[i].direction_wheel_angle_set) - fabs(chassis_move_control->chassis_board[i].direction_wheel_angle);
 80013c4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80013c8:	687a      	ldr	r2, [r7, #4]
 80013ca:	3301      	adds	r3, #1
 80013cc:	015b      	lsls	r3, r3, #5
 80013ce:	4413      	add	r3, r2
 80013d0:	edd3 7a00 	vldr	s15, [r3]
 80013d4:	eeb0 7ae7 	vabs.f32	s14, s15
 80013d8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80013dc:	687a      	ldr	r2, [r7, #4]
 80013de:	015b      	lsls	r3, r3, #5
 80013e0:	4413      	add	r3, r2
 80013e2:	331c      	adds	r3, #28
 80013e4:	edd3 7a00 	vldr	s15, [r3]
 80013e8:	eef0 7ae7 	vabs.f32	s15, s15
 80013ec:	ee77 7a67 	vsub.f32	s15, s14, s15
 80013f0:	edc7 7a06 	vstr	s15, [r7, #24]

    		if (fabs(chassis_move_control->chassis_board[i].speed) > 2.5f && fabs(relative_angle_set_to_get) > HALF_PI)
 80013f4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80013f8:	687a      	ldr	r2, [r7, #4]
 80013fa:	015b      	lsls	r3, r3, #5
 80013fc:	4413      	add	r3, r2
 80013fe:	3308      	adds	r3, #8
 8001400:	edd3 7a00 	vldr	s15, [r3]
 8001404:	eef0 7ae7 	vabs.f32	s15, s15
 8001408:	eeb0 7a04 	vmov.f32	s14, #4	; 0x40200000  2.5
 800140c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001410:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001414:	dd0a      	ble.n	800142c <chassis_set_control+0x344>
 8001416:	edd7 7a06 	vldr	s15, [r7, #24]
 800141a:	eef0 7ae7 	vabs.f32	s15, s15
 800141e:	ed1f 7a2b 	vldr	s14, [pc, #-172]	; 8001374 <chassis_set_control+0x28c>
 8001422:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001426:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800142a:	dc6a      	bgt.n	8001502 <chassis_set_control+0x41a>
    		{
    			continue;
    		}

    		if (fabs(chassis_move_control->chassis_board[i].speed) <= 2.5f && fabs(relative_angle_set_to_get) > HALF_PI && chassis_move_control->chassis_board[i].wheel_dir_flag == 0)
 800142c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001430:	687a      	ldr	r2, [r7, #4]
 8001432:	015b      	lsls	r3, r3, #5
 8001434:	4413      	add	r3, r2
 8001436:	3308      	adds	r3, #8
 8001438:	edd3 7a00 	vldr	s15, [r3]
 800143c:	eef0 7ae7 	vabs.f32	s15, s15
 8001440:	eeb0 7a04 	vmov.f32	s14, #4	; 0x40200000  2.5
 8001444:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001448:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800144c:	d84f      	bhi.n	80014ee <chassis_set_control+0x406>
 800144e:	edd7 7a06 	vldr	s15, [r7, #24]
 8001452:	eef0 7ae7 	vabs.f32	s15, s15
 8001456:	ed1f 7a39 	vldr	s14, [pc, #-228]	; 8001374 <chassis_set_control+0x28c>
 800145a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800145e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001462:	dd44      	ble.n	80014ee <chassis_set_control+0x406>
 8001464:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001468:	687a      	ldr	r2, [r7, #4]
 800146a:	3301      	adds	r3, #1
 800146c:	015b      	lsls	r3, r3, #5
 800146e:	4413      	add	r3, r2
 8001470:	3304      	adds	r3, #4
 8001472:	781b      	ldrb	r3, [r3, #0]
 8001474:	2b00      	cmp	r3, #0
 8001476:	d13a      	bne.n	80014ee <chassis_set_control+0x406>
    		{
    			chassis_move_control->chassis_board[i].speed_set = 0;
 8001478:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800147c:	687a      	ldr	r2, [r7, #4]
 800147e:	015b      	lsls	r3, r3, #5
 8001480:	4413      	add	r3, r2
 8001482:	330c      	adds	r3, #12
 8001484:	f04f 0200 	mov.w	r2, #0
 8001488:	601a      	str	r2, [r3, #0]
    			chassis_move_control->chassis_board[i].direction_wheel_angle_set = - chassis_move_control->chassis_board[i].direction_wheel_angle_set;
 800148a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800148e:	687a      	ldr	r2, [r7, #4]
 8001490:	3301      	adds	r3, #1
 8001492:	015b      	lsls	r3, r3, #5
 8001494:	4413      	add	r3, r2
 8001496:	edd3 7a00 	vldr	s15, [r3]
 800149a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800149e:	eef1 7a67 	vneg.f32	s15, s15
 80014a2:	687a      	ldr	r2, [r7, #4]
 80014a4:	3301      	adds	r3, #1
 80014a6:	015b      	lsls	r3, r3, #5
 80014a8:	4413      	add	r3, r2
 80014aa:	edc3 7a00 	vstr	s15, [r3]

    			chassis_feedback_update(chassis_move_control);
 80014ae:	6878      	ldr	r0, [r7, #4]
 80014b0:	f7ff fd35 	bl	8000f1e <chassis_feedback_update>
    			if (fabs(relative_angle_set_to_get) < 0.05f) chassis_move_control->chassis_board[i].speed_set = - chassis_move_control->chassis_board[i].speed_set;
 80014b4:	edd7 7a06 	vldr	s15, [r7, #24]
 80014b8:	eef0 7ae7 	vabs.f32	s15, s15
 80014bc:	ed1f 7a52 	vldr	s14, [pc, #-328]	; 8001378 <chassis_set_control+0x290>
 80014c0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80014c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80014c8:	d511      	bpl.n	80014ee <chassis_set_control+0x406>
 80014ca:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80014ce:	687a      	ldr	r2, [r7, #4]
 80014d0:	015b      	lsls	r3, r3, #5
 80014d2:	4413      	add	r3, r2
 80014d4:	330c      	adds	r3, #12
 80014d6:	edd3 7a00 	vldr	s15, [r3]
 80014da:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80014de:	eef1 7a67 	vneg.f32	s15, s15
 80014e2:	687a      	ldr	r2, [r7, #4]
 80014e4:	015b      	lsls	r3, r3, #5
 80014e6:	4413      	add	r3, r2
 80014e8:	330c      	adds	r3, #12
 80014ea:	edc3 7a00 	vstr	s15, [r3]
    		}

    		chassis_move_control->chassis_board[i].wheel_dir_flag = 1;
 80014ee:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80014f2:	687a      	ldr	r2, [r7, #4]
 80014f4:	3301      	adds	r3, #1
 80014f6:	015b      	lsls	r3, r3, #5
 80014f8:	4413      	add	r3, r2
 80014fa:	3304      	adds	r3, #4
 80014fc:	2201      	movs	r2, #1
 80014fe:	701a      	strb	r2, [r3, #0]
 8001500:	e000      	b.n	8001504 <chassis_set_control+0x41c>
    			continue;
 8001502:	bf00      	nop
    	for (uint8_t i = 0; i < 4; i++)
 8001504:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001508:	3301      	adds	r3, #1
 800150a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800150e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001512:	2b03      	cmp	r3, #3
 8001514:	f67f ae4e 	bls.w	80011b4 <chassis_set_control+0xcc>
 8001518:	e000      	b.n	800151c <chassis_set_control+0x434>
        return;
 800151a:	bf00      	nop
    	}

    }//end of "CHASSIS_VECTOR_FOLLOW_GIMBAL_YAW"

}
 800151c:	3730      	adds	r7, #48	; 0x30
 800151e:	46bd      	mov	sp, r7
 8001520:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}

08001524 <remote_control_init>:
  * @brief          遥控器初始化
  * @param[in]      none
  * @retval         none
  */
void remote_control_init(void)
{
 8001524:	b580      	push	{r7, lr}
 8001526:	af00      	add	r7, sp, #0
    RC_Init(sbus_rx_buf[0], sbus_rx_buf[1], SBUS_RX_BUF_NUM);
 8001528:	2224      	movs	r2, #36	; 0x24
 800152a:	4903      	ldr	r1, [pc, #12]	; (8001538 <remote_control_init+0x14>)
 800152c:	4803      	ldr	r0, [pc, #12]	; (800153c <remote_control_init+0x18>)
 800152e:	f000 fa65 	bl	80019fc <RC_Init>
}
 8001532:	bf00      	nop
 8001534:	bd80      	pop	{r7, pc}
 8001536:	bf00      	nop
 8001538:	200000c4 	.word	0x200000c4
 800153c:	200000a0 	.word	0x200000a0

08001540 <get_remote_control_point>:
  * @brief          获取遥控器数据指针
  * @param[in]      none
  * @retval         遥控器数据指针
  */
const RC_ctrl_t *get_remote_control_point(void)
{
 8001540:	b480      	push	{r7}
 8001542:	af00      	add	r7, sp, #0
    return &rc_ctrl;
 8001544:	4b02      	ldr	r3, [pc, #8]	; (8001550 <get_remote_control_point+0x10>)
}
 8001546:	4618      	mov	r0, r3
 8001548:	46bd      	mov	sp, r7
 800154a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800154e:	4770      	bx	lr
 8001550:	20004acc 	.word	0x20004acc

08001554 <USART3_IRQHandler>:
    RC_restart(SBUS_RX_BUF_NUM);
}

//串口中断
void USART3_IRQHandler(void)
{
 8001554:	b580      	push	{r7, lr}
 8001556:	b082      	sub	sp, #8
 8001558:	af00      	add	r7, sp, #0
    if(huart3.Instance->SR & UART_FLAG_RXNE)//接收到数据
 800155a:	4b47      	ldr	r3, [pc, #284]	; (8001678 <USART3_IRQHandler+0x124>)
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	f003 0320 	and.w	r3, r3, #32
 8001564:	2b00      	cmp	r3, #0
 8001566:	d00b      	beq.n	8001580 <USART3_IRQHandler+0x2c>
    {
        __HAL_UART_CLEAR_PEFLAG(&huart3);
 8001568:	2300      	movs	r3, #0
 800156a:	607b      	str	r3, [r7, #4]
 800156c:	4b42      	ldr	r3, [pc, #264]	; (8001678 <USART3_IRQHandler+0x124>)
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	607b      	str	r3, [r7, #4]
 8001574:	4b40      	ldr	r3, [pc, #256]	; (8001678 <USART3_IRQHandler+0x124>)
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	685b      	ldr	r3, [r3, #4]
 800157a:	607b      	str	r3, [r7, #4]
 800157c:	687b      	ldr	r3, [r7, #4]
                sbus_to_usart1(sbus_rx_buf[1]);
            }
        }
    }

}
 800157e:	e076      	b.n	800166e <USART3_IRQHandler+0x11a>
    else if(USART3->SR & UART_FLAG_IDLE)
 8001580:	4b3e      	ldr	r3, [pc, #248]	; (800167c <USART3_IRQHandler+0x128>)
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	f003 0310 	and.w	r3, r3, #16
 8001588:	2b00      	cmp	r3, #0
 800158a:	d070      	beq.n	800166e <USART3_IRQHandler+0x11a>
        __HAL_UART_CLEAR_PEFLAG(&huart3);
 800158c:	2300      	movs	r3, #0
 800158e:	603b      	str	r3, [r7, #0]
 8001590:	4b39      	ldr	r3, [pc, #228]	; (8001678 <USART3_IRQHandler+0x124>)
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	603b      	str	r3, [r7, #0]
 8001598:	4b37      	ldr	r3, [pc, #220]	; (8001678 <USART3_IRQHandler+0x124>)
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	685b      	ldr	r3, [r3, #4]
 800159e:	603b      	str	r3, [r7, #0]
 80015a0:	683b      	ldr	r3, [r7, #0]
        if ((hdma_usart3_rx.Instance->CR & DMA_SxCR_CT) == RESET)
 80015a2:	4b37      	ldr	r3, [pc, #220]	; (8001680 <USART3_IRQHandler+0x12c>)
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	d130      	bne.n	8001612 <USART3_IRQHandler+0xbe>
            __HAL_DMA_DISABLE(&hdma_usart3_rx);
 80015b0:	4b33      	ldr	r3, [pc, #204]	; (8001680 <USART3_IRQHandler+0x12c>)
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	681a      	ldr	r2, [r3, #0]
 80015b6:	4b32      	ldr	r3, [pc, #200]	; (8001680 <USART3_IRQHandler+0x12c>)
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	f022 0201 	bic.w	r2, r2, #1
 80015be:	601a      	str	r2, [r3, #0]
            this_time_rx_len = SBUS_RX_BUF_NUM - hdma_usart3_rx.Instance->NDTR;
 80015c0:	4b2f      	ldr	r3, [pc, #188]	; (8001680 <USART3_IRQHandler+0x12c>)
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	685b      	ldr	r3, [r3, #4]
 80015c6:	b29b      	uxth	r3, r3
 80015c8:	f1c3 0324 	rsb	r3, r3, #36	; 0x24
 80015cc:	b29a      	uxth	r2, r3
 80015ce:	4b2d      	ldr	r3, [pc, #180]	; (8001684 <USART3_IRQHandler+0x130>)
 80015d0:	801a      	strh	r2, [r3, #0]
            hdma_usart3_rx.Instance->NDTR = SBUS_RX_BUF_NUM;
 80015d2:	4b2b      	ldr	r3, [pc, #172]	; (8001680 <USART3_IRQHandler+0x12c>)
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	2224      	movs	r2, #36	; 0x24
 80015d8:	605a      	str	r2, [r3, #4]
            hdma_usart3_rx.Instance->CR |= DMA_SxCR_CT;
 80015da:	4b29      	ldr	r3, [pc, #164]	; (8001680 <USART3_IRQHandler+0x12c>)
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	681a      	ldr	r2, [r3, #0]
 80015e0:	4b27      	ldr	r3, [pc, #156]	; (8001680 <USART3_IRQHandler+0x12c>)
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 80015e8:	601a      	str	r2, [r3, #0]
            __HAL_DMA_ENABLE(&hdma_usart3_rx);
 80015ea:	4b25      	ldr	r3, [pc, #148]	; (8001680 <USART3_IRQHandler+0x12c>)
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	681a      	ldr	r2, [r3, #0]
 80015f0:	4b23      	ldr	r3, [pc, #140]	; (8001680 <USART3_IRQHandler+0x12c>)
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	f042 0201 	orr.w	r2, r2, #1
 80015f8:	601a      	str	r2, [r3, #0]
            if(this_time_rx_len == RC_FRAME_LENGTH)
 80015fa:	4b22      	ldr	r3, [pc, #136]	; (8001684 <USART3_IRQHandler+0x130>)
 80015fc:	881b      	ldrh	r3, [r3, #0]
 80015fe:	2b12      	cmp	r3, #18
 8001600:	d135      	bne.n	800166e <USART3_IRQHandler+0x11a>
                sbus_to_rc(sbus_rx_buf[0], &rc_ctrl);
 8001602:	4921      	ldr	r1, [pc, #132]	; (8001688 <USART3_IRQHandler+0x134>)
 8001604:	4821      	ldr	r0, [pc, #132]	; (800168c <USART3_IRQHandler+0x138>)
 8001606:	f000 f847 	bl	8001698 <sbus_to_rc>
                sbus_to_usart1(sbus_rx_buf[0]);
 800160a:	4820      	ldr	r0, [pc, #128]	; (800168c <USART3_IRQHandler+0x138>)
 800160c:	f000 f952 	bl	80018b4 <sbus_to_usart1>
}
 8001610:	e02d      	b.n	800166e <USART3_IRQHandler+0x11a>
            __HAL_DMA_DISABLE(&hdma_usart3_rx);
 8001612:	4b1b      	ldr	r3, [pc, #108]	; (8001680 <USART3_IRQHandler+0x12c>)
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	681a      	ldr	r2, [r3, #0]
 8001618:	4b19      	ldr	r3, [pc, #100]	; (8001680 <USART3_IRQHandler+0x12c>)
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	f022 0201 	bic.w	r2, r2, #1
 8001620:	601a      	str	r2, [r3, #0]
            this_time_rx_len = SBUS_RX_BUF_NUM - hdma_usart3_rx.Instance->NDTR;
 8001622:	4b17      	ldr	r3, [pc, #92]	; (8001680 <USART3_IRQHandler+0x12c>)
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	685b      	ldr	r3, [r3, #4]
 8001628:	b29b      	uxth	r3, r3
 800162a:	f1c3 0324 	rsb	r3, r3, #36	; 0x24
 800162e:	b29a      	uxth	r2, r3
 8001630:	4b14      	ldr	r3, [pc, #80]	; (8001684 <USART3_IRQHandler+0x130>)
 8001632:	801a      	strh	r2, [r3, #0]
            hdma_usart3_rx.Instance->NDTR = SBUS_RX_BUF_NUM;
 8001634:	4b12      	ldr	r3, [pc, #72]	; (8001680 <USART3_IRQHandler+0x12c>)
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	2224      	movs	r2, #36	; 0x24
 800163a:	605a      	str	r2, [r3, #4]
            DMA1_Stream1->CR &= ~(DMA_SxCR_CT);
 800163c:	4b14      	ldr	r3, [pc, #80]	; (8001690 <USART3_IRQHandler+0x13c>)
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	4a13      	ldr	r2, [pc, #76]	; (8001690 <USART3_IRQHandler+0x13c>)
 8001642:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 8001646:	6013      	str	r3, [r2, #0]
            __HAL_DMA_ENABLE(&hdma_usart3_rx);
 8001648:	4b0d      	ldr	r3, [pc, #52]	; (8001680 <USART3_IRQHandler+0x12c>)
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	681a      	ldr	r2, [r3, #0]
 800164e:	4b0c      	ldr	r3, [pc, #48]	; (8001680 <USART3_IRQHandler+0x12c>)
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	f042 0201 	orr.w	r2, r2, #1
 8001656:	601a      	str	r2, [r3, #0]
            if(this_time_rx_len == RC_FRAME_LENGTH)
 8001658:	4b0a      	ldr	r3, [pc, #40]	; (8001684 <USART3_IRQHandler+0x130>)
 800165a:	881b      	ldrh	r3, [r3, #0]
 800165c:	2b12      	cmp	r3, #18
 800165e:	d106      	bne.n	800166e <USART3_IRQHandler+0x11a>
                sbus_to_rc(sbus_rx_buf[1], &rc_ctrl);
 8001660:	4909      	ldr	r1, [pc, #36]	; (8001688 <USART3_IRQHandler+0x134>)
 8001662:	480c      	ldr	r0, [pc, #48]	; (8001694 <USART3_IRQHandler+0x140>)
 8001664:	f000 f818 	bl	8001698 <sbus_to_rc>
                sbus_to_usart1(sbus_rx_buf[1]);
 8001668:	480a      	ldr	r0, [pc, #40]	; (8001694 <USART3_IRQHandler+0x140>)
 800166a:	f000 f923 	bl	80018b4 <sbus_to_usart1>
}
 800166e:	bf00      	nop
 8001670:	3708      	adds	r7, #8
 8001672:	46bd      	mov	sp, r7
 8001674:	bd80      	pop	{r7, pc}
 8001676:	bf00      	nop
 8001678:	20004e80 	.word	0x20004e80
 800167c:	40004800 	.word	0x40004800
 8001680:	20004e20 	.word	0x20004e20
 8001684:	200000e8 	.word	0x200000e8
 8001688:	20004acc 	.word	0x20004acc
 800168c:	200000a0 	.word	0x200000a0
 8001690:	40026028 	.word	0x40026028
 8001694:	200000c4 	.word	0x200000c4

08001698 <sbus_to_rc>:
  * @param[in]      sbus_buf: 原生数据指针
  * @param[out]     rc_ctrl: 遥控器数据指
  * @retval         none
  */
static void sbus_to_rc(volatile const uint8_t *sbus_buf, RC_ctrl_t *rc_ctrl)
{
 8001698:	b480      	push	{r7}
 800169a:	b083      	sub	sp, #12
 800169c:	af00      	add	r7, sp, #0
 800169e:	6078      	str	r0, [r7, #4]
 80016a0:	6039      	str	r1, [r7, #0]
    if (sbus_buf == NULL || rc_ctrl == NULL)
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	2b00      	cmp	r3, #0
 80016a6:	f000 80ff 	beq.w	80018a8 <sbus_to_rc+0x210>
 80016aa:	683b      	ldr	r3, [r7, #0]
 80016ac:	2b00      	cmp	r3, #0
 80016ae:	f000 80fb 	beq.w	80018a8 <sbus_to_rc+0x210>
    {
        return;
    }

    rc_ctrl->rc.ch[0] = (sbus_buf[0] | (sbus_buf[1] << 8)) & 0x07ff;        //!< Channel 0
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	781b      	ldrb	r3, [r3, #0]
 80016b6:	b2db      	uxtb	r3, r3
 80016b8:	b21a      	sxth	r2, r3
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	3301      	adds	r3, #1
 80016be:	781b      	ldrb	r3, [r3, #0]
 80016c0:	b2db      	uxtb	r3, r3
 80016c2:	021b      	lsls	r3, r3, #8
 80016c4:	b21b      	sxth	r3, r3
 80016c6:	4313      	orrs	r3, r2
 80016c8:	b21b      	sxth	r3, r3
 80016ca:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80016ce:	b21a      	sxth	r2, r3
 80016d0:	683b      	ldr	r3, [r7, #0]
 80016d2:	801a      	strh	r2, [r3, #0]
    rc_ctrl->rc.ch[1] = ((sbus_buf[1] >> 3) | (sbus_buf[2] << 5)) & 0x07ff; //!< Channel 1
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	3301      	adds	r3, #1
 80016d8:	781b      	ldrb	r3, [r3, #0]
 80016da:	b2db      	uxtb	r3, r3
 80016dc:	08db      	lsrs	r3, r3, #3
 80016de:	b2db      	uxtb	r3, r3
 80016e0:	b21a      	sxth	r2, r3
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	3302      	adds	r3, #2
 80016e6:	781b      	ldrb	r3, [r3, #0]
 80016e8:	b2db      	uxtb	r3, r3
 80016ea:	015b      	lsls	r3, r3, #5
 80016ec:	b21b      	sxth	r3, r3
 80016ee:	4313      	orrs	r3, r2
 80016f0:	b21b      	sxth	r3, r3
 80016f2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80016f6:	b21a      	sxth	r2, r3
 80016f8:	683b      	ldr	r3, [r7, #0]
 80016fa:	805a      	strh	r2, [r3, #2]
    rc_ctrl->rc.ch[2] = ((sbus_buf[2] >> 6) | (sbus_buf[3] << 2) |          //!< Channel 2
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	3302      	adds	r3, #2
 8001700:	781b      	ldrb	r3, [r3, #0]
 8001702:	b2db      	uxtb	r3, r3
 8001704:	099b      	lsrs	r3, r3, #6
 8001706:	b2db      	uxtb	r3, r3
 8001708:	b21a      	sxth	r2, r3
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	3303      	adds	r3, #3
 800170e:	781b      	ldrb	r3, [r3, #0]
 8001710:	b2db      	uxtb	r3, r3
 8001712:	009b      	lsls	r3, r3, #2
 8001714:	b21b      	sxth	r3, r3
 8001716:	4313      	orrs	r3, r2
 8001718:	b21a      	sxth	r2, r3
                         (sbus_buf[4] << 10)) &0x07ff;
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	3304      	adds	r3, #4
 800171e:	781b      	ldrb	r3, [r3, #0]
 8001720:	b2db      	uxtb	r3, r3
 8001722:	029b      	lsls	r3, r3, #10
    rc_ctrl->rc.ch[2] = ((sbus_buf[2] >> 6) | (sbus_buf[3] << 2) |          //!< Channel 2
 8001724:	b21b      	sxth	r3, r3
 8001726:	4313      	orrs	r3, r2
 8001728:	b21b      	sxth	r3, r3
                         (sbus_buf[4] << 10)) &0x07ff;
 800172a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800172e:	b21a      	sxth	r2, r3
    rc_ctrl->rc.ch[2] = ((sbus_buf[2] >> 6) | (sbus_buf[3] << 2) |          //!< Channel 2
 8001730:	683b      	ldr	r3, [r7, #0]
 8001732:	809a      	strh	r2, [r3, #4]
    rc_ctrl->rc.ch[3] = ((sbus_buf[4] >> 1) | (sbus_buf[5] << 7)) & 0x07ff; //!< Channel 3
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	3304      	adds	r3, #4
 8001738:	781b      	ldrb	r3, [r3, #0]
 800173a:	b2db      	uxtb	r3, r3
 800173c:	085b      	lsrs	r3, r3, #1
 800173e:	b2db      	uxtb	r3, r3
 8001740:	b21a      	sxth	r2, r3
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	3305      	adds	r3, #5
 8001746:	781b      	ldrb	r3, [r3, #0]
 8001748:	b2db      	uxtb	r3, r3
 800174a:	01db      	lsls	r3, r3, #7
 800174c:	b21b      	sxth	r3, r3
 800174e:	4313      	orrs	r3, r2
 8001750:	b21b      	sxth	r3, r3
 8001752:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001756:	b21a      	sxth	r2, r3
 8001758:	683b      	ldr	r3, [r7, #0]
 800175a:	80da      	strh	r2, [r3, #6]
    rc_ctrl->rc.s[0] = ((sbus_buf[5] >> 4) & 0x0003);                  //!< Switch left
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	3305      	adds	r3, #5
 8001760:	781b      	ldrb	r3, [r3, #0]
 8001762:	b2db      	uxtb	r3, r3
 8001764:	091b      	lsrs	r3, r3, #4
 8001766:	b2db      	uxtb	r3, r3
 8001768:	f003 0303 	and.w	r3, r3, #3
 800176c:	b2da      	uxtb	r2, r3
 800176e:	683b      	ldr	r3, [r7, #0]
 8001770:	729a      	strb	r2, [r3, #10]
    rc_ctrl->rc.s[1] = ((sbus_buf[5] >> 4) & 0x000C) >> 2;                       //!< Switch right
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	3305      	adds	r3, #5
 8001776:	781b      	ldrb	r3, [r3, #0]
 8001778:	b2db      	uxtb	r3, r3
 800177a:	091b      	lsrs	r3, r3, #4
 800177c:	b2db      	uxtb	r3, r3
 800177e:	109b      	asrs	r3, r3, #2
 8001780:	b2db      	uxtb	r3, r3
 8001782:	f003 0303 	and.w	r3, r3, #3
 8001786:	b2da      	uxtb	r2, r3
 8001788:	683b      	ldr	r3, [r7, #0]
 800178a:	72da      	strb	r2, [r3, #11]
    rc_ctrl->mouse.x = sbus_buf[6] | (sbus_buf[7] << 8);                    //!< Mouse X axis
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	3306      	adds	r3, #6
 8001790:	781b      	ldrb	r3, [r3, #0]
 8001792:	b2db      	uxtb	r3, r3
 8001794:	b21a      	sxth	r2, r3
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	3307      	adds	r3, #7
 800179a:	781b      	ldrb	r3, [r3, #0]
 800179c:	b2db      	uxtb	r3, r3
 800179e:	021b      	lsls	r3, r3, #8
 80017a0:	b21b      	sxth	r3, r3
 80017a2:	4313      	orrs	r3, r2
 80017a4:	b21a      	sxth	r2, r3
 80017a6:	683b      	ldr	r3, [r7, #0]
 80017a8:	819a      	strh	r2, [r3, #12]
    rc_ctrl->mouse.y = sbus_buf[8] | (sbus_buf[9] << 8);                    //!< Mouse Y axis
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	3308      	adds	r3, #8
 80017ae:	781b      	ldrb	r3, [r3, #0]
 80017b0:	b2db      	uxtb	r3, r3
 80017b2:	b21a      	sxth	r2, r3
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	3309      	adds	r3, #9
 80017b8:	781b      	ldrb	r3, [r3, #0]
 80017ba:	b2db      	uxtb	r3, r3
 80017bc:	021b      	lsls	r3, r3, #8
 80017be:	b21b      	sxth	r3, r3
 80017c0:	4313      	orrs	r3, r2
 80017c2:	b21a      	sxth	r2, r3
 80017c4:	683b      	ldr	r3, [r7, #0]
 80017c6:	81da      	strh	r2, [r3, #14]
    rc_ctrl->mouse.z = sbus_buf[10] | (sbus_buf[11] << 8);                  //!< Mouse Z axis
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	330a      	adds	r3, #10
 80017cc:	781b      	ldrb	r3, [r3, #0]
 80017ce:	b2db      	uxtb	r3, r3
 80017d0:	b21a      	sxth	r2, r3
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	330b      	adds	r3, #11
 80017d6:	781b      	ldrb	r3, [r3, #0]
 80017d8:	b2db      	uxtb	r3, r3
 80017da:	021b      	lsls	r3, r3, #8
 80017dc:	b21b      	sxth	r3, r3
 80017de:	4313      	orrs	r3, r2
 80017e0:	b21a      	sxth	r2, r3
 80017e2:	683b      	ldr	r3, [r7, #0]
 80017e4:	821a      	strh	r2, [r3, #16]
    rc_ctrl->mouse.press_l = sbus_buf[12];                                  //!< Mouse Left Is Press ?
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	7b1b      	ldrb	r3, [r3, #12]
 80017ea:	b2da      	uxtb	r2, r3
 80017ec:	683b      	ldr	r3, [r7, #0]
 80017ee:	749a      	strb	r2, [r3, #18]
    rc_ctrl->mouse.press_r = sbus_buf[13];                                  //!< Mouse Right Is Press ?
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	7b5b      	ldrb	r3, [r3, #13]
 80017f4:	b2da      	uxtb	r2, r3
 80017f6:	683b      	ldr	r3, [r7, #0]
 80017f8:	74da      	strb	r2, [r3, #19]
    rc_ctrl->key.v = sbus_buf[14] | (sbus_buf[15] << 8);                    //!< KeyBoard value
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	330e      	adds	r3, #14
 80017fe:	781b      	ldrb	r3, [r3, #0]
 8001800:	b2db      	uxtb	r3, r3
 8001802:	b21a      	sxth	r2, r3
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	330f      	adds	r3, #15
 8001808:	781b      	ldrb	r3, [r3, #0]
 800180a:	b2db      	uxtb	r3, r3
 800180c:	021b      	lsls	r3, r3, #8
 800180e:	b21b      	sxth	r3, r3
 8001810:	4313      	orrs	r3, r2
 8001812:	b21b      	sxth	r3, r3
 8001814:	b29a      	uxth	r2, r3
 8001816:	683b      	ldr	r3, [r7, #0]
 8001818:	829a      	strh	r2, [r3, #20]
    rc_ctrl->rc.ch[4] = sbus_buf[16] | (sbus_buf[17] << 8);                 //NULL
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	3310      	adds	r3, #16
 800181e:	781b      	ldrb	r3, [r3, #0]
 8001820:	b2db      	uxtb	r3, r3
 8001822:	b21a      	sxth	r2, r3
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	3311      	adds	r3, #17
 8001828:	781b      	ldrb	r3, [r3, #0]
 800182a:	b2db      	uxtb	r3, r3
 800182c:	021b      	lsls	r3, r3, #8
 800182e:	b21b      	sxth	r3, r3
 8001830:	4313      	orrs	r3, r2
 8001832:	b21a      	sxth	r2, r3
 8001834:	683b      	ldr	r3, [r7, #0]
 8001836:	811a      	strh	r2, [r3, #8]

    rc_ctrl->rc.ch[0] -= RC_CH_VALUE_OFFSET;
 8001838:	683b      	ldr	r3, [r7, #0]
 800183a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800183e:	b21b      	sxth	r3, r3
 8001840:	b29b      	uxth	r3, r3
 8001842:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 8001846:	b29b      	uxth	r3, r3
 8001848:	b21a      	sxth	r2, r3
 800184a:	683b      	ldr	r3, [r7, #0]
 800184c:	801a      	strh	r2, [r3, #0]
    rc_ctrl->rc.ch[1] -= RC_CH_VALUE_OFFSET;
 800184e:	683b      	ldr	r3, [r7, #0]
 8001850:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001854:	b21b      	sxth	r3, r3
 8001856:	b29b      	uxth	r3, r3
 8001858:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 800185c:	b29b      	uxth	r3, r3
 800185e:	b21a      	sxth	r2, r3
 8001860:	683b      	ldr	r3, [r7, #0]
 8001862:	805a      	strh	r2, [r3, #2]
    rc_ctrl->rc.ch[2] -= RC_CH_VALUE_OFFSET;
 8001864:	683b      	ldr	r3, [r7, #0]
 8001866:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800186a:	b21b      	sxth	r3, r3
 800186c:	b29b      	uxth	r3, r3
 800186e:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 8001872:	b29b      	uxth	r3, r3
 8001874:	b21a      	sxth	r2, r3
 8001876:	683b      	ldr	r3, [r7, #0]
 8001878:	809a      	strh	r2, [r3, #4]
    rc_ctrl->rc.ch[3] -= RC_CH_VALUE_OFFSET;
 800187a:	683b      	ldr	r3, [r7, #0]
 800187c:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8001880:	b21b      	sxth	r3, r3
 8001882:	b29b      	uxth	r3, r3
 8001884:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 8001888:	b29b      	uxth	r3, r3
 800188a:	b21a      	sxth	r2, r3
 800188c:	683b      	ldr	r3, [r7, #0]
 800188e:	80da      	strh	r2, [r3, #6]
    rc_ctrl->rc.ch[4] -= RC_CH_VALUE_OFFSET;
 8001890:	683b      	ldr	r3, [r7, #0]
 8001892:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8001896:	b21b      	sxth	r3, r3
 8001898:	b29b      	uxth	r3, r3
 800189a:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 800189e:	b29b      	uxth	r3, r3
 80018a0:	b21a      	sxth	r2, r3
 80018a2:	683b      	ldr	r3, [r7, #0]
 80018a4:	811a      	strh	r2, [r3, #8]
 80018a6:	e000      	b.n	80018aa <sbus_to_rc+0x212>
        return;
 80018a8:	bf00      	nop
}
 80018aa:	370c      	adds	r7, #12
 80018ac:	46bd      	mov	sp, r7
 80018ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b2:	4770      	bx	lr

080018b4 <sbus_to_usart1>:
  * @brief          通过usart1发送sbus数据,在usart3_IRQHandle调用
  * @param[in]      sbus: sbus数据, 18字节
  * @retval         none
  */
void sbus_to_usart1(uint8_t *sbus)
{
 80018b4:	b580      	push	{r7, lr}
 80018b6:	b082      	sub	sp, #8
 80018b8:	af00      	add	r7, sp, #0
 80018ba:	6078      	str	r0, [r7, #4]
    static uint8_t usart_tx_buf[20];
    static uint8_t i =0;
    usart_tx_buf[0] = 0xA6;
 80018bc:	4b16      	ldr	r3, [pc, #88]	; (8001918 <sbus_to_usart1+0x64>)
 80018be:	22a6      	movs	r2, #166	; 0xa6
 80018c0:	701a      	strb	r2, [r3, #0]
    memcpy(usart_tx_buf + 1, sbus, 18);
 80018c2:	4b16      	ldr	r3, [pc, #88]	; (800191c <sbus_to_usart1+0x68>)
 80018c4:	2212      	movs	r2, #18
 80018c6:	6879      	ldr	r1, [r7, #4]
 80018c8:	4618      	mov	r0, r3
 80018ca:	f00b fb79 	bl	800cfc0 <memcpy>
    for(i = 0, usart_tx_buf[19] = 0; i < 19; i++)
 80018ce:	4b14      	ldr	r3, [pc, #80]	; (8001920 <sbus_to_usart1+0x6c>)
 80018d0:	2200      	movs	r2, #0
 80018d2:	701a      	strb	r2, [r3, #0]
 80018d4:	4b10      	ldr	r3, [pc, #64]	; (8001918 <sbus_to_usart1+0x64>)
 80018d6:	2200      	movs	r2, #0
 80018d8:	74da      	strb	r2, [r3, #19]
 80018da:	e010      	b.n	80018fe <sbus_to_usart1+0x4a>
    {
        usart_tx_buf[19] += usart_tx_buf[i];
 80018dc:	4b0e      	ldr	r3, [pc, #56]	; (8001918 <sbus_to_usart1+0x64>)
 80018de:	7cda      	ldrb	r2, [r3, #19]
 80018e0:	4b0f      	ldr	r3, [pc, #60]	; (8001920 <sbus_to_usart1+0x6c>)
 80018e2:	781b      	ldrb	r3, [r3, #0]
 80018e4:	4619      	mov	r1, r3
 80018e6:	4b0c      	ldr	r3, [pc, #48]	; (8001918 <sbus_to_usart1+0x64>)
 80018e8:	5c5b      	ldrb	r3, [r3, r1]
 80018ea:	4413      	add	r3, r2
 80018ec:	b2da      	uxtb	r2, r3
 80018ee:	4b0a      	ldr	r3, [pc, #40]	; (8001918 <sbus_to_usart1+0x64>)
 80018f0:	74da      	strb	r2, [r3, #19]
    for(i = 0, usart_tx_buf[19] = 0; i < 19; i++)
 80018f2:	4b0b      	ldr	r3, [pc, #44]	; (8001920 <sbus_to_usart1+0x6c>)
 80018f4:	781b      	ldrb	r3, [r3, #0]
 80018f6:	3301      	adds	r3, #1
 80018f8:	b2da      	uxtb	r2, r3
 80018fa:	4b09      	ldr	r3, [pc, #36]	; (8001920 <sbus_to_usart1+0x6c>)
 80018fc:	701a      	strb	r2, [r3, #0]
 80018fe:	4b08      	ldr	r3, [pc, #32]	; (8001920 <sbus_to_usart1+0x6c>)
 8001900:	781b      	ldrb	r3, [r3, #0]
 8001902:	2b12      	cmp	r3, #18
 8001904:	d9ea      	bls.n	80018dc <sbus_to_usart1+0x28>
    }
    usart1_tx_dma_enable(usart_tx_buf, 20);
 8001906:	2114      	movs	r1, #20
 8001908:	4803      	ldr	r0, [pc, #12]	; (8001918 <sbus_to_usart1+0x64>)
 800190a:	f000 f8d3 	bl	8001ab4 <usart1_tx_dma_enable>
}
 800190e:	bf00      	nop
 8001910:	3708      	adds	r7, #8
 8001912:	46bd      	mov	sp, r7
 8001914:	bd80      	pop	{r7, pc}
 8001916:	bf00      	nop
 8001918:	200000ec 	.word	0x200000ec
 800191c:	200000ed 	.word	0x200000ed
 8001920:	20000100 	.word	0x20000100

08001924 <BSP_CAN_Filtering_Init>:
 * @brief:        Set up filtering ID and mask for board
 * @param[in]:    None
 * @param[out]:   can_filter_st: The set up settings for the filter transmitted to HAL layer
 * @retval:       None
 */
void BSP_CAN_Filtering_Init(void) {
 8001924:	b580      	push	{r7, lr}
 8001926:	b08a      	sub	sp, #40	; 0x28
 8001928:	af00      	add	r7, sp, #0
	CAN_FilterTypeDef can_filter_st;
	can_filter_st.FilterActivation = ENABLE;
 800192a:	2301      	movs	r3, #1
 800192c:	623b      	str	r3, [r7, #32]
	can_filter_st.FilterMode = CAN_FILTERMODE_IDMASK;
 800192e:	2300      	movs	r3, #0
 8001930:	61bb      	str	r3, [r7, #24]
	can_filter_st.FilterScale = CAN_FILTERSCALE_32BIT;
 8001932:	2301      	movs	r3, #1
 8001934:	61fb      	str	r3, [r7, #28]
	can_filter_st.FilterIdHigh = 0x0000;
 8001936:	2300      	movs	r3, #0
 8001938:	603b      	str	r3, [r7, #0]
	can_filter_st.FilterIdLow = 0x0000;
 800193a:	2300      	movs	r3, #0
 800193c:	607b      	str	r3, [r7, #4]
	can_filter_st.FilterMaskIdHigh = 0x0000;
 800193e:	2300      	movs	r3, #0
 8001940:	60bb      	str	r3, [r7, #8]
	can_filter_st.FilterMaskIdLow = 0x0000;
 8001942:	2300      	movs	r3, #0
 8001944:	60fb      	str	r3, [r7, #12]
	can_filter_st.FilterBank = 0;
 8001946:	2300      	movs	r3, #0
 8001948:	617b      	str	r3, [r7, #20]
	can_filter_st.FilterFIFOAssignment = CAN_RX_FIFO0;
 800194a:	2300      	movs	r3, #0
 800194c:	613b      	str	r3, [r7, #16]
	HAL_CAN_ConfigFilter(&hcan1, &can_filter_st);
 800194e:	463b      	mov	r3, r7
 8001950:	4619      	mov	r1, r3
 8001952:	480f      	ldr	r0, [pc, #60]	; (8001990 <BSP_CAN_Filtering_Init+0x6c>)
 8001954:	f001 fc5a 	bl	800320c <HAL_CAN_ConfigFilter>
	HAL_CAN_Start(&hcan1);
 8001958:	480d      	ldr	r0, [pc, #52]	; (8001990 <BSP_CAN_Filtering_Init+0x6c>)
 800195a:	f001 fd37 	bl	80033cc <HAL_CAN_Start>
	HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING);
 800195e:	2102      	movs	r1, #2
 8001960:	480b      	ldr	r0, [pc, #44]	; (8001990 <BSP_CAN_Filtering_Init+0x6c>)
 8001962:	f001 fe89 	bl	8003678 <HAL_CAN_ActivateNotification>

	can_filter_st.SlaveStartFilterBank = 14;
 8001966:	230e      	movs	r3, #14
 8001968:	627b      	str	r3, [r7, #36]	; 0x24
	can_filter_st.FilterBank = 14;
 800196a:	230e      	movs	r3, #14
 800196c:	617b      	str	r3, [r7, #20]
	HAL_CAN_ConfigFilter(&hcan2, &can_filter_st);
 800196e:	463b      	mov	r3, r7
 8001970:	4619      	mov	r1, r3
 8001972:	4808      	ldr	r0, [pc, #32]	; (8001994 <BSP_CAN_Filtering_Init+0x70>)
 8001974:	f001 fc4a 	bl	800320c <HAL_CAN_ConfigFilter>
	HAL_CAN_Start(&hcan2);
 8001978:	4806      	ldr	r0, [pc, #24]	; (8001994 <BSP_CAN_Filtering_Init+0x70>)
 800197a:	f001 fd27 	bl	80033cc <HAL_CAN_Start>
	HAL_CAN_ActivateNotification(&hcan2, CAN_IT_RX_FIFO0_MSG_PENDING);
 800197e:	2102      	movs	r1, #2
 8001980:	4804      	ldr	r0, [pc, #16]	; (8001994 <BSP_CAN_Filtering_Init+0x70>)
 8001982:	f001 fe79 	bl	8003678 <HAL_CAN_ActivateNotification>
}
 8001986:	bf00      	nop
 8001988:	3728      	adds	r7, #40	; 0x28
 800198a:	46bd      	mov	sp, r7
 800198c:	bd80      	pop	{r7, pc}
 800198e:	bf00      	nop
 8001990:	20004b38 	.word	0x20004b38
 8001994:	20004b10 	.word	0x20004b10

08001998 <HAL_CAN_RxFifo0MsgPendingCallback>:
 * @brief:        Send Data to the APP layer to do data processing when receiving data from CAN port
 * @param[in]:    hcan: The CAN port that have data transmitted in
 * @param[out]:   rx_data: The data received from HAL layer, to be transmitted to the APP layer
 * @retvel:       None
 */
void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan) {
 8001998:	b5b0      	push	{r4, r5, r7, lr}
 800199a:	b08c      	sub	sp, #48	; 0x30
 800199c:	af00      	add	r7, sp, #0
 800199e:	6078      	str	r0, [r7, #4]
	CAN_RxHeaderTypeDef rx_header;
	uint8_t rx_data[8];

	HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &rx_header, rx_data); //Get Data From HAL Layer
 80019a0:	f107 0308 	add.w	r3, r7, #8
 80019a4:	f107 0210 	add.w	r2, r7, #16
 80019a8:	2100      	movs	r1, #0
 80019aa:	6878      	ldr	r0, [r7, #4]
 80019ac:	f001 fd52 	bl	8003454 <HAL_CAN_GetRxMessage>

	CAN_BSP_return_data.header = rx_header;
 80019b0:	4b11      	ldr	r3, [pc, #68]	; (80019f8 <HAL_CAN_RxFifo0MsgPendingCallback+0x60>)
 80019b2:	461d      	mov	r5, r3
 80019b4:	f107 0410 	add.w	r4, r7, #16
 80019b8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80019ba:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80019bc:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 80019c0:	e885 0007 	stmia.w	r5, {r0, r1, r2}
	for (int i = 0; i < 8; i++){
 80019c4:	2300      	movs	r3, #0
 80019c6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80019c8:	e00d      	b.n	80019e6 <HAL_CAN_RxFifo0MsgPendingCallback+0x4e>
		CAN_BSP_return_data.data[i] = rx_data[i];
 80019ca:	f107 0208 	add.w	r2, r7, #8
 80019ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80019d0:	4413      	add	r3, r2
 80019d2:	7819      	ldrb	r1, [r3, #0]
 80019d4:	4a08      	ldr	r2, [pc, #32]	; (80019f8 <HAL_CAN_RxFifo0MsgPendingCallback+0x60>)
 80019d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80019d8:	4413      	add	r3, r2
 80019da:	331c      	adds	r3, #28
 80019dc:	460a      	mov	r2, r1
 80019de:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < 8; i++){
 80019e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80019e2:	3301      	adds	r3, #1
 80019e4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80019e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80019e8:	2b07      	cmp	r3, #7
 80019ea:	ddee      	ble.n	80019ca <HAL_CAN_RxFifo0MsgPendingCallback+0x32>
//	}
//	else if (hcan->Instance == CAN2)
//	{
//		APP_Get_CAN2_Data(&rx_header, rx_data); //Pass data to APP Layer
//	}
}
 80019ec:	bf00      	nop
 80019ee:	bf00      	nop
 80019f0:	3730      	adds	r7, #48	; 0x30
 80019f2:	46bd      	mov	sp, r7
 80019f4:	bdb0      	pop	{r4, r5, r7, pc}
 80019f6:	bf00      	nop
 80019f8:	20004aec 	.word	0x20004aec

080019fc <RC_Init>:
  * @param[in]      rx2_buf: memory buffer 2
  * @param[in]      dma_buf_num: data length
  * @retval         none
  */
void RC_Init(uint8_t *rx1_buf, uint8_t *rx2_buf, uint16_t dma_buf_num)
{
 80019fc:	b480      	push	{r7}
 80019fe:	b085      	sub	sp, #20
 8001a00:	af00      	add	r7, sp, #0
 8001a02:	60f8      	str	r0, [r7, #12]
 8001a04:	60b9      	str	r1, [r7, #8]
 8001a06:	4613      	mov	r3, r2
 8001a08:	80fb      	strh	r3, [r7, #6]

    //enable the DMA transfer for the receiver request
    SET_BIT(huart3.Instance->CR3, USART_CR3_DMAR);
 8001a0a:	4b27      	ldr	r3, [pc, #156]	; (8001aa8 <RC_Init+0xac>)
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	695a      	ldr	r2, [r3, #20]
 8001a10:	4b25      	ldr	r3, [pc, #148]	; (8001aa8 <RC_Init+0xac>)
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001a18:	615a      	str	r2, [r3, #20]

    //enable idle interrupt
    __HAL_UART_ENABLE_IT(&huart3, UART_IT_IDLE);
 8001a1a:	4b23      	ldr	r3, [pc, #140]	; (8001aa8 <RC_Init+0xac>)
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	68da      	ldr	r2, [r3, #12]
 8001a20:	4b21      	ldr	r3, [pc, #132]	; (8001aa8 <RC_Init+0xac>)
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	f042 0210 	orr.w	r2, r2, #16
 8001a28:	60da      	str	r2, [r3, #12]

    //disable DMA
    __HAL_DMA_DISABLE(&hdma_usart3_rx);
 8001a2a:	4b20      	ldr	r3, [pc, #128]	; (8001aac <RC_Init+0xb0>)
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	681a      	ldr	r2, [r3, #0]
 8001a30:	4b1e      	ldr	r3, [pc, #120]	; (8001aac <RC_Init+0xb0>)
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	f022 0201 	bic.w	r2, r2, #1
 8001a38:	601a      	str	r2, [r3, #0]
    while(hdma_usart3_rx.Instance->CR & DMA_SxCR_EN)
 8001a3a:	e007      	b.n	8001a4c <RC_Init+0x50>
    {
        __HAL_DMA_DISABLE(&hdma_usart3_rx);
 8001a3c:	4b1b      	ldr	r3, [pc, #108]	; (8001aac <RC_Init+0xb0>)
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	681a      	ldr	r2, [r3, #0]
 8001a42:	4b1a      	ldr	r3, [pc, #104]	; (8001aac <RC_Init+0xb0>)
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	f022 0201 	bic.w	r2, r2, #1
 8001a4a:	601a      	str	r2, [r3, #0]
    while(hdma_usart3_rx.Instance->CR & DMA_SxCR_EN)
 8001a4c:	4b17      	ldr	r3, [pc, #92]	; (8001aac <RC_Init+0xb0>)
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	f003 0301 	and.w	r3, r3, #1
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d1f0      	bne.n	8001a3c <RC_Init+0x40>
    }

    hdma_usart3_rx.Instance->PAR = (uint32_t) & (USART3->DR);
 8001a5a:	4b14      	ldr	r3, [pc, #80]	; (8001aac <RC_Init+0xb0>)
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	4a14      	ldr	r2, [pc, #80]	; (8001ab0 <RC_Init+0xb4>)
 8001a60:	609a      	str	r2, [r3, #8]
    //memory buffer 1
    hdma_usart3_rx.Instance->M0AR = (uint32_t)(rx1_buf);
 8001a62:	4b12      	ldr	r3, [pc, #72]	; (8001aac <RC_Init+0xb0>)
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	68fa      	ldr	r2, [r7, #12]
 8001a68:	60da      	str	r2, [r3, #12]
    //memory buffer 2
    hdma_usart3_rx.Instance->M1AR = (uint32_t)(rx2_buf);
 8001a6a:	4b10      	ldr	r3, [pc, #64]	; (8001aac <RC_Init+0xb0>)
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	68ba      	ldr	r2, [r7, #8]
 8001a70:	611a      	str	r2, [r3, #16]
    //data length
    hdma_usart3_rx.Instance->NDTR = dma_buf_num;
 8001a72:	4b0e      	ldr	r3, [pc, #56]	; (8001aac <RC_Init+0xb0>)
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	88fa      	ldrh	r2, [r7, #6]
 8001a78:	605a      	str	r2, [r3, #4]
    //enable double memory buffer
    SET_BIT(hdma_usart3_rx.Instance->CR, DMA_SxCR_DBM);
 8001a7a:	4b0c      	ldr	r3, [pc, #48]	; (8001aac <RC_Init+0xb0>)
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	681a      	ldr	r2, [r3, #0]
 8001a80:	4b0a      	ldr	r3, [pc, #40]	; (8001aac <RC_Init+0xb0>)
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8001a88:	601a      	str	r2, [r3, #0]

    //enable DMA
    __HAL_DMA_ENABLE(&hdma_usart3_rx);
 8001a8a:	4b08      	ldr	r3, [pc, #32]	; (8001aac <RC_Init+0xb0>)
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	681a      	ldr	r2, [r3, #0]
 8001a90:	4b06      	ldr	r3, [pc, #24]	; (8001aac <RC_Init+0xb0>)
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	f042 0201 	orr.w	r2, r2, #1
 8001a98:	601a      	str	r2, [r3, #0]
}
 8001a9a:	bf00      	nop
 8001a9c:	3714      	adds	r7, #20
 8001a9e:	46bd      	mov	sp, r7
 8001aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa4:	4770      	bx	lr
 8001aa6:	bf00      	nop
 8001aa8:	20004e80 	.word	0x20004e80
 8001aac:	20004e20 	.word	0x20004e20
 8001ab0:	40004804 	.word	0x40004804

08001ab4 <usart1_tx_dma_enable>:
    hdma_usart1_tx.Instance->NDTR = 0;


}
void usart1_tx_dma_enable(uint8_t *data, uint16_t len)
{
 8001ab4:	b480      	push	{r7}
 8001ab6:	b083      	sub	sp, #12
 8001ab8:	af00      	add	r7, sp, #0
 8001aba:	6078      	str	r0, [r7, #4]
 8001abc:	460b      	mov	r3, r1
 8001abe:	807b      	strh	r3, [r7, #2]
    //disable DMA
    //ʧЧDMA
    __HAL_DMA_DISABLE(&hdma_usart1_tx);
 8001ac0:	4b29      	ldr	r3, [pc, #164]	; (8001b68 <usart1_tx_dma_enable+0xb4>)
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	681a      	ldr	r2, [r3, #0]
 8001ac6:	4b28      	ldr	r3, [pc, #160]	; (8001b68 <usart1_tx_dma_enable+0xb4>)
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	f022 0201 	bic.w	r2, r2, #1
 8001ace:	601a      	str	r2, [r3, #0]

    while(hdma_usart1_tx.Instance->CR & DMA_SxCR_EN)
 8001ad0:	e007      	b.n	8001ae2 <usart1_tx_dma_enable+0x2e>
    {
        __HAL_DMA_DISABLE(&hdma_usart1_tx);
 8001ad2:	4b25      	ldr	r3, [pc, #148]	; (8001b68 <usart1_tx_dma_enable+0xb4>)
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	681a      	ldr	r2, [r3, #0]
 8001ad8:	4b23      	ldr	r3, [pc, #140]	; (8001b68 <usart1_tx_dma_enable+0xb4>)
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	f022 0201 	bic.w	r2, r2, #1
 8001ae0:	601a      	str	r2, [r3, #0]
    while(hdma_usart1_tx.Instance->CR & DMA_SxCR_EN)
 8001ae2:	4b21      	ldr	r3, [pc, #132]	; (8001b68 <usart1_tx_dma_enable+0xb4>)
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	f003 0301 	and.w	r3, r3, #1
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	d1f0      	bne.n	8001ad2 <usart1_tx_dma_enable+0x1e>
    }

    __HAL_DMA_CLEAR_FLAG(&hdma_usart1_tx, DMA_HISR_TCIF7);
 8001af0:	4b1d      	ldr	r3, [pc, #116]	; (8001b68 <usart1_tx_dma_enable+0xb4>)
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	461a      	mov	r2, r3
 8001af6:	4b1d      	ldr	r3, [pc, #116]	; (8001b6c <usart1_tx_dma_enable+0xb8>)
 8001af8:	429a      	cmp	r2, r3
 8001afa:	d904      	bls.n	8001b06 <usart1_tx_dma_enable+0x52>
 8001afc:	4b1c      	ldr	r3, [pc, #112]	; (8001b70 <usart1_tx_dma_enable+0xbc>)
 8001afe:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001b02:	60da      	str	r2, [r3, #12]
 8001b04:	e019      	b.n	8001b3a <usart1_tx_dma_enable+0x86>
 8001b06:	4b18      	ldr	r3, [pc, #96]	; (8001b68 <usart1_tx_dma_enable+0xb4>)
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	461a      	mov	r2, r3
 8001b0c:	4b19      	ldr	r3, [pc, #100]	; (8001b74 <usart1_tx_dma_enable+0xc0>)
 8001b0e:	429a      	cmp	r2, r3
 8001b10:	d904      	bls.n	8001b1c <usart1_tx_dma_enable+0x68>
 8001b12:	4a17      	ldr	r2, [pc, #92]	; (8001b70 <usart1_tx_dma_enable+0xbc>)
 8001b14:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8001b18:	6093      	str	r3, [r2, #8]
 8001b1a:	e00e      	b.n	8001b3a <usart1_tx_dma_enable+0x86>
 8001b1c:	4b12      	ldr	r3, [pc, #72]	; (8001b68 <usart1_tx_dma_enable+0xb4>)
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	461a      	mov	r2, r3
 8001b22:	4b15      	ldr	r3, [pc, #84]	; (8001b78 <usart1_tx_dma_enable+0xc4>)
 8001b24:	429a      	cmp	r2, r3
 8001b26:	d904      	bls.n	8001b32 <usart1_tx_dma_enable+0x7e>
 8001b28:	4a14      	ldr	r2, [pc, #80]	; (8001b7c <usart1_tx_dma_enable+0xc8>)
 8001b2a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8001b2e:	60d3      	str	r3, [r2, #12]
 8001b30:	e003      	b.n	8001b3a <usart1_tx_dma_enable+0x86>
 8001b32:	4a12      	ldr	r2, [pc, #72]	; (8001b7c <usart1_tx_dma_enable+0xc8>)
 8001b34:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8001b38:	6093      	str	r3, [r2, #8]

    hdma_usart1_tx.Instance->M0AR = (uint32_t)(data);
 8001b3a:	4b0b      	ldr	r3, [pc, #44]	; (8001b68 <usart1_tx_dma_enable+0xb4>)
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	687a      	ldr	r2, [r7, #4]
 8001b40:	60da      	str	r2, [r3, #12]
    __HAL_DMA_SET_COUNTER(&hdma_usart1_tx, len);
 8001b42:	4b09      	ldr	r3, [pc, #36]	; (8001b68 <usart1_tx_dma_enable+0xb4>)
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	887a      	ldrh	r2, [r7, #2]
 8001b48:	605a      	str	r2, [r3, #4]

    __HAL_DMA_ENABLE(&hdma_usart1_tx);
 8001b4a:	4b07      	ldr	r3, [pc, #28]	; (8001b68 <usart1_tx_dma_enable+0xb4>)
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	681a      	ldr	r2, [r3, #0]
 8001b50:	4b05      	ldr	r3, [pc, #20]	; (8001b68 <usart1_tx_dma_enable+0xb4>)
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	f042 0201 	orr.w	r2, r2, #1
 8001b58:	601a      	str	r2, [r3, #0]
}
 8001b5a:	bf00      	nop
 8001b5c:	370c      	adds	r7, #12
 8001b5e:	46bd      	mov	sp, r7
 8001b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b64:	4770      	bx	lr
 8001b66:	bf00      	nop
 8001b68:	20004ec4 	.word	0x20004ec4
 8001b6c:	40026458 	.word	0x40026458
 8001b70:	40026400 	.word	0x40026400
 8001b74:	400260b8 	.word	0x400260b8
 8001b78:	40026058 	.word	0x40026058
 8001b7c:	40026000 	.word	0x40026000

08001b80 <MX_CAN1_Init>:
CAN_HandleTypeDef hcan1;
CAN_HandleTypeDef hcan2;

/* CAN1 init function */
void MX_CAN1_Init(void)
{
 8001b80:	b580      	push	{r7, lr}
 8001b82:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8001b84:	4b17      	ldr	r3, [pc, #92]	; (8001be4 <MX_CAN1_Init+0x64>)
 8001b86:	4a18      	ldr	r2, [pc, #96]	; (8001be8 <MX_CAN1_Init+0x68>)
 8001b88:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 3;
 8001b8a:	4b16      	ldr	r3, [pc, #88]	; (8001be4 <MX_CAN1_Init+0x64>)
 8001b8c:	2203      	movs	r2, #3
 8001b8e:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8001b90:	4b14      	ldr	r3, [pc, #80]	; (8001be4 <MX_CAN1_Init+0x64>)
 8001b92:	2200      	movs	r2, #0
 8001b94:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8001b96:	4b13      	ldr	r3, [pc, #76]	; (8001be4 <MX_CAN1_Init+0x64>)
 8001b98:	2200      	movs	r2, #0
 8001b9a:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_10TQ;
 8001b9c:	4b11      	ldr	r3, [pc, #68]	; (8001be4 <MX_CAN1_Init+0x64>)
 8001b9e:	f44f 2210 	mov.w	r2, #589824	; 0x90000
 8001ba2:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_3TQ;
 8001ba4:	4b0f      	ldr	r3, [pc, #60]	; (8001be4 <MX_CAN1_Init+0x64>)
 8001ba6:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8001baa:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8001bac:	4b0d      	ldr	r3, [pc, #52]	; (8001be4 <MX_CAN1_Init+0x64>)
 8001bae:	2200      	movs	r2, #0
 8001bb0:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = ENABLE;
 8001bb2:	4b0c      	ldr	r3, [pc, #48]	; (8001be4 <MX_CAN1_Init+0x64>)
 8001bb4:	2201      	movs	r2, #1
 8001bb6:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8001bb8:	4b0a      	ldr	r3, [pc, #40]	; (8001be4 <MX_CAN1_Init+0x64>)
 8001bba:	2200      	movs	r2, #0
 8001bbc:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8001bbe:	4b09      	ldr	r3, [pc, #36]	; (8001be4 <MX_CAN1_Init+0x64>)
 8001bc0:	2200      	movs	r2, #0
 8001bc2:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8001bc4:	4b07      	ldr	r3, [pc, #28]	; (8001be4 <MX_CAN1_Init+0x64>)
 8001bc6:	2200      	movs	r2, #0
 8001bc8:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8001bca:	4b06      	ldr	r3, [pc, #24]	; (8001be4 <MX_CAN1_Init+0x64>)
 8001bcc:	2200      	movs	r2, #0
 8001bce:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8001bd0:	4804      	ldr	r0, [pc, #16]	; (8001be4 <MX_CAN1_Init+0x64>)
 8001bd2:	f001 fa1f 	bl	8003014 <HAL_CAN_Init>
 8001bd6:	4603      	mov	r3, r0
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	d001      	beq.n	8001be0 <MX_CAN1_Init+0x60>
  {
    Error_Handler();
 8001bdc:	f000 fada 	bl	8002194 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 8001be0:	bf00      	nop
 8001be2:	bd80      	pop	{r7, pc}
 8001be4:	20004b38 	.word	0x20004b38
 8001be8:	40006400 	.word	0x40006400

08001bec <MX_CAN2_Init>:
/* CAN2 init function */
void MX_CAN2_Init(void)
{
 8001bec:	b580      	push	{r7, lr}
 8001bee:	af00      	add	r7, sp, #0
  /* USER CODE END CAN2_Init 0 */

  /* USER CODE BEGIN CAN2_Init 1 */

  /* USER CODE END CAN2_Init 1 */
  hcan2.Instance = CAN2;
 8001bf0:	4b17      	ldr	r3, [pc, #92]	; (8001c50 <MX_CAN2_Init+0x64>)
 8001bf2:	4a18      	ldr	r2, [pc, #96]	; (8001c54 <MX_CAN2_Init+0x68>)
 8001bf4:	601a      	str	r2, [r3, #0]
  hcan2.Init.Prescaler = 3;
 8001bf6:	4b16      	ldr	r3, [pc, #88]	; (8001c50 <MX_CAN2_Init+0x64>)
 8001bf8:	2203      	movs	r2, #3
 8001bfa:	605a      	str	r2, [r3, #4]
  hcan2.Init.Mode = CAN_MODE_NORMAL;
 8001bfc:	4b14      	ldr	r3, [pc, #80]	; (8001c50 <MX_CAN2_Init+0x64>)
 8001bfe:	2200      	movs	r2, #0
 8001c00:	609a      	str	r2, [r3, #8]
  hcan2.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8001c02:	4b13      	ldr	r3, [pc, #76]	; (8001c50 <MX_CAN2_Init+0x64>)
 8001c04:	2200      	movs	r2, #0
 8001c06:	60da      	str	r2, [r3, #12]
  hcan2.Init.TimeSeg1 = CAN_BS1_10TQ;
 8001c08:	4b11      	ldr	r3, [pc, #68]	; (8001c50 <MX_CAN2_Init+0x64>)
 8001c0a:	f44f 2210 	mov.w	r2, #589824	; 0x90000
 8001c0e:	611a      	str	r2, [r3, #16]
  hcan2.Init.TimeSeg2 = CAN_BS2_3TQ;
 8001c10:	4b0f      	ldr	r3, [pc, #60]	; (8001c50 <MX_CAN2_Init+0x64>)
 8001c12:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8001c16:	615a      	str	r2, [r3, #20]
  hcan2.Init.TimeTriggeredMode = DISABLE;
 8001c18:	4b0d      	ldr	r3, [pc, #52]	; (8001c50 <MX_CAN2_Init+0x64>)
 8001c1a:	2200      	movs	r2, #0
 8001c1c:	761a      	strb	r2, [r3, #24]
  hcan2.Init.AutoBusOff = DISABLE;
 8001c1e:	4b0c      	ldr	r3, [pc, #48]	; (8001c50 <MX_CAN2_Init+0x64>)
 8001c20:	2200      	movs	r2, #0
 8001c22:	765a      	strb	r2, [r3, #25]
  hcan2.Init.AutoWakeUp = DISABLE;
 8001c24:	4b0a      	ldr	r3, [pc, #40]	; (8001c50 <MX_CAN2_Init+0x64>)
 8001c26:	2200      	movs	r2, #0
 8001c28:	769a      	strb	r2, [r3, #26]
  hcan2.Init.AutoRetransmission = DISABLE;
 8001c2a:	4b09      	ldr	r3, [pc, #36]	; (8001c50 <MX_CAN2_Init+0x64>)
 8001c2c:	2200      	movs	r2, #0
 8001c2e:	76da      	strb	r2, [r3, #27]
  hcan2.Init.ReceiveFifoLocked = DISABLE;
 8001c30:	4b07      	ldr	r3, [pc, #28]	; (8001c50 <MX_CAN2_Init+0x64>)
 8001c32:	2200      	movs	r2, #0
 8001c34:	771a      	strb	r2, [r3, #28]
  hcan2.Init.TransmitFifoPriority = DISABLE;
 8001c36:	4b06      	ldr	r3, [pc, #24]	; (8001c50 <MX_CAN2_Init+0x64>)
 8001c38:	2200      	movs	r2, #0
 8001c3a:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan2) != HAL_OK)
 8001c3c:	4804      	ldr	r0, [pc, #16]	; (8001c50 <MX_CAN2_Init+0x64>)
 8001c3e:	f001 f9e9 	bl	8003014 <HAL_CAN_Init>
 8001c42:	4603      	mov	r3, r0
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	d001      	beq.n	8001c4c <MX_CAN2_Init+0x60>
  {
    Error_Handler();
 8001c48:	f000 faa4 	bl	8002194 <Error_Handler>
  }
  /* USER CODE BEGIN CAN2_Init 2 */

  /* USER CODE END CAN2_Init 2 */

}
 8001c4c:	bf00      	nop
 8001c4e:	bd80      	pop	{r7, pc}
 8001c50:	20004b10 	.word	0x20004b10
 8001c54:	40006800 	.word	0x40006800

08001c58 <HAL_CAN_MspInit>:

static uint32_t HAL_RCC_CAN1_CLK_ENABLED=0;

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 8001c58:	b580      	push	{r7, lr}
 8001c5a:	b08c      	sub	sp, #48	; 0x30
 8001c5c:	af00      	add	r7, sp, #0
 8001c5e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c60:	f107 031c 	add.w	r3, r7, #28
 8001c64:	2200      	movs	r2, #0
 8001c66:	601a      	str	r2, [r3, #0]
 8001c68:	605a      	str	r2, [r3, #4]
 8001c6a:	609a      	str	r2, [r3, #8]
 8001c6c:	60da      	str	r2, [r3, #12]
 8001c6e:	611a      	str	r2, [r3, #16]
  if(canHandle->Instance==CAN1)
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	4a52      	ldr	r2, [pc, #328]	; (8001dc0 <HAL_CAN_MspInit+0x168>)
 8001c76:	4293      	cmp	r3, r2
 8001c78:	d145      	bne.n	8001d06 <HAL_CAN_MspInit+0xae>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    HAL_RCC_CAN1_CLK_ENABLED++;
 8001c7a:	4b52      	ldr	r3, [pc, #328]	; (8001dc4 <HAL_CAN_MspInit+0x16c>)
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	3301      	adds	r3, #1
 8001c80:	4a50      	ldr	r2, [pc, #320]	; (8001dc4 <HAL_CAN_MspInit+0x16c>)
 8001c82:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 8001c84:	4b4f      	ldr	r3, [pc, #316]	; (8001dc4 <HAL_CAN_MspInit+0x16c>)
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	2b01      	cmp	r3, #1
 8001c8a:	d10d      	bne.n	8001ca8 <HAL_CAN_MspInit+0x50>
      __HAL_RCC_CAN1_CLK_ENABLE();
 8001c8c:	2300      	movs	r3, #0
 8001c8e:	61bb      	str	r3, [r7, #24]
 8001c90:	4b4d      	ldr	r3, [pc, #308]	; (8001dc8 <HAL_CAN_MspInit+0x170>)
 8001c92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c94:	4a4c      	ldr	r2, [pc, #304]	; (8001dc8 <HAL_CAN_MspInit+0x170>)
 8001c96:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001c9a:	6413      	str	r3, [r2, #64]	; 0x40
 8001c9c:	4b4a      	ldr	r3, [pc, #296]	; (8001dc8 <HAL_CAN_MspInit+0x170>)
 8001c9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ca0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ca4:	61bb      	str	r3, [r7, #24]
 8001ca6:	69bb      	ldr	r3, [r7, #24]
    }

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001ca8:	2300      	movs	r3, #0
 8001caa:	617b      	str	r3, [r7, #20]
 8001cac:	4b46      	ldr	r3, [pc, #280]	; (8001dc8 <HAL_CAN_MspInit+0x170>)
 8001cae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cb0:	4a45      	ldr	r2, [pc, #276]	; (8001dc8 <HAL_CAN_MspInit+0x170>)
 8001cb2:	f043 0308 	orr.w	r3, r3, #8
 8001cb6:	6313      	str	r3, [r2, #48]	; 0x30
 8001cb8:	4b43      	ldr	r3, [pc, #268]	; (8001dc8 <HAL_CAN_MspInit+0x170>)
 8001cba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cbc:	f003 0308 	and.w	r3, r3, #8
 8001cc0:	617b      	str	r3, [r7, #20]
 8001cc2:	697b      	ldr	r3, [r7, #20]
    /**CAN1 GPIO Configuration
    PD0     ------> CAN1_RX
    PD1     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001cc4:	2303      	movs	r3, #3
 8001cc6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cc8:	2302      	movs	r3, #2
 8001cca:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ccc:	2300      	movs	r3, #0
 8001cce:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001cd0:	2303      	movs	r3, #3
 8001cd2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8001cd4:	2309      	movs	r3, #9
 8001cd6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001cd8:	f107 031c 	add.w	r3, r7, #28
 8001cdc:	4619      	mov	r1, r3
 8001cde:	483b      	ldr	r0, [pc, #236]	; (8001dcc <HAL_CAN_MspInit+0x174>)
 8001ce0:	f002 fb7e 	bl	80043e0 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_TX_IRQn, 5, 0);
 8001ce4:	2200      	movs	r2, #0
 8001ce6:	2105      	movs	r1, #5
 8001ce8:	2013      	movs	r0, #19
 8001cea:	f001 ffd3 	bl	8003c94 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_TX_IRQn);
 8001cee:	2013      	movs	r0, #19
 8001cf0:	f001 ffec 	bl	8003ccc <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 5, 0);
 8001cf4:	2200      	movs	r2, #0
 8001cf6:	2105      	movs	r1, #5
 8001cf8:	2014      	movs	r0, #20
 8001cfa:	f001 ffcb 	bl	8003c94 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8001cfe:	2014      	movs	r0, #20
 8001d00:	f001 ffe4 	bl	8003ccc <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(CAN2_RX0_IRQn);
  /* USER CODE BEGIN CAN2_MspInit 1 */

  /* USER CODE END CAN2_MspInit 1 */
  }
}
 8001d04:	e058      	b.n	8001db8 <HAL_CAN_MspInit+0x160>
  else if(canHandle->Instance==CAN2)
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	4a31      	ldr	r2, [pc, #196]	; (8001dd0 <HAL_CAN_MspInit+0x178>)
 8001d0c:	4293      	cmp	r3, r2
 8001d0e:	d153      	bne.n	8001db8 <HAL_CAN_MspInit+0x160>
    __HAL_RCC_CAN2_CLK_ENABLE();
 8001d10:	2300      	movs	r3, #0
 8001d12:	613b      	str	r3, [r7, #16]
 8001d14:	4b2c      	ldr	r3, [pc, #176]	; (8001dc8 <HAL_CAN_MspInit+0x170>)
 8001d16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d18:	4a2b      	ldr	r2, [pc, #172]	; (8001dc8 <HAL_CAN_MspInit+0x170>)
 8001d1a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8001d1e:	6413      	str	r3, [r2, #64]	; 0x40
 8001d20:	4b29      	ldr	r3, [pc, #164]	; (8001dc8 <HAL_CAN_MspInit+0x170>)
 8001d22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d24:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001d28:	613b      	str	r3, [r7, #16]
 8001d2a:	693b      	ldr	r3, [r7, #16]
    HAL_RCC_CAN1_CLK_ENABLED++;
 8001d2c:	4b25      	ldr	r3, [pc, #148]	; (8001dc4 <HAL_CAN_MspInit+0x16c>)
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	3301      	adds	r3, #1
 8001d32:	4a24      	ldr	r2, [pc, #144]	; (8001dc4 <HAL_CAN_MspInit+0x16c>)
 8001d34:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 8001d36:	4b23      	ldr	r3, [pc, #140]	; (8001dc4 <HAL_CAN_MspInit+0x16c>)
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	2b01      	cmp	r3, #1
 8001d3c:	d10d      	bne.n	8001d5a <HAL_CAN_MspInit+0x102>
      __HAL_RCC_CAN1_CLK_ENABLE();
 8001d3e:	2300      	movs	r3, #0
 8001d40:	60fb      	str	r3, [r7, #12]
 8001d42:	4b21      	ldr	r3, [pc, #132]	; (8001dc8 <HAL_CAN_MspInit+0x170>)
 8001d44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d46:	4a20      	ldr	r2, [pc, #128]	; (8001dc8 <HAL_CAN_MspInit+0x170>)
 8001d48:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001d4c:	6413      	str	r3, [r2, #64]	; 0x40
 8001d4e:	4b1e      	ldr	r3, [pc, #120]	; (8001dc8 <HAL_CAN_MspInit+0x170>)
 8001d50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d52:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d56:	60fb      	str	r3, [r7, #12]
 8001d58:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d5a:	2300      	movs	r3, #0
 8001d5c:	60bb      	str	r3, [r7, #8]
 8001d5e:	4b1a      	ldr	r3, [pc, #104]	; (8001dc8 <HAL_CAN_MspInit+0x170>)
 8001d60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d62:	4a19      	ldr	r2, [pc, #100]	; (8001dc8 <HAL_CAN_MspInit+0x170>)
 8001d64:	f043 0302 	orr.w	r3, r3, #2
 8001d68:	6313      	str	r3, [r2, #48]	; 0x30
 8001d6a:	4b17      	ldr	r3, [pc, #92]	; (8001dc8 <HAL_CAN_MspInit+0x170>)
 8001d6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d6e:	f003 0302 	and.w	r3, r3, #2
 8001d72:	60bb      	str	r3, [r7, #8]
 8001d74:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_13;
 8001d76:	f242 0320 	movw	r3, #8224	; 0x2020
 8001d7a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d7c:	2302      	movs	r3, #2
 8001d7e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d80:	2300      	movs	r3, #0
 8001d82:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d84:	2303      	movs	r3, #3
 8001d86:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN2;
 8001d88:	2309      	movs	r3, #9
 8001d8a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d8c:	f107 031c 	add.w	r3, r7, #28
 8001d90:	4619      	mov	r1, r3
 8001d92:	4810      	ldr	r0, [pc, #64]	; (8001dd4 <HAL_CAN_MspInit+0x17c>)
 8001d94:	f002 fb24 	bl	80043e0 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(CAN2_TX_IRQn, 5, 0);
 8001d98:	2200      	movs	r2, #0
 8001d9a:	2105      	movs	r1, #5
 8001d9c:	203f      	movs	r0, #63	; 0x3f
 8001d9e:	f001 ff79 	bl	8003c94 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN2_TX_IRQn);
 8001da2:	203f      	movs	r0, #63	; 0x3f
 8001da4:	f001 ff92 	bl	8003ccc <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN2_RX0_IRQn, 5, 0);
 8001da8:	2200      	movs	r2, #0
 8001daa:	2105      	movs	r1, #5
 8001dac:	2040      	movs	r0, #64	; 0x40
 8001dae:	f001 ff71 	bl	8003c94 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN2_RX0_IRQn);
 8001db2:	2040      	movs	r0, #64	; 0x40
 8001db4:	f001 ff8a 	bl	8003ccc <HAL_NVIC_EnableIRQ>
}
 8001db8:	bf00      	nop
 8001dba:	3730      	adds	r7, #48	; 0x30
 8001dbc:	46bd      	mov	sp, r7
 8001dbe:	bd80      	pop	{r7, pc}
 8001dc0:	40006400 	.word	0x40006400
 8001dc4:	20000104 	.word	0x20000104
 8001dc8:	40023800 	.word	0x40023800
 8001dcc:	40020c00 	.word	0x40020c00
 8001dd0:	40006800 	.word	0x40006800
 8001dd4:	40020400 	.word	0x40020400

08001dd8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001dd8:	b580      	push	{r7, lr}
 8001dda:	b082      	sub	sp, #8
 8001ddc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001dde:	2300      	movs	r3, #0
 8001de0:	607b      	str	r3, [r7, #4]
 8001de2:	4b27      	ldr	r3, [pc, #156]	; (8001e80 <MX_DMA_Init+0xa8>)
 8001de4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001de6:	4a26      	ldr	r2, [pc, #152]	; (8001e80 <MX_DMA_Init+0xa8>)
 8001de8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001dec:	6313      	str	r3, [r2, #48]	; 0x30
 8001dee:	4b24      	ldr	r3, [pc, #144]	; (8001e80 <MX_DMA_Init+0xa8>)
 8001df0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001df2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001df6:	607b      	str	r3, [r7, #4]
 8001df8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001dfa:	2300      	movs	r3, #0
 8001dfc:	603b      	str	r3, [r7, #0]
 8001dfe:	4b20      	ldr	r3, [pc, #128]	; (8001e80 <MX_DMA_Init+0xa8>)
 8001e00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e02:	4a1f      	ldr	r2, [pc, #124]	; (8001e80 <MX_DMA_Init+0xa8>)
 8001e04:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001e08:	6313      	str	r3, [r2, #48]	; 0x30
 8001e0a:	4b1d      	ldr	r3, [pc, #116]	; (8001e80 <MX_DMA_Init+0xa8>)
 8001e0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e0e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001e12:	603b      	str	r3, [r7, #0]
 8001e14:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 5, 0);
 8001e16:	2200      	movs	r2, #0
 8001e18:	2105      	movs	r1, #5
 8001e1a:	200c      	movs	r0, #12
 8001e1c:	f001 ff3a 	bl	8003c94 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8001e20:	200c      	movs	r0, #12
 8001e22:	f001 ff53 	bl	8003ccc <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 5, 0);
 8001e26:	2200      	movs	r2, #0
 8001e28:	2105      	movs	r1, #5
 8001e2a:	2039      	movs	r0, #57	; 0x39
 8001e2c:	f001 ff32 	bl	8003c94 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 8001e30:	2039      	movs	r0, #57	; 0x39
 8001e32:	f001 ff4b 	bl	8003ccc <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 5, 0);
 8001e36:	2200      	movs	r2, #0
 8001e38:	2105      	movs	r1, #5
 8001e3a:	203a      	movs	r0, #58	; 0x3a
 8001e3c:	f001 ff2a 	bl	8003c94 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8001e40:	203a      	movs	r0, #58	; 0x3a
 8001e42:	f001 ff43 	bl	8003ccc <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 5, 0);
 8001e46:	2200      	movs	r2, #0
 8001e48:	2105      	movs	r1, #5
 8001e4a:	203b      	movs	r0, #59	; 0x3b
 8001e4c:	f001 ff22 	bl	8003c94 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 8001e50:	203b      	movs	r0, #59	; 0x3b
 8001e52:	f001 ff3b 	bl	8003ccc <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 5, 0);
 8001e56:	2200      	movs	r2, #0
 8001e58:	2105      	movs	r1, #5
 8001e5a:	2045      	movs	r0, #69	; 0x45
 8001e5c:	f001 ff1a 	bl	8003c94 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 8001e60:	2045      	movs	r0, #69	; 0x45
 8001e62:	f001 ff33 	bl	8003ccc <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream7_IRQn, 5, 0);
 8001e66:	2200      	movs	r2, #0
 8001e68:	2105      	movs	r1, #5
 8001e6a:	2046      	movs	r0, #70	; 0x46
 8001e6c:	f001 ff12 	bl	8003c94 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream7_IRQn);
 8001e70:	2046      	movs	r0, #70	; 0x46
 8001e72:	f001 ff2b 	bl	8003ccc <HAL_NVIC_EnableIRQ>

}
 8001e76:	bf00      	nop
 8001e78:	3708      	adds	r7, #8
 8001e7a:	46bd      	mov	sp, r7
 8001e7c:	bd80      	pop	{r7, pc}
 8001e7e:	bf00      	nop
 8001e80:	40023800 	.word	0x40023800

08001e84 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8001e84:	b580      	push	{r7, lr}
 8001e86:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of ChassisTask */
  ChassisTaskHandle = osThreadNew(chassis_task, NULL, &ChassisTask_attributes);
 8001e88:	4a08      	ldr	r2, [pc, #32]	; (8001eac <MX_FREERTOS_Init+0x28>)
 8001e8a:	2100      	movs	r1, #0
 8001e8c:	4808      	ldr	r0, [pc, #32]	; (8001eb0 <MX_FREERTOS_Init+0x2c>)
 8001e8e:	f008 f91d 	bl	800a0cc <osThreadNew>
 8001e92:	4603      	mov	r3, r0
 8001e94:	4a07      	ldr	r2, [pc, #28]	; (8001eb4 <MX_FREERTOS_Init+0x30>)
 8001e96:	6013      	str	r3, [r2, #0]

  /* creation of IMUTask */
  IMUTaskHandle = osThreadNew(INS_task1, NULL, &IMUTask_attributes);
 8001e98:	4a07      	ldr	r2, [pc, #28]	; (8001eb8 <MX_FREERTOS_Init+0x34>)
 8001e9a:	2100      	movs	r1, #0
 8001e9c:	4807      	ldr	r0, [pc, #28]	; (8001ebc <MX_FREERTOS_Init+0x38>)
 8001e9e:	f008 f915 	bl	800a0cc <osThreadNew>
 8001ea2:	4603      	mov	r3, r0
 8001ea4:	4a06      	ldr	r2, [pc, #24]	; (8001ec0 <MX_FREERTOS_Init+0x3c>)
 8001ea6:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 8001ea8:	bf00      	nop
 8001eaa:	bd80      	pop	{r7, pc}
 8001eac:	0800f540 	.word	0x0800f540
 8001eb0:	08000ead 	.word	0x08000ead
 8001eb4:	20004b64 	.word	0x20004b64
 8001eb8:	0800f564 	.word	0x0800f564
 8001ebc:	08001ec5 	.word	0x08001ec5
 8001ec0:	20004b60 	.word	0x20004b60

08001ec4 <INS_task1>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_INS_task1 */
__weak void INS_task1(void *argument)
{
 8001ec4:	b580      	push	{r7, lr}
 8001ec6:	b082      	sub	sp, #8
 8001ec8:	af00      	add	r7, sp, #0
 8001eca:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN INS_task1 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8001ecc:	2001      	movs	r0, #1
 8001ece:	f008 f98f 	bl	800a1f0 <osDelay>
 8001ed2:	e7fb      	b.n	8001ecc <INS_task1+0x8>

08001ed4 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001ed4:	b580      	push	{r7, lr}
 8001ed6:	b08c      	sub	sp, #48	; 0x30
 8001ed8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001eda:	f107 031c 	add.w	r3, r7, #28
 8001ede:	2200      	movs	r2, #0
 8001ee0:	601a      	str	r2, [r3, #0]
 8001ee2:	605a      	str	r2, [r3, #4]
 8001ee4:	609a      	str	r2, [r3, #8]
 8001ee6:	60da      	str	r2, [r3, #12]
 8001ee8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001eea:	2300      	movs	r3, #0
 8001eec:	61bb      	str	r3, [r7, #24]
 8001eee:	4b46      	ldr	r3, [pc, #280]	; (8002008 <MX_GPIO_Init+0x134>)
 8001ef0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ef2:	4a45      	ldr	r2, [pc, #276]	; (8002008 <MX_GPIO_Init+0x134>)
 8001ef4:	f043 0302 	orr.w	r3, r3, #2
 8001ef8:	6313      	str	r3, [r2, #48]	; 0x30
 8001efa:	4b43      	ldr	r3, [pc, #268]	; (8002008 <MX_GPIO_Init+0x134>)
 8001efc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001efe:	f003 0302 	and.w	r3, r3, #2
 8001f02:	61bb      	str	r3, [r7, #24]
 8001f04:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001f06:	2300      	movs	r3, #0
 8001f08:	617b      	str	r3, [r7, #20]
 8001f0a:	4b3f      	ldr	r3, [pc, #252]	; (8002008 <MX_GPIO_Init+0x134>)
 8001f0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f0e:	4a3e      	ldr	r2, [pc, #248]	; (8002008 <MX_GPIO_Init+0x134>)
 8001f10:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001f14:	6313      	str	r3, [r2, #48]	; 0x30
 8001f16:	4b3c      	ldr	r3, [pc, #240]	; (8002008 <MX_GPIO_Init+0x134>)
 8001f18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f1a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001f1e:	617b      	str	r3, [r7, #20]
 8001f20:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f22:	2300      	movs	r3, #0
 8001f24:	613b      	str	r3, [r7, #16]
 8001f26:	4b38      	ldr	r3, [pc, #224]	; (8002008 <MX_GPIO_Init+0x134>)
 8001f28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f2a:	4a37      	ldr	r2, [pc, #220]	; (8002008 <MX_GPIO_Init+0x134>)
 8001f2c:	f043 0301 	orr.w	r3, r3, #1
 8001f30:	6313      	str	r3, [r2, #48]	; 0x30
 8001f32:	4b35      	ldr	r3, [pc, #212]	; (8002008 <MX_GPIO_Init+0x134>)
 8001f34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f36:	f003 0301 	and.w	r3, r3, #1
 8001f3a:	613b      	str	r3, [r7, #16]
 8001f3c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001f3e:	2300      	movs	r3, #0
 8001f40:	60fb      	str	r3, [r7, #12]
 8001f42:	4b31      	ldr	r3, [pc, #196]	; (8002008 <MX_GPIO_Init+0x134>)
 8001f44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f46:	4a30      	ldr	r2, [pc, #192]	; (8002008 <MX_GPIO_Init+0x134>)
 8001f48:	f043 0308 	orr.w	r3, r3, #8
 8001f4c:	6313      	str	r3, [r2, #48]	; 0x30
 8001f4e:	4b2e      	ldr	r3, [pc, #184]	; (8002008 <MX_GPIO_Init+0x134>)
 8001f50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f52:	f003 0308 	and.w	r3, r3, #8
 8001f56:	60fb      	str	r3, [r7, #12]
 8001f58:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001f5a:	2300      	movs	r3, #0
 8001f5c:	60bb      	str	r3, [r7, #8]
 8001f5e:	4b2a      	ldr	r3, [pc, #168]	; (8002008 <MX_GPIO_Init+0x134>)
 8001f60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f62:	4a29      	ldr	r2, [pc, #164]	; (8002008 <MX_GPIO_Init+0x134>)
 8001f64:	f043 0304 	orr.w	r3, r3, #4
 8001f68:	6313      	str	r3, [r2, #48]	; 0x30
 8001f6a:	4b27      	ldr	r3, [pc, #156]	; (8002008 <MX_GPIO_Init+0x134>)
 8001f6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f6e:	f003 0304 	and.w	r3, r3, #4
 8001f72:	60bb      	str	r3, [r7, #8]
 8001f74:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001f76:	2300      	movs	r3, #0
 8001f78:	607b      	str	r3, [r7, #4]
 8001f7a:	4b23      	ldr	r3, [pc, #140]	; (8002008 <MX_GPIO_Init+0x134>)
 8001f7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f7e:	4a22      	ldr	r2, [pc, #136]	; (8002008 <MX_GPIO_Init+0x134>)
 8001f80:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001f84:	6313      	str	r3, [r2, #48]	; 0x30
 8001f86:	4b20      	ldr	r3, [pc, #128]	; (8002008 <MX_GPIO_Init+0x134>)
 8001f88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f8a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f8e:	607b      	str	r3, [r7, #4]
 8001f90:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, GPIO_PIN_RESET);
 8001f92:	2200      	movs	r2, #0
 8001f94:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001f98:	481c      	ldr	r0, [pc, #112]	; (800200c <MX_GPIO_Init+0x138>)
 8001f9a:	f002 fbbd 	bl	8004718 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET);
 8001f9e:	2200      	movs	r2, #0
 8001fa0:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001fa4:	481a      	ldr	r0, [pc, #104]	; (8002010 <MX_GPIO_Init+0x13c>)
 8001fa6:	f002 fbb7 	bl	8004718 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PB8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001faa:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001fae:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001fb0:	2301      	movs	r3, #1
 8001fb2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fb4:	2300      	movs	r3, #0
 8001fb6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001fb8:	2300      	movs	r3, #0
 8001fba:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001fbc:	f107 031c 	add.w	r3, r7, #28
 8001fc0:	4619      	mov	r1, r3
 8001fc2:	4812      	ldr	r0, [pc, #72]	; (800200c <MX_GPIO_Init+0x138>)
 8001fc4:	f002 fa0c 	bl	80043e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001fc8:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001fcc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001fce:	2301      	movs	r3, #1
 8001fd0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fd2:	2300      	movs	r3, #0
 8001fd4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001fd6:	2300      	movs	r3, #0
 8001fd8:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001fda:	f107 031c 	add.w	r3, r7, #28
 8001fde:	4619      	mov	r1, r3
 8001fe0:	480b      	ldr	r0, [pc, #44]	; (8002010 <MX_GPIO_Init+0x13c>)
 8001fe2:	f002 f9fd 	bl	80043e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001fe6:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001fea:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001fec:	2300      	movs	r3, #0
 8001fee:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ff0:	2300      	movs	r3, #0
 8001ff2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001ff4:	f107 031c 	add.w	r3, r7, #28
 8001ff8:	4619      	mov	r1, r3
 8001ffa:	4806      	ldr	r0, [pc, #24]	; (8002014 <MX_GPIO_Init+0x140>)
 8001ffc:	f002 f9f0 	bl	80043e0 <HAL_GPIO_Init>

}
 8002000:	bf00      	nop
 8002002:	3730      	adds	r7, #48	; 0x30
 8002004:	46bd      	mov	sp, r7
 8002006:	bd80      	pop	{r7, pc}
 8002008:	40023800 	.word	0x40023800
 800200c:	40020400 	.word	0x40020400
 8002010:	40020000 	.word	0x40020000
 8002014:	40020800 	.word	0x40020800

08002018 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002018:	b580      	push	{r7, lr}
 800201a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800201c:	f000 ffb8 	bl	8002f90 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002020:	f000 f824 	bl	800206c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002024:	f7ff ff56 	bl	8001ed4 <MX_GPIO_Init>
  MX_DMA_Init();
 8002028:	f7ff fed6 	bl	8001dd8 <MX_DMA_Init>
  MX_CAN1_Init();
 800202c:	f7ff fda8 	bl	8001b80 <MX_CAN1_Init>
  MX_CAN2_Init();
 8002030:	f7ff fddc 	bl	8001bec <MX_CAN2_Init>
  MX_RTC_Init();
 8002034:	f000 f8b4 	bl	80021a0 <MX_RTC_Init>
  MX_TIM4_Init();
 8002038:	f000 fb2c 	bl	8002694 <MX_TIM4_Init>
  MX_TIM5_Init();
 800203c:	f000 fbac 	bl	8002798 <MX_TIM5_Init>
  MX_TIM12_Init();
 8002040:	f000 fc1a 	bl	8002878 <MX_TIM12_Init>
  MX_USART1_UART_Init();
 8002044:	f000 fd5e 	bl	8002b04 <MX_USART1_UART_Init>
  MX_USART3_UART_Init();
 8002048:	f000 fd86 	bl	8002b58 <MX_USART3_UART_Init>
  MX_SPI1_Init();
 800204c:	f000 f8e4 	bl	8002218 <MX_SPI1_Init>
  MX_USART6_UART_Init();
 8002050:	f000 fdac 	bl	8002bac <MX_USART6_UART_Init>
  /* USER CODE BEGIN 2 */
  BSP_CAN_Filtering_Init();
 8002054:	f7ff fc66 	bl	8001924 <BSP_CAN_Filtering_Init>
  remote_control_init();
 8002058:	f7ff fa64 	bl	8001524 <remote_control_init>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();  /* Call init function for freertos objects (in freertos.c) */
 800205c:	f007 ffec 	bl	800a038 <osKernelInitialize>
  MX_FREERTOS_Init();
 8002060:	f7ff ff10 	bl	8001e84 <MX_FREERTOS_Init>
  /* Start scheduler */
  osKernelStart();
 8002064:	f008 f80c 	bl	800a080 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8002068:	e7fe      	b.n	8002068 <main+0x50>
	...

0800206c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800206c:	b580      	push	{r7, lr}
 800206e:	b098      	sub	sp, #96	; 0x60
 8002070:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002072:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002076:	2230      	movs	r2, #48	; 0x30
 8002078:	2100      	movs	r1, #0
 800207a:	4618      	mov	r0, r3
 800207c:	f00a ffae 	bl	800cfdc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002080:	f107 031c 	add.w	r3, r7, #28
 8002084:	2200      	movs	r2, #0
 8002086:	601a      	str	r2, [r3, #0]
 8002088:	605a      	str	r2, [r3, #4]
 800208a:	609a      	str	r2, [r3, #8]
 800208c:	60da      	str	r2, [r3, #12]
 800208e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002090:	f107 030c 	add.w	r3, r7, #12
 8002094:	2200      	movs	r2, #0
 8002096:	601a      	str	r2, [r3, #0]
 8002098:	605a      	str	r2, [r3, #4]
 800209a:	609a      	str	r2, [r3, #8]
 800209c:	60da      	str	r2, [r3, #12]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800209e:	2300      	movs	r3, #0
 80020a0:	60bb      	str	r3, [r7, #8]
 80020a2:	4b31      	ldr	r3, [pc, #196]	; (8002168 <SystemClock_Config+0xfc>)
 80020a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020a6:	4a30      	ldr	r2, [pc, #192]	; (8002168 <SystemClock_Config+0xfc>)
 80020a8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80020ac:	6413      	str	r3, [r2, #64]	; 0x40
 80020ae:	4b2e      	ldr	r3, [pc, #184]	; (8002168 <SystemClock_Config+0xfc>)
 80020b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020b6:	60bb      	str	r3, [r7, #8]
 80020b8:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80020ba:	2300      	movs	r3, #0
 80020bc:	607b      	str	r3, [r7, #4]
 80020be:	4b2b      	ldr	r3, [pc, #172]	; (800216c <SystemClock_Config+0x100>)
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	4a2a      	ldr	r2, [pc, #168]	; (800216c <SystemClock_Config+0x100>)
 80020c4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80020c8:	6013      	str	r3, [r2, #0]
 80020ca:	4b28      	ldr	r3, [pc, #160]	; (800216c <SystemClock_Config+0x100>)
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80020d2:	607b      	str	r3, [r7, #4]
 80020d4:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 80020d6:	2309      	movs	r3, #9
 80020d8:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80020da:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80020de:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80020e0:	2301      	movs	r3, #1
 80020e2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80020e4:	2302      	movs	r3, #2
 80020e6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80020e8:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80020ec:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 6;
 80020ee:	2306      	movs	r3, #6
 80020f0:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 168;
 80020f2:	23a8      	movs	r3, #168	; 0xa8
 80020f4:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80020f6:	2302      	movs	r3, #2
 80020f8:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80020fa:	2307      	movs	r3, #7
 80020fc:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80020fe:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002102:	4618      	mov	r0, r3
 8002104:	f003 fa9a 	bl	800563c <HAL_RCC_OscConfig>
 8002108:	4603      	mov	r3, r0
 800210a:	2b00      	cmp	r3, #0
 800210c:	d001      	beq.n	8002112 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 800210e:	f000 f841 	bl	8002194 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002112:	230f      	movs	r3, #15
 8002114:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002116:	2302      	movs	r3, #2
 8002118:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800211a:	2300      	movs	r3, #0
 800211c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800211e:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8002122:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8002124:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002128:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800212a:	f107 031c 	add.w	r3, r7, #28
 800212e:	2105      	movs	r1, #5
 8002130:	4618      	mov	r0, r3
 8002132:	f003 fcfb 	bl	8005b2c <HAL_RCC_ClockConfig>
 8002136:	4603      	mov	r3, r0
 8002138:	2b00      	cmp	r3, #0
 800213a:	d001      	beq.n	8002140 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 800213c:	f000 f82a 	bl	8002194 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8002140:	2302      	movs	r3, #2
 8002142:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8002144:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002148:	61bb      	str	r3, [r7, #24]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800214a:	f107 030c 	add.w	r3, r7, #12
 800214e:	4618      	mov	r0, r3
 8002150:	f003 feee 	bl	8005f30 <HAL_RCCEx_PeriphCLKConfig>
 8002154:	4603      	mov	r3, r0
 8002156:	2b00      	cmp	r3, #0
 8002158:	d001      	beq.n	800215e <SystemClock_Config+0xf2>
  {
    Error_Handler();
 800215a:	f000 f81b 	bl	8002194 <Error_Handler>
  }
}
 800215e:	bf00      	nop
 8002160:	3760      	adds	r7, #96	; 0x60
 8002162:	46bd      	mov	sp, r7
 8002164:	bd80      	pop	{r7, pc}
 8002166:	bf00      	nop
 8002168:	40023800 	.word	0x40023800
 800216c:	40007000 	.word	0x40007000

08002170 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002170:	b580      	push	{r7, lr}
 8002172:	b082      	sub	sp, #8
 8002174:	af00      	add	r7, sp, #0
 8002176:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM3) {
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	4a04      	ldr	r2, [pc, #16]	; (8002190 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800217e:	4293      	cmp	r3, r2
 8002180:	d101      	bne.n	8002186 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8002182:	f000 ff27 	bl	8002fd4 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8002186:	bf00      	nop
 8002188:	3708      	adds	r7, #8
 800218a:	46bd      	mov	sp, r7
 800218c:	bd80      	pop	{r7, pc}
 800218e:	bf00      	nop
 8002190:	40000400 	.word	0x40000400

08002194 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002194:	b480      	push	{r7}
 8002196:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002198:	b672      	cpsid	i
}
 800219a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800219c:	e7fe      	b.n	800219c <Error_Handler+0x8>
	...

080021a0 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 80021a0:	b580      	push	{r7, lr}
 80021a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80021a4:	4b0f      	ldr	r3, [pc, #60]	; (80021e4 <MX_RTC_Init+0x44>)
 80021a6:	4a10      	ldr	r2, [pc, #64]	; (80021e8 <MX_RTC_Init+0x48>)
 80021a8:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80021aa:	4b0e      	ldr	r3, [pc, #56]	; (80021e4 <MX_RTC_Init+0x44>)
 80021ac:	2200      	movs	r2, #0
 80021ae:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 124;
 80021b0:	4b0c      	ldr	r3, [pc, #48]	; (80021e4 <MX_RTC_Init+0x44>)
 80021b2:	227c      	movs	r2, #124	; 0x7c
 80021b4:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 3199;
 80021b6:	4b0b      	ldr	r3, [pc, #44]	; (80021e4 <MX_RTC_Init+0x44>)
 80021b8:	f640 427f 	movw	r2, #3199	; 0xc7f
 80021bc:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80021be:	4b09      	ldr	r3, [pc, #36]	; (80021e4 <MX_RTC_Init+0x44>)
 80021c0:	2200      	movs	r2, #0
 80021c2:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80021c4:	4b07      	ldr	r3, [pc, #28]	; (80021e4 <MX_RTC_Init+0x44>)
 80021c6:	2200      	movs	r2, #0
 80021c8:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80021ca:	4b06      	ldr	r3, [pc, #24]	; (80021e4 <MX_RTC_Init+0x44>)
 80021cc:	2200      	movs	r2, #0
 80021ce:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80021d0:	4804      	ldr	r0, [pc, #16]	; (80021e4 <MX_RTC_Init+0x44>)
 80021d2:	f003 ff8f 	bl	80060f4 <HAL_RTC_Init>
 80021d6:	4603      	mov	r3, r0
 80021d8:	2b00      	cmp	r3, #0
 80021da:	d001      	beq.n	80021e0 <MX_RTC_Init+0x40>
  {
    Error_Handler();
 80021dc:	f7ff ffda 	bl	8002194 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 80021e0:	bf00      	nop
 80021e2:	bd80      	pop	{r7, pc}
 80021e4:	20004b68 	.word	0x20004b68
 80021e8:	40002800 	.word	0x40002800

080021ec <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 80021ec:	b480      	push	{r7}
 80021ee:	b083      	sub	sp, #12
 80021f0:	af00      	add	r7, sp, #0
 80021f2:	6078      	str	r0, [r7, #4]

  if(rtcHandle->Instance==RTC)
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	4a05      	ldr	r2, [pc, #20]	; (8002210 <HAL_RTC_MspInit+0x24>)
 80021fa:	4293      	cmp	r3, r2
 80021fc:	d102      	bne.n	8002204 <HAL_RTC_MspInit+0x18>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 80021fe:	4b05      	ldr	r3, [pc, #20]	; (8002214 <HAL_RTC_MspInit+0x28>)
 8002200:	2201      	movs	r2, #1
 8002202:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8002204:	bf00      	nop
 8002206:	370c      	adds	r7, #12
 8002208:	46bd      	mov	sp, r7
 800220a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800220e:	4770      	bx	lr
 8002210:	40002800 	.word	0x40002800
 8002214:	42470e3c 	.word	0x42470e3c

08002218 <MX_SPI1_Init>:
DMA_HandleTypeDef hdma_spi1_rx;
DMA_HandleTypeDef hdma_spi1_tx;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8002218:	b580      	push	{r7, lr}
 800221a:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 800221c:	4b17      	ldr	r3, [pc, #92]	; (800227c <MX_SPI1_Init+0x64>)
 800221e:	4a18      	ldr	r2, [pc, #96]	; (8002280 <MX_SPI1_Init+0x68>)
 8002220:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8002222:	4b16      	ldr	r3, [pc, #88]	; (800227c <MX_SPI1_Init+0x64>)
 8002224:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002228:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800222a:	4b14      	ldr	r3, [pc, #80]	; (800227c <MX_SPI1_Init+0x64>)
 800222c:	2200      	movs	r2, #0
 800222e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002230:	4b12      	ldr	r3, [pc, #72]	; (800227c <MX_SPI1_Init+0x64>)
 8002232:	2200      	movs	r2, #0
 8002234:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002236:	4b11      	ldr	r3, [pc, #68]	; (800227c <MX_SPI1_Init+0x64>)
 8002238:	2200      	movs	r2, #0
 800223a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800223c:	4b0f      	ldr	r3, [pc, #60]	; (800227c <MX_SPI1_Init+0x64>)
 800223e:	2200      	movs	r2, #0
 8002240:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8002242:	4b0e      	ldr	r3, [pc, #56]	; (800227c <MX_SPI1_Init+0x64>)
 8002244:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002248:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 800224a:	4b0c      	ldr	r3, [pc, #48]	; (800227c <MX_SPI1_Init+0x64>)
 800224c:	2230      	movs	r2, #48	; 0x30
 800224e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002250:	4b0a      	ldr	r3, [pc, #40]	; (800227c <MX_SPI1_Init+0x64>)
 8002252:	2200      	movs	r2, #0
 8002254:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002256:	4b09      	ldr	r3, [pc, #36]	; (800227c <MX_SPI1_Init+0x64>)
 8002258:	2200      	movs	r2, #0
 800225a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800225c:	4b07      	ldr	r3, [pc, #28]	; (800227c <MX_SPI1_Init+0x64>)
 800225e:	2200      	movs	r2, #0
 8002260:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8002262:	4b06      	ldr	r3, [pc, #24]	; (800227c <MX_SPI1_Init+0x64>)
 8002264:	220a      	movs	r2, #10
 8002266:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002268:	4804      	ldr	r0, [pc, #16]	; (800227c <MX_SPI1_Init+0x64>)
 800226a:	f004 f828 	bl	80062be <HAL_SPI_Init>
 800226e:	4603      	mov	r3, r0
 8002270:	2b00      	cmp	r3, #0
 8002272:	d001      	beq.n	8002278 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8002274:	f7ff ff8e 	bl	8002194 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8002278:	bf00      	nop
 800227a:	bd80      	pop	{r7, pc}
 800227c:	20004b88 	.word	0x20004b88
 8002280:	40013000 	.word	0x40013000

08002284 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8002284:	b580      	push	{r7, lr}
 8002286:	b08a      	sub	sp, #40	; 0x28
 8002288:	af00      	add	r7, sp, #0
 800228a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800228c:	f107 0314 	add.w	r3, r7, #20
 8002290:	2200      	movs	r2, #0
 8002292:	601a      	str	r2, [r3, #0]
 8002294:	605a      	str	r2, [r3, #4]
 8002296:	609a      	str	r2, [r3, #8]
 8002298:	60da      	str	r2, [r3, #12]
 800229a:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	4a57      	ldr	r2, [pc, #348]	; (8002400 <HAL_SPI_MspInit+0x17c>)
 80022a2:	4293      	cmp	r3, r2
 80022a4:	f040 80a8 	bne.w	80023f8 <HAL_SPI_MspInit+0x174>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80022a8:	2300      	movs	r3, #0
 80022aa:	613b      	str	r3, [r7, #16]
 80022ac:	4b55      	ldr	r3, [pc, #340]	; (8002404 <HAL_SPI_MspInit+0x180>)
 80022ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022b0:	4a54      	ldr	r2, [pc, #336]	; (8002404 <HAL_SPI_MspInit+0x180>)
 80022b2:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80022b6:	6453      	str	r3, [r2, #68]	; 0x44
 80022b8:	4b52      	ldr	r3, [pc, #328]	; (8002404 <HAL_SPI_MspInit+0x180>)
 80022ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022bc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80022c0:	613b      	str	r3, [r7, #16]
 80022c2:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80022c4:	2300      	movs	r3, #0
 80022c6:	60fb      	str	r3, [r7, #12]
 80022c8:	4b4e      	ldr	r3, [pc, #312]	; (8002404 <HAL_SPI_MspInit+0x180>)
 80022ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022cc:	4a4d      	ldr	r2, [pc, #308]	; (8002404 <HAL_SPI_MspInit+0x180>)
 80022ce:	f043 0302 	orr.w	r3, r3, #2
 80022d2:	6313      	str	r3, [r2, #48]	; 0x30
 80022d4:	4b4b      	ldr	r3, [pc, #300]	; (8002404 <HAL_SPI_MspInit+0x180>)
 80022d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022d8:	f003 0302 	and.w	r3, r3, #2
 80022dc:	60fb      	str	r3, [r7, #12]
 80022de:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80022e0:	2300      	movs	r3, #0
 80022e2:	60bb      	str	r3, [r7, #8]
 80022e4:	4b47      	ldr	r3, [pc, #284]	; (8002404 <HAL_SPI_MspInit+0x180>)
 80022e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022e8:	4a46      	ldr	r2, [pc, #280]	; (8002404 <HAL_SPI_MspInit+0x180>)
 80022ea:	f043 0301 	orr.w	r3, r3, #1
 80022ee:	6313      	str	r3, [r2, #48]	; 0x30
 80022f0:	4b44      	ldr	r3, [pc, #272]	; (8002404 <HAL_SPI_MspInit+0x180>)
 80022f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022f4:	f003 0301 	and.w	r3, r3, #1
 80022f8:	60bb      	str	r3, [r7, #8]
 80022fa:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PB4     ------> SPI1_MISO
    PB3     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_3;
 80022fc:	2318      	movs	r3, #24
 80022fe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002300:	2302      	movs	r3, #2
 8002302:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002304:	2300      	movs	r3, #0
 8002306:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002308:	2303      	movs	r3, #3
 800230a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800230c:	2305      	movs	r3, #5
 800230e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002310:	f107 0314 	add.w	r3, r7, #20
 8002314:	4619      	mov	r1, r3
 8002316:	483c      	ldr	r0, [pc, #240]	; (8002408 <HAL_SPI_MspInit+0x184>)
 8002318:	f002 f862 	bl	80043e0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 800231c:	2380      	movs	r3, #128	; 0x80
 800231e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002320:	2302      	movs	r3, #2
 8002322:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002324:	2300      	movs	r3, #0
 8002326:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002328:	2303      	movs	r3, #3
 800232a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800232c:	2305      	movs	r3, #5
 800232e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002330:	f107 0314 	add.w	r3, r7, #20
 8002334:	4619      	mov	r1, r3
 8002336:	4835      	ldr	r0, [pc, #212]	; (800240c <HAL_SPI_MspInit+0x188>)
 8002338:	f002 f852 	bl	80043e0 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_RX Init */
    hdma_spi1_rx.Instance = DMA2_Stream2;
 800233c:	4b34      	ldr	r3, [pc, #208]	; (8002410 <HAL_SPI_MspInit+0x18c>)
 800233e:	4a35      	ldr	r2, [pc, #212]	; (8002414 <HAL_SPI_MspInit+0x190>)
 8002340:	601a      	str	r2, [r3, #0]
    hdma_spi1_rx.Init.Channel = DMA_CHANNEL_3;
 8002342:	4b33      	ldr	r3, [pc, #204]	; (8002410 <HAL_SPI_MspInit+0x18c>)
 8002344:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 8002348:	605a      	str	r2, [r3, #4]
    hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800234a:	4b31      	ldr	r3, [pc, #196]	; (8002410 <HAL_SPI_MspInit+0x18c>)
 800234c:	2200      	movs	r2, #0
 800234e:	609a      	str	r2, [r3, #8]
    hdma_spi1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002350:	4b2f      	ldr	r3, [pc, #188]	; (8002410 <HAL_SPI_MspInit+0x18c>)
 8002352:	2200      	movs	r2, #0
 8002354:	60da      	str	r2, [r3, #12]
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002356:	4b2e      	ldr	r3, [pc, #184]	; (8002410 <HAL_SPI_MspInit+0x18c>)
 8002358:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800235c:	611a      	str	r2, [r3, #16]
    hdma_spi1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800235e:	4b2c      	ldr	r3, [pc, #176]	; (8002410 <HAL_SPI_MspInit+0x18c>)
 8002360:	2200      	movs	r2, #0
 8002362:	615a      	str	r2, [r3, #20]
    hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002364:	4b2a      	ldr	r3, [pc, #168]	; (8002410 <HAL_SPI_MspInit+0x18c>)
 8002366:	2200      	movs	r2, #0
 8002368:	619a      	str	r2, [r3, #24]
    hdma_spi1_rx.Init.Mode = DMA_NORMAL;
 800236a:	4b29      	ldr	r3, [pc, #164]	; (8002410 <HAL_SPI_MspInit+0x18c>)
 800236c:	2200      	movs	r2, #0
 800236e:	61da      	str	r2, [r3, #28]
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8002370:	4b27      	ldr	r3, [pc, #156]	; (8002410 <HAL_SPI_MspInit+0x18c>)
 8002372:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8002376:	621a      	str	r2, [r3, #32]
    hdma_spi1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002378:	4b25      	ldr	r3, [pc, #148]	; (8002410 <HAL_SPI_MspInit+0x18c>)
 800237a:	2200      	movs	r2, #0
 800237c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 800237e:	4824      	ldr	r0, [pc, #144]	; (8002410 <HAL_SPI_MspInit+0x18c>)
 8002380:	f001 fcb2 	bl	8003ce8 <HAL_DMA_Init>
 8002384:	4603      	mov	r3, r0
 8002386:	2b00      	cmp	r3, #0
 8002388:	d001      	beq.n	800238e <HAL_SPI_MspInit+0x10a>
    {
      Error_Handler();
 800238a:	f7ff ff03 	bl	8002194 <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmarx,hdma_spi1_rx);
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	4a1f      	ldr	r2, [pc, #124]	; (8002410 <HAL_SPI_MspInit+0x18c>)
 8002392:	64da      	str	r2, [r3, #76]	; 0x4c
 8002394:	4a1e      	ldr	r2, [pc, #120]	; (8002410 <HAL_SPI_MspInit+0x18c>)
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	6393      	str	r3, [r2, #56]	; 0x38

    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA2_Stream3;
 800239a:	4b1f      	ldr	r3, [pc, #124]	; (8002418 <HAL_SPI_MspInit+0x194>)
 800239c:	4a1f      	ldr	r2, [pc, #124]	; (800241c <HAL_SPI_MspInit+0x198>)
 800239e:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Channel = DMA_CHANNEL_3;
 80023a0:	4b1d      	ldr	r3, [pc, #116]	; (8002418 <HAL_SPI_MspInit+0x194>)
 80023a2:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 80023a6:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80023a8:	4b1b      	ldr	r3, [pc, #108]	; (8002418 <HAL_SPI_MspInit+0x194>)
 80023aa:	2240      	movs	r2, #64	; 0x40
 80023ac:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80023ae:	4b1a      	ldr	r3, [pc, #104]	; (8002418 <HAL_SPI_MspInit+0x194>)
 80023b0:	2200      	movs	r2, #0
 80023b2:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80023b4:	4b18      	ldr	r3, [pc, #96]	; (8002418 <HAL_SPI_MspInit+0x194>)
 80023b6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80023ba:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80023bc:	4b16      	ldr	r3, [pc, #88]	; (8002418 <HAL_SPI_MspInit+0x194>)
 80023be:	2200      	movs	r2, #0
 80023c0:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80023c2:	4b15      	ldr	r3, [pc, #84]	; (8002418 <HAL_SPI_MspInit+0x194>)
 80023c4:	2200      	movs	r2, #0
 80023c6:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 80023c8:	4b13      	ldr	r3, [pc, #76]	; (8002418 <HAL_SPI_MspInit+0x194>)
 80023ca:	2200      	movs	r2, #0
 80023cc:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_HIGH;
 80023ce:	4b12      	ldr	r3, [pc, #72]	; (8002418 <HAL_SPI_MspInit+0x194>)
 80023d0:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80023d4:	621a      	str	r2, [r3, #32]
    hdma_spi1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80023d6:	4b10      	ldr	r3, [pc, #64]	; (8002418 <HAL_SPI_MspInit+0x194>)
 80023d8:	2200      	movs	r2, #0
 80023da:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 80023dc:	480e      	ldr	r0, [pc, #56]	; (8002418 <HAL_SPI_MspInit+0x194>)
 80023de:	f001 fc83 	bl	8003ce8 <HAL_DMA_Init>
 80023e2:	4603      	mov	r3, r0
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d001      	beq.n	80023ec <HAL_SPI_MspInit+0x168>
    {
      Error_Handler();
 80023e8:	f7ff fed4 	bl	8002194 <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi1_tx);
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	4a0a      	ldr	r2, [pc, #40]	; (8002418 <HAL_SPI_MspInit+0x194>)
 80023f0:	649a      	str	r2, [r3, #72]	; 0x48
 80023f2:	4a09      	ldr	r2, [pc, #36]	; (8002418 <HAL_SPI_MspInit+0x194>)
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 80023f8:	bf00      	nop
 80023fa:	3728      	adds	r7, #40	; 0x28
 80023fc:	46bd      	mov	sp, r7
 80023fe:	bd80      	pop	{r7, pc}
 8002400:	40013000 	.word	0x40013000
 8002404:	40023800 	.word	0x40023800
 8002408:	40020400 	.word	0x40020400
 800240c:	40020000 	.word	0x40020000
 8002410:	20004be0 	.word	0x20004be0
 8002414:	40026440 	.word	0x40026440
 8002418:	20004c40 	.word	0x20004c40
 800241c:	40026458 	.word	0x40026458

08002420 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002420:	b580      	push	{r7, lr}
 8002422:	b082      	sub	sp, #8
 8002424:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002426:	2300      	movs	r3, #0
 8002428:	607b      	str	r3, [r7, #4]
 800242a:	4b12      	ldr	r3, [pc, #72]	; (8002474 <HAL_MspInit+0x54>)
 800242c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800242e:	4a11      	ldr	r2, [pc, #68]	; (8002474 <HAL_MspInit+0x54>)
 8002430:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002434:	6453      	str	r3, [r2, #68]	; 0x44
 8002436:	4b0f      	ldr	r3, [pc, #60]	; (8002474 <HAL_MspInit+0x54>)
 8002438:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800243a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800243e:	607b      	str	r3, [r7, #4]
 8002440:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002442:	2300      	movs	r3, #0
 8002444:	603b      	str	r3, [r7, #0]
 8002446:	4b0b      	ldr	r3, [pc, #44]	; (8002474 <HAL_MspInit+0x54>)
 8002448:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800244a:	4a0a      	ldr	r2, [pc, #40]	; (8002474 <HAL_MspInit+0x54>)
 800244c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002450:	6413      	str	r3, [r2, #64]	; 0x40
 8002452:	4b08      	ldr	r3, [pc, #32]	; (8002474 <HAL_MspInit+0x54>)
 8002454:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002456:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800245a:	603b      	str	r3, [r7, #0]
 800245c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800245e:	2200      	movs	r2, #0
 8002460:	210f      	movs	r1, #15
 8002462:	f06f 0001 	mvn.w	r0, #1
 8002466:	f001 fc15 	bl	8003c94 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800246a:	bf00      	nop
 800246c:	3708      	adds	r7, #8
 800246e:	46bd      	mov	sp, r7
 8002470:	bd80      	pop	{r7, pc}
 8002472:	bf00      	nop
 8002474:	40023800 	.word	0x40023800

08002478 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002478:	b580      	push	{r7, lr}
 800247a:	b08c      	sub	sp, #48	; 0x30
 800247c:	af00      	add	r7, sp, #0
 800247e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8002480:	2300      	movs	r3, #0
 8002482:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8002484:	2300      	movs	r3, #0
 8002486:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM3 IRQ priority */
  HAL_NVIC_SetPriority(TIM3_IRQn, TickPriority ,0);
 8002488:	2200      	movs	r2, #0
 800248a:	6879      	ldr	r1, [r7, #4]
 800248c:	201d      	movs	r0, #29
 800248e:	f001 fc01 	bl	8003c94 <HAL_NVIC_SetPriority>

  /* Enable the TIM3 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8002492:	201d      	movs	r0, #29
 8002494:	f001 fc1a 	bl	8003ccc <HAL_NVIC_EnableIRQ>
  /* Enable TIM3 clock */
  __HAL_RCC_TIM3_CLK_ENABLE();
 8002498:	2300      	movs	r3, #0
 800249a:	60fb      	str	r3, [r7, #12]
 800249c:	4b1f      	ldr	r3, [pc, #124]	; (800251c <HAL_InitTick+0xa4>)
 800249e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024a0:	4a1e      	ldr	r2, [pc, #120]	; (800251c <HAL_InitTick+0xa4>)
 80024a2:	f043 0302 	orr.w	r3, r3, #2
 80024a6:	6413      	str	r3, [r2, #64]	; 0x40
 80024a8:	4b1c      	ldr	r3, [pc, #112]	; (800251c <HAL_InitTick+0xa4>)
 80024aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024ac:	f003 0302 	and.w	r3, r3, #2
 80024b0:	60fb      	str	r3, [r7, #12]
 80024b2:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80024b4:	f107 0210 	add.w	r2, r7, #16
 80024b8:	f107 0314 	add.w	r3, r7, #20
 80024bc:	4611      	mov	r1, r2
 80024be:	4618      	mov	r0, r3
 80024c0:	f003 fd04 	bl	8005ecc <HAL_RCC_GetClockConfig>

  /* Compute TIM3 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 80024c4:	f003 fcda 	bl	8005e7c <HAL_RCC_GetPCLK1Freq>
 80024c8:	4603      	mov	r3, r0
 80024ca:	005b      	lsls	r3, r3, #1
 80024cc:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM3 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80024ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80024d0:	4a13      	ldr	r2, [pc, #76]	; (8002520 <HAL_InitTick+0xa8>)
 80024d2:	fba2 2303 	umull	r2, r3, r2, r3
 80024d6:	0c9b      	lsrs	r3, r3, #18
 80024d8:	3b01      	subs	r3, #1
 80024da:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM3 */
  htim3.Instance = TIM3;
 80024dc:	4b11      	ldr	r3, [pc, #68]	; (8002524 <HAL_InitTick+0xac>)
 80024de:	4a12      	ldr	r2, [pc, #72]	; (8002528 <HAL_InitTick+0xb0>)
 80024e0:	601a      	str	r2, [r3, #0]
  + Period = [(TIM3CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim3.Init.Period = (1000000U / 1000U) - 1U;
 80024e2:	4b10      	ldr	r3, [pc, #64]	; (8002524 <HAL_InitTick+0xac>)
 80024e4:	f240 32e7 	movw	r2, #999	; 0x3e7
 80024e8:	60da      	str	r2, [r3, #12]
  htim3.Init.Prescaler = uwPrescalerValue;
 80024ea:	4a0e      	ldr	r2, [pc, #56]	; (8002524 <HAL_InitTick+0xac>)
 80024ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80024ee:	6053      	str	r3, [r2, #4]
  htim3.Init.ClockDivision = 0;
 80024f0:	4b0c      	ldr	r3, [pc, #48]	; (8002524 <HAL_InitTick+0xac>)
 80024f2:	2200      	movs	r2, #0
 80024f4:	611a      	str	r2, [r3, #16]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80024f6:	4b0b      	ldr	r3, [pc, #44]	; (8002524 <HAL_InitTick+0xac>)
 80024f8:	2200      	movs	r2, #0
 80024fa:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim3) == HAL_OK)
 80024fc:	4809      	ldr	r0, [pc, #36]	; (8002524 <HAL_InitTick+0xac>)
 80024fe:	f003 ff67 	bl	80063d0 <HAL_TIM_Base_Init>
 8002502:	4603      	mov	r3, r0
 8002504:	2b00      	cmp	r3, #0
 8002506:	d104      	bne.n	8002512 <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim3);
 8002508:	4806      	ldr	r0, [pc, #24]	; (8002524 <HAL_InitTick+0xac>)
 800250a:	f003 ffb1 	bl	8006470 <HAL_TIM_Base_Start_IT>
 800250e:	4603      	mov	r3, r0
 8002510:	e000      	b.n	8002514 <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 8002512:	2301      	movs	r3, #1
}
 8002514:	4618      	mov	r0, r3
 8002516:	3730      	adds	r7, #48	; 0x30
 8002518:	46bd      	mov	sp, r7
 800251a:	bd80      	pop	{r7, pc}
 800251c:	40023800 	.word	0x40023800
 8002520:	431bde83 	.word	0x431bde83
 8002524:	20004ca0 	.word	0x20004ca0
 8002528:	40000400 	.word	0x40000400

0800252c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800252c:	b480      	push	{r7}
 800252e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002530:	e7fe      	b.n	8002530 <NMI_Handler+0x4>

08002532 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002532:	b480      	push	{r7}
 8002534:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002536:	e7fe      	b.n	8002536 <HardFault_Handler+0x4>

08002538 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002538:	b480      	push	{r7}
 800253a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800253c:	e7fe      	b.n	800253c <MemManage_Handler+0x4>

0800253e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800253e:	b480      	push	{r7}
 8002540:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002542:	e7fe      	b.n	8002542 <BusFault_Handler+0x4>

08002544 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002544:	b480      	push	{r7}
 8002546:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002548:	e7fe      	b.n	8002548 <UsageFault_Handler+0x4>

0800254a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800254a:	b480      	push	{r7}
 800254c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800254e:	bf00      	nop
 8002550:	46bd      	mov	sp, r7
 8002552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002556:	4770      	bx	lr

08002558 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8002558:	b580      	push	{r7, lr}
 800255a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 800255c:	4802      	ldr	r0, [pc, #8]	; (8002568 <DMA1_Stream1_IRQHandler+0x10>)
 800255e:	f001 fd03 	bl	8003f68 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8002562:	bf00      	nop
 8002564:	bd80      	pop	{r7, pc}
 8002566:	bf00      	nop
 8002568:	20004e20 	.word	0x20004e20

0800256c <CAN1_TX_IRQHandler>:

/**
  * @brief This function handles CAN1 TX interrupts.
  */
void CAN1_TX_IRQHandler(void)
{
 800256c:	b580      	push	{r7, lr}
 800256e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_TX_IRQn 0 */

  /* USER CODE END CAN1_TX_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8002570:	4802      	ldr	r0, [pc, #8]	; (800257c <CAN1_TX_IRQHandler+0x10>)
 8002572:	f001 f8a7 	bl	80036c4 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_TX_IRQn 1 */

  /* USER CODE END CAN1_TX_IRQn 1 */
}
 8002576:	bf00      	nop
 8002578:	bd80      	pop	{r7, pc}
 800257a:	bf00      	nop
 800257c:	20004b38 	.word	0x20004b38

08002580 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupts.
  */
void CAN1_RX0_IRQHandler(void)
{
 8002580:	b580      	push	{r7, lr}
 8002582:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8002584:	4802      	ldr	r0, [pc, #8]	; (8002590 <CAN1_RX0_IRQHandler+0x10>)
 8002586:	f001 f89d 	bl	80036c4 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 800258a:	bf00      	nop
 800258c:	bd80      	pop	{r7, pc}
 800258e:	bf00      	nop
 8002590:	20004b38 	.word	0x20004b38

08002594 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8002594:	b580      	push	{r7, lr}
 8002596:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8002598:	4802      	ldr	r0, [pc, #8]	; (80025a4 <TIM3_IRQHandler+0x10>)
 800259a:	f004 f828 	bl	80065ee <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 800259e:	bf00      	nop
 80025a0:	bd80      	pop	{r7, pc}
 80025a2:	bf00      	nop
 80025a4:	20004ca0 	.word	0x20004ca0

080025a8 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80025a8:	b580      	push	{r7, lr}
 80025aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */
////
  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80025ac:	4802      	ldr	r0, [pc, #8]	; (80025b8 <USART1_IRQHandler+0x10>)
 80025ae:	f004 fea1 	bl	80072f4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */
////
  /* USER CODE END USART1_IRQn 1 */
}
 80025b2:	bf00      	nop
 80025b4:	bd80      	pop	{r7, pc}
 80025b6:	bf00      	nop
 80025b8:	20004f84 	.word	0x20004f84

080025bc <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 80025bc:	b580      	push	{r7, lr}
 80025be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart6_rx);
 80025c0:	4802      	ldr	r0, [pc, #8]	; (80025cc <DMA2_Stream1_IRQHandler+0x10>)
 80025c2:	f001 fcd1 	bl	8003f68 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 80025c6:	bf00      	nop
 80025c8:	bd80      	pop	{r7, pc}
 80025ca:	bf00      	nop
 80025cc:	20004dc0 	.word	0x20004dc0

080025d0 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 80025d0:	b580      	push	{r7, lr}
 80025d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_rx);
 80025d4:	4802      	ldr	r0, [pc, #8]	; (80025e0 <DMA2_Stream2_IRQHandler+0x10>)
 80025d6:	f001 fcc7 	bl	8003f68 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 80025da:	bf00      	nop
 80025dc:	bd80      	pop	{r7, pc}
 80025de:	bf00      	nop
 80025e0:	20004be0 	.word	0x20004be0

080025e4 <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 80025e4:	b580      	push	{r7, lr}
 80025e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 80025e8:	4802      	ldr	r0, [pc, #8]	; (80025f4 <DMA2_Stream3_IRQHandler+0x10>)
 80025ea:	f001 fcbd 	bl	8003f68 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 80025ee:	bf00      	nop
 80025f0:	bd80      	pop	{r7, pc}
 80025f2:	bf00      	nop
 80025f4:	20004c40 	.word	0x20004c40

080025f8 <CAN2_TX_IRQHandler>:

/**
  * @brief This function handles CAN2 TX interrupts.
  */
void CAN2_TX_IRQHandler(void)
{
 80025f8:	b580      	push	{r7, lr}
 80025fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN2_TX_IRQn 0 */

  /* USER CODE END CAN2_TX_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan2);
 80025fc:	4802      	ldr	r0, [pc, #8]	; (8002608 <CAN2_TX_IRQHandler+0x10>)
 80025fe:	f001 f861 	bl	80036c4 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN2_TX_IRQn 1 */

  /* USER CODE END CAN2_TX_IRQn 1 */
}
 8002602:	bf00      	nop
 8002604:	bd80      	pop	{r7, pc}
 8002606:	bf00      	nop
 8002608:	20004b10 	.word	0x20004b10

0800260c <CAN2_RX0_IRQHandler>:

/**
  * @brief This function handles CAN2 RX0 interrupts.
  */
void CAN2_RX0_IRQHandler(void)
{
 800260c:	b580      	push	{r7, lr}
 800260e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN2_RX0_IRQn 0 */

  /* USER CODE END CAN2_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan2);
 8002610:	4802      	ldr	r0, [pc, #8]	; (800261c <CAN2_RX0_IRQHandler+0x10>)
 8002612:	f001 f857 	bl	80036c4 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN2_RX0_IRQn 1 */

  /* USER CODE END CAN2_RX0_IRQn 1 */
}
 8002616:	bf00      	nop
 8002618:	bd80      	pop	{r7, pc}
 800261a:	bf00      	nop
 800261c:	20004b10 	.word	0x20004b10

08002620 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8002620:	b580      	push	{r7, lr}
 8002622:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8002624:	4802      	ldr	r0, [pc, #8]	; (8002630 <OTG_FS_IRQHandler+0x10>)
 8002626:	f002 f890 	bl	800474a <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800262a:	bf00      	nop
 800262c:	bd80      	pop	{r7, pc}
 800262e:	bf00      	nop
 8002630:	20005050 	.word	0x20005050

08002634 <DMA2_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA2 stream6 global interrupt.
  */
void DMA2_Stream6_IRQHandler(void)
{
 8002634:	b580      	push	{r7, lr}
 8002636:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart6_tx);
 8002638:	4802      	ldr	r0, [pc, #8]	; (8002644 <DMA2_Stream6_IRQHandler+0x10>)
 800263a:	f001 fc95 	bl	8003f68 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream6_IRQn 1 */

  /* USER CODE END DMA2_Stream6_IRQn 1 */
}
 800263e:	bf00      	nop
 8002640:	bd80      	pop	{r7, pc}
 8002642:	bf00      	nop
 8002644:	20004f24 	.word	0x20004f24

08002648 <DMA2_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA2 stream7 global interrupt.
  */
void DMA2_Stream7_IRQHandler(void)
{
 8002648:	b580      	push	{r7, lr}
 800264a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream7_IRQn 0 */

  /* USER CODE END DMA2_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 800264c:	4802      	ldr	r0, [pc, #8]	; (8002658 <DMA2_Stream7_IRQHandler+0x10>)
 800264e:	f001 fc8b 	bl	8003f68 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream7_IRQn 1 */

  /* USER CODE END DMA2_Stream7_IRQn 1 */
}
 8002652:	bf00      	nop
 8002654:	bd80      	pop	{r7, pc}
 8002656:	bf00      	nop
 8002658:	20004ec4 	.word	0x20004ec4

0800265c <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 800265c:	b580      	push	{r7, lr}
 800265e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 8002660:	4802      	ldr	r0, [pc, #8]	; (800266c <USART6_IRQHandler+0x10>)
 8002662:	f004 fe47 	bl	80072f4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 8002666:	bf00      	nop
 8002668:	bd80      	pop	{r7, pc}
 800266a:	bf00      	nop
 800266c:	20004fc8 	.word	0x20004fc8

08002670 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002670:	b480      	push	{r7}
 8002672:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002674:	4b06      	ldr	r3, [pc, #24]	; (8002690 <SystemInit+0x20>)
 8002676:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800267a:	4a05      	ldr	r2, [pc, #20]	; (8002690 <SystemInit+0x20>)
 800267c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002680:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002684:	bf00      	nop
 8002686:	46bd      	mov	sp, r7
 8002688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800268c:	4770      	bx	lr
 800268e:	bf00      	nop
 8002690:	e000ed00 	.word	0xe000ed00

08002694 <MX_TIM4_Init>:
TIM_HandleTypeDef htim5;
TIM_HandleTypeDef htim12;

/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8002694:	b580      	push	{r7, lr}
 8002696:	b08e      	sub	sp, #56	; 0x38
 8002698:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800269a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800269e:	2200      	movs	r2, #0
 80026a0:	601a      	str	r2, [r3, #0]
 80026a2:	605a      	str	r2, [r3, #4]
 80026a4:	609a      	str	r2, [r3, #8]
 80026a6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80026a8:	f107 0320 	add.w	r3, r7, #32
 80026ac:	2200      	movs	r2, #0
 80026ae:	601a      	str	r2, [r3, #0]
 80026b0:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80026b2:	1d3b      	adds	r3, r7, #4
 80026b4:	2200      	movs	r2, #0
 80026b6:	601a      	str	r2, [r3, #0]
 80026b8:	605a      	str	r2, [r3, #4]
 80026ba:	609a      	str	r2, [r3, #8]
 80026bc:	60da      	str	r2, [r3, #12]
 80026be:	611a      	str	r2, [r3, #16]
 80026c0:	615a      	str	r2, [r3, #20]
 80026c2:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80026c4:	4b32      	ldr	r3, [pc, #200]	; (8002790 <MX_TIM4_Init+0xfc>)
 80026c6:	4a33      	ldr	r2, [pc, #204]	; (8002794 <MX_TIM4_Init+0x100>)
 80026c8:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 83;
 80026ca:	4b31      	ldr	r3, [pc, #196]	; (8002790 <MX_TIM4_Init+0xfc>)
 80026cc:	2253      	movs	r2, #83	; 0x53
 80026ce:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80026d0:	4b2f      	ldr	r3, [pc, #188]	; (8002790 <MX_TIM4_Init+0xfc>)
 80026d2:	2200      	movs	r2, #0
 80026d4:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 19999;
 80026d6:	4b2e      	ldr	r3, [pc, #184]	; (8002790 <MX_TIM4_Init+0xfc>)
 80026d8:	f644 621f 	movw	r2, #19999	; 0x4e1f
 80026dc:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80026de:	4b2c      	ldr	r3, [pc, #176]	; (8002790 <MX_TIM4_Init+0xfc>)
 80026e0:	2200      	movs	r2, #0
 80026e2:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80026e4:	4b2a      	ldr	r3, [pc, #168]	; (8002790 <MX_TIM4_Init+0xfc>)
 80026e6:	2200      	movs	r2, #0
 80026e8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 80026ea:	4829      	ldr	r0, [pc, #164]	; (8002790 <MX_TIM4_Init+0xfc>)
 80026ec:	f003 fe70 	bl	80063d0 <HAL_TIM_Base_Init>
 80026f0:	4603      	mov	r3, r0
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d001      	beq.n	80026fa <MX_TIM4_Init+0x66>
  {
    Error_Handler();
 80026f6:	f7ff fd4d 	bl	8002194 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80026fa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80026fe:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8002700:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002704:	4619      	mov	r1, r3
 8002706:	4822      	ldr	r0, [pc, #136]	; (8002790 <MX_TIM4_Init+0xfc>)
 8002708:	f004 f93c 	bl	8006984 <HAL_TIM_ConfigClockSource>
 800270c:	4603      	mov	r3, r0
 800270e:	2b00      	cmp	r3, #0
 8002710:	d001      	beq.n	8002716 <MX_TIM4_Init+0x82>
  {
    Error_Handler();
 8002712:	f7ff fd3f 	bl	8002194 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8002716:	481e      	ldr	r0, [pc, #120]	; (8002790 <MX_TIM4_Init+0xfc>)
 8002718:	f003 ff1a 	bl	8006550 <HAL_TIM_PWM_Init>
 800271c:	4603      	mov	r3, r0
 800271e:	2b00      	cmp	r3, #0
 8002720:	d001      	beq.n	8002726 <MX_TIM4_Init+0x92>
  {
    Error_Handler();
 8002722:	f7ff fd37 	bl	8002194 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002726:	2300      	movs	r3, #0
 8002728:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800272a:	2300      	movs	r3, #0
 800272c:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800272e:	f107 0320 	add.w	r3, r7, #32
 8002732:	4619      	mov	r1, r3
 8002734:	4816      	ldr	r0, [pc, #88]	; (8002790 <MX_TIM4_Init+0xfc>)
 8002736:	f004 fcff 	bl	8007138 <HAL_TIMEx_MasterConfigSynchronization>
 800273a:	4603      	mov	r3, r0
 800273c:	2b00      	cmp	r3, #0
 800273e:	d001      	beq.n	8002744 <MX_TIM4_Init+0xb0>
  {
    Error_Handler();
 8002740:	f7ff fd28 	bl	8002194 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002744:	2360      	movs	r3, #96	; 0x60
 8002746:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8002748:	2300      	movs	r3, #0
 800274a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800274c:	2300      	movs	r3, #0
 800274e:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002750:	2300      	movs	r3, #0
 8002752:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002754:	1d3b      	adds	r3, r7, #4
 8002756:	2200      	movs	r2, #0
 8002758:	4619      	mov	r1, r3
 800275a:	480d      	ldr	r0, [pc, #52]	; (8002790 <MX_TIM4_Init+0xfc>)
 800275c:	f004 f850 	bl	8006800 <HAL_TIM_PWM_ConfigChannel>
 8002760:	4603      	mov	r3, r0
 8002762:	2b00      	cmp	r3, #0
 8002764:	d001      	beq.n	800276a <MX_TIM4_Init+0xd6>
  {
    Error_Handler();
 8002766:	f7ff fd15 	bl	8002194 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800276a:	1d3b      	adds	r3, r7, #4
 800276c:	2204      	movs	r2, #4
 800276e:	4619      	mov	r1, r3
 8002770:	4807      	ldr	r0, [pc, #28]	; (8002790 <MX_TIM4_Init+0xfc>)
 8002772:	f004 f845 	bl	8006800 <HAL_TIM_PWM_ConfigChannel>
 8002776:	4603      	mov	r3, r0
 8002778:	2b00      	cmp	r3, #0
 800277a:	d001      	beq.n	8002780 <MX_TIM4_Init+0xec>
  {
    Error_Handler();
 800277c:	f7ff fd0a 	bl	8002194 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8002780:	4803      	ldr	r0, [pc, #12]	; (8002790 <MX_TIM4_Init+0xfc>)
 8002782:	f000 f937 	bl	80029f4 <HAL_TIM_MspPostInit>

}
 8002786:	bf00      	nop
 8002788:	3738      	adds	r7, #56	; 0x38
 800278a:	46bd      	mov	sp, r7
 800278c:	bd80      	pop	{r7, pc}
 800278e:	bf00      	nop
 8002790:	20004ce8 	.word	0x20004ce8
 8002794:	40000800 	.word	0x40000800

08002798 <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 8002798:	b580      	push	{r7, lr}
 800279a:	b08a      	sub	sp, #40	; 0x28
 800279c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800279e:	f107 0320 	add.w	r3, r7, #32
 80027a2:	2200      	movs	r2, #0
 80027a4:	601a      	str	r2, [r3, #0]
 80027a6:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80027a8:	1d3b      	adds	r3, r7, #4
 80027aa:	2200      	movs	r2, #0
 80027ac:	601a      	str	r2, [r3, #0]
 80027ae:	605a      	str	r2, [r3, #4]
 80027b0:	609a      	str	r2, [r3, #8]
 80027b2:	60da      	str	r2, [r3, #12]
 80027b4:	611a      	str	r2, [r3, #16]
 80027b6:	615a      	str	r2, [r3, #20]
 80027b8:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 80027ba:	4b2d      	ldr	r3, [pc, #180]	; (8002870 <MX_TIM5_Init+0xd8>)
 80027bc:	4a2d      	ldr	r2, [pc, #180]	; (8002874 <MX_TIM5_Init+0xdc>)
 80027be:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 80027c0:	4b2b      	ldr	r3, [pc, #172]	; (8002870 <MX_TIM5_Init+0xd8>)
 80027c2:	2200      	movs	r2, #0
 80027c4:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 80027c6:	4b2a      	ldr	r3, [pc, #168]	; (8002870 <MX_TIM5_Init+0xd8>)
 80027c8:	2200      	movs	r2, #0
 80027ca:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 80027cc:	4b28      	ldr	r3, [pc, #160]	; (8002870 <MX_TIM5_Init+0xd8>)
 80027ce:	f04f 32ff 	mov.w	r2, #4294967295
 80027d2:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80027d4:	4b26      	ldr	r3, [pc, #152]	; (8002870 <MX_TIM5_Init+0xd8>)
 80027d6:	2200      	movs	r2, #0
 80027d8:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80027da:	4b25      	ldr	r3, [pc, #148]	; (8002870 <MX_TIM5_Init+0xd8>)
 80027dc:	2200      	movs	r2, #0
 80027de:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 80027e0:	4823      	ldr	r0, [pc, #140]	; (8002870 <MX_TIM5_Init+0xd8>)
 80027e2:	f003 feb5 	bl	8006550 <HAL_TIM_PWM_Init>
 80027e6:	4603      	mov	r3, r0
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	d001      	beq.n	80027f0 <MX_TIM5_Init+0x58>
  {
    Error_Handler();
 80027ec:	f7ff fcd2 	bl	8002194 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80027f0:	2300      	movs	r3, #0
 80027f2:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80027f4:	2300      	movs	r3, #0
 80027f6:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 80027f8:	f107 0320 	add.w	r3, r7, #32
 80027fc:	4619      	mov	r1, r3
 80027fe:	481c      	ldr	r0, [pc, #112]	; (8002870 <MX_TIM5_Init+0xd8>)
 8002800:	f004 fc9a 	bl	8007138 <HAL_TIMEx_MasterConfigSynchronization>
 8002804:	4603      	mov	r3, r0
 8002806:	2b00      	cmp	r3, #0
 8002808:	d001      	beq.n	800280e <MX_TIM5_Init+0x76>
  {
    Error_Handler();
 800280a:	f7ff fcc3 	bl	8002194 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800280e:	2360      	movs	r3, #96	; 0x60
 8002810:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8002812:	2300      	movs	r3, #0
 8002814:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002816:	2300      	movs	r3, #0
 8002818:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800281a:	2300      	movs	r3, #0
 800281c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800281e:	1d3b      	adds	r3, r7, #4
 8002820:	2200      	movs	r2, #0
 8002822:	4619      	mov	r1, r3
 8002824:	4812      	ldr	r0, [pc, #72]	; (8002870 <MX_TIM5_Init+0xd8>)
 8002826:	f003 ffeb 	bl	8006800 <HAL_TIM_PWM_ConfigChannel>
 800282a:	4603      	mov	r3, r0
 800282c:	2b00      	cmp	r3, #0
 800282e:	d001      	beq.n	8002834 <MX_TIM5_Init+0x9c>
  {
    Error_Handler();
 8002830:	f7ff fcb0 	bl	8002194 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002834:	1d3b      	adds	r3, r7, #4
 8002836:	2204      	movs	r2, #4
 8002838:	4619      	mov	r1, r3
 800283a:	480d      	ldr	r0, [pc, #52]	; (8002870 <MX_TIM5_Init+0xd8>)
 800283c:	f003 ffe0 	bl	8006800 <HAL_TIM_PWM_ConfigChannel>
 8002840:	4603      	mov	r3, r0
 8002842:	2b00      	cmp	r3, #0
 8002844:	d001      	beq.n	800284a <MX_TIM5_Init+0xb2>
  {
    Error_Handler();
 8002846:	f7ff fca5 	bl	8002194 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800284a:	1d3b      	adds	r3, r7, #4
 800284c:	2208      	movs	r2, #8
 800284e:	4619      	mov	r1, r3
 8002850:	4807      	ldr	r0, [pc, #28]	; (8002870 <MX_TIM5_Init+0xd8>)
 8002852:	f003 ffd5 	bl	8006800 <HAL_TIM_PWM_ConfigChannel>
 8002856:	4603      	mov	r3, r0
 8002858:	2b00      	cmp	r3, #0
 800285a:	d001      	beq.n	8002860 <MX_TIM5_Init+0xc8>
  {
    Error_Handler();
 800285c:	f7ff fc9a 	bl	8002194 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 8002860:	4803      	ldr	r0, [pc, #12]	; (8002870 <MX_TIM5_Init+0xd8>)
 8002862:	f000 f8c7 	bl	80029f4 <HAL_TIM_MspPostInit>

}
 8002866:	bf00      	nop
 8002868:	3728      	adds	r7, #40	; 0x28
 800286a:	46bd      	mov	sp, r7
 800286c:	bd80      	pop	{r7, pc}
 800286e:	bf00      	nop
 8002870:	20004d30 	.word	0x20004d30
 8002874:	40000c00 	.word	0x40000c00

08002878 <MX_TIM12_Init>:
/* TIM12 init function */
void MX_TIM12_Init(void)
{
 8002878:	b580      	push	{r7, lr}
 800287a:	b08c      	sub	sp, #48	; 0x30
 800287c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM12_Init 0 */

  /* USER CODE END TIM12_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800287e:	f107 0320 	add.w	r3, r7, #32
 8002882:	2200      	movs	r2, #0
 8002884:	601a      	str	r2, [r3, #0]
 8002886:	605a      	str	r2, [r3, #4]
 8002888:	609a      	str	r2, [r3, #8]
 800288a:	60da      	str	r2, [r3, #12]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800288c:	1d3b      	adds	r3, r7, #4
 800288e:	2200      	movs	r2, #0
 8002890:	601a      	str	r2, [r3, #0]
 8002892:	605a      	str	r2, [r3, #4]
 8002894:	609a      	str	r2, [r3, #8]
 8002896:	60da      	str	r2, [r3, #12]
 8002898:	611a      	str	r2, [r3, #16]
 800289a:	615a      	str	r2, [r3, #20]
 800289c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM12_Init 1 */

  /* USER CODE END TIM12_Init 1 */
  htim12.Instance = TIM12;
 800289e:	4b26      	ldr	r3, [pc, #152]	; (8002938 <MX_TIM12_Init+0xc0>)
 80028a0:	4a26      	ldr	r2, [pc, #152]	; (800293c <MX_TIM12_Init+0xc4>)
 80028a2:	601a      	str	r2, [r3, #0]
  htim12.Init.Prescaler = 1281;
 80028a4:	4b24      	ldr	r3, [pc, #144]	; (8002938 <MX_TIM12_Init+0xc0>)
 80028a6:	f240 5201 	movw	r2, #1281	; 0x501
 80028aa:	605a      	str	r2, [r3, #4]
  htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 80028ac:	4b22      	ldr	r3, [pc, #136]	; (8002938 <MX_TIM12_Init+0xc0>)
 80028ae:	2200      	movs	r2, #0
 80028b0:	609a      	str	r2, [r3, #8]
  htim12.Init.Period = 31111;
 80028b2:	4b21      	ldr	r3, [pc, #132]	; (8002938 <MX_TIM12_Init+0xc0>)
 80028b4:	f647 1287 	movw	r2, #31111	; 0x7987
 80028b8:	60da      	str	r2, [r3, #12]
  htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80028ba:	4b1f      	ldr	r3, [pc, #124]	; (8002938 <MX_TIM12_Init+0xc0>)
 80028bc:	2200      	movs	r2, #0
 80028be:	611a      	str	r2, [r3, #16]
  htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80028c0:	4b1d      	ldr	r3, [pc, #116]	; (8002938 <MX_TIM12_Init+0xc0>)
 80028c2:	2200      	movs	r2, #0
 80028c4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim12) != HAL_OK)
 80028c6:	481c      	ldr	r0, [pc, #112]	; (8002938 <MX_TIM12_Init+0xc0>)
 80028c8:	f003 fd82 	bl	80063d0 <HAL_TIM_Base_Init>
 80028cc:	4603      	mov	r3, r0
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d001      	beq.n	80028d6 <MX_TIM12_Init+0x5e>
  {
    Error_Handler();
 80028d2:	f7ff fc5f 	bl	8002194 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80028d6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80028da:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim12, &sClockSourceConfig) != HAL_OK)
 80028dc:	f107 0320 	add.w	r3, r7, #32
 80028e0:	4619      	mov	r1, r3
 80028e2:	4815      	ldr	r0, [pc, #84]	; (8002938 <MX_TIM12_Init+0xc0>)
 80028e4:	f004 f84e 	bl	8006984 <HAL_TIM_ConfigClockSource>
 80028e8:	4603      	mov	r3, r0
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d001      	beq.n	80028f2 <MX_TIM12_Init+0x7a>
  {
    Error_Handler();
 80028ee:	f7ff fc51 	bl	8002194 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim12) != HAL_OK)
 80028f2:	4811      	ldr	r0, [pc, #68]	; (8002938 <MX_TIM12_Init+0xc0>)
 80028f4:	f003 fe2c 	bl	8006550 <HAL_TIM_PWM_Init>
 80028f8:	4603      	mov	r3, r0
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d001      	beq.n	8002902 <MX_TIM12_Init+0x8a>
  {
    Error_Handler();
 80028fe:	f7ff fc49 	bl	8002194 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002902:	2360      	movs	r3, #96	; 0x60
 8002904:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8002906:	2300      	movs	r3, #0
 8002908:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800290a:	2300      	movs	r3, #0
 800290c:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800290e:	2300      	movs	r3, #0
 8002910:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002912:	1d3b      	adds	r3, r7, #4
 8002914:	2200      	movs	r2, #0
 8002916:	4619      	mov	r1, r3
 8002918:	4807      	ldr	r0, [pc, #28]	; (8002938 <MX_TIM12_Init+0xc0>)
 800291a:	f003 ff71 	bl	8006800 <HAL_TIM_PWM_ConfigChannel>
 800291e:	4603      	mov	r3, r0
 8002920:	2b00      	cmp	r3, #0
 8002922:	d001      	beq.n	8002928 <MX_TIM12_Init+0xb0>
  {
    Error_Handler();
 8002924:	f7ff fc36 	bl	8002194 <Error_Handler>
  }
  /* USER CODE BEGIN TIM12_Init 2 */

  /* USER CODE END TIM12_Init 2 */
  HAL_TIM_MspPostInit(&htim12);
 8002928:	4803      	ldr	r0, [pc, #12]	; (8002938 <MX_TIM12_Init+0xc0>)
 800292a:	f000 f863 	bl	80029f4 <HAL_TIM_MspPostInit>

}
 800292e:	bf00      	nop
 8002930:	3730      	adds	r7, #48	; 0x30
 8002932:	46bd      	mov	sp, r7
 8002934:	bd80      	pop	{r7, pc}
 8002936:	bf00      	nop
 8002938:	20004d78 	.word	0x20004d78
 800293c:	40001800 	.word	0x40001800

08002940 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002940:	b480      	push	{r7}
 8002942:	b085      	sub	sp, #20
 8002944:	af00      	add	r7, sp, #0
 8002946:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM4)
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	4a15      	ldr	r2, [pc, #84]	; (80029a4 <HAL_TIM_Base_MspInit+0x64>)
 800294e:	4293      	cmp	r3, r2
 8002950:	d10e      	bne.n	8002970 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* TIM4 clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002952:	2300      	movs	r3, #0
 8002954:	60fb      	str	r3, [r7, #12]
 8002956:	4b14      	ldr	r3, [pc, #80]	; (80029a8 <HAL_TIM_Base_MspInit+0x68>)
 8002958:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800295a:	4a13      	ldr	r2, [pc, #76]	; (80029a8 <HAL_TIM_Base_MspInit+0x68>)
 800295c:	f043 0304 	orr.w	r3, r3, #4
 8002960:	6413      	str	r3, [r2, #64]	; 0x40
 8002962:	4b11      	ldr	r3, [pc, #68]	; (80029a8 <HAL_TIM_Base_MspInit+0x68>)
 8002964:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002966:	f003 0304 	and.w	r3, r3, #4
 800296a:	60fb      	str	r3, [r7, #12]
 800296c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_TIM12_CLK_ENABLE();
  /* USER CODE BEGIN TIM12_MspInit 1 */

  /* USER CODE END TIM12_MspInit 1 */
  }
}
 800296e:	e012      	b.n	8002996 <HAL_TIM_Base_MspInit+0x56>
  else if(tim_baseHandle->Instance==TIM12)
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	4a0d      	ldr	r2, [pc, #52]	; (80029ac <HAL_TIM_Base_MspInit+0x6c>)
 8002976:	4293      	cmp	r3, r2
 8002978:	d10d      	bne.n	8002996 <HAL_TIM_Base_MspInit+0x56>
    __HAL_RCC_TIM12_CLK_ENABLE();
 800297a:	2300      	movs	r3, #0
 800297c:	60bb      	str	r3, [r7, #8]
 800297e:	4b0a      	ldr	r3, [pc, #40]	; (80029a8 <HAL_TIM_Base_MspInit+0x68>)
 8002980:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002982:	4a09      	ldr	r2, [pc, #36]	; (80029a8 <HAL_TIM_Base_MspInit+0x68>)
 8002984:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002988:	6413      	str	r3, [r2, #64]	; 0x40
 800298a:	4b07      	ldr	r3, [pc, #28]	; (80029a8 <HAL_TIM_Base_MspInit+0x68>)
 800298c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800298e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002992:	60bb      	str	r3, [r7, #8]
 8002994:	68bb      	ldr	r3, [r7, #8]
}
 8002996:	bf00      	nop
 8002998:	3714      	adds	r7, #20
 800299a:	46bd      	mov	sp, r7
 800299c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029a0:	4770      	bx	lr
 80029a2:	bf00      	nop
 80029a4:	40000800 	.word	0x40000800
 80029a8:	40023800 	.word	0x40023800
 80029ac:	40001800 	.word	0x40001800

080029b0 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 80029b0:	b480      	push	{r7}
 80029b2:	b085      	sub	sp, #20
 80029b4:	af00      	add	r7, sp, #0
 80029b6:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM5)
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	4a0b      	ldr	r2, [pc, #44]	; (80029ec <HAL_TIM_PWM_MspInit+0x3c>)
 80029be:	4293      	cmp	r3, r2
 80029c0:	d10d      	bne.n	80029de <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM5_MspInit 0 */

  /* USER CODE END TIM5_MspInit 0 */
    /* TIM5 clock enable */
    __HAL_RCC_TIM5_CLK_ENABLE();
 80029c2:	2300      	movs	r3, #0
 80029c4:	60fb      	str	r3, [r7, #12]
 80029c6:	4b0a      	ldr	r3, [pc, #40]	; (80029f0 <HAL_TIM_PWM_MspInit+0x40>)
 80029c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029ca:	4a09      	ldr	r2, [pc, #36]	; (80029f0 <HAL_TIM_PWM_MspInit+0x40>)
 80029cc:	f043 0308 	orr.w	r3, r3, #8
 80029d0:	6413      	str	r3, [r2, #64]	; 0x40
 80029d2:	4b07      	ldr	r3, [pc, #28]	; (80029f0 <HAL_TIM_PWM_MspInit+0x40>)
 80029d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029d6:	f003 0308 	and.w	r3, r3, #8
 80029da:	60fb      	str	r3, [r7, #12]
 80029dc:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }
}
 80029de:	bf00      	nop
 80029e0:	3714      	adds	r7, #20
 80029e2:	46bd      	mov	sp, r7
 80029e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029e8:	4770      	bx	lr
 80029ea:	bf00      	nop
 80029ec:	40000c00 	.word	0x40000c00
 80029f0:	40023800 	.word	0x40023800

080029f4 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80029f4:	b580      	push	{r7, lr}
 80029f6:	b08a      	sub	sp, #40	; 0x28
 80029f8:	af00      	add	r7, sp, #0
 80029fa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80029fc:	f107 0314 	add.w	r3, r7, #20
 8002a00:	2200      	movs	r2, #0
 8002a02:	601a      	str	r2, [r3, #0]
 8002a04:	605a      	str	r2, [r3, #4]
 8002a06:	609a      	str	r2, [r3, #8]
 8002a08:	60da      	str	r2, [r3, #12]
 8002a0a:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM4)
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	4a36      	ldr	r2, [pc, #216]	; (8002aec <HAL_TIM_MspPostInit+0xf8>)
 8002a12:	4293      	cmp	r3, r2
 8002a14:	d11e      	bne.n	8002a54 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002a16:	2300      	movs	r3, #0
 8002a18:	613b      	str	r3, [r7, #16]
 8002a1a:	4b35      	ldr	r3, [pc, #212]	; (8002af0 <HAL_TIM_MspPostInit+0xfc>)
 8002a1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a1e:	4a34      	ldr	r2, [pc, #208]	; (8002af0 <HAL_TIM_MspPostInit+0xfc>)
 8002a20:	f043 0302 	orr.w	r3, r3, #2
 8002a24:	6313      	str	r3, [r2, #48]	; 0x30
 8002a26:	4b32      	ldr	r3, [pc, #200]	; (8002af0 <HAL_TIM_MspPostInit+0xfc>)
 8002a28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a2a:	f003 0302 	and.w	r3, r3, #2
 8002a2e:	613b      	str	r3, [r7, #16]
 8002a30:	693b      	ldr	r3, [r7, #16]
    /**TIM4 GPIO Configuration
    PB7     ------> TIM4_CH2
    PB6     ------> TIM4_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_6;
 8002a32:	23c0      	movs	r3, #192	; 0xc0
 8002a34:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a36:	2302      	movs	r3, #2
 8002a38:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a3a:	2300      	movs	r3, #0
 8002a3c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a3e:	2300      	movs	r3, #0
 8002a40:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8002a42:	2302      	movs	r3, #2
 8002a44:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002a46:	f107 0314 	add.w	r3, r7, #20
 8002a4a:	4619      	mov	r1, r3
 8002a4c:	4829      	ldr	r0, [pc, #164]	; (8002af4 <HAL_TIM_MspPostInit+0x100>)
 8002a4e:	f001 fcc7 	bl	80043e0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM12_MspPostInit 1 */

  /* USER CODE END TIM12_MspPostInit 1 */
  }

}
 8002a52:	e047      	b.n	8002ae4 <HAL_TIM_MspPostInit+0xf0>
  else if(timHandle->Instance==TIM5)
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	4a27      	ldr	r2, [pc, #156]	; (8002af8 <HAL_TIM_MspPostInit+0x104>)
 8002a5a:	4293      	cmp	r3, r2
 8002a5c:	d11f      	bne.n	8002a9e <HAL_TIM_MspPostInit+0xaa>
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8002a5e:	2300      	movs	r3, #0
 8002a60:	60fb      	str	r3, [r7, #12]
 8002a62:	4b23      	ldr	r3, [pc, #140]	; (8002af0 <HAL_TIM_MspPostInit+0xfc>)
 8002a64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a66:	4a22      	ldr	r2, [pc, #136]	; (8002af0 <HAL_TIM_MspPostInit+0xfc>)
 8002a68:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002a6c:	6313      	str	r3, [r2, #48]	; 0x30
 8002a6e:	4b20      	ldr	r3, [pc, #128]	; (8002af0 <HAL_TIM_MspPostInit+0xfc>)
 8002a70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a72:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a76:	60fb      	str	r3, [r7, #12]
 8002a78:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_11|GPIO_PIN_10;
 8002a7a:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8002a7e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a80:	2302      	movs	r3, #2
 8002a82:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a84:	2300      	movs	r3, #0
 8002a86:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a88:	2300      	movs	r3, #0
 8002a8a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8002a8c:	2302      	movs	r3, #2
 8002a8e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8002a90:	f107 0314 	add.w	r3, r7, #20
 8002a94:	4619      	mov	r1, r3
 8002a96:	4819      	ldr	r0, [pc, #100]	; (8002afc <HAL_TIM_MspPostInit+0x108>)
 8002a98:	f001 fca2 	bl	80043e0 <HAL_GPIO_Init>
}
 8002a9c:	e022      	b.n	8002ae4 <HAL_TIM_MspPostInit+0xf0>
  else if(timHandle->Instance==TIM12)
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	4a17      	ldr	r2, [pc, #92]	; (8002b00 <HAL_TIM_MspPostInit+0x10c>)
 8002aa4:	4293      	cmp	r3, r2
 8002aa6:	d11d      	bne.n	8002ae4 <HAL_TIM_MspPostInit+0xf0>
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8002aa8:	2300      	movs	r3, #0
 8002aaa:	60bb      	str	r3, [r7, #8]
 8002aac:	4b10      	ldr	r3, [pc, #64]	; (8002af0 <HAL_TIM_MspPostInit+0xfc>)
 8002aae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ab0:	4a0f      	ldr	r2, [pc, #60]	; (8002af0 <HAL_TIM_MspPostInit+0xfc>)
 8002ab2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002ab6:	6313      	str	r3, [r2, #48]	; 0x30
 8002ab8:	4b0d      	ldr	r3, [pc, #52]	; (8002af0 <HAL_TIM_MspPostInit+0xfc>)
 8002aba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002abc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ac0:	60bb      	str	r3, [r7, #8]
 8002ac2:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8002ac4:	2340      	movs	r3, #64	; 0x40
 8002ac6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ac8:	2302      	movs	r3, #2
 8002aca:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002acc:	2300      	movs	r3, #0
 8002ace:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ad0:	2300      	movs	r3, #0
 8002ad2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM12;
 8002ad4:	2309      	movs	r3, #9
 8002ad6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8002ad8:	f107 0314 	add.w	r3, r7, #20
 8002adc:	4619      	mov	r1, r3
 8002ade:	4807      	ldr	r0, [pc, #28]	; (8002afc <HAL_TIM_MspPostInit+0x108>)
 8002ae0:	f001 fc7e 	bl	80043e0 <HAL_GPIO_Init>
}
 8002ae4:	bf00      	nop
 8002ae6:	3728      	adds	r7, #40	; 0x28
 8002ae8:	46bd      	mov	sp, r7
 8002aea:	bd80      	pop	{r7, pc}
 8002aec:	40000800 	.word	0x40000800
 8002af0:	40023800 	.word	0x40023800
 8002af4:	40020400 	.word	0x40020400
 8002af8:	40000c00 	.word	0x40000c00
 8002afc:	40021c00 	.word	0x40021c00
 8002b00:	40001800 	.word	0x40001800

08002b04 <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart6_tx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8002b04:	b580      	push	{r7, lr}
 8002b06:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002b08:	4b11      	ldr	r3, [pc, #68]	; (8002b50 <MX_USART1_UART_Init+0x4c>)
 8002b0a:	4a12      	ldr	r2, [pc, #72]	; (8002b54 <MX_USART1_UART_Init+0x50>)
 8002b0c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8002b0e:	4b10      	ldr	r3, [pc, #64]	; (8002b50 <MX_USART1_UART_Init+0x4c>)
 8002b10:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002b14:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002b16:	4b0e      	ldr	r3, [pc, #56]	; (8002b50 <MX_USART1_UART_Init+0x4c>)
 8002b18:	2200      	movs	r2, #0
 8002b1a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002b1c:	4b0c      	ldr	r3, [pc, #48]	; (8002b50 <MX_USART1_UART_Init+0x4c>)
 8002b1e:	2200      	movs	r2, #0
 8002b20:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002b22:	4b0b      	ldr	r3, [pc, #44]	; (8002b50 <MX_USART1_UART_Init+0x4c>)
 8002b24:	2200      	movs	r2, #0
 8002b26:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002b28:	4b09      	ldr	r3, [pc, #36]	; (8002b50 <MX_USART1_UART_Init+0x4c>)
 8002b2a:	220c      	movs	r2, #12
 8002b2c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002b2e:	4b08      	ldr	r3, [pc, #32]	; (8002b50 <MX_USART1_UART_Init+0x4c>)
 8002b30:	2200      	movs	r2, #0
 8002b32:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002b34:	4b06      	ldr	r3, [pc, #24]	; (8002b50 <MX_USART1_UART_Init+0x4c>)
 8002b36:	2200      	movs	r2, #0
 8002b38:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002b3a:	4805      	ldr	r0, [pc, #20]	; (8002b50 <MX_USART1_UART_Init+0x4c>)
 8002b3c:	f004 fb8c 	bl	8007258 <HAL_UART_Init>
 8002b40:	4603      	mov	r3, r0
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d001      	beq.n	8002b4a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8002b46:	f7ff fb25 	bl	8002194 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002b4a:	bf00      	nop
 8002b4c:	bd80      	pop	{r7, pc}
 8002b4e:	bf00      	nop
 8002b50:	20004f84 	.word	0x20004f84
 8002b54:	40011000 	.word	0x40011000

08002b58 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8002b58:	b580      	push	{r7, lr}
 8002b5a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8002b5c:	4b10      	ldr	r3, [pc, #64]	; (8002ba0 <MX_USART3_UART_Init+0x48>)
 8002b5e:	4a11      	ldr	r2, [pc, #68]	; (8002ba4 <MX_USART3_UART_Init+0x4c>)
 8002b60:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 100000;
 8002b62:	4b0f      	ldr	r3, [pc, #60]	; (8002ba0 <MX_USART3_UART_Init+0x48>)
 8002b64:	4a10      	ldr	r2, [pc, #64]	; (8002ba8 <MX_USART3_UART_Init+0x50>)
 8002b66:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8002b68:	4b0d      	ldr	r3, [pc, #52]	; (8002ba0 <MX_USART3_UART_Init+0x48>)
 8002b6a:	2200      	movs	r2, #0
 8002b6c:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8002b6e:	4b0c      	ldr	r3, [pc, #48]	; (8002ba0 <MX_USART3_UART_Init+0x48>)
 8002b70:	2200      	movs	r2, #0
 8002b72:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8002b74:	4b0a      	ldr	r3, [pc, #40]	; (8002ba0 <MX_USART3_UART_Init+0x48>)
 8002b76:	2200      	movs	r2, #0
 8002b78:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8002b7a:	4b09      	ldr	r3, [pc, #36]	; (8002ba0 <MX_USART3_UART_Init+0x48>)
 8002b7c:	220c      	movs	r2, #12
 8002b7e:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002b80:	4b07      	ldr	r3, [pc, #28]	; (8002ba0 <MX_USART3_UART_Init+0x48>)
 8002b82:	2200      	movs	r2, #0
 8002b84:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8002b86:	4b06      	ldr	r3, [pc, #24]	; (8002ba0 <MX_USART3_UART_Init+0x48>)
 8002b88:	2200      	movs	r2, #0
 8002b8a:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8002b8c:	4804      	ldr	r0, [pc, #16]	; (8002ba0 <MX_USART3_UART_Init+0x48>)
 8002b8e:	f004 fb63 	bl	8007258 <HAL_UART_Init>
 8002b92:	4603      	mov	r3, r0
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	d001      	beq.n	8002b9c <MX_USART3_UART_Init+0x44>
  {
    Error_Handler();
 8002b98:	f7ff fafc 	bl	8002194 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8002b9c:	bf00      	nop
 8002b9e:	bd80      	pop	{r7, pc}
 8002ba0:	20004e80 	.word	0x20004e80
 8002ba4:	40004800 	.word	0x40004800
 8002ba8:	000186a0 	.word	0x000186a0

08002bac <MX_USART6_UART_Init>:
/* USART6 init function */

void MX_USART6_UART_Init(void)
{
 8002bac:	b580      	push	{r7, lr}
 8002bae:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8002bb0:	4b11      	ldr	r3, [pc, #68]	; (8002bf8 <MX_USART6_UART_Init+0x4c>)
 8002bb2:	4a12      	ldr	r2, [pc, #72]	; (8002bfc <MX_USART6_UART_Init+0x50>)
 8002bb4:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 8002bb6:	4b10      	ldr	r3, [pc, #64]	; (8002bf8 <MX_USART6_UART_Init+0x4c>)
 8002bb8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002bbc:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8002bbe:	4b0e      	ldr	r3, [pc, #56]	; (8002bf8 <MX_USART6_UART_Init+0x4c>)
 8002bc0:	2200      	movs	r2, #0
 8002bc2:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8002bc4:	4b0c      	ldr	r3, [pc, #48]	; (8002bf8 <MX_USART6_UART_Init+0x4c>)
 8002bc6:	2200      	movs	r2, #0
 8002bc8:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8002bca:	4b0b      	ldr	r3, [pc, #44]	; (8002bf8 <MX_USART6_UART_Init+0x4c>)
 8002bcc:	2200      	movs	r2, #0
 8002bce:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8002bd0:	4b09      	ldr	r3, [pc, #36]	; (8002bf8 <MX_USART6_UART_Init+0x4c>)
 8002bd2:	220c      	movs	r2, #12
 8002bd4:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002bd6:	4b08      	ldr	r3, [pc, #32]	; (8002bf8 <MX_USART6_UART_Init+0x4c>)
 8002bd8:	2200      	movs	r2, #0
 8002bda:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8002bdc:	4b06      	ldr	r3, [pc, #24]	; (8002bf8 <MX_USART6_UART_Init+0x4c>)
 8002bde:	2200      	movs	r2, #0
 8002be0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8002be2:	4805      	ldr	r0, [pc, #20]	; (8002bf8 <MX_USART6_UART_Init+0x4c>)
 8002be4:	f004 fb38 	bl	8007258 <HAL_UART_Init>
 8002be8:	4603      	mov	r3, r0
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d001      	beq.n	8002bf2 <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 8002bee:	f7ff fad1 	bl	8002194 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8002bf2:	bf00      	nop
 8002bf4:	bd80      	pop	{r7, pc}
 8002bf6:	bf00      	nop
 8002bf8:	20004fc8 	.word	0x20004fc8
 8002bfc:	40011400 	.word	0x40011400

08002c00 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002c00:	b580      	push	{r7, lr}
 8002c02:	b08e      	sub	sp, #56	; 0x38
 8002c04:	af00      	add	r7, sp, #0
 8002c06:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c08:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002c0c:	2200      	movs	r2, #0
 8002c0e:	601a      	str	r2, [r3, #0]
 8002c10:	605a      	str	r2, [r3, #4]
 8002c12:	609a      	str	r2, [r3, #8]
 8002c14:	60da      	str	r2, [r3, #12]
 8002c16:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	4a68      	ldr	r2, [pc, #416]	; (8002dc0 <HAL_UART_MspInit+0x1c0>)
 8002c1e:	4293      	cmp	r3, r2
 8002c20:	d164      	bne.n	8002cec <HAL_UART_MspInit+0xec>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002c22:	2300      	movs	r3, #0
 8002c24:	623b      	str	r3, [r7, #32]
 8002c26:	4b67      	ldr	r3, [pc, #412]	; (8002dc4 <HAL_UART_MspInit+0x1c4>)
 8002c28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c2a:	4a66      	ldr	r2, [pc, #408]	; (8002dc4 <HAL_UART_MspInit+0x1c4>)
 8002c2c:	f043 0310 	orr.w	r3, r3, #16
 8002c30:	6453      	str	r3, [r2, #68]	; 0x44
 8002c32:	4b64      	ldr	r3, [pc, #400]	; (8002dc4 <HAL_UART_MspInit+0x1c4>)
 8002c34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c36:	f003 0310 	and.w	r3, r3, #16
 8002c3a:	623b      	str	r3, [r7, #32]
 8002c3c:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002c3e:	2300      	movs	r3, #0
 8002c40:	61fb      	str	r3, [r7, #28]
 8002c42:	4b60      	ldr	r3, [pc, #384]	; (8002dc4 <HAL_UART_MspInit+0x1c4>)
 8002c44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c46:	4a5f      	ldr	r2, [pc, #380]	; (8002dc4 <HAL_UART_MspInit+0x1c4>)
 8002c48:	f043 0301 	orr.w	r3, r3, #1
 8002c4c:	6313      	str	r3, [r2, #48]	; 0x30
 8002c4e:	4b5d      	ldr	r3, [pc, #372]	; (8002dc4 <HAL_UART_MspInit+0x1c4>)
 8002c50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c52:	f003 0301 	and.w	r3, r3, #1
 8002c56:	61fb      	str	r3, [r7, #28]
 8002c58:	69fb      	ldr	r3, [r7, #28]
    /**USART1 GPIO Configuration
    PA10     ------> USART1_RX
    PA9     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_9;
 8002c5a:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8002c5e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c60:	2302      	movs	r3, #2
 8002c62:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c64:	2300      	movs	r3, #0
 8002c66:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002c68:	2303      	movs	r3, #3
 8002c6a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002c6c:	2307      	movs	r3, #7
 8002c6e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002c70:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002c74:	4619      	mov	r1, r3
 8002c76:	4854      	ldr	r0, [pc, #336]	; (8002dc8 <HAL_UART_MspInit+0x1c8>)
 8002c78:	f001 fbb2 	bl	80043e0 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA2_Stream7;
 8002c7c:	4b53      	ldr	r3, [pc, #332]	; (8002dcc <HAL_UART_MspInit+0x1cc>)
 8002c7e:	4a54      	ldr	r2, [pc, #336]	; (8002dd0 <HAL_UART_MspInit+0x1d0>)
 8002c80:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Channel = DMA_CHANNEL_4;
 8002c82:	4b52      	ldr	r3, [pc, #328]	; (8002dcc <HAL_UART_MspInit+0x1cc>)
 8002c84:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002c88:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002c8a:	4b50      	ldr	r3, [pc, #320]	; (8002dcc <HAL_UART_MspInit+0x1cc>)
 8002c8c:	2240      	movs	r2, #64	; 0x40
 8002c8e:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002c90:	4b4e      	ldr	r3, [pc, #312]	; (8002dcc <HAL_UART_MspInit+0x1cc>)
 8002c92:	2200      	movs	r2, #0
 8002c94:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002c96:	4b4d      	ldr	r3, [pc, #308]	; (8002dcc <HAL_UART_MspInit+0x1cc>)
 8002c98:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002c9c:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002c9e:	4b4b      	ldr	r3, [pc, #300]	; (8002dcc <HAL_UART_MspInit+0x1cc>)
 8002ca0:	2200      	movs	r2, #0
 8002ca2:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002ca4:	4b49      	ldr	r3, [pc, #292]	; (8002dcc <HAL_UART_MspInit+0x1cc>)
 8002ca6:	2200      	movs	r2, #0
 8002ca8:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8002caa:	4b48      	ldr	r3, [pc, #288]	; (8002dcc <HAL_UART_MspInit+0x1cc>)
 8002cac:	2200      	movs	r2, #0
 8002cae:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8002cb0:	4b46      	ldr	r3, [pc, #280]	; (8002dcc <HAL_UART_MspInit+0x1cc>)
 8002cb2:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002cb6:	621a      	str	r2, [r3, #32]
    hdma_usart1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002cb8:	4b44      	ldr	r3, [pc, #272]	; (8002dcc <HAL_UART_MspInit+0x1cc>)
 8002cba:	2200      	movs	r2, #0
 8002cbc:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8002cbe:	4843      	ldr	r0, [pc, #268]	; (8002dcc <HAL_UART_MspInit+0x1cc>)
 8002cc0:	f001 f812 	bl	8003ce8 <HAL_DMA_Init>
 8002cc4:	4603      	mov	r3, r0
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d001      	beq.n	8002cce <HAL_UART_MspInit+0xce>
    {
      Error_Handler();
 8002cca:	f7ff fa63 	bl	8002194 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart1_tx);
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	4a3e      	ldr	r2, [pc, #248]	; (8002dcc <HAL_UART_MspInit+0x1cc>)
 8002cd2:	635a      	str	r2, [r3, #52]	; 0x34
 8002cd4:	4a3d      	ldr	r2, [pc, #244]	; (8002dcc <HAL_UART_MspInit+0x1cc>)
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8002cda:	2200      	movs	r2, #0
 8002cdc:	2105      	movs	r1, #5
 8002cde:	2025      	movs	r0, #37	; 0x25
 8002ce0:	f000 ffd8 	bl	8003c94 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002ce4:	2025      	movs	r0, #37	; 0x25
 8002ce6:	f000 fff1 	bl	8003ccc <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }
}
 8002cea:	e114      	b.n	8002f16 <HAL_UART_MspInit+0x316>
  else if(uartHandle->Instance==USART3)
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	4a38      	ldr	r2, [pc, #224]	; (8002dd4 <HAL_UART_MspInit+0x1d4>)
 8002cf2:	4293      	cmp	r3, r2
 8002cf4:	d176      	bne.n	8002de4 <HAL_UART_MspInit+0x1e4>
    __HAL_RCC_USART3_CLK_ENABLE();
 8002cf6:	2300      	movs	r3, #0
 8002cf8:	61bb      	str	r3, [r7, #24]
 8002cfa:	4b32      	ldr	r3, [pc, #200]	; (8002dc4 <HAL_UART_MspInit+0x1c4>)
 8002cfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cfe:	4a31      	ldr	r2, [pc, #196]	; (8002dc4 <HAL_UART_MspInit+0x1c4>)
 8002d00:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002d04:	6413      	str	r3, [r2, #64]	; 0x40
 8002d06:	4b2f      	ldr	r3, [pc, #188]	; (8002dc4 <HAL_UART_MspInit+0x1c4>)
 8002d08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d0a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002d0e:	61bb      	str	r3, [r7, #24]
 8002d10:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002d12:	2300      	movs	r3, #0
 8002d14:	617b      	str	r3, [r7, #20]
 8002d16:	4b2b      	ldr	r3, [pc, #172]	; (8002dc4 <HAL_UART_MspInit+0x1c4>)
 8002d18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d1a:	4a2a      	ldr	r2, [pc, #168]	; (8002dc4 <HAL_UART_MspInit+0x1c4>)
 8002d1c:	f043 0304 	orr.w	r3, r3, #4
 8002d20:	6313      	str	r3, [r2, #48]	; 0x30
 8002d22:	4b28      	ldr	r3, [pc, #160]	; (8002dc4 <HAL_UART_MspInit+0x1c4>)
 8002d24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d26:	f003 0304 	and.w	r3, r3, #4
 8002d2a:	617b      	str	r3, [r7, #20]
 8002d2c:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_10;
 8002d2e:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8002d32:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d34:	2302      	movs	r3, #2
 8002d36:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d38:	2300      	movs	r3, #0
 8002d3a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002d3c:	2303      	movs	r3, #3
 8002d3e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002d40:	2307      	movs	r3, #7
 8002d42:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002d44:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002d48:	4619      	mov	r1, r3
 8002d4a:	4823      	ldr	r0, [pc, #140]	; (8002dd8 <HAL_UART_MspInit+0x1d8>)
 8002d4c:	f001 fb48 	bl	80043e0 <HAL_GPIO_Init>
    hdma_usart3_rx.Instance = DMA1_Stream1;
 8002d50:	4b22      	ldr	r3, [pc, #136]	; (8002ddc <HAL_UART_MspInit+0x1dc>)
 8002d52:	4a23      	ldr	r2, [pc, #140]	; (8002de0 <HAL_UART_MspInit+0x1e0>)
 8002d54:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Channel = DMA_CHANNEL_4;
 8002d56:	4b21      	ldr	r3, [pc, #132]	; (8002ddc <HAL_UART_MspInit+0x1dc>)
 8002d58:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002d5c:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002d5e:	4b1f      	ldr	r3, [pc, #124]	; (8002ddc <HAL_UART_MspInit+0x1dc>)
 8002d60:	2200      	movs	r2, #0
 8002d62:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002d64:	4b1d      	ldr	r3, [pc, #116]	; (8002ddc <HAL_UART_MspInit+0x1dc>)
 8002d66:	2200      	movs	r2, #0
 8002d68:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002d6a:	4b1c      	ldr	r3, [pc, #112]	; (8002ddc <HAL_UART_MspInit+0x1dc>)
 8002d6c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002d70:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002d72:	4b1a      	ldr	r3, [pc, #104]	; (8002ddc <HAL_UART_MspInit+0x1dc>)
 8002d74:	2200      	movs	r2, #0
 8002d76:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002d78:	4b18      	ldr	r3, [pc, #96]	; (8002ddc <HAL_UART_MspInit+0x1dc>)
 8002d7a:	2200      	movs	r2, #0
 8002d7c:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_NORMAL;
 8002d7e:	4b17      	ldr	r3, [pc, #92]	; (8002ddc <HAL_UART_MspInit+0x1dc>)
 8002d80:	2200      	movs	r2, #0
 8002d82:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_HIGH;
 8002d84:	4b15      	ldr	r3, [pc, #84]	; (8002ddc <HAL_UART_MspInit+0x1dc>)
 8002d86:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002d8a:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002d8c:	4b13      	ldr	r3, [pc, #76]	; (8002ddc <HAL_UART_MspInit+0x1dc>)
 8002d8e:	2200      	movs	r2, #0
 8002d90:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 8002d92:	4812      	ldr	r0, [pc, #72]	; (8002ddc <HAL_UART_MspInit+0x1dc>)
 8002d94:	f000 ffa8 	bl	8003ce8 <HAL_DMA_Init>
 8002d98:	4603      	mov	r3, r0
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d001      	beq.n	8002da2 <HAL_UART_MspInit+0x1a2>
      Error_Handler();
 8002d9e:	f7ff f9f9 	bl	8002194 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart3_rx);
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	4a0d      	ldr	r2, [pc, #52]	; (8002ddc <HAL_UART_MspInit+0x1dc>)
 8002da6:	639a      	str	r2, [r3, #56]	; 0x38
 8002da8:	4a0c      	ldr	r2, [pc, #48]	; (8002ddc <HAL_UART_MspInit+0x1dc>)
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 8002dae:	2200      	movs	r2, #0
 8002db0:	2105      	movs	r1, #5
 8002db2:	2027      	movs	r0, #39	; 0x27
 8002db4:	f000 ff6e 	bl	8003c94 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8002db8:	2027      	movs	r0, #39	; 0x27
 8002dba:	f000 ff87 	bl	8003ccc <HAL_NVIC_EnableIRQ>
}
 8002dbe:	e0aa      	b.n	8002f16 <HAL_UART_MspInit+0x316>
 8002dc0:	40011000 	.word	0x40011000
 8002dc4:	40023800 	.word	0x40023800
 8002dc8:	40020000 	.word	0x40020000
 8002dcc:	20004ec4 	.word	0x20004ec4
 8002dd0:	400264b8 	.word	0x400264b8
 8002dd4:	40004800 	.word	0x40004800
 8002dd8:	40020800 	.word	0x40020800
 8002ddc:	20004e20 	.word	0x20004e20
 8002de0:	40026028 	.word	0x40026028
  else if(uartHandle->Instance==USART6)
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	4a4d      	ldr	r2, [pc, #308]	; (8002f20 <HAL_UART_MspInit+0x320>)
 8002dea:	4293      	cmp	r3, r2
 8002dec:	f040 8093 	bne.w	8002f16 <HAL_UART_MspInit+0x316>
    __HAL_RCC_USART6_CLK_ENABLE();
 8002df0:	2300      	movs	r3, #0
 8002df2:	613b      	str	r3, [r7, #16]
 8002df4:	4b4b      	ldr	r3, [pc, #300]	; (8002f24 <HAL_UART_MspInit+0x324>)
 8002df6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002df8:	4a4a      	ldr	r2, [pc, #296]	; (8002f24 <HAL_UART_MspInit+0x324>)
 8002dfa:	f043 0320 	orr.w	r3, r3, #32
 8002dfe:	6453      	str	r3, [r2, #68]	; 0x44
 8002e00:	4b48      	ldr	r3, [pc, #288]	; (8002f24 <HAL_UART_MspInit+0x324>)
 8002e02:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e04:	f003 0320 	and.w	r3, r3, #32
 8002e08:	613b      	str	r3, [r7, #16]
 8002e0a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8002e0c:	2300      	movs	r3, #0
 8002e0e:	60fb      	str	r3, [r7, #12]
 8002e10:	4b44      	ldr	r3, [pc, #272]	; (8002f24 <HAL_UART_MspInit+0x324>)
 8002e12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e14:	4a43      	ldr	r2, [pc, #268]	; (8002f24 <HAL_UART_MspInit+0x324>)
 8002e16:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002e1a:	6313      	str	r3, [r2, #48]	; 0x30
 8002e1c:	4b41      	ldr	r3, [pc, #260]	; (8002f24 <HAL_UART_MspInit+0x324>)
 8002e1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e20:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e24:	60fb      	str	r3, [r7, #12]
 8002e26:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_9;
 8002e28:	f44f 4384 	mov.w	r3, #16896	; 0x4200
 8002e2c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e2e:	2302      	movs	r3, #2
 8002e30:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e32:	2300      	movs	r3, #0
 8002e34:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002e36:	2303      	movs	r3, #3
 8002e38:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8002e3a:	2308      	movs	r3, #8
 8002e3c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002e3e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002e42:	4619      	mov	r1, r3
 8002e44:	4838      	ldr	r0, [pc, #224]	; (8002f28 <HAL_UART_MspInit+0x328>)
 8002e46:	f001 facb 	bl	80043e0 <HAL_GPIO_Init>
    hdma_usart6_rx.Instance = DMA2_Stream1;
 8002e4a:	4b38      	ldr	r3, [pc, #224]	; (8002f2c <HAL_UART_MspInit+0x32c>)
 8002e4c:	4a38      	ldr	r2, [pc, #224]	; (8002f30 <HAL_UART_MspInit+0x330>)
 8002e4e:	601a      	str	r2, [r3, #0]
    hdma_usart6_rx.Init.Channel = DMA_CHANNEL_5;
 8002e50:	4b36      	ldr	r3, [pc, #216]	; (8002f2c <HAL_UART_MspInit+0x32c>)
 8002e52:	f04f 6220 	mov.w	r2, #167772160	; 0xa000000
 8002e56:	605a      	str	r2, [r3, #4]
    hdma_usart6_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002e58:	4b34      	ldr	r3, [pc, #208]	; (8002f2c <HAL_UART_MspInit+0x32c>)
 8002e5a:	2200      	movs	r2, #0
 8002e5c:	609a      	str	r2, [r3, #8]
    hdma_usart6_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002e5e:	4b33      	ldr	r3, [pc, #204]	; (8002f2c <HAL_UART_MspInit+0x32c>)
 8002e60:	2200      	movs	r2, #0
 8002e62:	60da      	str	r2, [r3, #12]
    hdma_usart6_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002e64:	4b31      	ldr	r3, [pc, #196]	; (8002f2c <HAL_UART_MspInit+0x32c>)
 8002e66:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002e6a:	611a      	str	r2, [r3, #16]
    hdma_usart6_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002e6c:	4b2f      	ldr	r3, [pc, #188]	; (8002f2c <HAL_UART_MspInit+0x32c>)
 8002e6e:	2200      	movs	r2, #0
 8002e70:	615a      	str	r2, [r3, #20]
    hdma_usart6_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002e72:	4b2e      	ldr	r3, [pc, #184]	; (8002f2c <HAL_UART_MspInit+0x32c>)
 8002e74:	2200      	movs	r2, #0
 8002e76:	619a      	str	r2, [r3, #24]
    hdma_usart6_rx.Init.Mode = DMA_NORMAL;
 8002e78:	4b2c      	ldr	r3, [pc, #176]	; (8002f2c <HAL_UART_MspInit+0x32c>)
 8002e7a:	2200      	movs	r2, #0
 8002e7c:	61da      	str	r2, [r3, #28]
    hdma_usart6_rx.Init.Priority = DMA_PRIORITY_HIGH;
 8002e7e:	4b2b      	ldr	r3, [pc, #172]	; (8002f2c <HAL_UART_MspInit+0x32c>)
 8002e80:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002e84:	621a      	str	r2, [r3, #32]
    hdma_usart6_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002e86:	4b29      	ldr	r3, [pc, #164]	; (8002f2c <HAL_UART_MspInit+0x32c>)
 8002e88:	2200      	movs	r2, #0
 8002e8a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart6_rx) != HAL_OK)
 8002e8c:	4827      	ldr	r0, [pc, #156]	; (8002f2c <HAL_UART_MspInit+0x32c>)
 8002e8e:	f000 ff2b 	bl	8003ce8 <HAL_DMA_Init>
 8002e92:	4603      	mov	r3, r0
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	d001      	beq.n	8002e9c <HAL_UART_MspInit+0x29c>
      Error_Handler();
 8002e98:	f7ff f97c 	bl	8002194 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart6_rx);
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	4a23      	ldr	r2, [pc, #140]	; (8002f2c <HAL_UART_MspInit+0x32c>)
 8002ea0:	639a      	str	r2, [r3, #56]	; 0x38
 8002ea2:	4a22      	ldr	r2, [pc, #136]	; (8002f2c <HAL_UART_MspInit+0x32c>)
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_usart6_tx.Instance = DMA2_Stream6;
 8002ea8:	4b22      	ldr	r3, [pc, #136]	; (8002f34 <HAL_UART_MspInit+0x334>)
 8002eaa:	4a23      	ldr	r2, [pc, #140]	; (8002f38 <HAL_UART_MspInit+0x338>)
 8002eac:	601a      	str	r2, [r3, #0]
    hdma_usart6_tx.Init.Channel = DMA_CHANNEL_5;
 8002eae:	4b21      	ldr	r3, [pc, #132]	; (8002f34 <HAL_UART_MspInit+0x334>)
 8002eb0:	f04f 6220 	mov.w	r2, #167772160	; 0xa000000
 8002eb4:	605a      	str	r2, [r3, #4]
    hdma_usart6_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002eb6:	4b1f      	ldr	r3, [pc, #124]	; (8002f34 <HAL_UART_MspInit+0x334>)
 8002eb8:	2240      	movs	r2, #64	; 0x40
 8002eba:	609a      	str	r2, [r3, #8]
    hdma_usart6_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002ebc:	4b1d      	ldr	r3, [pc, #116]	; (8002f34 <HAL_UART_MspInit+0x334>)
 8002ebe:	2200      	movs	r2, #0
 8002ec0:	60da      	str	r2, [r3, #12]
    hdma_usart6_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002ec2:	4b1c      	ldr	r3, [pc, #112]	; (8002f34 <HAL_UART_MspInit+0x334>)
 8002ec4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002ec8:	611a      	str	r2, [r3, #16]
    hdma_usart6_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002eca:	4b1a      	ldr	r3, [pc, #104]	; (8002f34 <HAL_UART_MspInit+0x334>)
 8002ecc:	2200      	movs	r2, #0
 8002ece:	615a      	str	r2, [r3, #20]
    hdma_usart6_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002ed0:	4b18      	ldr	r3, [pc, #96]	; (8002f34 <HAL_UART_MspInit+0x334>)
 8002ed2:	2200      	movs	r2, #0
 8002ed4:	619a      	str	r2, [r3, #24]
    hdma_usart6_tx.Init.Mode = DMA_NORMAL;
 8002ed6:	4b17      	ldr	r3, [pc, #92]	; (8002f34 <HAL_UART_MspInit+0x334>)
 8002ed8:	2200      	movs	r2, #0
 8002eda:	61da      	str	r2, [r3, #28]
    hdma_usart6_tx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8002edc:	4b15      	ldr	r3, [pc, #84]	; (8002f34 <HAL_UART_MspInit+0x334>)
 8002ede:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002ee2:	621a      	str	r2, [r3, #32]
    hdma_usart6_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002ee4:	4b13      	ldr	r3, [pc, #76]	; (8002f34 <HAL_UART_MspInit+0x334>)
 8002ee6:	2200      	movs	r2, #0
 8002ee8:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart6_tx) != HAL_OK)
 8002eea:	4812      	ldr	r0, [pc, #72]	; (8002f34 <HAL_UART_MspInit+0x334>)
 8002eec:	f000 fefc 	bl	8003ce8 <HAL_DMA_Init>
 8002ef0:	4603      	mov	r3, r0
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d001      	beq.n	8002efa <HAL_UART_MspInit+0x2fa>
      Error_Handler();
 8002ef6:	f7ff f94d 	bl	8002194 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart6_tx);
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	4a0d      	ldr	r2, [pc, #52]	; (8002f34 <HAL_UART_MspInit+0x334>)
 8002efe:	635a      	str	r2, [r3, #52]	; 0x34
 8002f00:	4a0c      	ldr	r2, [pc, #48]	; (8002f34 <HAL_UART_MspInit+0x334>)
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART6_IRQn, 5, 0);
 8002f06:	2200      	movs	r2, #0
 8002f08:	2105      	movs	r1, #5
 8002f0a:	2047      	movs	r0, #71	; 0x47
 8002f0c:	f000 fec2 	bl	8003c94 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 8002f10:	2047      	movs	r0, #71	; 0x47
 8002f12:	f000 fedb 	bl	8003ccc <HAL_NVIC_EnableIRQ>
}
 8002f16:	bf00      	nop
 8002f18:	3738      	adds	r7, #56	; 0x38
 8002f1a:	46bd      	mov	sp, r7
 8002f1c:	bd80      	pop	{r7, pc}
 8002f1e:	bf00      	nop
 8002f20:	40011400 	.word	0x40011400
 8002f24:	40023800 	.word	0x40023800
 8002f28:	40021800 	.word	0x40021800
 8002f2c:	20004dc0 	.word	0x20004dc0
 8002f30:	40026428 	.word	0x40026428
 8002f34:	20004f24 	.word	0x20004f24
 8002f38:	400264a0 	.word	0x400264a0

08002f3c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8002f3c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002f74 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002f40:	480d      	ldr	r0, [pc, #52]	; (8002f78 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002f42:	490e      	ldr	r1, [pc, #56]	; (8002f7c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002f44:	4a0e      	ldr	r2, [pc, #56]	; (8002f80 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002f46:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002f48:	e002      	b.n	8002f50 <LoopCopyDataInit>

08002f4a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002f4a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002f4c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002f4e:	3304      	adds	r3, #4

08002f50 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002f50:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002f52:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002f54:	d3f9      	bcc.n	8002f4a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002f56:	4a0b      	ldr	r2, [pc, #44]	; (8002f84 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002f58:	4c0b      	ldr	r4, [pc, #44]	; (8002f88 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002f5a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002f5c:	e001      	b.n	8002f62 <LoopFillZerobss>

08002f5e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002f5e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002f60:	3204      	adds	r2, #4

08002f62 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002f62:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002f64:	d3fb      	bcc.n	8002f5e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8002f66:	f7ff fb83 	bl	8002670 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002f6a:	f00a f805 	bl	800cf78 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002f6e:	f7ff f853 	bl	8002018 <main>
  bx  lr    
 8002f72:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8002f74:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002f78:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002f7c:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 8002f80:	0800f7d8 	.word	0x0800f7d8
  ldr r2, =_sbss
 8002f84:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 8002f88:	20005458 	.word	0x20005458

08002f8c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002f8c:	e7fe      	b.n	8002f8c <ADC_IRQHandler>
	...

08002f90 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002f90:	b580      	push	{r7, lr}
 8002f92:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002f94:	4b0e      	ldr	r3, [pc, #56]	; (8002fd0 <HAL_Init+0x40>)
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	4a0d      	ldr	r2, [pc, #52]	; (8002fd0 <HAL_Init+0x40>)
 8002f9a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002f9e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002fa0:	4b0b      	ldr	r3, [pc, #44]	; (8002fd0 <HAL_Init+0x40>)
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	4a0a      	ldr	r2, [pc, #40]	; (8002fd0 <HAL_Init+0x40>)
 8002fa6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002faa:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002fac:	4b08      	ldr	r3, [pc, #32]	; (8002fd0 <HAL_Init+0x40>)
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	4a07      	ldr	r2, [pc, #28]	; (8002fd0 <HAL_Init+0x40>)
 8002fb2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002fb6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002fb8:	2003      	movs	r0, #3
 8002fba:	f000 fe60 	bl	8003c7e <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002fbe:	2000      	movs	r0, #0
 8002fc0:	f7ff fa5a 	bl	8002478 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002fc4:	f7ff fa2c 	bl	8002420 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002fc8:	2300      	movs	r3, #0
}
 8002fca:	4618      	mov	r0, r3
 8002fcc:	bd80      	pop	{r7, pc}
 8002fce:	bf00      	nop
 8002fd0:	40023c00 	.word	0x40023c00

08002fd4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002fd4:	b480      	push	{r7}
 8002fd6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002fd8:	4b06      	ldr	r3, [pc, #24]	; (8002ff4 <HAL_IncTick+0x20>)
 8002fda:	781b      	ldrb	r3, [r3, #0]
 8002fdc:	461a      	mov	r2, r3
 8002fde:	4b06      	ldr	r3, [pc, #24]	; (8002ff8 <HAL_IncTick+0x24>)
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	4413      	add	r3, r2
 8002fe4:	4a04      	ldr	r2, [pc, #16]	; (8002ff8 <HAL_IncTick+0x24>)
 8002fe6:	6013      	str	r3, [r2, #0]
}
 8002fe8:	bf00      	nop
 8002fea:	46bd      	mov	sp, r7
 8002fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ff0:	4770      	bx	lr
 8002ff2:	bf00      	nop
 8002ff4:	20000008 	.word	0x20000008
 8002ff8:	2000500c 	.word	0x2000500c

08002ffc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002ffc:	b480      	push	{r7}
 8002ffe:	af00      	add	r7, sp, #0
  return uwTick;
 8003000:	4b03      	ldr	r3, [pc, #12]	; (8003010 <HAL_GetTick+0x14>)
 8003002:	681b      	ldr	r3, [r3, #0]
}
 8003004:	4618      	mov	r0, r3
 8003006:	46bd      	mov	sp, r7
 8003008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800300c:	4770      	bx	lr
 800300e:	bf00      	nop
 8003010:	2000500c 	.word	0x2000500c

08003014 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8003014:	b580      	push	{r7, lr}
 8003016:	b084      	sub	sp, #16
 8003018:	af00      	add	r7, sp, #0
 800301a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	2b00      	cmp	r3, #0
 8003020:	d101      	bne.n	8003026 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8003022:	2301      	movs	r3, #1
 8003024:	e0ed      	b.n	8003202 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	f893 3020 	ldrb.w	r3, [r3, #32]
 800302c:	b2db      	uxtb	r3, r3
 800302e:	2b00      	cmp	r3, #0
 8003030:	d102      	bne.n	8003038 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8003032:	6878      	ldr	r0, [r7, #4]
 8003034:	f7fe fe10 	bl	8001c58 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	681a      	ldr	r2, [r3, #0]
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	f042 0201 	orr.w	r2, r2, #1
 8003046:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003048:	f7ff ffd8 	bl	8002ffc <HAL_GetTick>
 800304c:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800304e:	e012      	b.n	8003076 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8003050:	f7ff ffd4 	bl	8002ffc <HAL_GetTick>
 8003054:	4602      	mov	r2, r0
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	1ad3      	subs	r3, r2, r3
 800305a:	2b0a      	cmp	r3, #10
 800305c:	d90b      	bls.n	8003076 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003062:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	2205      	movs	r2, #5
 800306e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8003072:	2301      	movs	r3, #1
 8003074:	e0c5      	b.n	8003202 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	685b      	ldr	r3, [r3, #4]
 800307c:	f003 0301 	and.w	r3, r3, #1
 8003080:	2b00      	cmp	r3, #0
 8003082:	d0e5      	beq.n	8003050 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	681a      	ldr	r2, [r3, #0]
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	f022 0202 	bic.w	r2, r2, #2
 8003092:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003094:	f7ff ffb2 	bl	8002ffc <HAL_GetTick>
 8003098:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800309a:	e012      	b.n	80030c2 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800309c:	f7ff ffae 	bl	8002ffc <HAL_GetTick>
 80030a0:	4602      	mov	r2, r0
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	1ad3      	subs	r3, r2, r3
 80030a6:	2b0a      	cmp	r3, #10
 80030a8:	d90b      	bls.n	80030c2 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030ae:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	2205      	movs	r2, #5
 80030ba:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80030be:	2301      	movs	r3, #1
 80030c0:	e09f      	b.n	8003202 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	685b      	ldr	r3, [r3, #4]
 80030c8:	f003 0302 	and.w	r3, r3, #2
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d1e5      	bne.n	800309c <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	7e1b      	ldrb	r3, [r3, #24]
 80030d4:	2b01      	cmp	r3, #1
 80030d6:	d108      	bne.n	80030ea <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	681a      	ldr	r2, [r3, #0]
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80030e6:	601a      	str	r2, [r3, #0]
 80030e8:	e007      	b.n	80030fa <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	681a      	ldr	r2, [r3, #0]
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80030f8:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	7e5b      	ldrb	r3, [r3, #25]
 80030fe:	2b01      	cmp	r3, #1
 8003100:	d108      	bne.n	8003114 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	681a      	ldr	r2, [r3, #0]
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003110:	601a      	str	r2, [r3, #0]
 8003112:	e007      	b.n	8003124 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	681a      	ldr	r2, [r3, #0]
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003122:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	7e9b      	ldrb	r3, [r3, #26]
 8003128:	2b01      	cmp	r3, #1
 800312a:	d108      	bne.n	800313e <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	681a      	ldr	r2, [r3, #0]
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	f042 0220 	orr.w	r2, r2, #32
 800313a:	601a      	str	r2, [r3, #0]
 800313c:	e007      	b.n	800314e <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	681a      	ldr	r2, [r3, #0]
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	f022 0220 	bic.w	r2, r2, #32
 800314c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	7edb      	ldrb	r3, [r3, #27]
 8003152:	2b01      	cmp	r3, #1
 8003154:	d108      	bne.n	8003168 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	681a      	ldr	r2, [r3, #0]
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	f022 0210 	bic.w	r2, r2, #16
 8003164:	601a      	str	r2, [r3, #0]
 8003166:	e007      	b.n	8003178 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	681a      	ldr	r2, [r3, #0]
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	f042 0210 	orr.w	r2, r2, #16
 8003176:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	7f1b      	ldrb	r3, [r3, #28]
 800317c:	2b01      	cmp	r3, #1
 800317e:	d108      	bne.n	8003192 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	681a      	ldr	r2, [r3, #0]
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	f042 0208 	orr.w	r2, r2, #8
 800318e:	601a      	str	r2, [r3, #0]
 8003190:	e007      	b.n	80031a2 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	681a      	ldr	r2, [r3, #0]
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	f022 0208 	bic.w	r2, r2, #8
 80031a0:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	7f5b      	ldrb	r3, [r3, #29]
 80031a6:	2b01      	cmp	r3, #1
 80031a8:	d108      	bne.n	80031bc <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	681a      	ldr	r2, [r3, #0]
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	f042 0204 	orr.w	r2, r2, #4
 80031b8:	601a      	str	r2, [r3, #0]
 80031ba:	e007      	b.n	80031cc <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	681a      	ldr	r2, [r3, #0]
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	f022 0204 	bic.w	r2, r2, #4
 80031ca:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	689a      	ldr	r2, [r3, #8]
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	68db      	ldr	r3, [r3, #12]
 80031d4:	431a      	orrs	r2, r3
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	691b      	ldr	r3, [r3, #16]
 80031da:	431a      	orrs	r2, r3
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	695b      	ldr	r3, [r3, #20]
 80031e0:	ea42 0103 	orr.w	r1, r2, r3
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	685b      	ldr	r3, [r3, #4]
 80031e8:	1e5a      	subs	r2, r3, #1
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	430a      	orrs	r2, r1
 80031f0:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	2200      	movs	r2, #0
 80031f6:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	2201      	movs	r2, #1
 80031fc:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8003200:	2300      	movs	r3, #0
}
 8003202:	4618      	mov	r0, r3
 8003204:	3710      	adds	r7, #16
 8003206:	46bd      	mov	sp, r7
 8003208:	bd80      	pop	{r7, pc}
	...

0800320c <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 800320c:	b480      	push	{r7}
 800320e:	b087      	sub	sp, #28
 8003210:	af00      	add	r7, sp, #0
 8003212:	6078      	str	r0, [r7, #4]
 8003214:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003222:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8003224:	7cfb      	ldrb	r3, [r7, #19]
 8003226:	2b01      	cmp	r3, #1
 8003228:	d003      	beq.n	8003232 <HAL_CAN_ConfigFilter+0x26>
 800322a:	7cfb      	ldrb	r3, [r7, #19]
 800322c:	2b02      	cmp	r3, #2
 800322e:	f040 80be 	bne.w	80033ae <HAL_CAN_ConfigFilter+0x1a2>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 8003232:	4b65      	ldr	r3, [pc, #404]	; (80033c8 <HAL_CAN_ConfigFilter+0x1bc>)
 8003234:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8003236:	697b      	ldr	r3, [r7, #20]
 8003238:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800323c:	f043 0201 	orr.w	r2, r3, #1
 8003240:	697b      	ldr	r3, [r7, #20]
 8003242:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 8003246:	697b      	ldr	r3, [r7, #20]
 8003248:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800324c:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8003250:	697b      	ldr	r3, [r7, #20]
 8003252:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 8003256:	697b      	ldr	r3, [r7, #20]
 8003258:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 800325c:	683b      	ldr	r3, [r7, #0]
 800325e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003260:	021b      	lsls	r3, r3, #8
 8003262:	431a      	orrs	r2, r3
 8003264:	697b      	ldr	r3, [r7, #20]
 8003266:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 800326a:	683b      	ldr	r3, [r7, #0]
 800326c:	695b      	ldr	r3, [r3, #20]
 800326e:	f003 031f 	and.w	r3, r3, #31
 8003272:	2201      	movs	r2, #1
 8003274:	fa02 f303 	lsl.w	r3, r2, r3
 8003278:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 800327a:	697b      	ldr	r3, [r7, #20]
 800327c:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	43db      	mvns	r3, r3
 8003284:	401a      	ands	r2, r3
 8003286:	697b      	ldr	r3, [r7, #20]
 8003288:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 800328c:	683b      	ldr	r3, [r7, #0]
 800328e:	69db      	ldr	r3, [r3, #28]
 8003290:	2b00      	cmp	r3, #0
 8003292:	d123      	bne.n	80032dc <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8003294:	697b      	ldr	r3, [r7, #20]
 8003296:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	43db      	mvns	r3, r3
 800329e:	401a      	ands	r2, r3
 80032a0:	697b      	ldr	r3, [r7, #20]
 80032a2:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80032a6:	683b      	ldr	r3, [r7, #0]
 80032a8:	68db      	ldr	r3, [r3, #12]
 80032aa:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80032ac:	683b      	ldr	r3, [r7, #0]
 80032ae:	685b      	ldr	r3, [r3, #4]
 80032b0:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80032b2:	683a      	ldr	r2, [r7, #0]
 80032b4:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80032b6:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80032b8:	697b      	ldr	r3, [r7, #20]
 80032ba:	3248      	adds	r2, #72	; 0x48
 80032bc:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80032c0:	683b      	ldr	r3, [r7, #0]
 80032c2:	689b      	ldr	r3, [r3, #8]
 80032c4:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 80032c6:	683b      	ldr	r3, [r7, #0]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80032cc:	683b      	ldr	r3, [r7, #0]
 80032ce:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80032d0:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80032d2:	6979      	ldr	r1, [r7, #20]
 80032d4:	3348      	adds	r3, #72	; 0x48
 80032d6:	00db      	lsls	r3, r3, #3
 80032d8:	440b      	add	r3, r1
 80032da:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 80032dc:	683b      	ldr	r3, [r7, #0]
 80032de:	69db      	ldr	r3, [r3, #28]
 80032e0:	2b01      	cmp	r3, #1
 80032e2:	d122      	bne.n	800332a <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 80032e4:	697b      	ldr	r3, [r7, #20]
 80032e6:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	431a      	orrs	r2, r3
 80032ee:	697b      	ldr	r3, [r7, #20]
 80032f0:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80032f4:	683b      	ldr	r3, [r7, #0]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80032fa:	683b      	ldr	r3, [r7, #0]
 80032fc:	685b      	ldr	r3, [r3, #4]
 80032fe:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8003300:	683a      	ldr	r2, [r7, #0]
 8003302:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8003304:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8003306:	697b      	ldr	r3, [r7, #20]
 8003308:	3248      	adds	r2, #72	; 0x48
 800330a:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800330e:	683b      	ldr	r3, [r7, #0]
 8003310:	689b      	ldr	r3, [r3, #8]
 8003312:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8003314:	683b      	ldr	r3, [r7, #0]
 8003316:	68db      	ldr	r3, [r3, #12]
 8003318:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800331a:	683b      	ldr	r3, [r7, #0]
 800331c:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800331e:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8003320:	6979      	ldr	r1, [r7, #20]
 8003322:	3348      	adds	r3, #72	; 0x48
 8003324:	00db      	lsls	r3, r3, #3
 8003326:	440b      	add	r3, r1
 8003328:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 800332a:	683b      	ldr	r3, [r7, #0]
 800332c:	699b      	ldr	r3, [r3, #24]
 800332e:	2b00      	cmp	r3, #0
 8003330:	d109      	bne.n	8003346 <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8003332:	697b      	ldr	r3, [r7, #20]
 8003334:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	43db      	mvns	r3, r3
 800333c:	401a      	ands	r2, r3
 800333e:	697b      	ldr	r3, [r7, #20]
 8003340:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8003344:	e007      	b.n	8003356 <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8003346:	697b      	ldr	r3, [r7, #20]
 8003348:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	431a      	orrs	r2, r3
 8003350:	697b      	ldr	r3, [r7, #20]
 8003352:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8003356:	683b      	ldr	r3, [r7, #0]
 8003358:	691b      	ldr	r3, [r3, #16]
 800335a:	2b00      	cmp	r3, #0
 800335c:	d109      	bne.n	8003372 <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 800335e:	697b      	ldr	r3, [r7, #20]
 8003360:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	43db      	mvns	r3, r3
 8003368:	401a      	ands	r2, r3
 800336a:	697b      	ldr	r3, [r7, #20]
 800336c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8003370:	e007      	b.n	8003382 <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8003372:	697b      	ldr	r3, [r7, #20]
 8003374:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	431a      	orrs	r2, r3
 800337c:	697b      	ldr	r3, [r7, #20]
 800337e:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8003382:	683b      	ldr	r3, [r7, #0]
 8003384:	6a1b      	ldr	r3, [r3, #32]
 8003386:	2b01      	cmp	r3, #1
 8003388:	d107      	bne.n	800339a <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 800338a:	697b      	ldr	r3, [r7, #20]
 800338c:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	431a      	orrs	r2, r3
 8003394:	697b      	ldr	r3, [r7, #20]
 8003396:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 800339a:	697b      	ldr	r3, [r7, #20]
 800339c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80033a0:	f023 0201 	bic.w	r2, r3, #1
 80033a4:	697b      	ldr	r3, [r7, #20]
 80033a6:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 80033aa:	2300      	movs	r3, #0
 80033ac:	e006      	b.n	80033bc <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033b2:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80033ba:	2301      	movs	r3, #1
  }
}
 80033bc:	4618      	mov	r0, r3
 80033be:	371c      	adds	r7, #28
 80033c0:	46bd      	mov	sp, r7
 80033c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033c6:	4770      	bx	lr
 80033c8:	40006400 	.word	0x40006400

080033cc <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 80033cc:	b580      	push	{r7, lr}
 80033ce:	b084      	sub	sp, #16
 80033d0:	af00      	add	r7, sp, #0
 80033d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80033da:	b2db      	uxtb	r3, r3
 80033dc:	2b01      	cmp	r3, #1
 80033de:	d12e      	bne.n	800343e <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	2202      	movs	r2, #2
 80033e4:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	681a      	ldr	r2, [r3, #0]
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	f022 0201 	bic.w	r2, r2, #1
 80033f6:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80033f8:	f7ff fe00 	bl	8002ffc <HAL_GetTick>
 80033fc:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80033fe:	e012      	b.n	8003426 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8003400:	f7ff fdfc 	bl	8002ffc <HAL_GetTick>
 8003404:	4602      	mov	r2, r0
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	1ad3      	subs	r3, r2, r3
 800340a:	2b0a      	cmp	r3, #10
 800340c:	d90b      	bls.n	8003426 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003412:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	2205      	movs	r2, #5
 800341e:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8003422:	2301      	movs	r3, #1
 8003424:	e012      	b.n	800344c <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	685b      	ldr	r3, [r3, #4]
 800342c:	f003 0301 	and.w	r3, r3, #1
 8003430:	2b00      	cmp	r3, #0
 8003432:	d1e5      	bne.n	8003400 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	2200      	movs	r2, #0
 8003438:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 800343a:	2300      	movs	r3, #0
 800343c:	e006      	b.n	800344c <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003442:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800344a:	2301      	movs	r3, #1
  }
}
 800344c:	4618      	mov	r0, r3
 800344e:	3710      	adds	r7, #16
 8003450:	46bd      	mov	sp, r7
 8003452:	bd80      	pop	{r7, pc}

08003454 <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8003454:	b480      	push	{r7}
 8003456:	b087      	sub	sp, #28
 8003458:	af00      	add	r7, sp, #0
 800345a:	60f8      	str	r0, [r7, #12]
 800345c:	60b9      	str	r1, [r7, #8]
 800345e:	607a      	str	r2, [r7, #4]
 8003460:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003468:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 800346a:	7dfb      	ldrb	r3, [r7, #23]
 800346c:	2b01      	cmp	r3, #1
 800346e:	d003      	beq.n	8003478 <HAL_CAN_GetRxMessage+0x24>
 8003470:	7dfb      	ldrb	r3, [r7, #23]
 8003472:	2b02      	cmp	r3, #2
 8003474:	f040 80f3 	bne.w	800365e <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8003478:	68bb      	ldr	r3, [r7, #8]
 800347a:	2b00      	cmp	r3, #0
 800347c:	d10e      	bne.n	800349c <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	68db      	ldr	r3, [r3, #12]
 8003484:	f003 0303 	and.w	r3, r3, #3
 8003488:	2b00      	cmp	r3, #0
 800348a:	d116      	bne.n	80034ba <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003490:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8003498:	2301      	movs	r3, #1
 800349a:	e0e7      	b.n	800366c <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	691b      	ldr	r3, [r3, #16]
 80034a2:	f003 0303 	and.w	r3, r3, #3
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d107      	bne.n	80034ba <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034ae:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80034b6:	2301      	movs	r3, #1
 80034b8:	e0d8      	b.n	800366c <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	681a      	ldr	r2, [r3, #0]
 80034be:	68bb      	ldr	r3, [r7, #8]
 80034c0:	331b      	adds	r3, #27
 80034c2:	011b      	lsls	r3, r3, #4
 80034c4:	4413      	add	r3, r2
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	f003 0204 	and.w	r2, r3, #4
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	689b      	ldr	r3, [r3, #8]
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	d10c      	bne.n	80034f2 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	681a      	ldr	r2, [r3, #0]
 80034dc:	68bb      	ldr	r3, [r7, #8]
 80034de:	331b      	adds	r3, #27
 80034e0:	011b      	lsls	r3, r3, #4
 80034e2:	4413      	add	r3, r2
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	0d5b      	lsrs	r3, r3, #21
 80034e8:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	601a      	str	r2, [r3, #0]
 80034f0:	e00b      	b.n	800350a <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	681a      	ldr	r2, [r3, #0]
 80034f6:	68bb      	ldr	r3, [r7, #8]
 80034f8:	331b      	adds	r3, #27
 80034fa:	011b      	lsls	r3, r3, #4
 80034fc:	4413      	add	r3, r2
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	08db      	lsrs	r3, r3, #3
 8003502:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	681a      	ldr	r2, [r3, #0]
 800350e:	68bb      	ldr	r3, [r7, #8]
 8003510:	331b      	adds	r3, #27
 8003512:	011b      	lsls	r3, r3, #4
 8003514:	4413      	add	r3, r2
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	f003 0202 	and.w	r2, r3, #2
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	681a      	ldr	r2, [r3, #0]
 8003524:	68bb      	ldr	r3, [r7, #8]
 8003526:	331b      	adds	r3, #27
 8003528:	011b      	lsls	r3, r3, #4
 800352a:	4413      	add	r3, r2
 800352c:	3304      	adds	r3, #4
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	f003 020f 	and.w	r2, r3, #15
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	681a      	ldr	r2, [r3, #0]
 800353c:	68bb      	ldr	r3, [r7, #8]
 800353e:	331b      	adds	r3, #27
 8003540:	011b      	lsls	r3, r3, #4
 8003542:	4413      	add	r3, r2
 8003544:	3304      	adds	r3, #4
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	0a1b      	lsrs	r3, r3, #8
 800354a:	b2da      	uxtb	r2, r3
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	681a      	ldr	r2, [r3, #0]
 8003554:	68bb      	ldr	r3, [r7, #8]
 8003556:	331b      	adds	r3, #27
 8003558:	011b      	lsls	r3, r3, #4
 800355a:	4413      	add	r3, r2
 800355c:	3304      	adds	r3, #4
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	0c1b      	lsrs	r3, r3, #16
 8003562:	b29a      	uxth	r2, r3
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	681a      	ldr	r2, [r3, #0]
 800356c:	68bb      	ldr	r3, [r7, #8]
 800356e:	011b      	lsls	r3, r3, #4
 8003570:	4413      	add	r3, r2
 8003572:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	b2da      	uxtb	r2, r3
 800357a:	683b      	ldr	r3, [r7, #0]
 800357c:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	681a      	ldr	r2, [r3, #0]
 8003582:	68bb      	ldr	r3, [r7, #8]
 8003584:	011b      	lsls	r3, r3, #4
 8003586:	4413      	add	r3, r2
 8003588:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	0a1a      	lsrs	r2, r3, #8
 8003590:	683b      	ldr	r3, [r7, #0]
 8003592:	3301      	adds	r3, #1
 8003594:	b2d2      	uxtb	r2, r2
 8003596:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	681a      	ldr	r2, [r3, #0]
 800359c:	68bb      	ldr	r3, [r7, #8]
 800359e:	011b      	lsls	r3, r3, #4
 80035a0:	4413      	add	r3, r2
 80035a2:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	0c1a      	lsrs	r2, r3, #16
 80035aa:	683b      	ldr	r3, [r7, #0]
 80035ac:	3302      	adds	r3, #2
 80035ae:	b2d2      	uxtb	r2, r2
 80035b0:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	681a      	ldr	r2, [r3, #0]
 80035b6:	68bb      	ldr	r3, [r7, #8]
 80035b8:	011b      	lsls	r3, r3, #4
 80035ba:	4413      	add	r3, r2
 80035bc:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	0e1a      	lsrs	r2, r3, #24
 80035c4:	683b      	ldr	r3, [r7, #0]
 80035c6:	3303      	adds	r3, #3
 80035c8:	b2d2      	uxtb	r2, r2
 80035ca:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	681a      	ldr	r2, [r3, #0]
 80035d0:	68bb      	ldr	r3, [r7, #8]
 80035d2:	011b      	lsls	r3, r3, #4
 80035d4:	4413      	add	r3, r2
 80035d6:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80035da:	681a      	ldr	r2, [r3, #0]
 80035dc:	683b      	ldr	r3, [r7, #0]
 80035de:	3304      	adds	r3, #4
 80035e0:	b2d2      	uxtb	r2, r2
 80035e2:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	681a      	ldr	r2, [r3, #0]
 80035e8:	68bb      	ldr	r3, [r7, #8]
 80035ea:	011b      	lsls	r3, r3, #4
 80035ec:	4413      	add	r3, r2
 80035ee:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	0a1a      	lsrs	r2, r3, #8
 80035f6:	683b      	ldr	r3, [r7, #0]
 80035f8:	3305      	adds	r3, #5
 80035fa:	b2d2      	uxtb	r2, r2
 80035fc:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	681a      	ldr	r2, [r3, #0]
 8003602:	68bb      	ldr	r3, [r7, #8]
 8003604:	011b      	lsls	r3, r3, #4
 8003606:	4413      	add	r3, r2
 8003608:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	0c1a      	lsrs	r2, r3, #16
 8003610:	683b      	ldr	r3, [r7, #0]
 8003612:	3306      	adds	r3, #6
 8003614:	b2d2      	uxtb	r2, r2
 8003616:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	681a      	ldr	r2, [r3, #0]
 800361c:	68bb      	ldr	r3, [r7, #8]
 800361e:	011b      	lsls	r3, r3, #4
 8003620:	4413      	add	r3, r2
 8003622:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	0e1a      	lsrs	r2, r3, #24
 800362a:	683b      	ldr	r3, [r7, #0]
 800362c:	3307      	adds	r3, #7
 800362e:	b2d2      	uxtb	r2, r2
 8003630:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8003632:	68bb      	ldr	r3, [r7, #8]
 8003634:	2b00      	cmp	r3, #0
 8003636:	d108      	bne.n	800364a <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	68da      	ldr	r2, [r3, #12]
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	f042 0220 	orr.w	r2, r2, #32
 8003646:	60da      	str	r2, [r3, #12]
 8003648:	e007      	b.n	800365a <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	691a      	ldr	r2, [r3, #16]
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	f042 0220 	orr.w	r2, r2, #32
 8003658:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 800365a:	2300      	movs	r3, #0
 800365c:	e006      	b.n	800366c <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003662:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800366a:	2301      	movs	r3, #1
  }
}
 800366c:	4618      	mov	r0, r3
 800366e:	371c      	adds	r7, #28
 8003670:	46bd      	mov	sp, r7
 8003672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003676:	4770      	bx	lr

08003678 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8003678:	b480      	push	{r7}
 800367a:	b085      	sub	sp, #20
 800367c:	af00      	add	r7, sp, #0
 800367e:	6078      	str	r0, [r7, #4]
 8003680:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003688:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 800368a:	7bfb      	ldrb	r3, [r7, #15]
 800368c:	2b01      	cmp	r3, #1
 800368e:	d002      	beq.n	8003696 <HAL_CAN_ActivateNotification+0x1e>
 8003690:	7bfb      	ldrb	r3, [r7, #15]
 8003692:	2b02      	cmp	r3, #2
 8003694:	d109      	bne.n	80036aa <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	6959      	ldr	r1, [r3, #20]
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	683a      	ldr	r2, [r7, #0]
 80036a2:	430a      	orrs	r2, r1
 80036a4:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 80036a6:	2300      	movs	r3, #0
 80036a8:	e006      	b.n	80036b8 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036ae:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80036b6:	2301      	movs	r3, #1
  }
}
 80036b8:	4618      	mov	r0, r3
 80036ba:	3714      	adds	r7, #20
 80036bc:	46bd      	mov	sp, r7
 80036be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036c2:	4770      	bx	lr

080036c4 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 80036c4:	b580      	push	{r7, lr}
 80036c6:	b08a      	sub	sp, #40	; 0x28
 80036c8:	af00      	add	r7, sp, #0
 80036ca:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 80036cc:	2300      	movs	r3, #0
 80036ce:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	695b      	ldr	r3, [r3, #20]
 80036d6:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	685b      	ldr	r3, [r3, #4]
 80036de:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	689b      	ldr	r3, [r3, #8]
 80036e6:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	68db      	ldr	r3, [r3, #12]
 80036ee:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	691b      	ldr	r3, [r3, #16]
 80036f6:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	699b      	ldr	r3, [r3, #24]
 80036fe:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8003700:	6a3b      	ldr	r3, [r7, #32]
 8003702:	f003 0301 	and.w	r3, r3, #1
 8003706:	2b00      	cmp	r3, #0
 8003708:	d07c      	beq.n	8003804 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 800370a:	69bb      	ldr	r3, [r7, #24]
 800370c:	f003 0301 	and.w	r3, r3, #1
 8003710:	2b00      	cmp	r3, #0
 8003712:	d023      	beq.n	800375c <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	2201      	movs	r2, #1
 800371a:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 800371c:	69bb      	ldr	r3, [r7, #24]
 800371e:	f003 0302 	and.w	r3, r3, #2
 8003722:	2b00      	cmp	r3, #0
 8003724:	d003      	beq.n	800372e <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8003726:	6878      	ldr	r0, [r7, #4]
 8003728:	f000 f983 	bl	8003a32 <HAL_CAN_TxMailbox0CompleteCallback>
 800372c:	e016      	b.n	800375c <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 800372e:	69bb      	ldr	r3, [r7, #24]
 8003730:	f003 0304 	and.w	r3, r3, #4
 8003734:	2b00      	cmp	r3, #0
 8003736:	d004      	beq.n	8003742 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8003738:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800373a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800373e:	627b      	str	r3, [r7, #36]	; 0x24
 8003740:	e00c      	b.n	800375c <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8003742:	69bb      	ldr	r3, [r7, #24]
 8003744:	f003 0308 	and.w	r3, r3, #8
 8003748:	2b00      	cmp	r3, #0
 800374a:	d004      	beq.n	8003756 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 800374c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800374e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003752:	627b      	str	r3, [r7, #36]	; 0x24
 8003754:	e002      	b.n	800375c <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8003756:	6878      	ldr	r0, [r7, #4]
 8003758:	f000 f989 	bl	8003a6e <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 800375c:	69bb      	ldr	r3, [r7, #24]
 800375e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003762:	2b00      	cmp	r3, #0
 8003764:	d024      	beq.n	80037b0 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800376e:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8003770:	69bb      	ldr	r3, [r7, #24]
 8003772:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003776:	2b00      	cmp	r3, #0
 8003778:	d003      	beq.n	8003782 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 800377a:	6878      	ldr	r0, [r7, #4]
 800377c:	f000 f963 	bl	8003a46 <HAL_CAN_TxMailbox1CompleteCallback>
 8003780:	e016      	b.n	80037b0 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8003782:	69bb      	ldr	r3, [r7, #24]
 8003784:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003788:	2b00      	cmp	r3, #0
 800378a:	d004      	beq.n	8003796 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 800378c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800378e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8003792:	627b      	str	r3, [r7, #36]	; 0x24
 8003794:	e00c      	b.n	80037b0 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8003796:	69bb      	ldr	r3, [r7, #24]
 8003798:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800379c:	2b00      	cmp	r3, #0
 800379e:	d004      	beq.n	80037aa <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 80037a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037a2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80037a6:	627b      	str	r3, [r7, #36]	; 0x24
 80037a8:	e002      	b.n	80037b0 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 80037aa:	6878      	ldr	r0, [r7, #4]
 80037ac:	f000 f969 	bl	8003a82 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 80037b0:	69bb      	ldr	r3, [r7, #24]
 80037b2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d024      	beq.n	8003804 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80037c2:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 80037c4:	69bb      	ldr	r3, [r7, #24]
 80037c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d003      	beq.n	80037d6 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 80037ce:	6878      	ldr	r0, [r7, #4]
 80037d0:	f000 f943 	bl	8003a5a <HAL_CAN_TxMailbox2CompleteCallback>
 80037d4:	e016      	b.n	8003804 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 80037d6:	69bb      	ldr	r3, [r7, #24]
 80037d8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80037dc:	2b00      	cmp	r3, #0
 80037de:	d004      	beq.n	80037ea <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 80037e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037e2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80037e6:	627b      	str	r3, [r7, #36]	; 0x24
 80037e8:	e00c      	b.n	8003804 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 80037ea:	69bb      	ldr	r3, [r7, #24]
 80037ec:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	d004      	beq.n	80037fe <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 80037f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037f6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80037fa:	627b      	str	r3, [r7, #36]	; 0x24
 80037fc:	e002      	b.n	8003804 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 80037fe:	6878      	ldr	r0, [r7, #4]
 8003800:	f000 f949 	bl	8003a96 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8003804:	6a3b      	ldr	r3, [r7, #32]
 8003806:	f003 0308 	and.w	r3, r3, #8
 800380a:	2b00      	cmp	r3, #0
 800380c:	d00c      	beq.n	8003828 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 800380e:	697b      	ldr	r3, [r7, #20]
 8003810:	f003 0310 	and.w	r3, r3, #16
 8003814:	2b00      	cmp	r3, #0
 8003816:	d007      	beq.n	8003828 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8003818:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800381a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800381e:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	2210      	movs	r2, #16
 8003826:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8003828:	6a3b      	ldr	r3, [r7, #32]
 800382a:	f003 0304 	and.w	r3, r3, #4
 800382e:	2b00      	cmp	r3, #0
 8003830:	d00b      	beq.n	800384a <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8003832:	697b      	ldr	r3, [r7, #20]
 8003834:	f003 0308 	and.w	r3, r3, #8
 8003838:	2b00      	cmp	r3, #0
 800383a:	d006      	beq.n	800384a <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	2208      	movs	r2, #8
 8003842:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8003844:	6878      	ldr	r0, [r7, #4]
 8003846:	f000 f930 	bl	8003aaa <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 800384a:	6a3b      	ldr	r3, [r7, #32]
 800384c:	f003 0302 	and.w	r3, r3, #2
 8003850:	2b00      	cmp	r3, #0
 8003852:	d009      	beq.n	8003868 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	68db      	ldr	r3, [r3, #12]
 800385a:	f003 0303 	and.w	r3, r3, #3
 800385e:	2b00      	cmp	r3, #0
 8003860:	d002      	beq.n	8003868 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8003862:	6878      	ldr	r0, [r7, #4]
 8003864:	f7fe f898 	bl	8001998 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8003868:	6a3b      	ldr	r3, [r7, #32]
 800386a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800386e:	2b00      	cmp	r3, #0
 8003870:	d00c      	beq.n	800388c <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8003872:	693b      	ldr	r3, [r7, #16]
 8003874:	f003 0310 	and.w	r3, r3, #16
 8003878:	2b00      	cmp	r3, #0
 800387a:	d007      	beq.n	800388c <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 800387c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800387e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003882:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	2210      	movs	r2, #16
 800388a:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 800388c:	6a3b      	ldr	r3, [r7, #32]
 800388e:	f003 0320 	and.w	r3, r3, #32
 8003892:	2b00      	cmp	r3, #0
 8003894:	d00b      	beq.n	80038ae <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8003896:	693b      	ldr	r3, [r7, #16]
 8003898:	f003 0308 	and.w	r3, r3, #8
 800389c:	2b00      	cmp	r3, #0
 800389e:	d006      	beq.n	80038ae <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	2208      	movs	r2, #8
 80038a6:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 80038a8:	6878      	ldr	r0, [r7, #4]
 80038aa:	f000 f912 	bl	8003ad2 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 80038ae:	6a3b      	ldr	r3, [r7, #32]
 80038b0:	f003 0310 	and.w	r3, r3, #16
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d009      	beq.n	80038cc <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	691b      	ldr	r3, [r3, #16]
 80038be:	f003 0303 	and.w	r3, r3, #3
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d002      	beq.n	80038cc <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 80038c6:	6878      	ldr	r0, [r7, #4]
 80038c8:	f000 f8f9 	bl	8003abe <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 80038cc:	6a3b      	ldr	r3, [r7, #32]
 80038ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d00b      	beq.n	80038ee <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 80038d6:	69fb      	ldr	r3, [r7, #28]
 80038d8:	f003 0310 	and.w	r3, r3, #16
 80038dc:	2b00      	cmp	r3, #0
 80038de:	d006      	beq.n	80038ee <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	2210      	movs	r2, #16
 80038e6:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 80038e8:	6878      	ldr	r0, [r7, #4]
 80038ea:	f000 f8fc 	bl	8003ae6 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 80038ee:	6a3b      	ldr	r3, [r7, #32]
 80038f0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	d00b      	beq.n	8003910 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 80038f8:	69fb      	ldr	r3, [r7, #28]
 80038fa:	f003 0308 	and.w	r3, r3, #8
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d006      	beq.n	8003910 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	2208      	movs	r2, #8
 8003908:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 800390a:	6878      	ldr	r0, [r7, #4]
 800390c:	f000 f8f5 	bl	8003afa <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8003910:	6a3b      	ldr	r3, [r7, #32]
 8003912:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003916:	2b00      	cmp	r3, #0
 8003918:	d07b      	beq.n	8003a12 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 800391a:	69fb      	ldr	r3, [r7, #28]
 800391c:	f003 0304 	and.w	r3, r3, #4
 8003920:	2b00      	cmp	r3, #0
 8003922:	d072      	beq.n	8003a0a <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8003924:	6a3b      	ldr	r3, [r7, #32]
 8003926:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800392a:	2b00      	cmp	r3, #0
 800392c:	d008      	beq.n	8003940 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8003934:	2b00      	cmp	r3, #0
 8003936:	d003      	beq.n	8003940 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8003938:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800393a:	f043 0301 	orr.w	r3, r3, #1
 800393e:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8003940:	6a3b      	ldr	r3, [r7, #32]
 8003942:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003946:	2b00      	cmp	r3, #0
 8003948:	d008      	beq.n	800395c <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8003950:	2b00      	cmp	r3, #0
 8003952:	d003      	beq.n	800395c <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8003954:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003956:	f043 0302 	orr.w	r3, r3, #2
 800395a:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 800395c:	6a3b      	ldr	r3, [r7, #32]
 800395e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003962:	2b00      	cmp	r3, #0
 8003964:	d008      	beq.n	8003978 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 800396c:	2b00      	cmp	r3, #0
 800396e:	d003      	beq.n	8003978 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8003970:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003972:	f043 0304 	orr.w	r3, r3, #4
 8003976:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8003978:	6a3b      	ldr	r3, [r7, #32]
 800397a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800397e:	2b00      	cmp	r3, #0
 8003980:	d043      	beq.n	8003a0a <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8003988:	2b00      	cmp	r3, #0
 800398a:	d03e      	beq.n	8003a0a <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003992:	2b60      	cmp	r3, #96	; 0x60
 8003994:	d02b      	beq.n	80039ee <HAL_CAN_IRQHandler+0x32a>
 8003996:	2b60      	cmp	r3, #96	; 0x60
 8003998:	d82e      	bhi.n	80039f8 <HAL_CAN_IRQHandler+0x334>
 800399a:	2b50      	cmp	r3, #80	; 0x50
 800399c:	d022      	beq.n	80039e4 <HAL_CAN_IRQHandler+0x320>
 800399e:	2b50      	cmp	r3, #80	; 0x50
 80039a0:	d82a      	bhi.n	80039f8 <HAL_CAN_IRQHandler+0x334>
 80039a2:	2b40      	cmp	r3, #64	; 0x40
 80039a4:	d019      	beq.n	80039da <HAL_CAN_IRQHandler+0x316>
 80039a6:	2b40      	cmp	r3, #64	; 0x40
 80039a8:	d826      	bhi.n	80039f8 <HAL_CAN_IRQHandler+0x334>
 80039aa:	2b30      	cmp	r3, #48	; 0x30
 80039ac:	d010      	beq.n	80039d0 <HAL_CAN_IRQHandler+0x30c>
 80039ae:	2b30      	cmp	r3, #48	; 0x30
 80039b0:	d822      	bhi.n	80039f8 <HAL_CAN_IRQHandler+0x334>
 80039b2:	2b10      	cmp	r3, #16
 80039b4:	d002      	beq.n	80039bc <HAL_CAN_IRQHandler+0x2f8>
 80039b6:	2b20      	cmp	r3, #32
 80039b8:	d005      	beq.n	80039c6 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 80039ba:	e01d      	b.n	80039f8 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 80039bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039be:	f043 0308 	orr.w	r3, r3, #8
 80039c2:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80039c4:	e019      	b.n	80039fa <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 80039c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039c8:	f043 0310 	orr.w	r3, r3, #16
 80039cc:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80039ce:	e014      	b.n	80039fa <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 80039d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039d2:	f043 0320 	orr.w	r3, r3, #32
 80039d6:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80039d8:	e00f      	b.n	80039fa <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 80039da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039dc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80039e0:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80039e2:	e00a      	b.n	80039fa <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 80039e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039e6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80039ea:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80039ec:	e005      	b.n	80039fa <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 80039ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039f0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80039f4:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80039f6:	e000      	b.n	80039fa <HAL_CAN_IRQHandler+0x336>
            break;
 80039f8:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	699a      	ldr	r2, [r3, #24]
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8003a08:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	2204      	movs	r2, #4
 8003a10:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8003a12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	d008      	beq.n	8003a2a <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003a1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a1e:	431a      	orrs	r2, r3
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8003a24:	6878      	ldr	r0, [r7, #4]
 8003a26:	f000 f872 	bl	8003b0e <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8003a2a:	bf00      	nop
 8003a2c:	3728      	adds	r7, #40	; 0x28
 8003a2e:	46bd      	mov	sp, r7
 8003a30:	bd80      	pop	{r7, pc}

08003a32 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8003a32:	b480      	push	{r7}
 8003a34:	b083      	sub	sp, #12
 8003a36:	af00      	add	r7, sp, #0
 8003a38:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8003a3a:	bf00      	nop
 8003a3c:	370c      	adds	r7, #12
 8003a3e:	46bd      	mov	sp, r7
 8003a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a44:	4770      	bx	lr

08003a46 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8003a46:	b480      	push	{r7}
 8003a48:	b083      	sub	sp, #12
 8003a4a:	af00      	add	r7, sp, #0
 8003a4c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8003a4e:	bf00      	nop
 8003a50:	370c      	adds	r7, #12
 8003a52:	46bd      	mov	sp, r7
 8003a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a58:	4770      	bx	lr

08003a5a <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8003a5a:	b480      	push	{r7}
 8003a5c:	b083      	sub	sp, #12
 8003a5e:	af00      	add	r7, sp, #0
 8003a60:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8003a62:	bf00      	nop
 8003a64:	370c      	adds	r7, #12
 8003a66:	46bd      	mov	sp, r7
 8003a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a6c:	4770      	bx	lr

08003a6e <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8003a6e:	b480      	push	{r7}
 8003a70:	b083      	sub	sp, #12
 8003a72:	af00      	add	r7, sp, #0
 8003a74:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8003a76:	bf00      	nop
 8003a78:	370c      	adds	r7, #12
 8003a7a:	46bd      	mov	sp, r7
 8003a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a80:	4770      	bx	lr

08003a82 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8003a82:	b480      	push	{r7}
 8003a84:	b083      	sub	sp, #12
 8003a86:	af00      	add	r7, sp, #0
 8003a88:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8003a8a:	bf00      	nop
 8003a8c:	370c      	adds	r7, #12
 8003a8e:	46bd      	mov	sp, r7
 8003a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a94:	4770      	bx	lr

08003a96 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8003a96:	b480      	push	{r7}
 8003a98:	b083      	sub	sp, #12
 8003a9a:	af00      	add	r7, sp, #0
 8003a9c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8003a9e:	bf00      	nop
 8003aa0:	370c      	adds	r7, #12
 8003aa2:	46bd      	mov	sp, r7
 8003aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aa8:	4770      	bx	lr

08003aaa <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8003aaa:	b480      	push	{r7}
 8003aac:	b083      	sub	sp, #12
 8003aae:	af00      	add	r7, sp, #0
 8003ab0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8003ab2:	bf00      	nop
 8003ab4:	370c      	adds	r7, #12
 8003ab6:	46bd      	mov	sp, r7
 8003ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003abc:	4770      	bx	lr

08003abe <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8003abe:	b480      	push	{r7}
 8003ac0:	b083      	sub	sp, #12
 8003ac2:	af00      	add	r7, sp, #0
 8003ac4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8003ac6:	bf00      	nop
 8003ac8:	370c      	adds	r7, #12
 8003aca:	46bd      	mov	sp, r7
 8003acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ad0:	4770      	bx	lr

08003ad2 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8003ad2:	b480      	push	{r7}
 8003ad4:	b083      	sub	sp, #12
 8003ad6:	af00      	add	r7, sp, #0
 8003ad8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8003ada:	bf00      	nop
 8003adc:	370c      	adds	r7, #12
 8003ade:	46bd      	mov	sp, r7
 8003ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ae4:	4770      	bx	lr

08003ae6 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8003ae6:	b480      	push	{r7}
 8003ae8:	b083      	sub	sp, #12
 8003aea:	af00      	add	r7, sp, #0
 8003aec:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8003aee:	bf00      	nop
 8003af0:	370c      	adds	r7, #12
 8003af2:	46bd      	mov	sp, r7
 8003af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003af8:	4770      	bx	lr

08003afa <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8003afa:	b480      	push	{r7}
 8003afc:	b083      	sub	sp, #12
 8003afe:	af00      	add	r7, sp, #0
 8003b00:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8003b02:	bf00      	nop
 8003b04:	370c      	adds	r7, #12
 8003b06:	46bd      	mov	sp, r7
 8003b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b0c:	4770      	bx	lr

08003b0e <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8003b0e:	b480      	push	{r7}
 8003b10:	b083      	sub	sp, #12
 8003b12:	af00      	add	r7, sp, #0
 8003b14:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8003b16:	bf00      	nop
 8003b18:	370c      	adds	r7, #12
 8003b1a:	46bd      	mov	sp, r7
 8003b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b20:	4770      	bx	lr
	...

08003b24 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003b24:	b480      	push	{r7}
 8003b26:	b085      	sub	sp, #20
 8003b28:	af00      	add	r7, sp, #0
 8003b2a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	f003 0307 	and.w	r3, r3, #7
 8003b32:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003b34:	4b0c      	ldr	r3, [pc, #48]	; (8003b68 <__NVIC_SetPriorityGrouping+0x44>)
 8003b36:	68db      	ldr	r3, [r3, #12]
 8003b38:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003b3a:	68ba      	ldr	r2, [r7, #8]
 8003b3c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003b40:	4013      	ands	r3, r2
 8003b42:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003b48:	68bb      	ldr	r3, [r7, #8]
 8003b4a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003b4c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003b50:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003b54:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003b56:	4a04      	ldr	r2, [pc, #16]	; (8003b68 <__NVIC_SetPriorityGrouping+0x44>)
 8003b58:	68bb      	ldr	r3, [r7, #8]
 8003b5a:	60d3      	str	r3, [r2, #12]
}
 8003b5c:	bf00      	nop
 8003b5e:	3714      	adds	r7, #20
 8003b60:	46bd      	mov	sp, r7
 8003b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b66:	4770      	bx	lr
 8003b68:	e000ed00 	.word	0xe000ed00

08003b6c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003b6c:	b480      	push	{r7}
 8003b6e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003b70:	4b04      	ldr	r3, [pc, #16]	; (8003b84 <__NVIC_GetPriorityGrouping+0x18>)
 8003b72:	68db      	ldr	r3, [r3, #12]
 8003b74:	0a1b      	lsrs	r3, r3, #8
 8003b76:	f003 0307 	and.w	r3, r3, #7
}
 8003b7a:	4618      	mov	r0, r3
 8003b7c:	46bd      	mov	sp, r7
 8003b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b82:	4770      	bx	lr
 8003b84:	e000ed00 	.word	0xe000ed00

08003b88 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003b88:	b480      	push	{r7}
 8003b8a:	b083      	sub	sp, #12
 8003b8c:	af00      	add	r7, sp, #0
 8003b8e:	4603      	mov	r3, r0
 8003b90:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003b92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	db0b      	blt.n	8003bb2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003b9a:	79fb      	ldrb	r3, [r7, #7]
 8003b9c:	f003 021f 	and.w	r2, r3, #31
 8003ba0:	4907      	ldr	r1, [pc, #28]	; (8003bc0 <__NVIC_EnableIRQ+0x38>)
 8003ba2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003ba6:	095b      	lsrs	r3, r3, #5
 8003ba8:	2001      	movs	r0, #1
 8003baa:	fa00 f202 	lsl.w	r2, r0, r2
 8003bae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003bb2:	bf00      	nop
 8003bb4:	370c      	adds	r7, #12
 8003bb6:	46bd      	mov	sp, r7
 8003bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bbc:	4770      	bx	lr
 8003bbe:	bf00      	nop
 8003bc0:	e000e100 	.word	0xe000e100

08003bc4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003bc4:	b480      	push	{r7}
 8003bc6:	b083      	sub	sp, #12
 8003bc8:	af00      	add	r7, sp, #0
 8003bca:	4603      	mov	r3, r0
 8003bcc:	6039      	str	r1, [r7, #0]
 8003bce:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003bd0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	db0a      	blt.n	8003bee <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003bd8:	683b      	ldr	r3, [r7, #0]
 8003bda:	b2da      	uxtb	r2, r3
 8003bdc:	490c      	ldr	r1, [pc, #48]	; (8003c10 <__NVIC_SetPriority+0x4c>)
 8003bde:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003be2:	0112      	lsls	r2, r2, #4
 8003be4:	b2d2      	uxtb	r2, r2
 8003be6:	440b      	add	r3, r1
 8003be8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003bec:	e00a      	b.n	8003c04 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003bee:	683b      	ldr	r3, [r7, #0]
 8003bf0:	b2da      	uxtb	r2, r3
 8003bf2:	4908      	ldr	r1, [pc, #32]	; (8003c14 <__NVIC_SetPriority+0x50>)
 8003bf4:	79fb      	ldrb	r3, [r7, #7]
 8003bf6:	f003 030f 	and.w	r3, r3, #15
 8003bfa:	3b04      	subs	r3, #4
 8003bfc:	0112      	lsls	r2, r2, #4
 8003bfe:	b2d2      	uxtb	r2, r2
 8003c00:	440b      	add	r3, r1
 8003c02:	761a      	strb	r2, [r3, #24]
}
 8003c04:	bf00      	nop
 8003c06:	370c      	adds	r7, #12
 8003c08:	46bd      	mov	sp, r7
 8003c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c0e:	4770      	bx	lr
 8003c10:	e000e100 	.word	0xe000e100
 8003c14:	e000ed00 	.word	0xe000ed00

08003c18 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003c18:	b480      	push	{r7}
 8003c1a:	b089      	sub	sp, #36	; 0x24
 8003c1c:	af00      	add	r7, sp, #0
 8003c1e:	60f8      	str	r0, [r7, #12]
 8003c20:	60b9      	str	r1, [r7, #8]
 8003c22:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	f003 0307 	and.w	r3, r3, #7
 8003c2a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003c2c:	69fb      	ldr	r3, [r7, #28]
 8003c2e:	f1c3 0307 	rsb	r3, r3, #7
 8003c32:	2b04      	cmp	r3, #4
 8003c34:	bf28      	it	cs
 8003c36:	2304      	movcs	r3, #4
 8003c38:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003c3a:	69fb      	ldr	r3, [r7, #28]
 8003c3c:	3304      	adds	r3, #4
 8003c3e:	2b06      	cmp	r3, #6
 8003c40:	d902      	bls.n	8003c48 <NVIC_EncodePriority+0x30>
 8003c42:	69fb      	ldr	r3, [r7, #28]
 8003c44:	3b03      	subs	r3, #3
 8003c46:	e000      	b.n	8003c4a <NVIC_EncodePriority+0x32>
 8003c48:	2300      	movs	r3, #0
 8003c4a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003c4c:	f04f 32ff 	mov.w	r2, #4294967295
 8003c50:	69bb      	ldr	r3, [r7, #24]
 8003c52:	fa02 f303 	lsl.w	r3, r2, r3
 8003c56:	43da      	mvns	r2, r3
 8003c58:	68bb      	ldr	r3, [r7, #8]
 8003c5a:	401a      	ands	r2, r3
 8003c5c:	697b      	ldr	r3, [r7, #20]
 8003c5e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003c60:	f04f 31ff 	mov.w	r1, #4294967295
 8003c64:	697b      	ldr	r3, [r7, #20]
 8003c66:	fa01 f303 	lsl.w	r3, r1, r3
 8003c6a:	43d9      	mvns	r1, r3
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003c70:	4313      	orrs	r3, r2
         );
}
 8003c72:	4618      	mov	r0, r3
 8003c74:	3724      	adds	r7, #36	; 0x24
 8003c76:	46bd      	mov	sp, r7
 8003c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c7c:	4770      	bx	lr

08003c7e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003c7e:	b580      	push	{r7, lr}
 8003c80:	b082      	sub	sp, #8
 8003c82:	af00      	add	r7, sp, #0
 8003c84:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003c86:	6878      	ldr	r0, [r7, #4]
 8003c88:	f7ff ff4c 	bl	8003b24 <__NVIC_SetPriorityGrouping>
}
 8003c8c:	bf00      	nop
 8003c8e:	3708      	adds	r7, #8
 8003c90:	46bd      	mov	sp, r7
 8003c92:	bd80      	pop	{r7, pc}

08003c94 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003c94:	b580      	push	{r7, lr}
 8003c96:	b086      	sub	sp, #24
 8003c98:	af00      	add	r7, sp, #0
 8003c9a:	4603      	mov	r3, r0
 8003c9c:	60b9      	str	r1, [r7, #8]
 8003c9e:	607a      	str	r2, [r7, #4]
 8003ca0:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003ca2:	2300      	movs	r3, #0
 8003ca4:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003ca6:	f7ff ff61 	bl	8003b6c <__NVIC_GetPriorityGrouping>
 8003caa:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003cac:	687a      	ldr	r2, [r7, #4]
 8003cae:	68b9      	ldr	r1, [r7, #8]
 8003cb0:	6978      	ldr	r0, [r7, #20]
 8003cb2:	f7ff ffb1 	bl	8003c18 <NVIC_EncodePriority>
 8003cb6:	4602      	mov	r2, r0
 8003cb8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003cbc:	4611      	mov	r1, r2
 8003cbe:	4618      	mov	r0, r3
 8003cc0:	f7ff ff80 	bl	8003bc4 <__NVIC_SetPriority>
}
 8003cc4:	bf00      	nop
 8003cc6:	3718      	adds	r7, #24
 8003cc8:	46bd      	mov	sp, r7
 8003cca:	bd80      	pop	{r7, pc}

08003ccc <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003ccc:	b580      	push	{r7, lr}
 8003cce:	b082      	sub	sp, #8
 8003cd0:	af00      	add	r7, sp, #0
 8003cd2:	4603      	mov	r3, r0
 8003cd4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003cd6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003cda:	4618      	mov	r0, r3
 8003cdc:	f7ff ff54 	bl	8003b88 <__NVIC_EnableIRQ>
}
 8003ce0:	bf00      	nop
 8003ce2:	3708      	adds	r7, #8
 8003ce4:	46bd      	mov	sp, r7
 8003ce6:	bd80      	pop	{r7, pc}

08003ce8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003ce8:	b580      	push	{r7, lr}
 8003cea:	b086      	sub	sp, #24
 8003cec:	af00      	add	r7, sp, #0
 8003cee:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003cf0:	2300      	movs	r3, #0
 8003cf2:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8003cf4:	f7ff f982 	bl	8002ffc <HAL_GetTick>
 8003cf8:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	d101      	bne.n	8003d04 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8003d00:	2301      	movs	r3, #1
 8003d02:	e099      	b.n	8003e38 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	2202      	movs	r2, #2
 8003d08:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	2200      	movs	r2, #0
 8003d10:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	681a      	ldr	r2, [r3, #0]
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	f022 0201 	bic.w	r2, r2, #1
 8003d22:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003d24:	e00f      	b.n	8003d46 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003d26:	f7ff f969 	bl	8002ffc <HAL_GetTick>
 8003d2a:	4602      	mov	r2, r0
 8003d2c:	693b      	ldr	r3, [r7, #16]
 8003d2e:	1ad3      	subs	r3, r2, r3
 8003d30:	2b05      	cmp	r3, #5
 8003d32:	d908      	bls.n	8003d46 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	2220      	movs	r2, #32
 8003d38:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	2203      	movs	r2, #3
 8003d3e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8003d42:	2303      	movs	r3, #3
 8003d44:	e078      	b.n	8003e38 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	f003 0301 	and.w	r3, r3, #1
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	d1e8      	bne.n	8003d26 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003d5c:	697a      	ldr	r2, [r7, #20]
 8003d5e:	4b38      	ldr	r3, [pc, #224]	; (8003e40 <HAL_DMA_Init+0x158>)
 8003d60:	4013      	ands	r3, r2
 8003d62:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	685a      	ldr	r2, [r3, #4]
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	689b      	ldr	r3, [r3, #8]
 8003d6c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003d72:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	691b      	ldr	r3, [r3, #16]
 8003d78:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003d7e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	699b      	ldr	r3, [r3, #24]
 8003d84:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003d8a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	6a1b      	ldr	r3, [r3, #32]
 8003d90:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003d92:	697a      	ldr	r2, [r7, #20]
 8003d94:	4313      	orrs	r3, r2
 8003d96:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d9c:	2b04      	cmp	r3, #4
 8003d9e:	d107      	bne.n	8003db0 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003da8:	4313      	orrs	r3, r2
 8003daa:	697a      	ldr	r2, [r7, #20]
 8003dac:	4313      	orrs	r3, r2
 8003dae:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	697a      	ldr	r2, [r7, #20]
 8003db6:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	695b      	ldr	r3, [r3, #20]
 8003dbe:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003dc0:	697b      	ldr	r3, [r7, #20]
 8003dc2:	f023 0307 	bic.w	r3, r3, #7
 8003dc6:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dcc:	697a      	ldr	r2, [r7, #20]
 8003dce:	4313      	orrs	r3, r2
 8003dd0:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dd6:	2b04      	cmp	r3, #4
 8003dd8:	d117      	bne.n	8003e0a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003dde:	697a      	ldr	r2, [r7, #20]
 8003de0:	4313      	orrs	r3, r2
 8003de2:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	d00e      	beq.n	8003e0a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003dec:	6878      	ldr	r0, [r7, #4]
 8003dee:	f000 fa7b 	bl	80042e8 <DMA_CheckFifoParam>
 8003df2:	4603      	mov	r3, r0
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	d008      	beq.n	8003e0a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	2240      	movs	r2, #64	; 0x40
 8003dfc:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	2201      	movs	r2, #1
 8003e02:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8003e06:	2301      	movs	r3, #1
 8003e08:	e016      	b.n	8003e38 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	697a      	ldr	r2, [r7, #20]
 8003e10:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003e12:	6878      	ldr	r0, [r7, #4]
 8003e14:	f000 fa32 	bl	800427c <DMA_CalcBaseAndBitshift>
 8003e18:	4603      	mov	r3, r0
 8003e1a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e20:	223f      	movs	r2, #63	; 0x3f
 8003e22:	409a      	lsls	r2, r3
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	2200      	movs	r2, #0
 8003e2c:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	2201      	movs	r2, #1
 8003e32:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8003e36:	2300      	movs	r3, #0
}
 8003e38:	4618      	mov	r0, r3
 8003e3a:	3718      	adds	r7, #24
 8003e3c:	46bd      	mov	sp, r7
 8003e3e:	bd80      	pop	{r7, pc}
 8003e40:	f010803f 	.word	0xf010803f

08003e44 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003e44:	b580      	push	{r7, lr}
 8003e46:	b084      	sub	sp, #16
 8003e48:	af00      	add	r7, sp, #0
 8003e4a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e50:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8003e52:	f7ff f8d3 	bl	8002ffc <HAL_GetTick>
 8003e56:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003e5e:	b2db      	uxtb	r3, r3
 8003e60:	2b02      	cmp	r3, #2
 8003e62:	d008      	beq.n	8003e76 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	2280      	movs	r2, #128	; 0x80
 8003e68:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	2200      	movs	r2, #0
 8003e6e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8003e72:	2301      	movs	r3, #1
 8003e74:	e052      	b.n	8003f1c <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	681a      	ldr	r2, [r3, #0]
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	f022 0216 	bic.w	r2, r2, #22
 8003e84:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	695a      	ldr	r2, [r3, #20]
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003e94:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d103      	bne.n	8003ea6 <HAL_DMA_Abort+0x62>
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d007      	beq.n	8003eb6 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	681a      	ldr	r2, [r3, #0]
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	f022 0208 	bic.w	r2, r2, #8
 8003eb4:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	681a      	ldr	r2, [r3, #0]
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	f022 0201 	bic.w	r2, r2, #1
 8003ec4:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003ec6:	e013      	b.n	8003ef0 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003ec8:	f7ff f898 	bl	8002ffc <HAL_GetTick>
 8003ecc:	4602      	mov	r2, r0
 8003ece:	68bb      	ldr	r3, [r7, #8]
 8003ed0:	1ad3      	subs	r3, r2, r3
 8003ed2:	2b05      	cmp	r3, #5
 8003ed4:	d90c      	bls.n	8003ef0 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	2220      	movs	r2, #32
 8003eda:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	2203      	movs	r2, #3
 8003ee0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	2200      	movs	r2, #0
 8003ee8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8003eec:	2303      	movs	r3, #3
 8003eee:	e015      	b.n	8003f1c <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	f003 0301 	and.w	r3, r3, #1
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	d1e4      	bne.n	8003ec8 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f02:	223f      	movs	r2, #63	; 0x3f
 8003f04:	409a      	lsls	r2, r3
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	2201      	movs	r2, #1
 8003f0e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	2200      	movs	r2, #0
 8003f16:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8003f1a:	2300      	movs	r3, #0
}
 8003f1c:	4618      	mov	r0, r3
 8003f1e:	3710      	adds	r7, #16
 8003f20:	46bd      	mov	sp, r7
 8003f22:	bd80      	pop	{r7, pc}

08003f24 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003f24:	b480      	push	{r7}
 8003f26:	b083      	sub	sp, #12
 8003f28:	af00      	add	r7, sp, #0
 8003f2a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003f32:	b2db      	uxtb	r3, r3
 8003f34:	2b02      	cmp	r3, #2
 8003f36:	d004      	beq.n	8003f42 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	2280      	movs	r2, #128	; 0x80
 8003f3c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8003f3e:	2301      	movs	r3, #1
 8003f40:	e00c      	b.n	8003f5c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	2205      	movs	r2, #5
 8003f46:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	681a      	ldr	r2, [r3, #0]
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	f022 0201 	bic.w	r2, r2, #1
 8003f58:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8003f5a:	2300      	movs	r3, #0
}
 8003f5c:	4618      	mov	r0, r3
 8003f5e:	370c      	adds	r7, #12
 8003f60:	46bd      	mov	sp, r7
 8003f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f66:	4770      	bx	lr

08003f68 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003f68:	b580      	push	{r7, lr}
 8003f6a:	b086      	sub	sp, #24
 8003f6c:	af00      	add	r7, sp, #0
 8003f6e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8003f70:	2300      	movs	r3, #0
 8003f72:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003f74:	4b92      	ldr	r3, [pc, #584]	; (80041c0 <HAL_DMA_IRQHandler+0x258>)
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	4a92      	ldr	r2, [pc, #584]	; (80041c4 <HAL_DMA_IRQHandler+0x25c>)
 8003f7a:	fba2 2303 	umull	r2, r3, r2, r3
 8003f7e:	0a9b      	lsrs	r3, r3, #10
 8003f80:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f86:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003f88:	693b      	ldr	r3, [r7, #16]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f92:	2208      	movs	r2, #8
 8003f94:	409a      	lsls	r2, r3
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	4013      	ands	r3, r2
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d01a      	beq.n	8003fd4 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	f003 0304 	and.w	r3, r3, #4
 8003fa8:	2b00      	cmp	r3, #0
 8003faa:	d013      	beq.n	8003fd4 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	681a      	ldr	r2, [r3, #0]
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	f022 0204 	bic.w	r2, r2, #4
 8003fba:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003fc0:	2208      	movs	r2, #8
 8003fc2:	409a      	lsls	r2, r3
 8003fc4:	693b      	ldr	r3, [r7, #16]
 8003fc6:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003fcc:	f043 0201 	orr.w	r2, r3, #1
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003fd8:	2201      	movs	r2, #1
 8003fda:	409a      	lsls	r2, r3
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	4013      	ands	r3, r2
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	d012      	beq.n	800400a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	695b      	ldr	r3, [r3, #20]
 8003fea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	d00b      	beq.n	800400a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ff6:	2201      	movs	r2, #1
 8003ff8:	409a      	lsls	r2, r3
 8003ffa:	693b      	ldr	r3, [r7, #16]
 8003ffc:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004002:	f043 0202 	orr.w	r2, r3, #2
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800400e:	2204      	movs	r2, #4
 8004010:	409a      	lsls	r2, r3
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	4013      	ands	r3, r2
 8004016:	2b00      	cmp	r3, #0
 8004018:	d012      	beq.n	8004040 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	f003 0302 	and.w	r3, r3, #2
 8004024:	2b00      	cmp	r3, #0
 8004026:	d00b      	beq.n	8004040 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800402c:	2204      	movs	r2, #4
 800402e:	409a      	lsls	r2, r3
 8004030:	693b      	ldr	r3, [r7, #16]
 8004032:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004038:	f043 0204 	orr.w	r2, r3, #4
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004044:	2210      	movs	r2, #16
 8004046:	409a      	lsls	r2, r3
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	4013      	ands	r3, r2
 800404c:	2b00      	cmp	r3, #0
 800404e:	d043      	beq.n	80040d8 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	f003 0308 	and.w	r3, r3, #8
 800405a:	2b00      	cmp	r3, #0
 800405c:	d03c      	beq.n	80040d8 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004062:	2210      	movs	r2, #16
 8004064:	409a      	lsls	r2, r3
 8004066:	693b      	ldr	r3, [r7, #16]
 8004068:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004074:	2b00      	cmp	r3, #0
 8004076:	d018      	beq.n	80040aa <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004082:	2b00      	cmp	r3, #0
 8004084:	d108      	bne.n	8004098 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800408a:	2b00      	cmp	r3, #0
 800408c:	d024      	beq.n	80040d8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004092:	6878      	ldr	r0, [r7, #4]
 8004094:	4798      	blx	r3
 8004096:	e01f      	b.n	80040d8 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800409c:	2b00      	cmp	r3, #0
 800409e:	d01b      	beq.n	80040d8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80040a4:	6878      	ldr	r0, [r7, #4]
 80040a6:	4798      	blx	r3
 80040a8:	e016      	b.n	80040d8 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80040b4:	2b00      	cmp	r3, #0
 80040b6:	d107      	bne.n	80040c8 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	681a      	ldr	r2, [r3, #0]
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	f022 0208 	bic.w	r2, r2, #8
 80040c6:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	d003      	beq.n	80040d8 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040d4:	6878      	ldr	r0, [r7, #4]
 80040d6:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80040dc:	2220      	movs	r2, #32
 80040de:	409a      	lsls	r2, r3
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	4013      	ands	r3, r2
 80040e4:	2b00      	cmp	r3, #0
 80040e6:	f000 808e 	beq.w	8004206 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	f003 0310 	and.w	r3, r3, #16
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	f000 8086 	beq.w	8004206 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80040fe:	2220      	movs	r2, #32
 8004100:	409a      	lsls	r2, r3
 8004102:	693b      	ldr	r3, [r7, #16]
 8004104:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800410c:	b2db      	uxtb	r3, r3
 800410e:	2b05      	cmp	r3, #5
 8004110:	d136      	bne.n	8004180 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	681a      	ldr	r2, [r3, #0]
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	f022 0216 	bic.w	r2, r2, #22
 8004120:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	695a      	ldr	r2, [r3, #20]
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004130:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004136:	2b00      	cmp	r3, #0
 8004138:	d103      	bne.n	8004142 <HAL_DMA_IRQHandler+0x1da>
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800413e:	2b00      	cmp	r3, #0
 8004140:	d007      	beq.n	8004152 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	681a      	ldr	r2, [r3, #0]
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	f022 0208 	bic.w	r2, r2, #8
 8004150:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004156:	223f      	movs	r2, #63	; 0x3f
 8004158:	409a      	lsls	r2, r3
 800415a:	693b      	ldr	r3, [r7, #16]
 800415c:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	2201      	movs	r2, #1
 8004162:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	2200      	movs	r2, #0
 800416a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004172:	2b00      	cmp	r3, #0
 8004174:	d07d      	beq.n	8004272 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800417a:	6878      	ldr	r0, [r7, #4]
 800417c:	4798      	blx	r3
        }
        return;
 800417e:	e078      	b.n	8004272 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800418a:	2b00      	cmp	r3, #0
 800418c:	d01c      	beq.n	80041c8 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004198:	2b00      	cmp	r3, #0
 800419a:	d108      	bne.n	80041ae <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80041a0:	2b00      	cmp	r3, #0
 80041a2:	d030      	beq.n	8004206 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80041a8:	6878      	ldr	r0, [r7, #4]
 80041aa:	4798      	blx	r3
 80041ac:	e02b      	b.n	8004206 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d027      	beq.n	8004206 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80041ba:	6878      	ldr	r0, [r7, #4]
 80041bc:	4798      	blx	r3
 80041be:	e022      	b.n	8004206 <HAL_DMA_IRQHandler+0x29e>
 80041c0:	20000000 	.word	0x20000000
 80041c4:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	d10f      	bne.n	80041f6 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	681a      	ldr	r2, [r3, #0]
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	f022 0210 	bic.w	r2, r2, #16
 80041e4:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	2201      	movs	r2, #1
 80041ea:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	2200      	movs	r2, #0
 80041f2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	d003      	beq.n	8004206 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004202:	6878      	ldr	r0, [r7, #4]
 8004204:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800420a:	2b00      	cmp	r3, #0
 800420c:	d032      	beq.n	8004274 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004212:	f003 0301 	and.w	r3, r3, #1
 8004216:	2b00      	cmp	r3, #0
 8004218:	d022      	beq.n	8004260 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	2205      	movs	r2, #5
 800421e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	681a      	ldr	r2, [r3, #0]
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	f022 0201 	bic.w	r2, r2, #1
 8004230:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8004232:	68bb      	ldr	r3, [r7, #8]
 8004234:	3301      	adds	r3, #1
 8004236:	60bb      	str	r3, [r7, #8]
 8004238:	697a      	ldr	r2, [r7, #20]
 800423a:	429a      	cmp	r2, r3
 800423c:	d307      	bcc.n	800424e <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	f003 0301 	and.w	r3, r3, #1
 8004248:	2b00      	cmp	r3, #0
 800424a:	d1f2      	bne.n	8004232 <HAL_DMA_IRQHandler+0x2ca>
 800424c:	e000      	b.n	8004250 <HAL_DMA_IRQHandler+0x2e8>
          break;
 800424e:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	2201      	movs	r2, #1
 8004254:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	2200      	movs	r2, #0
 800425c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004264:	2b00      	cmp	r3, #0
 8004266:	d005      	beq.n	8004274 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800426c:	6878      	ldr	r0, [r7, #4]
 800426e:	4798      	blx	r3
 8004270:	e000      	b.n	8004274 <HAL_DMA_IRQHandler+0x30c>
        return;
 8004272:	bf00      	nop
    }
  }
}
 8004274:	3718      	adds	r7, #24
 8004276:	46bd      	mov	sp, r7
 8004278:	bd80      	pop	{r7, pc}
 800427a:	bf00      	nop

0800427c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800427c:	b480      	push	{r7}
 800427e:	b085      	sub	sp, #20
 8004280:	af00      	add	r7, sp, #0
 8004282:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	b2db      	uxtb	r3, r3
 800428a:	3b10      	subs	r3, #16
 800428c:	4a14      	ldr	r2, [pc, #80]	; (80042e0 <DMA_CalcBaseAndBitshift+0x64>)
 800428e:	fba2 2303 	umull	r2, r3, r2, r3
 8004292:	091b      	lsrs	r3, r3, #4
 8004294:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8004296:	4a13      	ldr	r2, [pc, #76]	; (80042e4 <DMA_CalcBaseAndBitshift+0x68>)
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	4413      	add	r3, r2
 800429c:	781b      	ldrb	r3, [r3, #0]
 800429e:	461a      	mov	r2, r3
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	2b03      	cmp	r3, #3
 80042a8:	d909      	bls.n	80042be <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80042b2:	f023 0303 	bic.w	r3, r3, #3
 80042b6:	1d1a      	adds	r2, r3, #4
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	659a      	str	r2, [r3, #88]	; 0x58
 80042bc:	e007      	b.n	80042ce <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80042c6:	f023 0303 	bic.w	r3, r3, #3
 80042ca:	687a      	ldr	r2, [r7, #4]
 80042cc:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80042d2:	4618      	mov	r0, r3
 80042d4:	3714      	adds	r7, #20
 80042d6:	46bd      	mov	sp, r7
 80042d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042dc:	4770      	bx	lr
 80042de:	bf00      	nop
 80042e0:	aaaaaaab 	.word	0xaaaaaaab
 80042e4:	0800f5a0 	.word	0x0800f5a0

080042e8 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80042e8:	b480      	push	{r7}
 80042ea:	b085      	sub	sp, #20
 80042ec:	af00      	add	r7, sp, #0
 80042ee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80042f0:	2300      	movs	r3, #0
 80042f2:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042f8:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	699b      	ldr	r3, [r3, #24]
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d11f      	bne.n	8004342 <DMA_CheckFifoParam+0x5a>
 8004302:	68bb      	ldr	r3, [r7, #8]
 8004304:	2b03      	cmp	r3, #3
 8004306:	d856      	bhi.n	80043b6 <DMA_CheckFifoParam+0xce>
 8004308:	a201      	add	r2, pc, #4	; (adr r2, 8004310 <DMA_CheckFifoParam+0x28>)
 800430a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800430e:	bf00      	nop
 8004310:	08004321 	.word	0x08004321
 8004314:	08004333 	.word	0x08004333
 8004318:	08004321 	.word	0x08004321
 800431c:	080043b7 	.word	0x080043b7
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004324:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004328:	2b00      	cmp	r3, #0
 800432a:	d046      	beq.n	80043ba <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 800432c:	2301      	movs	r3, #1
 800432e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004330:	e043      	b.n	80043ba <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004336:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800433a:	d140      	bne.n	80043be <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 800433c:	2301      	movs	r3, #1
 800433e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004340:	e03d      	b.n	80043be <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	699b      	ldr	r3, [r3, #24]
 8004346:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800434a:	d121      	bne.n	8004390 <DMA_CheckFifoParam+0xa8>
 800434c:	68bb      	ldr	r3, [r7, #8]
 800434e:	2b03      	cmp	r3, #3
 8004350:	d837      	bhi.n	80043c2 <DMA_CheckFifoParam+0xda>
 8004352:	a201      	add	r2, pc, #4	; (adr r2, 8004358 <DMA_CheckFifoParam+0x70>)
 8004354:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004358:	08004369 	.word	0x08004369
 800435c:	0800436f 	.word	0x0800436f
 8004360:	08004369 	.word	0x08004369
 8004364:	08004381 	.word	0x08004381
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8004368:	2301      	movs	r3, #1
 800436a:	73fb      	strb	r3, [r7, #15]
      break;
 800436c:	e030      	b.n	80043d0 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004372:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004376:	2b00      	cmp	r3, #0
 8004378:	d025      	beq.n	80043c6 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800437a:	2301      	movs	r3, #1
 800437c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800437e:	e022      	b.n	80043c6 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004384:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004388:	d11f      	bne.n	80043ca <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800438a:	2301      	movs	r3, #1
 800438c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800438e:	e01c      	b.n	80043ca <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8004390:	68bb      	ldr	r3, [r7, #8]
 8004392:	2b02      	cmp	r3, #2
 8004394:	d903      	bls.n	800439e <DMA_CheckFifoParam+0xb6>
 8004396:	68bb      	ldr	r3, [r7, #8]
 8004398:	2b03      	cmp	r3, #3
 800439a:	d003      	beq.n	80043a4 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800439c:	e018      	b.n	80043d0 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800439e:	2301      	movs	r3, #1
 80043a0:	73fb      	strb	r3, [r7, #15]
      break;
 80043a2:	e015      	b.n	80043d0 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043a8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80043ac:	2b00      	cmp	r3, #0
 80043ae:	d00e      	beq.n	80043ce <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80043b0:	2301      	movs	r3, #1
 80043b2:	73fb      	strb	r3, [r7, #15]
      break;
 80043b4:	e00b      	b.n	80043ce <DMA_CheckFifoParam+0xe6>
      break;
 80043b6:	bf00      	nop
 80043b8:	e00a      	b.n	80043d0 <DMA_CheckFifoParam+0xe8>
      break;
 80043ba:	bf00      	nop
 80043bc:	e008      	b.n	80043d0 <DMA_CheckFifoParam+0xe8>
      break;
 80043be:	bf00      	nop
 80043c0:	e006      	b.n	80043d0 <DMA_CheckFifoParam+0xe8>
      break;
 80043c2:	bf00      	nop
 80043c4:	e004      	b.n	80043d0 <DMA_CheckFifoParam+0xe8>
      break;
 80043c6:	bf00      	nop
 80043c8:	e002      	b.n	80043d0 <DMA_CheckFifoParam+0xe8>
      break;   
 80043ca:	bf00      	nop
 80043cc:	e000      	b.n	80043d0 <DMA_CheckFifoParam+0xe8>
      break;
 80043ce:	bf00      	nop
    }
  } 
  
  return status; 
 80043d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80043d2:	4618      	mov	r0, r3
 80043d4:	3714      	adds	r7, #20
 80043d6:	46bd      	mov	sp, r7
 80043d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043dc:	4770      	bx	lr
 80043de:	bf00      	nop

080043e0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80043e0:	b480      	push	{r7}
 80043e2:	b089      	sub	sp, #36	; 0x24
 80043e4:	af00      	add	r7, sp, #0
 80043e6:	6078      	str	r0, [r7, #4]
 80043e8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80043ea:	2300      	movs	r3, #0
 80043ec:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80043ee:	2300      	movs	r3, #0
 80043f0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80043f2:	2300      	movs	r3, #0
 80043f4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80043f6:	2300      	movs	r3, #0
 80043f8:	61fb      	str	r3, [r7, #28]
 80043fa:	e16b      	b.n	80046d4 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80043fc:	2201      	movs	r2, #1
 80043fe:	69fb      	ldr	r3, [r7, #28]
 8004400:	fa02 f303 	lsl.w	r3, r2, r3
 8004404:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004406:	683b      	ldr	r3, [r7, #0]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	697a      	ldr	r2, [r7, #20]
 800440c:	4013      	ands	r3, r2
 800440e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004410:	693a      	ldr	r2, [r7, #16]
 8004412:	697b      	ldr	r3, [r7, #20]
 8004414:	429a      	cmp	r2, r3
 8004416:	f040 815a 	bne.w	80046ce <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800441a:	683b      	ldr	r3, [r7, #0]
 800441c:	685b      	ldr	r3, [r3, #4]
 800441e:	f003 0303 	and.w	r3, r3, #3
 8004422:	2b01      	cmp	r3, #1
 8004424:	d005      	beq.n	8004432 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004426:	683b      	ldr	r3, [r7, #0]
 8004428:	685b      	ldr	r3, [r3, #4]
 800442a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800442e:	2b02      	cmp	r3, #2
 8004430:	d130      	bne.n	8004494 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	689b      	ldr	r3, [r3, #8]
 8004436:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004438:	69fb      	ldr	r3, [r7, #28]
 800443a:	005b      	lsls	r3, r3, #1
 800443c:	2203      	movs	r2, #3
 800443e:	fa02 f303 	lsl.w	r3, r2, r3
 8004442:	43db      	mvns	r3, r3
 8004444:	69ba      	ldr	r2, [r7, #24]
 8004446:	4013      	ands	r3, r2
 8004448:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800444a:	683b      	ldr	r3, [r7, #0]
 800444c:	68da      	ldr	r2, [r3, #12]
 800444e:	69fb      	ldr	r3, [r7, #28]
 8004450:	005b      	lsls	r3, r3, #1
 8004452:	fa02 f303 	lsl.w	r3, r2, r3
 8004456:	69ba      	ldr	r2, [r7, #24]
 8004458:	4313      	orrs	r3, r2
 800445a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	69ba      	ldr	r2, [r7, #24]
 8004460:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	685b      	ldr	r3, [r3, #4]
 8004466:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004468:	2201      	movs	r2, #1
 800446a:	69fb      	ldr	r3, [r7, #28]
 800446c:	fa02 f303 	lsl.w	r3, r2, r3
 8004470:	43db      	mvns	r3, r3
 8004472:	69ba      	ldr	r2, [r7, #24]
 8004474:	4013      	ands	r3, r2
 8004476:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004478:	683b      	ldr	r3, [r7, #0]
 800447a:	685b      	ldr	r3, [r3, #4]
 800447c:	091b      	lsrs	r3, r3, #4
 800447e:	f003 0201 	and.w	r2, r3, #1
 8004482:	69fb      	ldr	r3, [r7, #28]
 8004484:	fa02 f303 	lsl.w	r3, r2, r3
 8004488:	69ba      	ldr	r2, [r7, #24]
 800448a:	4313      	orrs	r3, r2
 800448c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	69ba      	ldr	r2, [r7, #24]
 8004492:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004494:	683b      	ldr	r3, [r7, #0]
 8004496:	685b      	ldr	r3, [r3, #4]
 8004498:	f003 0303 	and.w	r3, r3, #3
 800449c:	2b03      	cmp	r3, #3
 800449e:	d017      	beq.n	80044d0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	68db      	ldr	r3, [r3, #12]
 80044a4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80044a6:	69fb      	ldr	r3, [r7, #28]
 80044a8:	005b      	lsls	r3, r3, #1
 80044aa:	2203      	movs	r2, #3
 80044ac:	fa02 f303 	lsl.w	r3, r2, r3
 80044b0:	43db      	mvns	r3, r3
 80044b2:	69ba      	ldr	r2, [r7, #24]
 80044b4:	4013      	ands	r3, r2
 80044b6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80044b8:	683b      	ldr	r3, [r7, #0]
 80044ba:	689a      	ldr	r2, [r3, #8]
 80044bc:	69fb      	ldr	r3, [r7, #28]
 80044be:	005b      	lsls	r3, r3, #1
 80044c0:	fa02 f303 	lsl.w	r3, r2, r3
 80044c4:	69ba      	ldr	r2, [r7, #24]
 80044c6:	4313      	orrs	r3, r2
 80044c8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	69ba      	ldr	r2, [r7, #24]
 80044ce:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80044d0:	683b      	ldr	r3, [r7, #0]
 80044d2:	685b      	ldr	r3, [r3, #4]
 80044d4:	f003 0303 	and.w	r3, r3, #3
 80044d8:	2b02      	cmp	r3, #2
 80044da:	d123      	bne.n	8004524 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80044dc:	69fb      	ldr	r3, [r7, #28]
 80044de:	08da      	lsrs	r2, r3, #3
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	3208      	adds	r2, #8
 80044e4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80044e8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80044ea:	69fb      	ldr	r3, [r7, #28]
 80044ec:	f003 0307 	and.w	r3, r3, #7
 80044f0:	009b      	lsls	r3, r3, #2
 80044f2:	220f      	movs	r2, #15
 80044f4:	fa02 f303 	lsl.w	r3, r2, r3
 80044f8:	43db      	mvns	r3, r3
 80044fa:	69ba      	ldr	r2, [r7, #24]
 80044fc:	4013      	ands	r3, r2
 80044fe:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004500:	683b      	ldr	r3, [r7, #0]
 8004502:	691a      	ldr	r2, [r3, #16]
 8004504:	69fb      	ldr	r3, [r7, #28]
 8004506:	f003 0307 	and.w	r3, r3, #7
 800450a:	009b      	lsls	r3, r3, #2
 800450c:	fa02 f303 	lsl.w	r3, r2, r3
 8004510:	69ba      	ldr	r2, [r7, #24]
 8004512:	4313      	orrs	r3, r2
 8004514:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004516:	69fb      	ldr	r3, [r7, #28]
 8004518:	08da      	lsrs	r2, r3, #3
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	3208      	adds	r2, #8
 800451e:	69b9      	ldr	r1, [r7, #24]
 8004520:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800452a:	69fb      	ldr	r3, [r7, #28]
 800452c:	005b      	lsls	r3, r3, #1
 800452e:	2203      	movs	r2, #3
 8004530:	fa02 f303 	lsl.w	r3, r2, r3
 8004534:	43db      	mvns	r3, r3
 8004536:	69ba      	ldr	r2, [r7, #24]
 8004538:	4013      	ands	r3, r2
 800453a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800453c:	683b      	ldr	r3, [r7, #0]
 800453e:	685b      	ldr	r3, [r3, #4]
 8004540:	f003 0203 	and.w	r2, r3, #3
 8004544:	69fb      	ldr	r3, [r7, #28]
 8004546:	005b      	lsls	r3, r3, #1
 8004548:	fa02 f303 	lsl.w	r3, r2, r3
 800454c:	69ba      	ldr	r2, [r7, #24]
 800454e:	4313      	orrs	r3, r2
 8004550:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	69ba      	ldr	r2, [r7, #24]
 8004556:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004558:	683b      	ldr	r3, [r7, #0]
 800455a:	685b      	ldr	r3, [r3, #4]
 800455c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004560:	2b00      	cmp	r3, #0
 8004562:	f000 80b4 	beq.w	80046ce <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004566:	2300      	movs	r3, #0
 8004568:	60fb      	str	r3, [r7, #12]
 800456a:	4b60      	ldr	r3, [pc, #384]	; (80046ec <HAL_GPIO_Init+0x30c>)
 800456c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800456e:	4a5f      	ldr	r2, [pc, #380]	; (80046ec <HAL_GPIO_Init+0x30c>)
 8004570:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004574:	6453      	str	r3, [r2, #68]	; 0x44
 8004576:	4b5d      	ldr	r3, [pc, #372]	; (80046ec <HAL_GPIO_Init+0x30c>)
 8004578:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800457a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800457e:	60fb      	str	r3, [r7, #12]
 8004580:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004582:	4a5b      	ldr	r2, [pc, #364]	; (80046f0 <HAL_GPIO_Init+0x310>)
 8004584:	69fb      	ldr	r3, [r7, #28]
 8004586:	089b      	lsrs	r3, r3, #2
 8004588:	3302      	adds	r3, #2
 800458a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800458e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004590:	69fb      	ldr	r3, [r7, #28]
 8004592:	f003 0303 	and.w	r3, r3, #3
 8004596:	009b      	lsls	r3, r3, #2
 8004598:	220f      	movs	r2, #15
 800459a:	fa02 f303 	lsl.w	r3, r2, r3
 800459e:	43db      	mvns	r3, r3
 80045a0:	69ba      	ldr	r2, [r7, #24]
 80045a2:	4013      	ands	r3, r2
 80045a4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	4a52      	ldr	r2, [pc, #328]	; (80046f4 <HAL_GPIO_Init+0x314>)
 80045aa:	4293      	cmp	r3, r2
 80045ac:	d02b      	beq.n	8004606 <HAL_GPIO_Init+0x226>
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	4a51      	ldr	r2, [pc, #324]	; (80046f8 <HAL_GPIO_Init+0x318>)
 80045b2:	4293      	cmp	r3, r2
 80045b4:	d025      	beq.n	8004602 <HAL_GPIO_Init+0x222>
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	4a50      	ldr	r2, [pc, #320]	; (80046fc <HAL_GPIO_Init+0x31c>)
 80045ba:	4293      	cmp	r3, r2
 80045bc:	d01f      	beq.n	80045fe <HAL_GPIO_Init+0x21e>
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	4a4f      	ldr	r2, [pc, #316]	; (8004700 <HAL_GPIO_Init+0x320>)
 80045c2:	4293      	cmp	r3, r2
 80045c4:	d019      	beq.n	80045fa <HAL_GPIO_Init+0x21a>
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	4a4e      	ldr	r2, [pc, #312]	; (8004704 <HAL_GPIO_Init+0x324>)
 80045ca:	4293      	cmp	r3, r2
 80045cc:	d013      	beq.n	80045f6 <HAL_GPIO_Init+0x216>
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	4a4d      	ldr	r2, [pc, #308]	; (8004708 <HAL_GPIO_Init+0x328>)
 80045d2:	4293      	cmp	r3, r2
 80045d4:	d00d      	beq.n	80045f2 <HAL_GPIO_Init+0x212>
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	4a4c      	ldr	r2, [pc, #304]	; (800470c <HAL_GPIO_Init+0x32c>)
 80045da:	4293      	cmp	r3, r2
 80045dc:	d007      	beq.n	80045ee <HAL_GPIO_Init+0x20e>
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	4a4b      	ldr	r2, [pc, #300]	; (8004710 <HAL_GPIO_Init+0x330>)
 80045e2:	4293      	cmp	r3, r2
 80045e4:	d101      	bne.n	80045ea <HAL_GPIO_Init+0x20a>
 80045e6:	2307      	movs	r3, #7
 80045e8:	e00e      	b.n	8004608 <HAL_GPIO_Init+0x228>
 80045ea:	2308      	movs	r3, #8
 80045ec:	e00c      	b.n	8004608 <HAL_GPIO_Init+0x228>
 80045ee:	2306      	movs	r3, #6
 80045f0:	e00a      	b.n	8004608 <HAL_GPIO_Init+0x228>
 80045f2:	2305      	movs	r3, #5
 80045f4:	e008      	b.n	8004608 <HAL_GPIO_Init+0x228>
 80045f6:	2304      	movs	r3, #4
 80045f8:	e006      	b.n	8004608 <HAL_GPIO_Init+0x228>
 80045fa:	2303      	movs	r3, #3
 80045fc:	e004      	b.n	8004608 <HAL_GPIO_Init+0x228>
 80045fe:	2302      	movs	r3, #2
 8004600:	e002      	b.n	8004608 <HAL_GPIO_Init+0x228>
 8004602:	2301      	movs	r3, #1
 8004604:	e000      	b.n	8004608 <HAL_GPIO_Init+0x228>
 8004606:	2300      	movs	r3, #0
 8004608:	69fa      	ldr	r2, [r7, #28]
 800460a:	f002 0203 	and.w	r2, r2, #3
 800460e:	0092      	lsls	r2, r2, #2
 8004610:	4093      	lsls	r3, r2
 8004612:	69ba      	ldr	r2, [r7, #24]
 8004614:	4313      	orrs	r3, r2
 8004616:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004618:	4935      	ldr	r1, [pc, #212]	; (80046f0 <HAL_GPIO_Init+0x310>)
 800461a:	69fb      	ldr	r3, [r7, #28]
 800461c:	089b      	lsrs	r3, r3, #2
 800461e:	3302      	adds	r3, #2
 8004620:	69ba      	ldr	r2, [r7, #24]
 8004622:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004626:	4b3b      	ldr	r3, [pc, #236]	; (8004714 <HAL_GPIO_Init+0x334>)
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800462c:	693b      	ldr	r3, [r7, #16]
 800462e:	43db      	mvns	r3, r3
 8004630:	69ba      	ldr	r2, [r7, #24]
 8004632:	4013      	ands	r3, r2
 8004634:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004636:	683b      	ldr	r3, [r7, #0]
 8004638:	685b      	ldr	r3, [r3, #4]
 800463a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800463e:	2b00      	cmp	r3, #0
 8004640:	d003      	beq.n	800464a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8004642:	69ba      	ldr	r2, [r7, #24]
 8004644:	693b      	ldr	r3, [r7, #16]
 8004646:	4313      	orrs	r3, r2
 8004648:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800464a:	4a32      	ldr	r2, [pc, #200]	; (8004714 <HAL_GPIO_Init+0x334>)
 800464c:	69bb      	ldr	r3, [r7, #24]
 800464e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8004650:	4b30      	ldr	r3, [pc, #192]	; (8004714 <HAL_GPIO_Init+0x334>)
 8004652:	685b      	ldr	r3, [r3, #4]
 8004654:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004656:	693b      	ldr	r3, [r7, #16]
 8004658:	43db      	mvns	r3, r3
 800465a:	69ba      	ldr	r2, [r7, #24]
 800465c:	4013      	ands	r3, r2
 800465e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004660:	683b      	ldr	r3, [r7, #0]
 8004662:	685b      	ldr	r3, [r3, #4]
 8004664:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004668:	2b00      	cmp	r3, #0
 800466a:	d003      	beq.n	8004674 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 800466c:	69ba      	ldr	r2, [r7, #24]
 800466e:	693b      	ldr	r3, [r7, #16]
 8004670:	4313      	orrs	r3, r2
 8004672:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004674:	4a27      	ldr	r2, [pc, #156]	; (8004714 <HAL_GPIO_Init+0x334>)
 8004676:	69bb      	ldr	r3, [r7, #24]
 8004678:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800467a:	4b26      	ldr	r3, [pc, #152]	; (8004714 <HAL_GPIO_Init+0x334>)
 800467c:	689b      	ldr	r3, [r3, #8]
 800467e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004680:	693b      	ldr	r3, [r7, #16]
 8004682:	43db      	mvns	r3, r3
 8004684:	69ba      	ldr	r2, [r7, #24]
 8004686:	4013      	ands	r3, r2
 8004688:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800468a:	683b      	ldr	r3, [r7, #0]
 800468c:	685b      	ldr	r3, [r3, #4]
 800468e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004692:	2b00      	cmp	r3, #0
 8004694:	d003      	beq.n	800469e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8004696:	69ba      	ldr	r2, [r7, #24]
 8004698:	693b      	ldr	r3, [r7, #16]
 800469a:	4313      	orrs	r3, r2
 800469c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800469e:	4a1d      	ldr	r2, [pc, #116]	; (8004714 <HAL_GPIO_Init+0x334>)
 80046a0:	69bb      	ldr	r3, [r7, #24]
 80046a2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80046a4:	4b1b      	ldr	r3, [pc, #108]	; (8004714 <HAL_GPIO_Init+0x334>)
 80046a6:	68db      	ldr	r3, [r3, #12]
 80046a8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80046aa:	693b      	ldr	r3, [r7, #16]
 80046ac:	43db      	mvns	r3, r3
 80046ae:	69ba      	ldr	r2, [r7, #24]
 80046b0:	4013      	ands	r3, r2
 80046b2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80046b4:	683b      	ldr	r3, [r7, #0]
 80046b6:	685b      	ldr	r3, [r3, #4]
 80046b8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80046bc:	2b00      	cmp	r3, #0
 80046be:	d003      	beq.n	80046c8 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80046c0:	69ba      	ldr	r2, [r7, #24]
 80046c2:	693b      	ldr	r3, [r7, #16]
 80046c4:	4313      	orrs	r3, r2
 80046c6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80046c8:	4a12      	ldr	r2, [pc, #72]	; (8004714 <HAL_GPIO_Init+0x334>)
 80046ca:	69bb      	ldr	r3, [r7, #24]
 80046cc:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80046ce:	69fb      	ldr	r3, [r7, #28]
 80046d0:	3301      	adds	r3, #1
 80046d2:	61fb      	str	r3, [r7, #28]
 80046d4:	69fb      	ldr	r3, [r7, #28]
 80046d6:	2b0f      	cmp	r3, #15
 80046d8:	f67f ae90 	bls.w	80043fc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80046dc:	bf00      	nop
 80046de:	bf00      	nop
 80046e0:	3724      	adds	r7, #36	; 0x24
 80046e2:	46bd      	mov	sp, r7
 80046e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046e8:	4770      	bx	lr
 80046ea:	bf00      	nop
 80046ec:	40023800 	.word	0x40023800
 80046f0:	40013800 	.word	0x40013800
 80046f4:	40020000 	.word	0x40020000
 80046f8:	40020400 	.word	0x40020400
 80046fc:	40020800 	.word	0x40020800
 8004700:	40020c00 	.word	0x40020c00
 8004704:	40021000 	.word	0x40021000
 8004708:	40021400 	.word	0x40021400
 800470c:	40021800 	.word	0x40021800
 8004710:	40021c00 	.word	0x40021c00
 8004714:	40013c00 	.word	0x40013c00

08004718 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004718:	b480      	push	{r7}
 800471a:	b083      	sub	sp, #12
 800471c:	af00      	add	r7, sp, #0
 800471e:	6078      	str	r0, [r7, #4]
 8004720:	460b      	mov	r3, r1
 8004722:	807b      	strh	r3, [r7, #2]
 8004724:	4613      	mov	r3, r2
 8004726:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004728:	787b      	ldrb	r3, [r7, #1]
 800472a:	2b00      	cmp	r3, #0
 800472c:	d003      	beq.n	8004736 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800472e:	887a      	ldrh	r2, [r7, #2]
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004734:	e003      	b.n	800473e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8004736:	887b      	ldrh	r3, [r7, #2]
 8004738:	041a      	lsls	r2, r3, #16
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	619a      	str	r2, [r3, #24]
}
 800473e:	bf00      	nop
 8004740:	370c      	adds	r7, #12
 8004742:	46bd      	mov	sp, r7
 8004744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004748:	4770      	bx	lr

0800474a <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800474a:	b590      	push	{r4, r7, lr}
 800474c:	b08d      	sub	sp, #52	; 0x34
 800474e:	af00      	add	r7, sp, #0
 8004750:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004758:	6a3b      	ldr	r3, [r7, #32]
 800475a:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t temp;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	4618      	mov	r0, r3
 8004762:	f004 fb0d 	bl	8008d80 <USB_GetMode>
 8004766:	4603      	mov	r3, r0
 8004768:	2b00      	cmp	r3, #0
 800476a:	f040 839d 	bne.w	8004ea8 <HAL_PCD_IRQHandler+0x75e>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	4618      	mov	r0, r3
 8004774:	f004 fa71 	bl	8008c5a <USB_ReadInterrupts>
 8004778:	4603      	mov	r3, r0
 800477a:	2b00      	cmp	r3, #0
 800477c:	f000 8393 	beq.w	8004ea6 <HAL_PCD_IRQHandler+0x75c>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	4618      	mov	r0, r3
 8004786:	f004 fa68 	bl	8008c5a <USB_ReadInterrupts>
 800478a:	4603      	mov	r3, r0
 800478c:	f003 0302 	and.w	r3, r3, #2
 8004790:	2b02      	cmp	r3, #2
 8004792:	d107      	bne.n	80047a4 <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	695a      	ldr	r2, [r3, #20]
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	f002 0202 	and.w	r2, r2, #2
 80047a2:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	4618      	mov	r0, r3
 80047aa:	f004 fa56 	bl	8008c5a <USB_ReadInterrupts>
 80047ae:	4603      	mov	r3, r0
 80047b0:	f003 0310 	and.w	r3, r3, #16
 80047b4:	2b10      	cmp	r3, #16
 80047b6:	d161      	bne.n	800487c <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	699a      	ldr	r2, [r3, #24]
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	f022 0210 	bic.w	r2, r2, #16
 80047c6:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 80047c8:	6a3b      	ldr	r3, [r7, #32]
 80047ca:	6a1b      	ldr	r3, [r3, #32]
 80047cc:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 80047ce:	69bb      	ldr	r3, [r7, #24]
 80047d0:	f003 020f 	and.w	r2, r3, #15
 80047d4:	4613      	mov	r3, r2
 80047d6:	00db      	lsls	r3, r3, #3
 80047d8:	1a9b      	subs	r3, r3, r2
 80047da:	009b      	lsls	r3, r3, #2
 80047dc:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80047e0:	687a      	ldr	r2, [r7, #4]
 80047e2:	4413      	add	r3, r2
 80047e4:	3304      	adds	r3, #4
 80047e6:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 80047e8:	69bb      	ldr	r3, [r7, #24]
 80047ea:	0c5b      	lsrs	r3, r3, #17
 80047ec:	f003 030f 	and.w	r3, r3, #15
 80047f0:	2b02      	cmp	r3, #2
 80047f2:	d124      	bne.n	800483e <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 80047f4:	69ba      	ldr	r2, [r7, #24]
 80047f6:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 80047fa:	4013      	ands	r3, r2
 80047fc:	2b00      	cmp	r3, #0
 80047fe:	d035      	beq.n	800486c <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8004800:	697b      	ldr	r3, [r7, #20]
 8004802:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 8004804:	69bb      	ldr	r3, [r7, #24]
 8004806:	091b      	lsrs	r3, r3, #4
 8004808:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800480a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800480e:	b29b      	uxth	r3, r3
 8004810:	461a      	mov	r2, r3
 8004812:	6a38      	ldr	r0, [r7, #32]
 8004814:	f004 f8cf 	bl	80089b6 <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8004818:	697b      	ldr	r3, [r7, #20]
 800481a:	68da      	ldr	r2, [r3, #12]
 800481c:	69bb      	ldr	r3, [r7, #24]
 800481e:	091b      	lsrs	r3, r3, #4
 8004820:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004824:	441a      	add	r2, r3
 8004826:	697b      	ldr	r3, [r7, #20]
 8004828:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800482a:	697b      	ldr	r3, [r7, #20]
 800482c:	699a      	ldr	r2, [r3, #24]
 800482e:	69bb      	ldr	r3, [r7, #24]
 8004830:	091b      	lsrs	r3, r3, #4
 8004832:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004836:	441a      	add	r2, r3
 8004838:	697b      	ldr	r3, [r7, #20]
 800483a:	619a      	str	r2, [r3, #24]
 800483c:	e016      	b.n	800486c <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 800483e:	69bb      	ldr	r3, [r7, #24]
 8004840:	0c5b      	lsrs	r3, r3, #17
 8004842:	f003 030f 	and.w	r3, r3, #15
 8004846:	2b06      	cmp	r3, #6
 8004848:	d110      	bne.n	800486c <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8004850:	2208      	movs	r2, #8
 8004852:	4619      	mov	r1, r3
 8004854:	6a38      	ldr	r0, [r7, #32]
 8004856:	f004 f8ae 	bl	80089b6 <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800485a:	697b      	ldr	r3, [r7, #20]
 800485c:	699a      	ldr	r2, [r3, #24]
 800485e:	69bb      	ldr	r3, [r7, #24]
 8004860:	091b      	lsrs	r3, r3, #4
 8004862:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004866:	441a      	add	r2, r3
 8004868:	697b      	ldr	r3, [r7, #20]
 800486a:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	699a      	ldr	r2, [r3, #24]
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	f042 0210 	orr.w	r2, r2, #16
 800487a:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	4618      	mov	r0, r3
 8004882:	f004 f9ea 	bl	8008c5a <USB_ReadInterrupts>
 8004886:	4603      	mov	r3, r0
 8004888:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800488c:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8004890:	d16e      	bne.n	8004970 <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 8004892:	2300      	movs	r3, #0
 8004894:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	4618      	mov	r0, r3
 800489c:	f004 f9f0 	bl	8008c80 <USB_ReadDevAllOutEpInterrupt>
 80048a0:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 80048a2:	e062      	b.n	800496a <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 80048a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048a6:	f003 0301 	and.w	r3, r3, #1
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	d057      	beq.n	800495e <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80048b4:	b2d2      	uxtb	r2, r2
 80048b6:	4611      	mov	r1, r2
 80048b8:	4618      	mov	r0, r3
 80048ba:	f004 fa15 	bl	8008ce8 <USB_ReadDevOutEPInterrupt>
 80048be:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 80048c0:	693b      	ldr	r3, [r7, #16]
 80048c2:	f003 0301 	and.w	r3, r3, #1
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	d00c      	beq.n	80048e4 <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 80048ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048cc:	015a      	lsls	r2, r3, #5
 80048ce:	69fb      	ldr	r3, [r7, #28]
 80048d0:	4413      	add	r3, r2
 80048d2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80048d6:	461a      	mov	r2, r3
 80048d8:	2301      	movs	r3, #1
 80048da:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 80048dc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80048de:	6878      	ldr	r0, [r7, #4]
 80048e0:	f000 fd4e 	bl	8005380 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 80048e4:	693b      	ldr	r3, [r7, #16]
 80048e6:	f003 0308 	and.w	r3, r3, #8
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	d00c      	beq.n	8004908 <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 80048ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048f0:	015a      	lsls	r2, r3, #5
 80048f2:	69fb      	ldr	r3, [r7, #28]
 80048f4:	4413      	add	r3, r2
 80048f6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80048fa:	461a      	mov	r2, r3
 80048fc:	2308      	movs	r3, #8
 80048fe:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8004900:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004902:	6878      	ldr	r0, [r7, #4]
 8004904:	f000 fe48 	bl	8005598 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8004908:	693b      	ldr	r3, [r7, #16]
 800490a:	f003 0310 	and.w	r3, r3, #16
 800490e:	2b00      	cmp	r3, #0
 8004910:	d008      	beq.n	8004924 <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8004912:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004914:	015a      	lsls	r2, r3, #5
 8004916:	69fb      	ldr	r3, [r7, #28]
 8004918:	4413      	add	r3, r2
 800491a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800491e:	461a      	mov	r2, r3
 8004920:	2310      	movs	r3, #16
 8004922:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8004924:	693b      	ldr	r3, [r7, #16]
 8004926:	f003 0320 	and.w	r3, r3, #32
 800492a:	2b00      	cmp	r3, #0
 800492c:	d008      	beq.n	8004940 <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800492e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004930:	015a      	lsls	r2, r3, #5
 8004932:	69fb      	ldr	r3, [r7, #28]
 8004934:	4413      	add	r3, r2
 8004936:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800493a:	461a      	mov	r2, r3
 800493c:	2320      	movs	r3, #32
 800493e:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8004940:	693b      	ldr	r3, [r7, #16]
 8004942:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004946:	2b00      	cmp	r3, #0
 8004948:	d009      	beq.n	800495e <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 800494a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800494c:	015a      	lsls	r2, r3, #5
 800494e:	69fb      	ldr	r3, [r7, #28]
 8004950:	4413      	add	r3, r2
 8004952:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004956:	461a      	mov	r2, r3
 8004958:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800495c:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 800495e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004960:	3301      	adds	r3, #1
 8004962:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8004964:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004966:	085b      	lsrs	r3, r3, #1
 8004968:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800496a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800496c:	2b00      	cmp	r3, #0
 800496e:	d199      	bne.n	80048a4 <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	4618      	mov	r0, r3
 8004976:	f004 f970 	bl	8008c5a <USB_ReadInterrupts>
 800497a:	4603      	mov	r3, r0
 800497c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004980:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004984:	f040 80c0 	bne.w	8004b08 <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	4618      	mov	r0, r3
 800498e:	f004 f991 	bl	8008cb4 <USB_ReadDevAllInEpInterrupt>
 8004992:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8004994:	2300      	movs	r3, #0
 8004996:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8004998:	e0b2      	b.n	8004b00 <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 800499a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800499c:	f003 0301 	and.w	r3, r3, #1
 80049a0:	2b00      	cmp	r3, #0
 80049a2:	f000 80a7 	beq.w	8004af4 <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80049ac:	b2d2      	uxtb	r2, r2
 80049ae:	4611      	mov	r1, r2
 80049b0:	4618      	mov	r0, r3
 80049b2:	f004 f9b7 	bl	8008d24 <USB_ReadDevInEPInterrupt>
 80049b6:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80049b8:	693b      	ldr	r3, [r7, #16]
 80049ba:	f003 0301 	and.w	r3, r3, #1
 80049be:	2b00      	cmp	r3, #0
 80049c0:	d057      	beq.n	8004a72 <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80049c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049c4:	f003 030f 	and.w	r3, r3, #15
 80049c8:	2201      	movs	r2, #1
 80049ca:	fa02 f303 	lsl.w	r3, r2, r3
 80049ce:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80049d0:	69fb      	ldr	r3, [r7, #28]
 80049d2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80049d6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	43db      	mvns	r3, r3
 80049dc:	69f9      	ldr	r1, [r7, #28]
 80049de:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80049e2:	4013      	ands	r3, r2
 80049e4:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80049e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049e8:	015a      	lsls	r2, r3, #5
 80049ea:	69fb      	ldr	r3, [r7, #28]
 80049ec:	4413      	add	r3, r2
 80049ee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80049f2:	461a      	mov	r2, r3
 80049f4:	2301      	movs	r3, #1
 80049f6:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	691b      	ldr	r3, [r3, #16]
 80049fc:	2b01      	cmp	r3, #1
 80049fe:	d132      	bne.n	8004a66 <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8004a00:	6879      	ldr	r1, [r7, #4]
 8004a02:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004a04:	4613      	mov	r3, r2
 8004a06:	00db      	lsls	r3, r3, #3
 8004a08:	1a9b      	subs	r3, r3, r2
 8004a0a:	009b      	lsls	r3, r3, #2
 8004a0c:	440b      	add	r3, r1
 8004a0e:	3348      	adds	r3, #72	; 0x48
 8004a10:	6819      	ldr	r1, [r3, #0]
 8004a12:	6878      	ldr	r0, [r7, #4]
 8004a14:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004a16:	4613      	mov	r3, r2
 8004a18:	00db      	lsls	r3, r3, #3
 8004a1a:	1a9b      	subs	r3, r3, r2
 8004a1c:	009b      	lsls	r3, r3, #2
 8004a1e:	4403      	add	r3, r0
 8004a20:	3344      	adds	r3, #68	; 0x44
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	4419      	add	r1, r3
 8004a26:	6878      	ldr	r0, [r7, #4]
 8004a28:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004a2a:	4613      	mov	r3, r2
 8004a2c:	00db      	lsls	r3, r3, #3
 8004a2e:	1a9b      	subs	r3, r3, r2
 8004a30:	009b      	lsls	r3, r3, #2
 8004a32:	4403      	add	r3, r0
 8004a34:	3348      	adds	r3, #72	; 0x48
 8004a36:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8004a38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a3a:	2b00      	cmp	r3, #0
 8004a3c:	d113      	bne.n	8004a66 <HAL_PCD_IRQHandler+0x31c>
 8004a3e:	6879      	ldr	r1, [r7, #4]
 8004a40:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004a42:	4613      	mov	r3, r2
 8004a44:	00db      	lsls	r3, r3, #3
 8004a46:	1a9b      	subs	r3, r3, r2
 8004a48:	009b      	lsls	r3, r3, #2
 8004a4a:	440b      	add	r3, r1
 8004a4c:	3350      	adds	r3, #80	; 0x50
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	2b00      	cmp	r3, #0
 8004a52:	d108      	bne.n	8004a66 <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	6818      	ldr	r0, [r3, #0]
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8004a5e:	461a      	mov	r2, r3
 8004a60:	2101      	movs	r1, #1
 8004a62:	f004 f9bf 	bl	8008de4 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8004a66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a68:	b2db      	uxtb	r3, r3
 8004a6a:	4619      	mov	r1, r3
 8004a6c:	6878      	ldr	r0, [r7, #4]
 8004a6e:	f008 f89a 	bl	800cba6 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8004a72:	693b      	ldr	r3, [r7, #16]
 8004a74:	f003 0308 	and.w	r3, r3, #8
 8004a78:	2b00      	cmp	r3, #0
 8004a7a:	d008      	beq.n	8004a8e <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8004a7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a7e:	015a      	lsls	r2, r3, #5
 8004a80:	69fb      	ldr	r3, [r7, #28]
 8004a82:	4413      	add	r3, r2
 8004a84:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a88:	461a      	mov	r2, r3
 8004a8a:	2308      	movs	r3, #8
 8004a8c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8004a8e:	693b      	ldr	r3, [r7, #16]
 8004a90:	f003 0310 	and.w	r3, r3, #16
 8004a94:	2b00      	cmp	r3, #0
 8004a96:	d008      	beq.n	8004aaa <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8004a98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a9a:	015a      	lsls	r2, r3, #5
 8004a9c:	69fb      	ldr	r3, [r7, #28]
 8004a9e:	4413      	add	r3, r2
 8004aa0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004aa4:	461a      	mov	r2, r3
 8004aa6:	2310      	movs	r3, #16
 8004aa8:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8004aaa:	693b      	ldr	r3, [r7, #16]
 8004aac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ab0:	2b00      	cmp	r3, #0
 8004ab2:	d008      	beq.n	8004ac6 <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8004ab4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ab6:	015a      	lsls	r2, r3, #5
 8004ab8:	69fb      	ldr	r3, [r7, #28]
 8004aba:	4413      	add	r3, r2
 8004abc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004ac0:	461a      	mov	r2, r3
 8004ac2:	2340      	movs	r3, #64	; 0x40
 8004ac4:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8004ac6:	693b      	ldr	r3, [r7, #16]
 8004ac8:	f003 0302 	and.w	r3, r3, #2
 8004acc:	2b00      	cmp	r3, #0
 8004ace:	d008      	beq.n	8004ae2 <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8004ad0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ad2:	015a      	lsls	r2, r3, #5
 8004ad4:	69fb      	ldr	r3, [r7, #28]
 8004ad6:	4413      	add	r3, r2
 8004ad8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004adc:	461a      	mov	r2, r3
 8004ade:	2302      	movs	r3, #2
 8004ae0:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8004ae2:	693b      	ldr	r3, [r7, #16]
 8004ae4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004ae8:	2b00      	cmp	r3, #0
 8004aea:	d003      	beq.n	8004af4 <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8004aec:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004aee:	6878      	ldr	r0, [r7, #4]
 8004af0:	f000 fbb9 	bl	8005266 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8004af4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004af6:	3301      	adds	r3, #1
 8004af8:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8004afa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004afc:	085b      	lsrs	r3, r3, #1
 8004afe:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8004b00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b02:	2b00      	cmp	r3, #0
 8004b04:	f47f af49 	bne.w	800499a <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	4618      	mov	r0, r3
 8004b0e:	f004 f8a4 	bl	8008c5a <USB_ReadInterrupts>
 8004b12:	4603      	mov	r3, r0
 8004b14:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004b18:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004b1c:	d122      	bne.n	8004b64 <HAL_PCD_IRQHandler+0x41a>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8004b1e:	69fb      	ldr	r3, [r7, #28]
 8004b20:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004b24:	685b      	ldr	r3, [r3, #4]
 8004b26:	69fa      	ldr	r2, [r7, #28]
 8004b28:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004b2c:	f023 0301 	bic.w	r3, r3, #1
 8004b30:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 8004b38:	2b01      	cmp	r3, #1
 8004b3a:	d108      	bne.n	8004b4e <HAL_PCD_IRQHandler+0x404>
      {
        hpcd->LPM_State = LPM_L0;
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	2200      	movs	r2, #0
 8004b40:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8004b44:	2100      	movs	r1, #0
 8004b46:	6878      	ldr	r0, [r7, #4]
 8004b48:	f000 fd6c 	bl	8005624 <HAL_PCDEx_LPM_Callback>
 8004b4c:	e002      	b.n	8004b54 <HAL_PCD_IRQHandler+0x40a>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8004b4e:	6878      	ldr	r0, [r7, #4]
 8004b50:	f008 f8a0 	bl	800cc94 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	695a      	ldr	r2, [r3, #20]
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8004b62:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	4618      	mov	r0, r3
 8004b6a:	f004 f876 	bl	8008c5a <USB_ReadInterrupts>
 8004b6e:	4603      	mov	r3, r0
 8004b70:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004b74:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004b78:	d112      	bne.n	8004ba0 <HAL_PCD_IRQHandler+0x456>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8004b7a:	69fb      	ldr	r3, [r7, #28]
 8004b7c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004b80:	689b      	ldr	r3, [r3, #8]
 8004b82:	f003 0301 	and.w	r3, r3, #1
 8004b86:	2b01      	cmp	r3, #1
 8004b88:	d102      	bne.n	8004b90 <HAL_PCD_IRQHandler+0x446>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8004b8a:	6878      	ldr	r0, [r7, #4]
 8004b8c:	f008 f85c 	bl	800cc48 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	695a      	ldr	r2, [r3, #20]
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8004b9e:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	4618      	mov	r0, r3
 8004ba6:	f004 f858 	bl	8008c5a <USB_ReadInterrupts>
 8004baa:	4603      	mov	r3, r0
 8004bac:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004bb0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004bb4:	f040 80c7 	bne.w	8004d46 <HAL_PCD_IRQHandler+0x5fc>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8004bb8:	69fb      	ldr	r3, [r7, #28]
 8004bba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004bbe:	685b      	ldr	r3, [r3, #4]
 8004bc0:	69fa      	ldr	r2, [r7, #28]
 8004bc2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004bc6:	f023 0301 	bic.w	r3, r3, #1
 8004bca:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	2110      	movs	r1, #16
 8004bd2:	4618      	mov	r0, r3
 8004bd4:	f003 fa4a 	bl	800806c <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004bd8:	2300      	movs	r3, #0
 8004bda:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004bdc:	e056      	b.n	8004c8c <HAL_PCD_IRQHandler+0x542>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8004bde:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004be0:	015a      	lsls	r2, r3, #5
 8004be2:	69fb      	ldr	r3, [r7, #28]
 8004be4:	4413      	add	r3, r2
 8004be6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004bea:	461a      	mov	r2, r3
 8004bec:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004bf0:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8004bf2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004bf4:	015a      	lsls	r2, r3, #5
 8004bf6:	69fb      	ldr	r3, [r7, #28]
 8004bf8:	4413      	add	r3, r2
 8004bfa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004c02:	0151      	lsls	r1, r2, #5
 8004c04:	69fa      	ldr	r2, [r7, #28]
 8004c06:	440a      	add	r2, r1
 8004c08:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004c0c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004c10:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8004c12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c14:	015a      	lsls	r2, r3, #5
 8004c16:	69fb      	ldr	r3, [r7, #28]
 8004c18:	4413      	add	r3, r2
 8004c1a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004c22:	0151      	lsls	r1, r2, #5
 8004c24:	69fa      	ldr	r2, [r7, #28]
 8004c26:	440a      	add	r2, r1
 8004c28:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004c2c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004c30:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8004c32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c34:	015a      	lsls	r2, r3, #5
 8004c36:	69fb      	ldr	r3, [r7, #28]
 8004c38:	4413      	add	r3, r2
 8004c3a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004c3e:	461a      	mov	r2, r3
 8004c40:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004c44:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8004c46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c48:	015a      	lsls	r2, r3, #5
 8004c4a:	69fb      	ldr	r3, [r7, #28]
 8004c4c:	4413      	add	r3, r2
 8004c4e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004c56:	0151      	lsls	r1, r2, #5
 8004c58:	69fa      	ldr	r2, [r7, #28]
 8004c5a:	440a      	add	r2, r1
 8004c5c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004c60:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004c64:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8004c66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c68:	015a      	lsls	r2, r3, #5
 8004c6a:	69fb      	ldr	r3, [r7, #28]
 8004c6c:	4413      	add	r3, r2
 8004c6e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004c76:	0151      	lsls	r1, r2, #5
 8004c78:	69fa      	ldr	r2, [r7, #28]
 8004c7a:	440a      	add	r2, r1
 8004c7c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004c80:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004c84:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004c86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c88:	3301      	adds	r3, #1
 8004c8a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	685b      	ldr	r3, [r3, #4]
 8004c90:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004c92:	429a      	cmp	r2, r3
 8004c94:	d3a3      	bcc.n	8004bde <HAL_PCD_IRQHandler+0x494>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8004c96:	69fb      	ldr	r3, [r7, #28]
 8004c98:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004c9c:	69db      	ldr	r3, [r3, #28]
 8004c9e:	69fa      	ldr	r2, [r7, #28]
 8004ca0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004ca4:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8004ca8:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	d016      	beq.n	8004ce0 <HAL_PCD_IRQHandler+0x596>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8004cb2:	69fb      	ldr	r3, [r7, #28]
 8004cb4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004cb8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004cbc:	69fa      	ldr	r2, [r7, #28]
 8004cbe:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004cc2:	f043 030b 	orr.w	r3, r3, #11
 8004cc6:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8004cca:	69fb      	ldr	r3, [r7, #28]
 8004ccc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004cd0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004cd2:	69fa      	ldr	r2, [r7, #28]
 8004cd4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004cd8:	f043 030b 	orr.w	r3, r3, #11
 8004cdc:	6453      	str	r3, [r2, #68]	; 0x44
 8004cde:	e015      	b.n	8004d0c <HAL_PCD_IRQHandler+0x5c2>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8004ce0:	69fb      	ldr	r3, [r7, #28]
 8004ce2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004ce6:	695b      	ldr	r3, [r3, #20]
 8004ce8:	69fa      	ldr	r2, [r7, #28]
 8004cea:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004cee:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8004cf2:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8004cf6:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8004cf8:	69fb      	ldr	r3, [r7, #28]
 8004cfa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004cfe:	691b      	ldr	r3, [r3, #16]
 8004d00:	69fa      	ldr	r2, [r7, #28]
 8004d02:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004d06:	f043 030b 	orr.w	r3, r3, #11
 8004d0a:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8004d0c:	69fb      	ldr	r3, [r7, #28]
 8004d0e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	69fa      	ldr	r2, [r7, #28]
 8004d16:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004d1a:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8004d1e:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	6818      	ldr	r0, [r3, #0]
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	691b      	ldr	r3, [r3, #16]
 8004d28:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8004d30:	461a      	mov	r2, r3
 8004d32:	f004 f857 	bl	8008de4 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	695a      	ldr	r2, [r3, #20]
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8004d44:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	4618      	mov	r0, r3
 8004d4c:	f003 ff85 	bl	8008c5a <USB_ReadInterrupts>
 8004d50:	4603      	mov	r3, r0
 8004d52:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004d56:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004d5a:	d124      	bne.n	8004da6 <HAL_PCD_IRQHandler+0x65c>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	4618      	mov	r0, r3
 8004d62:	f004 f81b 	bl	8008d9c <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	4618      	mov	r0, r3
 8004d6c:	f003 f9a2 	bl	80080b4 <USB_GetDevSpeed>
 8004d70:	4603      	mov	r3, r0
 8004d72:	461a      	mov	r2, r3
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	681c      	ldr	r4, [r3, #0]
 8004d7c:	f001 f872 	bl	8005e64 <HAL_RCC_GetHCLKFreq>
 8004d80:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8004d86:	b2db      	uxtb	r3, r3
 8004d88:	461a      	mov	r2, r3
 8004d8a:	4620      	mov	r0, r4
 8004d8c:	f003 f8cc 	bl	8007f28 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8004d90:	6878      	ldr	r0, [r7, #4]
 8004d92:	f007 ff30 	bl	800cbf6 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	695a      	ldr	r2, [r3, #20]
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8004da4:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	4618      	mov	r0, r3
 8004dac:	f003 ff55 	bl	8008c5a <USB_ReadInterrupts>
 8004db0:	4603      	mov	r3, r0
 8004db2:	f003 0308 	and.w	r3, r3, #8
 8004db6:	2b08      	cmp	r3, #8
 8004db8:	d10a      	bne.n	8004dd0 <HAL_PCD_IRQHandler+0x686>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8004dba:	6878      	ldr	r0, [r7, #4]
 8004dbc:	f007 ff0d 	bl	800cbda <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	695a      	ldr	r2, [r3, #20]
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	f002 0208 	and.w	r2, r2, #8
 8004dce:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	4618      	mov	r0, r3
 8004dd6:	f003 ff40 	bl	8008c5a <USB_ReadInterrupts>
 8004dda:	4603      	mov	r3, r0
 8004ddc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004de0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004de4:	d10f      	bne.n	8004e06 <HAL_PCD_IRQHandler+0x6bc>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8004de6:	2300      	movs	r3, #0
 8004de8:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8004dea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dec:	b2db      	uxtb	r3, r3
 8004dee:	4619      	mov	r1, r3
 8004df0:	6878      	ldr	r0, [r7, #4]
 8004df2:	f007 ff6f 	bl	800ccd4 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	695a      	ldr	r2, [r3, #20]
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8004e04:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	4618      	mov	r0, r3
 8004e0c:	f003 ff25 	bl	8008c5a <USB_ReadInterrupts>
 8004e10:	4603      	mov	r3, r0
 8004e12:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004e16:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004e1a:	d10f      	bne.n	8004e3c <HAL_PCD_IRQHandler+0x6f2>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8004e1c:	2300      	movs	r3, #0
 8004e1e:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8004e20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e22:	b2db      	uxtb	r3, r3
 8004e24:	4619      	mov	r1, r3
 8004e26:	6878      	ldr	r0, [r7, #4]
 8004e28:	f007 ff42 	bl	800ccb0 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	695a      	ldr	r2, [r3, #20]
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8004e3a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	4618      	mov	r0, r3
 8004e42:	f003 ff0a 	bl	8008c5a <USB_ReadInterrupts>
 8004e46:	4603      	mov	r3, r0
 8004e48:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8004e4c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004e50:	d10a      	bne.n	8004e68 <HAL_PCD_IRQHandler+0x71e>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8004e52:	6878      	ldr	r0, [r7, #4]
 8004e54:	f007 ff50 	bl	800ccf8 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	695a      	ldr	r2, [r3, #20]
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8004e66:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	4618      	mov	r0, r3
 8004e6e:	f003 fef4 	bl	8008c5a <USB_ReadInterrupts>
 8004e72:	4603      	mov	r3, r0
 8004e74:	f003 0304 	and.w	r3, r3, #4
 8004e78:	2b04      	cmp	r3, #4
 8004e7a:	d115      	bne.n	8004ea8 <HAL_PCD_IRQHandler+0x75e>
    {
      temp = hpcd->Instance->GOTGINT;
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	685b      	ldr	r3, [r3, #4]
 8004e82:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8004e84:	69bb      	ldr	r3, [r7, #24]
 8004e86:	f003 0304 	and.w	r3, r3, #4
 8004e8a:	2b00      	cmp	r3, #0
 8004e8c:	d002      	beq.n	8004e94 <HAL_PCD_IRQHandler+0x74a>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8004e8e:	6878      	ldr	r0, [r7, #4]
 8004e90:	f007 ff40 	bl	800cd14 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	6859      	ldr	r1, [r3, #4]
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	69ba      	ldr	r2, [r7, #24]
 8004ea0:	430a      	orrs	r2, r1
 8004ea2:	605a      	str	r2, [r3, #4]
 8004ea4:	e000      	b.n	8004ea8 <HAL_PCD_IRQHandler+0x75e>
      return;
 8004ea6:	bf00      	nop
    }
  }
}
 8004ea8:	3734      	adds	r7, #52	; 0x34
 8004eaa:	46bd      	mov	sp, r7
 8004eac:	bd90      	pop	{r4, r7, pc}

08004eae <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8004eae:	b580      	push	{r7, lr}
 8004eb0:	b082      	sub	sp, #8
 8004eb2:	af00      	add	r7, sp, #0
 8004eb4:	6078      	str	r0, [r7, #4]
 8004eb6:	460b      	mov	r3, r1
 8004eb8:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8004ec0:	2b01      	cmp	r3, #1
 8004ec2:	d101      	bne.n	8004ec8 <HAL_PCD_SetAddress+0x1a>
 8004ec4:	2302      	movs	r3, #2
 8004ec6:	e013      	b.n	8004ef0 <HAL_PCD_SetAddress+0x42>
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	2201      	movs	r2, #1
 8004ecc:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	78fa      	ldrb	r2, [r7, #3]
 8004ed4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	78fa      	ldrb	r2, [r7, #3]
 8004ede:	4611      	mov	r1, r2
 8004ee0:	4618      	mov	r0, r3
 8004ee2:	f003 fe94 	bl	8008c0e <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	2200      	movs	r2, #0
 8004eea:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8004eee:	2300      	movs	r3, #0
}
 8004ef0:	4618      	mov	r0, r3
 8004ef2:	3708      	adds	r7, #8
 8004ef4:	46bd      	mov	sp, r7
 8004ef6:	bd80      	pop	{r7, pc}

08004ef8 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8004ef8:	b580      	push	{r7, lr}
 8004efa:	b084      	sub	sp, #16
 8004efc:	af00      	add	r7, sp, #0
 8004efe:	6078      	str	r0, [r7, #4]
 8004f00:	4608      	mov	r0, r1
 8004f02:	4611      	mov	r1, r2
 8004f04:	461a      	mov	r2, r3
 8004f06:	4603      	mov	r3, r0
 8004f08:	70fb      	strb	r3, [r7, #3]
 8004f0a:	460b      	mov	r3, r1
 8004f0c:	803b      	strh	r3, [r7, #0]
 8004f0e:	4613      	mov	r3, r2
 8004f10:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8004f12:	2300      	movs	r3, #0
 8004f14:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8004f16:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004f1a:	2b00      	cmp	r3, #0
 8004f1c:	da0f      	bge.n	8004f3e <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004f1e:	78fb      	ldrb	r3, [r7, #3]
 8004f20:	f003 020f 	and.w	r2, r3, #15
 8004f24:	4613      	mov	r3, r2
 8004f26:	00db      	lsls	r3, r3, #3
 8004f28:	1a9b      	subs	r3, r3, r2
 8004f2a:	009b      	lsls	r3, r3, #2
 8004f2c:	3338      	adds	r3, #56	; 0x38
 8004f2e:	687a      	ldr	r2, [r7, #4]
 8004f30:	4413      	add	r3, r2
 8004f32:	3304      	adds	r3, #4
 8004f34:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004f36:	68fb      	ldr	r3, [r7, #12]
 8004f38:	2201      	movs	r2, #1
 8004f3a:	705a      	strb	r2, [r3, #1]
 8004f3c:	e00f      	b.n	8004f5e <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004f3e:	78fb      	ldrb	r3, [r7, #3]
 8004f40:	f003 020f 	and.w	r2, r3, #15
 8004f44:	4613      	mov	r3, r2
 8004f46:	00db      	lsls	r3, r3, #3
 8004f48:	1a9b      	subs	r3, r3, r2
 8004f4a:	009b      	lsls	r3, r3, #2
 8004f4c:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8004f50:	687a      	ldr	r2, [r7, #4]
 8004f52:	4413      	add	r3, r2
 8004f54:	3304      	adds	r3, #4
 8004f56:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	2200      	movs	r2, #0
 8004f5c:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8004f5e:	78fb      	ldrb	r3, [r7, #3]
 8004f60:	f003 030f 	and.w	r3, r3, #15
 8004f64:	b2da      	uxtb	r2, r3
 8004f66:	68fb      	ldr	r3, [r7, #12]
 8004f68:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8004f6a:	883a      	ldrh	r2, [r7, #0]
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8004f70:	68fb      	ldr	r3, [r7, #12]
 8004f72:	78ba      	ldrb	r2, [r7, #2]
 8004f74:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8004f76:	68fb      	ldr	r3, [r7, #12]
 8004f78:	785b      	ldrb	r3, [r3, #1]
 8004f7a:	2b00      	cmp	r3, #0
 8004f7c:	d004      	beq.n	8004f88 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8004f7e:	68fb      	ldr	r3, [r7, #12]
 8004f80:	781b      	ldrb	r3, [r3, #0]
 8004f82:	b29a      	uxth	r2, r3
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8004f88:	78bb      	ldrb	r3, [r7, #2]
 8004f8a:	2b02      	cmp	r3, #2
 8004f8c:	d102      	bne.n	8004f94 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8004f8e:	68fb      	ldr	r3, [r7, #12]
 8004f90:	2200      	movs	r2, #0
 8004f92:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8004f9a:	2b01      	cmp	r3, #1
 8004f9c:	d101      	bne.n	8004fa2 <HAL_PCD_EP_Open+0xaa>
 8004f9e:	2302      	movs	r3, #2
 8004fa0:	e00e      	b.n	8004fc0 <HAL_PCD_EP_Open+0xc8>
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	2201      	movs	r2, #1
 8004fa6:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	68f9      	ldr	r1, [r7, #12]
 8004fb0:	4618      	mov	r0, r3
 8004fb2:	f003 f8a4 	bl	80080fe <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	2200      	movs	r2, #0
 8004fba:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 8004fbe:	7afb      	ldrb	r3, [r7, #11]
}
 8004fc0:	4618      	mov	r0, r3
 8004fc2:	3710      	adds	r7, #16
 8004fc4:	46bd      	mov	sp, r7
 8004fc6:	bd80      	pop	{r7, pc}

08004fc8 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8004fc8:	b580      	push	{r7, lr}
 8004fca:	b086      	sub	sp, #24
 8004fcc:	af00      	add	r7, sp, #0
 8004fce:	60f8      	str	r0, [r7, #12]
 8004fd0:	607a      	str	r2, [r7, #4]
 8004fd2:	603b      	str	r3, [r7, #0]
 8004fd4:	460b      	mov	r3, r1
 8004fd6:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004fd8:	7afb      	ldrb	r3, [r7, #11]
 8004fda:	f003 020f 	and.w	r2, r3, #15
 8004fde:	4613      	mov	r3, r2
 8004fe0:	00db      	lsls	r3, r3, #3
 8004fe2:	1a9b      	subs	r3, r3, r2
 8004fe4:	009b      	lsls	r3, r3, #2
 8004fe6:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8004fea:	68fa      	ldr	r2, [r7, #12]
 8004fec:	4413      	add	r3, r2
 8004fee:	3304      	adds	r3, #4
 8004ff0:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8004ff2:	697b      	ldr	r3, [r7, #20]
 8004ff4:	687a      	ldr	r2, [r7, #4]
 8004ff6:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8004ff8:	697b      	ldr	r3, [r7, #20]
 8004ffa:	683a      	ldr	r2, [r7, #0]
 8004ffc:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8004ffe:	697b      	ldr	r3, [r7, #20]
 8005000:	2200      	movs	r2, #0
 8005002:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 8005004:	697b      	ldr	r3, [r7, #20]
 8005006:	2200      	movs	r2, #0
 8005008:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800500a:	7afb      	ldrb	r3, [r7, #11]
 800500c:	f003 030f 	and.w	r3, r3, #15
 8005010:	b2da      	uxtb	r2, r3
 8005012:	697b      	ldr	r3, [r7, #20]
 8005014:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8005016:	68fb      	ldr	r3, [r7, #12]
 8005018:	691b      	ldr	r3, [r3, #16]
 800501a:	2b01      	cmp	r3, #1
 800501c:	d102      	bne.n	8005024 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800501e:	687a      	ldr	r2, [r7, #4]
 8005020:	697b      	ldr	r3, [r7, #20]
 8005022:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8005024:	7afb      	ldrb	r3, [r7, #11]
 8005026:	f003 030f 	and.w	r3, r3, #15
 800502a:	2b00      	cmp	r3, #0
 800502c:	d109      	bne.n	8005042 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800502e:	68fb      	ldr	r3, [r7, #12]
 8005030:	6818      	ldr	r0, [r3, #0]
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	691b      	ldr	r3, [r3, #16]
 8005036:	b2db      	uxtb	r3, r3
 8005038:	461a      	mov	r2, r3
 800503a:	6979      	ldr	r1, [r7, #20]
 800503c:	f003 fb2a 	bl	8008694 <USB_EP0StartXfer>
 8005040:	e008      	b.n	8005054 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8005042:	68fb      	ldr	r3, [r7, #12]
 8005044:	6818      	ldr	r0, [r3, #0]
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	691b      	ldr	r3, [r3, #16]
 800504a:	b2db      	uxtb	r3, r3
 800504c:	461a      	mov	r2, r3
 800504e:	6979      	ldr	r1, [r7, #20]
 8005050:	f003 f8dc 	bl	800820c <USB_EPStartXfer>
  }

  return HAL_OK;
 8005054:	2300      	movs	r3, #0
}
 8005056:	4618      	mov	r0, r3
 8005058:	3718      	adds	r7, #24
 800505a:	46bd      	mov	sp, r7
 800505c:	bd80      	pop	{r7, pc}

0800505e <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800505e:	b580      	push	{r7, lr}
 8005060:	b086      	sub	sp, #24
 8005062:	af00      	add	r7, sp, #0
 8005064:	60f8      	str	r0, [r7, #12]
 8005066:	607a      	str	r2, [r7, #4]
 8005068:	603b      	str	r3, [r7, #0]
 800506a:	460b      	mov	r3, r1
 800506c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800506e:	7afb      	ldrb	r3, [r7, #11]
 8005070:	f003 020f 	and.w	r2, r3, #15
 8005074:	4613      	mov	r3, r2
 8005076:	00db      	lsls	r3, r3, #3
 8005078:	1a9b      	subs	r3, r3, r2
 800507a:	009b      	lsls	r3, r3, #2
 800507c:	3338      	adds	r3, #56	; 0x38
 800507e:	68fa      	ldr	r2, [r7, #12]
 8005080:	4413      	add	r3, r2
 8005082:	3304      	adds	r3, #4
 8005084:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8005086:	697b      	ldr	r3, [r7, #20]
 8005088:	687a      	ldr	r2, [r7, #4]
 800508a:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800508c:	697b      	ldr	r3, [r7, #20]
 800508e:	683a      	ldr	r2, [r7, #0]
 8005090:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8005092:	697b      	ldr	r3, [r7, #20]
 8005094:	2200      	movs	r2, #0
 8005096:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 8005098:	697b      	ldr	r3, [r7, #20]
 800509a:	2201      	movs	r2, #1
 800509c:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800509e:	7afb      	ldrb	r3, [r7, #11]
 80050a0:	f003 030f 	and.w	r3, r3, #15
 80050a4:	b2da      	uxtb	r2, r3
 80050a6:	697b      	ldr	r3, [r7, #20]
 80050a8:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80050aa:	68fb      	ldr	r3, [r7, #12]
 80050ac:	691b      	ldr	r3, [r3, #16]
 80050ae:	2b01      	cmp	r3, #1
 80050b0:	d102      	bne.n	80050b8 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80050b2:	687a      	ldr	r2, [r7, #4]
 80050b4:	697b      	ldr	r3, [r7, #20]
 80050b6:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80050b8:	7afb      	ldrb	r3, [r7, #11]
 80050ba:	f003 030f 	and.w	r3, r3, #15
 80050be:	2b00      	cmp	r3, #0
 80050c0:	d109      	bne.n	80050d6 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80050c2:	68fb      	ldr	r3, [r7, #12]
 80050c4:	6818      	ldr	r0, [r3, #0]
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	691b      	ldr	r3, [r3, #16]
 80050ca:	b2db      	uxtb	r3, r3
 80050cc:	461a      	mov	r2, r3
 80050ce:	6979      	ldr	r1, [r7, #20]
 80050d0:	f003 fae0 	bl	8008694 <USB_EP0StartXfer>
 80050d4:	e008      	b.n	80050e8 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80050d6:	68fb      	ldr	r3, [r7, #12]
 80050d8:	6818      	ldr	r0, [r3, #0]
 80050da:	68fb      	ldr	r3, [r7, #12]
 80050dc:	691b      	ldr	r3, [r3, #16]
 80050de:	b2db      	uxtb	r3, r3
 80050e0:	461a      	mov	r2, r3
 80050e2:	6979      	ldr	r1, [r7, #20]
 80050e4:	f003 f892 	bl	800820c <USB_EPStartXfer>
  }

  return HAL_OK;
 80050e8:	2300      	movs	r3, #0
}
 80050ea:	4618      	mov	r0, r3
 80050ec:	3718      	adds	r7, #24
 80050ee:	46bd      	mov	sp, r7
 80050f0:	bd80      	pop	{r7, pc}

080050f2 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80050f2:	b580      	push	{r7, lr}
 80050f4:	b084      	sub	sp, #16
 80050f6:	af00      	add	r7, sp, #0
 80050f8:	6078      	str	r0, [r7, #4]
 80050fa:	460b      	mov	r3, r1
 80050fc:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80050fe:	78fb      	ldrb	r3, [r7, #3]
 8005100:	f003 020f 	and.w	r2, r3, #15
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	685b      	ldr	r3, [r3, #4]
 8005108:	429a      	cmp	r2, r3
 800510a:	d901      	bls.n	8005110 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800510c:	2301      	movs	r3, #1
 800510e:	e050      	b.n	80051b2 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8005110:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005114:	2b00      	cmp	r3, #0
 8005116:	da0f      	bge.n	8005138 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005118:	78fb      	ldrb	r3, [r7, #3]
 800511a:	f003 020f 	and.w	r2, r3, #15
 800511e:	4613      	mov	r3, r2
 8005120:	00db      	lsls	r3, r3, #3
 8005122:	1a9b      	subs	r3, r3, r2
 8005124:	009b      	lsls	r3, r3, #2
 8005126:	3338      	adds	r3, #56	; 0x38
 8005128:	687a      	ldr	r2, [r7, #4]
 800512a:	4413      	add	r3, r2
 800512c:	3304      	adds	r3, #4
 800512e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005130:	68fb      	ldr	r3, [r7, #12]
 8005132:	2201      	movs	r2, #1
 8005134:	705a      	strb	r2, [r3, #1]
 8005136:	e00d      	b.n	8005154 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8005138:	78fa      	ldrb	r2, [r7, #3]
 800513a:	4613      	mov	r3, r2
 800513c:	00db      	lsls	r3, r3, #3
 800513e:	1a9b      	subs	r3, r3, r2
 8005140:	009b      	lsls	r3, r3, #2
 8005142:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8005146:	687a      	ldr	r2, [r7, #4]
 8005148:	4413      	add	r3, r2
 800514a:	3304      	adds	r3, #4
 800514c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800514e:	68fb      	ldr	r3, [r7, #12]
 8005150:	2200      	movs	r2, #0
 8005152:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8005154:	68fb      	ldr	r3, [r7, #12]
 8005156:	2201      	movs	r2, #1
 8005158:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800515a:	78fb      	ldrb	r3, [r7, #3]
 800515c:	f003 030f 	and.w	r3, r3, #15
 8005160:	b2da      	uxtb	r2, r3
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800516c:	2b01      	cmp	r3, #1
 800516e:	d101      	bne.n	8005174 <HAL_PCD_EP_SetStall+0x82>
 8005170:	2302      	movs	r3, #2
 8005172:	e01e      	b.n	80051b2 <HAL_PCD_EP_SetStall+0xc0>
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	2201      	movs	r2, #1
 8005178:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	68f9      	ldr	r1, [r7, #12]
 8005182:	4618      	mov	r0, r3
 8005184:	f003 fc6f 	bl	8008a66 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8005188:	78fb      	ldrb	r3, [r7, #3]
 800518a:	f003 030f 	and.w	r3, r3, #15
 800518e:	2b00      	cmp	r3, #0
 8005190:	d10a      	bne.n	80051a8 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	6818      	ldr	r0, [r3, #0]
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	691b      	ldr	r3, [r3, #16]
 800519a:	b2d9      	uxtb	r1, r3
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80051a2:	461a      	mov	r2, r3
 80051a4:	f003 fe1e 	bl	8008de4 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	2200      	movs	r2, #0
 80051ac:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 80051b0:	2300      	movs	r3, #0
}
 80051b2:	4618      	mov	r0, r3
 80051b4:	3710      	adds	r7, #16
 80051b6:	46bd      	mov	sp, r7
 80051b8:	bd80      	pop	{r7, pc}

080051ba <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80051ba:	b580      	push	{r7, lr}
 80051bc:	b084      	sub	sp, #16
 80051be:	af00      	add	r7, sp, #0
 80051c0:	6078      	str	r0, [r7, #4]
 80051c2:	460b      	mov	r3, r1
 80051c4:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80051c6:	78fb      	ldrb	r3, [r7, #3]
 80051c8:	f003 020f 	and.w	r2, r3, #15
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	685b      	ldr	r3, [r3, #4]
 80051d0:	429a      	cmp	r2, r3
 80051d2:	d901      	bls.n	80051d8 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80051d4:	2301      	movs	r3, #1
 80051d6:	e042      	b.n	800525e <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80051d8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80051dc:	2b00      	cmp	r3, #0
 80051de:	da0f      	bge.n	8005200 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80051e0:	78fb      	ldrb	r3, [r7, #3]
 80051e2:	f003 020f 	and.w	r2, r3, #15
 80051e6:	4613      	mov	r3, r2
 80051e8:	00db      	lsls	r3, r3, #3
 80051ea:	1a9b      	subs	r3, r3, r2
 80051ec:	009b      	lsls	r3, r3, #2
 80051ee:	3338      	adds	r3, #56	; 0x38
 80051f0:	687a      	ldr	r2, [r7, #4]
 80051f2:	4413      	add	r3, r2
 80051f4:	3304      	adds	r3, #4
 80051f6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	2201      	movs	r2, #1
 80051fc:	705a      	strb	r2, [r3, #1]
 80051fe:	e00f      	b.n	8005220 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005200:	78fb      	ldrb	r3, [r7, #3]
 8005202:	f003 020f 	and.w	r2, r3, #15
 8005206:	4613      	mov	r3, r2
 8005208:	00db      	lsls	r3, r3, #3
 800520a:	1a9b      	subs	r3, r3, r2
 800520c:	009b      	lsls	r3, r3, #2
 800520e:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8005212:	687a      	ldr	r2, [r7, #4]
 8005214:	4413      	add	r3, r2
 8005216:	3304      	adds	r3, #4
 8005218:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800521a:	68fb      	ldr	r3, [r7, #12]
 800521c:	2200      	movs	r2, #0
 800521e:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8005220:	68fb      	ldr	r3, [r7, #12]
 8005222:	2200      	movs	r2, #0
 8005224:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005226:	78fb      	ldrb	r3, [r7, #3]
 8005228:	f003 030f 	and.w	r3, r3, #15
 800522c:	b2da      	uxtb	r2, r3
 800522e:	68fb      	ldr	r3, [r7, #12]
 8005230:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8005238:	2b01      	cmp	r3, #1
 800523a:	d101      	bne.n	8005240 <HAL_PCD_EP_ClrStall+0x86>
 800523c:	2302      	movs	r3, #2
 800523e:	e00e      	b.n	800525e <HAL_PCD_EP_ClrStall+0xa4>
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	2201      	movs	r2, #1
 8005244:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	68f9      	ldr	r1, [r7, #12]
 800524e:	4618      	mov	r0, r3
 8005250:	f003 fc77 	bl	8008b42 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	2200      	movs	r2, #0
 8005258:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 800525c:	2300      	movs	r3, #0
}
 800525e:	4618      	mov	r0, r3
 8005260:	3710      	adds	r7, #16
 8005262:	46bd      	mov	sp, r7
 8005264:	bd80      	pop	{r7, pc}

08005266 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8005266:	b580      	push	{r7, lr}
 8005268:	b08a      	sub	sp, #40	; 0x28
 800526a:	af02      	add	r7, sp, #8
 800526c:	6078      	str	r0, [r7, #4]
 800526e:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005276:	697b      	ldr	r3, [r7, #20]
 8005278:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 800527a:	683a      	ldr	r2, [r7, #0]
 800527c:	4613      	mov	r3, r2
 800527e:	00db      	lsls	r3, r3, #3
 8005280:	1a9b      	subs	r3, r3, r2
 8005282:	009b      	lsls	r3, r3, #2
 8005284:	3338      	adds	r3, #56	; 0x38
 8005286:	687a      	ldr	r2, [r7, #4]
 8005288:	4413      	add	r3, r2
 800528a:	3304      	adds	r3, #4
 800528c:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 800528e:	68fb      	ldr	r3, [r7, #12]
 8005290:	699a      	ldr	r2, [r3, #24]
 8005292:	68fb      	ldr	r3, [r7, #12]
 8005294:	695b      	ldr	r3, [r3, #20]
 8005296:	429a      	cmp	r2, r3
 8005298:	d901      	bls.n	800529e <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 800529a:	2301      	movs	r3, #1
 800529c:	e06c      	b.n	8005378 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 800529e:	68fb      	ldr	r3, [r7, #12]
 80052a0:	695a      	ldr	r2, [r3, #20]
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	699b      	ldr	r3, [r3, #24]
 80052a6:	1ad3      	subs	r3, r2, r3
 80052a8:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 80052aa:	68fb      	ldr	r3, [r7, #12]
 80052ac:	689b      	ldr	r3, [r3, #8]
 80052ae:	69fa      	ldr	r2, [r7, #28]
 80052b0:	429a      	cmp	r2, r3
 80052b2:	d902      	bls.n	80052ba <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 80052b4:	68fb      	ldr	r3, [r7, #12]
 80052b6:	689b      	ldr	r3, [r3, #8]
 80052b8:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 80052ba:	69fb      	ldr	r3, [r7, #28]
 80052bc:	3303      	adds	r3, #3
 80052be:	089b      	lsrs	r3, r3, #2
 80052c0:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80052c2:	e02b      	b.n	800531c <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 80052c4:	68fb      	ldr	r3, [r7, #12]
 80052c6:	695a      	ldr	r2, [r3, #20]
 80052c8:	68fb      	ldr	r3, [r7, #12]
 80052ca:	699b      	ldr	r3, [r3, #24]
 80052cc:	1ad3      	subs	r3, r2, r3
 80052ce:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	689b      	ldr	r3, [r3, #8]
 80052d4:	69fa      	ldr	r2, [r7, #28]
 80052d6:	429a      	cmp	r2, r3
 80052d8:	d902      	bls.n	80052e0 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 80052da:	68fb      	ldr	r3, [r7, #12]
 80052dc:	689b      	ldr	r3, [r3, #8]
 80052de:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 80052e0:	69fb      	ldr	r3, [r7, #28]
 80052e2:	3303      	adds	r3, #3
 80052e4:	089b      	lsrs	r3, r3, #2
 80052e6:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	68d9      	ldr	r1, [r3, #12]
 80052ec:	683b      	ldr	r3, [r7, #0]
 80052ee:	b2da      	uxtb	r2, r3
 80052f0:	69fb      	ldr	r3, [r7, #28]
 80052f2:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80052f8:	b2db      	uxtb	r3, r3
 80052fa:	9300      	str	r3, [sp, #0]
 80052fc:	4603      	mov	r3, r0
 80052fe:	6978      	ldr	r0, [r7, #20]
 8005300:	f003 fb1b 	bl	800893a <USB_WritePacket>

    ep->xfer_buff  += len;
 8005304:	68fb      	ldr	r3, [r7, #12]
 8005306:	68da      	ldr	r2, [r3, #12]
 8005308:	69fb      	ldr	r3, [r7, #28]
 800530a:	441a      	add	r2, r3
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8005310:	68fb      	ldr	r3, [r7, #12]
 8005312:	699a      	ldr	r2, [r3, #24]
 8005314:	69fb      	ldr	r3, [r7, #28]
 8005316:	441a      	add	r2, r3
 8005318:	68fb      	ldr	r3, [r7, #12]
 800531a:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800531c:	683b      	ldr	r3, [r7, #0]
 800531e:	015a      	lsls	r2, r3, #5
 8005320:	693b      	ldr	r3, [r7, #16]
 8005322:	4413      	add	r3, r2
 8005324:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005328:	699b      	ldr	r3, [r3, #24]
 800532a:	b29b      	uxth	r3, r3
 800532c:	69ba      	ldr	r2, [r7, #24]
 800532e:	429a      	cmp	r2, r3
 8005330:	d809      	bhi.n	8005346 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8005332:	68fb      	ldr	r3, [r7, #12]
 8005334:	699a      	ldr	r2, [r3, #24]
 8005336:	68fb      	ldr	r3, [r7, #12]
 8005338:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800533a:	429a      	cmp	r2, r3
 800533c:	d203      	bcs.n	8005346 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800533e:	68fb      	ldr	r3, [r7, #12]
 8005340:	695b      	ldr	r3, [r3, #20]
 8005342:	2b00      	cmp	r3, #0
 8005344:	d1be      	bne.n	80052c4 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8005346:	68fb      	ldr	r3, [r7, #12]
 8005348:	695a      	ldr	r2, [r3, #20]
 800534a:	68fb      	ldr	r3, [r7, #12]
 800534c:	699b      	ldr	r3, [r3, #24]
 800534e:	429a      	cmp	r2, r3
 8005350:	d811      	bhi.n	8005376 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8005352:	683b      	ldr	r3, [r7, #0]
 8005354:	f003 030f 	and.w	r3, r3, #15
 8005358:	2201      	movs	r2, #1
 800535a:	fa02 f303 	lsl.w	r3, r2, r3
 800535e:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8005360:	693b      	ldr	r3, [r7, #16]
 8005362:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005366:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005368:	68bb      	ldr	r3, [r7, #8]
 800536a:	43db      	mvns	r3, r3
 800536c:	6939      	ldr	r1, [r7, #16]
 800536e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005372:	4013      	ands	r3, r2
 8005374:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8005376:	2300      	movs	r3, #0
}
 8005378:	4618      	mov	r0, r3
 800537a:	3720      	adds	r7, #32
 800537c:	46bd      	mov	sp, r7
 800537e:	bd80      	pop	{r7, pc}

08005380 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8005380:	b580      	push	{r7, lr}
 8005382:	b086      	sub	sp, #24
 8005384:	af00      	add	r7, sp, #0
 8005386:	6078      	str	r0, [r7, #4]
 8005388:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005390:	697b      	ldr	r3, [r7, #20]
 8005392:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8005394:	697b      	ldr	r3, [r7, #20]
 8005396:	333c      	adds	r3, #60	; 0x3c
 8005398:	3304      	adds	r3, #4
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800539e:	683b      	ldr	r3, [r7, #0]
 80053a0:	015a      	lsls	r2, r3, #5
 80053a2:	693b      	ldr	r3, [r7, #16]
 80053a4:	4413      	add	r3, r2
 80053a6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80053aa:	689b      	ldr	r3, [r3, #8]
 80053ac:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	691b      	ldr	r3, [r3, #16]
 80053b2:	2b01      	cmp	r3, #1
 80053b4:	f040 80a0 	bne.w	80054f8 <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 80053b8:	68bb      	ldr	r3, [r7, #8]
 80053ba:	f003 0308 	and.w	r3, r3, #8
 80053be:	2b00      	cmp	r3, #0
 80053c0:	d015      	beq.n	80053ee <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80053c2:	68fb      	ldr	r3, [r7, #12]
 80053c4:	4a72      	ldr	r2, [pc, #456]	; (8005590 <PCD_EP_OutXfrComplete_int+0x210>)
 80053c6:	4293      	cmp	r3, r2
 80053c8:	f240 80dd 	bls.w	8005586 <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80053cc:	68bb      	ldr	r3, [r7, #8]
 80053ce:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80053d2:	2b00      	cmp	r3, #0
 80053d4:	f000 80d7 	beq.w	8005586 <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80053d8:	683b      	ldr	r3, [r7, #0]
 80053da:	015a      	lsls	r2, r3, #5
 80053dc:	693b      	ldr	r3, [r7, #16]
 80053de:	4413      	add	r3, r2
 80053e0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80053e4:	461a      	mov	r2, r3
 80053e6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80053ea:	6093      	str	r3, [r2, #8]
 80053ec:	e0cb      	b.n	8005586 <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 80053ee:	68bb      	ldr	r3, [r7, #8]
 80053f0:	f003 0320 	and.w	r3, r3, #32
 80053f4:	2b00      	cmp	r3, #0
 80053f6:	d009      	beq.n	800540c <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80053f8:	683b      	ldr	r3, [r7, #0]
 80053fa:	015a      	lsls	r2, r3, #5
 80053fc:	693b      	ldr	r3, [r7, #16]
 80053fe:	4413      	add	r3, r2
 8005400:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005404:	461a      	mov	r2, r3
 8005406:	2320      	movs	r3, #32
 8005408:	6093      	str	r3, [r2, #8]
 800540a:	e0bc      	b.n	8005586 <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 800540c:	68bb      	ldr	r3, [r7, #8]
 800540e:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8005412:	2b00      	cmp	r3, #0
 8005414:	f040 80b7 	bne.w	8005586 <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005418:	68fb      	ldr	r3, [r7, #12]
 800541a:	4a5d      	ldr	r2, [pc, #372]	; (8005590 <PCD_EP_OutXfrComplete_int+0x210>)
 800541c:	4293      	cmp	r3, r2
 800541e:	d90f      	bls.n	8005440 <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8005420:	68bb      	ldr	r3, [r7, #8]
 8005422:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005426:	2b00      	cmp	r3, #0
 8005428:	d00a      	beq.n	8005440 <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800542a:	683b      	ldr	r3, [r7, #0]
 800542c:	015a      	lsls	r2, r3, #5
 800542e:	693b      	ldr	r3, [r7, #16]
 8005430:	4413      	add	r3, r2
 8005432:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005436:	461a      	mov	r2, r3
 8005438:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800543c:	6093      	str	r3, [r2, #8]
 800543e:	e0a2      	b.n	8005586 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 8005440:	6879      	ldr	r1, [r7, #4]
 8005442:	683a      	ldr	r2, [r7, #0]
 8005444:	4613      	mov	r3, r2
 8005446:	00db      	lsls	r3, r3, #3
 8005448:	1a9b      	subs	r3, r3, r2
 800544a:	009b      	lsls	r3, r3, #2
 800544c:	440b      	add	r3, r1
 800544e:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8005452:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8005454:	683b      	ldr	r3, [r7, #0]
 8005456:	0159      	lsls	r1, r3, #5
 8005458:	693b      	ldr	r3, [r7, #16]
 800545a:	440b      	add	r3, r1
 800545c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005460:	691b      	ldr	r3, [r3, #16]
 8005462:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 8005466:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 8005468:	6878      	ldr	r0, [r7, #4]
 800546a:	683a      	ldr	r2, [r7, #0]
 800546c:	4613      	mov	r3, r2
 800546e:	00db      	lsls	r3, r3, #3
 8005470:	1a9b      	subs	r3, r3, r2
 8005472:	009b      	lsls	r3, r3, #2
 8005474:	4403      	add	r3, r0
 8005476:	f503 7305 	add.w	r3, r3, #532	; 0x214
 800547a:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 800547c:	6879      	ldr	r1, [r7, #4]
 800547e:	683a      	ldr	r2, [r7, #0]
 8005480:	4613      	mov	r3, r2
 8005482:	00db      	lsls	r3, r3, #3
 8005484:	1a9b      	subs	r3, r3, r2
 8005486:	009b      	lsls	r3, r3, #2
 8005488:	440b      	add	r3, r1
 800548a:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800548e:	6819      	ldr	r1, [r3, #0]
 8005490:	6878      	ldr	r0, [r7, #4]
 8005492:	683a      	ldr	r2, [r7, #0]
 8005494:	4613      	mov	r3, r2
 8005496:	00db      	lsls	r3, r3, #3
 8005498:	1a9b      	subs	r3, r3, r2
 800549a:	009b      	lsls	r3, r3, #2
 800549c:	4403      	add	r3, r0
 800549e:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	4419      	add	r1, r3
 80054a6:	6878      	ldr	r0, [r7, #4]
 80054a8:	683a      	ldr	r2, [r7, #0]
 80054aa:	4613      	mov	r3, r2
 80054ac:	00db      	lsls	r3, r3, #3
 80054ae:	1a9b      	subs	r3, r3, r2
 80054b0:	009b      	lsls	r3, r3, #2
 80054b2:	4403      	add	r3, r0
 80054b4:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80054b8:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80054ba:	683b      	ldr	r3, [r7, #0]
 80054bc:	2b00      	cmp	r3, #0
 80054be:	d114      	bne.n	80054ea <PCD_EP_OutXfrComplete_int+0x16a>
 80054c0:	6879      	ldr	r1, [r7, #4]
 80054c2:	683a      	ldr	r2, [r7, #0]
 80054c4:	4613      	mov	r3, r2
 80054c6:	00db      	lsls	r3, r3, #3
 80054c8:	1a9b      	subs	r3, r3, r2
 80054ca:	009b      	lsls	r3, r3, #2
 80054cc:	440b      	add	r3, r1
 80054ce:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	2b00      	cmp	r3, #0
 80054d6:	d108      	bne.n	80054ea <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	6818      	ldr	r0, [r3, #0]
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80054e2:	461a      	mov	r2, r3
 80054e4:	2101      	movs	r1, #1
 80054e6:	f003 fc7d 	bl	8008de4 <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80054ea:	683b      	ldr	r3, [r7, #0]
 80054ec:	b2db      	uxtb	r3, r3
 80054ee:	4619      	mov	r1, r3
 80054f0:	6878      	ldr	r0, [r7, #4]
 80054f2:	f007 fb3d 	bl	800cb70 <HAL_PCD_DataOutStageCallback>
 80054f6:	e046      	b.n	8005586 <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 80054f8:	68fb      	ldr	r3, [r7, #12]
 80054fa:	4a26      	ldr	r2, [pc, #152]	; (8005594 <PCD_EP_OutXfrComplete_int+0x214>)
 80054fc:	4293      	cmp	r3, r2
 80054fe:	d124      	bne.n	800554a <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8005500:	68bb      	ldr	r3, [r7, #8]
 8005502:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005506:	2b00      	cmp	r3, #0
 8005508:	d00a      	beq.n	8005520 <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800550a:	683b      	ldr	r3, [r7, #0]
 800550c:	015a      	lsls	r2, r3, #5
 800550e:	693b      	ldr	r3, [r7, #16]
 8005510:	4413      	add	r3, r2
 8005512:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005516:	461a      	mov	r2, r3
 8005518:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800551c:	6093      	str	r3, [r2, #8]
 800551e:	e032      	b.n	8005586 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8005520:	68bb      	ldr	r3, [r7, #8]
 8005522:	f003 0320 	and.w	r3, r3, #32
 8005526:	2b00      	cmp	r3, #0
 8005528:	d008      	beq.n	800553c <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800552a:	683b      	ldr	r3, [r7, #0]
 800552c:	015a      	lsls	r2, r3, #5
 800552e:	693b      	ldr	r3, [r7, #16]
 8005530:	4413      	add	r3, r2
 8005532:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005536:	461a      	mov	r2, r3
 8005538:	2320      	movs	r3, #32
 800553a:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800553c:	683b      	ldr	r3, [r7, #0]
 800553e:	b2db      	uxtb	r3, r3
 8005540:	4619      	mov	r1, r3
 8005542:	6878      	ldr	r0, [r7, #4]
 8005544:	f007 fb14 	bl	800cb70 <HAL_PCD_DataOutStageCallback>
 8005548:	e01d      	b.n	8005586 <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 800554a:	683b      	ldr	r3, [r7, #0]
 800554c:	2b00      	cmp	r3, #0
 800554e:	d114      	bne.n	800557a <PCD_EP_OutXfrComplete_int+0x1fa>
 8005550:	6879      	ldr	r1, [r7, #4]
 8005552:	683a      	ldr	r2, [r7, #0]
 8005554:	4613      	mov	r3, r2
 8005556:	00db      	lsls	r3, r3, #3
 8005558:	1a9b      	subs	r3, r3, r2
 800555a:	009b      	lsls	r3, r3, #2
 800555c:	440b      	add	r3, r1
 800555e:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	2b00      	cmp	r3, #0
 8005566:	d108      	bne.n	800557a <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	6818      	ldr	r0, [r3, #0]
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8005572:	461a      	mov	r2, r3
 8005574:	2100      	movs	r1, #0
 8005576:	f003 fc35 	bl	8008de4 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800557a:	683b      	ldr	r3, [r7, #0]
 800557c:	b2db      	uxtb	r3, r3
 800557e:	4619      	mov	r1, r3
 8005580:	6878      	ldr	r0, [r7, #4]
 8005582:	f007 faf5 	bl	800cb70 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8005586:	2300      	movs	r3, #0
}
 8005588:	4618      	mov	r0, r3
 800558a:	3718      	adds	r7, #24
 800558c:	46bd      	mov	sp, r7
 800558e:	bd80      	pop	{r7, pc}
 8005590:	4f54300a 	.word	0x4f54300a
 8005594:	4f54310a 	.word	0x4f54310a

08005598 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8005598:	b580      	push	{r7, lr}
 800559a:	b086      	sub	sp, #24
 800559c:	af00      	add	r7, sp, #0
 800559e:	6078      	str	r0, [r7, #4]
 80055a0:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80055a8:	697b      	ldr	r3, [r7, #20]
 80055aa:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80055ac:	697b      	ldr	r3, [r7, #20]
 80055ae:	333c      	adds	r3, #60	; 0x3c
 80055b0:	3304      	adds	r3, #4
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80055b6:	683b      	ldr	r3, [r7, #0]
 80055b8:	015a      	lsls	r2, r3, #5
 80055ba:	693b      	ldr	r3, [r7, #16]
 80055bc:	4413      	add	r3, r2
 80055be:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80055c2:	689b      	ldr	r3, [r3, #8]
 80055c4:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80055c6:	68fb      	ldr	r3, [r7, #12]
 80055c8:	4a15      	ldr	r2, [pc, #84]	; (8005620 <PCD_EP_OutSetupPacket_int+0x88>)
 80055ca:	4293      	cmp	r3, r2
 80055cc:	d90e      	bls.n	80055ec <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80055ce:	68bb      	ldr	r3, [r7, #8]
 80055d0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80055d4:	2b00      	cmp	r3, #0
 80055d6:	d009      	beq.n	80055ec <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80055d8:	683b      	ldr	r3, [r7, #0]
 80055da:	015a      	lsls	r2, r3, #5
 80055dc:	693b      	ldr	r3, [r7, #16]
 80055de:	4413      	add	r3, r2
 80055e0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80055e4:	461a      	mov	r2, r3
 80055e6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80055ea:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 80055ec:	6878      	ldr	r0, [r7, #4]
 80055ee:	f007 faad 	bl	800cb4c <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 80055f2:	68fb      	ldr	r3, [r7, #12]
 80055f4:	4a0a      	ldr	r2, [pc, #40]	; (8005620 <PCD_EP_OutSetupPacket_int+0x88>)
 80055f6:	4293      	cmp	r3, r2
 80055f8:	d90c      	bls.n	8005614 <PCD_EP_OutSetupPacket_int+0x7c>
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	691b      	ldr	r3, [r3, #16]
 80055fe:	2b01      	cmp	r3, #1
 8005600:	d108      	bne.n	8005614 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	6818      	ldr	r0, [r3, #0]
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800560c:	461a      	mov	r2, r3
 800560e:	2101      	movs	r1, #1
 8005610:	f003 fbe8 	bl	8008de4 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8005614:	2300      	movs	r3, #0
}
 8005616:	4618      	mov	r0, r3
 8005618:	3718      	adds	r7, #24
 800561a:	46bd      	mov	sp, r7
 800561c:	bd80      	pop	{r7, pc}
 800561e:	bf00      	nop
 8005620:	4f54300a 	.word	0x4f54300a

08005624 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8005624:	b480      	push	{r7}
 8005626:	b083      	sub	sp, #12
 8005628:	af00      	add	r7, sp, #0
 800562a:	6078      	str	r0, [r7, #4]
 800562c:	460b      	mov	r3, r1
 800562e:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8005630:	bf00      	nop
 8005632:	370c      	adds	r7, #12
 8005634:	46bd      	mov	sp, r7
 8005636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800563a:	4770      	bx	lr

0800563c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800563c:	b580      	push	{r7, lr}
 800563e:	b086      	sub	sp, #24
 8005640:	af00      	add	r7, sp, #0
 8005642:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	2b00      	cmp	r3, #0
 8005648:	d101      	bne.n	800564e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800564a:	2301      	movs	r3, #1
 800564c:	e264      	b.n	8005b18 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	f003 0301 	and.w	r3, r3, #1
 8005656:	2b00      	cmp	r3, #0
 8005658:	d075      	beq.n	8005746 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800565a:	4ba3      	ldr	r3, [pc, #652]	; (80058e8 <HAL_RCC_OscConfig+0x2ac>)
 800565c:	689b      	ldr	r3, [r3, #8]
 800565e:	f003 030c 	and.w	r3, r3, #12
 8005662:	2b04      	cmp	r3, #4
 8005664:	d00c      	beq.n	8005680 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005666:	4ba0      	ldr	r3, [pc, #640]	; (80058e8 <HAL_RCC_OscConfig+0x2ac>)
 8005668:	689b      	ldr	r3, [r3, #8]
 800566a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800566e:	2b08      	cmp	r3, #8
 8005670:	d112      	bne.n	8005698 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005672:	4b9d      	ldr	r3, [pc, #628]	; (80058e8 <HAL_RCC_OscConfig+0x2ac>)
 8005674:	685b      	ldr	r3, [r3, #4]
 8005676:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800567a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800567e:	d10b      	bne.n	8005698 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005680:	4b99      	ldr	r3, [pc, #612]	; (80058e8 <HAL_RCC_OscConfig+0x2ac>)
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005688:	2b00      	cmp	r3, #0
 800568a:	d05b      	beq.n	8005744 <HAL_RCC_OscConfig+0x108>
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	685b      	ldr	r3, [r3, #4]
 8005690:	2b00      	cmp	r3, #0
 8005692:	d157      	bne.n	8005744 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005694:	2301      	movs	r3, #1
 8005696:	e23f      	b.n	8005b18 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	685b      	ldr	r3, [r3, #4]
 800569c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80056a0:	d106      	bne.n	80056b0 <HAL_RCC_OscConfig+0x74>
 80056a2:	4b91      	ldr	r3, [pc, #580]	; (80058e8 <HAL_RCC_OscConfig+0x2ac>)
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	4a90      	ldr	r2, [pc, #576]	; (80058e8 <HAL_RCC_OscConfig+0x2ac>)
 80056a8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80056ac:	6013      	str	r3, [r2, #0]
 80056ae:	e01d      	b.n	80056ec <HAL_RCC_OscConfig+0xb0>
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	685b      	ldr	r3, [r3, #4]
 80056b4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80056b8:	d10c      	bne.n	80056d4 <HAL_RCC_OscConfig+0x98>
 80056ba:	4b8b      	ldr	r3, [pc, #556]	; (80058e8 <HAL_RCC_OscConfig+0x2ac>)
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	4a8a      	ldr	r2, [pc, #552]	; (80058e8 <HAL_RCC_OscConfig+0x2ac>)
 80056c0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80056c4:	6013      	str	r3, [r2, #0]
 80056c6:	4b88      	ldr	r3, [pc, #544]	; (80058e8 <HAL_RCC_OscConfig+0x2ac>)
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	4a87      	ldr	r2, [pc, #540]	; (80058e8 <HAL_RCC_OscConfig+0x2ac>)
 80056cc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80056d0:	6013      	str	r3, [r2, #0]
 80056d2:	e00b      	b.n	80056ec <HAL_RCC_OscConfig+0xb0>
 80056d4:	4b84      	ldr	r3, [pc, #528]	; (80058e8 <HAL_RCC_OscConfig+0x2ac>)
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	4a83      	ldr	r2, [pc, #524]	; (80058e8 <HAL_RCC_OscConfig+0x2ac>)
 80056da:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80056de:	6013      	str	r3, [r2, #0]
 80056e0:	4b81      	ldr	r3, [pc, #516]	; (80058e8 <HAL_RCC_OscConfig+0x2ac>)
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	4a80      	ldr	r2, [pc, #512]	; (80058e8 <HAL_RCC_OscConfig+0x2ac>)
 80056e6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80056ea:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	685b      	ldr	r3, [r3, #4]
 80056f0:	2b00      	cmp	r3, #0
 80056f2:	d013      	beq.n	800571c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80056f4:	f7fd fc82 	bl	8002ffc <HAL_GetTick>
 80056f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80056fa:	e008      	b.n	800570e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80056fc:	f7fd fc7e 	bl	8002ffc <HAL_GetTick>
 8005700:	4602      	mov	r2, r0
 8005702:	693b      	ldr	r3, [r7, #16]
 8005704:	1ad3      	subs	r3, r2, r3
 8005706:	2b64      	cmp	r3, #100	; 0x64
 8005708:	d901      	bls.n	800570e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800570a:	2303      	movs	r3, #3
 800570c:	e204      	b.n	8005b18 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800570e:	4b76      	ldr	r3, [pc, #472]	; (80058e8 <HAL_RCC_OscConfig+0x2ac>)
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005716:	2b00      	cmp	r3, #0
 8005718:	d0f0      	beq.n	80056fc <HAL_RCC_OscConfig+0xc0>
 800571a:	e014      	b.n	8005746 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800571c:	f7fd fc6e 	bl	8002ffc <HAL_GetTick>
 8005720:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005722:	e008      	b.n	8005736 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005724:	f7fd fc6a 	bl	8002ffc <HAL_GetTick>
 8005728:	4602      	mov	r2, r0
 800572a:	693b      	ldr	r3, [r7, #16]
 800572c:	1ad3      	subs	r3, r2, r3
 800572e:	2b64      	cmp	r3, #100	; 0x64
 8005730:	d901      	bls.n	8005736 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005732:	2303      	movs	r3, #3
 8005734:	e1f0      	b.n	8005b18 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005736:	4b6c      	ldr	r3, [pc, #432]	; (80058e8 <HAL_RCC_OscConfig+0x2ac>)
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800573e:	2b00      	cmp	r3, #0
 8005740:	d1f0      	bne.n	8005724 <HAL_RCC_OscConfig+0xe8>
 8005742:	e000      	b.n	8005746 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005744:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	f003 0302 	and.w	r3, r3, #2
 800574e:	2b00      	cmp	r3, #0
 8005750:	d063      	beq.n	800581a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005752:	4b65      	ldr	r3, [pc, #404]	; (80058e8 <HAL_RCC_OscConfig+0x2ac>)
 8005754:	689b      	ldr	r3, [r3, #8]
 8005756:	f003 030c 	and.w	r3, r3, #12
 800575a:	2b00      	cmp	r3, #0
 800575c:	d00b      	beq.n	8005776 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800575e:	4b62      	ldr	r3, [pc, #392]	; (80058e8 <HAL_RCC_OscConfig+0x2ac>)
 8005760:	689b      	ldr	r3, [r3, #8]
 8005762:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005766:	2b08      	cmp	r3, #8
 8005768:	d11c      	bne.n	80057a4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800576a:	4b5f      	ldr	r3, [pc, #380]	; (80058e8 <HAL_RCC_OscConfig+0x2ac>)
 800576c:	685b      	ldr	r3, [r3, #4]
 800576e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005772:	2b00      	cmp	r3, #0
 8005774:	d116      	bne.n	80057a4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005776:	4b5c      	ldr	r3, [pc, #368]	; (80058e8 <HAL_RCC_OscConfig+0x2ac>)
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	f003 0302 	and.w	r3, r3, #2
 800577e:	2b00      	cmp	r3, #0
 8005780:	d005      	beq.n	800578e <HAL_RCC_OscConfig+0x152>
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	68db      	ldr	r3, [r3, #12]
 8005786:	2b01      	cmp	r3, #1
 8005788:	d001      	beq.n	800578e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800578a:	2301      	movs	r3, #1
 800578c:	e1c4      	b.n	8005b18 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800578e:	4b56      	ldr	r3, [pc, #344]	; (80058e8 <HAL_RCC_OscConfig+0x2ac>)
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	691b      	ldr	r3, [r3, #16]
 800579a:	00db      	lsls	r3, r3, #3
 800579c:	4952      	ldr	r1, [pc, #328]	; (80058e8 <HAL_RCC_OscConfig+0x2ac>)
 800579e:	4313      	orrs	r3, r2
 80057a0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80057a2:	e03a      	b.n	800581a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	68db      	ldr	r3, [r3, #12]
 80057a8:	2b00      	cmp	r3, #0
 80057aa:	d020      	beq.n	80057ee <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80057ac:	4b4f      	ldr	r3, [pc, #316]	; (80058ec <HAL_RCC_OscConfig+0x2b0>)
 80057ae:	2201      	movs	r2, #1
 80057b0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80057b2:	f7fd fc23 	bl	8002ffc <HAL_GetTick>
 80057b6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80057b8:	e008      	b.n	80057cc <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80057ba:	f7fd fc1f 	bl	8002ffc <HAL_GetTick>
 80057be:	4602      	mov	r2, r0
 80057c0:	693b      	ldr	r3, [r7, #16]
 80057c2:	1ad3      	subs	r3, r2, r3
 80057c4:	2b02      	cmp	r3, #2
 80057c6:	d901      	bls.n	80057cc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80057c8:	2303      	movs	r3, #3
 80057ca:	e1a5      	b.n	8005b18 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80057cc:	4b46      	ldr	r3, [pc, #280]	; (80058e8 <HAL_RCC_OscConfig+0x2ac>)
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	f003 0302 	and.w	r3, r3, #2
 80057d4:	2b00      	cmp	r3, #0
 80057d6:	d0f0      	beq.n	80057ba <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80057d8:	4b43      	ldr	r3, [pc, #268]	; (80058e8 <HAL_RCC_OscConfig+0x2ac>)
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	691b      	ldr	r3, [r3, #16]
 80057e4:	00db      	lsls	r3, r3, #3
 80057e6:	4940      	ldr	r1, [pc, #256]	; (80058e8 <HAL_RCC_OscConfig+0x2ac>)
 80057e8:	4313      	orrs	r3, r2
 80057ea:	600b      	str	r3, [r1, #0]
 80057ec:	e015      	b.n	800581a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80057ee:	4b3f      	ldr	r3, [pc, #252]	; (80058ec <HAL_RCC_OscConfig+0x2b0>)
 80057f0:	2200      	movs	r2, #0
 80057f2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80057f4:	f7fd fc02 	bl	8002ffc <HAL_GetTick>
 80057f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80057fa:	e008      	b.n	800580e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80057fc:	f7fd fbfe 	bl	8002ffc <HAL_GetTick>
 8005800:	4602      	mov	r2, r0
 8005802:	693b      	ldr	r3, [r7, #16]
 8005804:	1ad3      	subs	r3, r2, r3
 8005806:	2b02      	cmp	r3, #2
 8005808:	d901      	bls.n	800580e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800580a:	2303      	movs	r3, #3
 800580c:	e184      	b.n	8005b18 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800580e:	4b36      	ldr	r3, [pc, #216]	; (80058e8 <HAL_RCC_OscConfig+0x2ac>)
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	f003 0302 	and.w	r3, r3, #2
 8005816:	2b00      	cmp	r3, #0
 8005818:	d1f0      	bne.n	80057fc <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	f003 0308 	and.w	r3, r3, #8
 8005822:	2b00      	cmp	r3, #0
 8005824:	d030      	beq.n	8005888 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	695b      	ldr	r3, [r3, #20]
 800582a:	2b00      	cmp	r3, #0
 800582c:	d016      	beq.n	800585c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800582e:	4b30      	ldr	r3, [pc, #192]	; (80058f0 <HAL_RCC_OscConfig+0x2b4>)
 8005830:	2201      	movs	r2, #1
 8005832:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005834:	f7fd fbe2 	bl	8002ffc <HAL_GetTick>
 8005838:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800583a:	e008      	b.n	800584e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800583c:	f7fd fbde 	bl	8002ffc <HAL_GetTick>
 8005840:	4602      	mov	r2, r0
 8005842:	693b      	ldr	r3, [r7, #16]
 8005844:	1ad3      	subs	r3, r2, r3
 8005846:	2b02      	cmp	r3, #2
 8005848:	d901      	bls.n	800584e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800584a:	2303      	movs	r3, #3
 800584c:	e164      	b.n	8005b18 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800584e:	4b26      	ldr	r3, [pc, #152]	; (80058e8 <HAL_RCC_OscConfig+0x2ac>)
 8005850:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005852:	f003 0302 	and.w	r3, r3, #2
 8005856:	2b00      	cmp	r3, #0
 8005858:	d0f0      	beq.n	800583c <HAL_RCC_OscConfig+0x200>
 800585a:	e015      	b.n	8005888 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800585c:	4b24      	ldr	r3, [pc, #144]	; (80058f0 <HAL_RCC_OscConfig+0x2b4>)
 800585e:	2200      	movs	r2, #0
 8005860:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005862:	f7fd fbcb 	bl	8002ffc <HAL_GetTick>
 8005866:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005868:	e008      	b.n	800587c <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800586a:	f7fd fbc7 	bl	8002ffc <HAL_GetTick>
 800586e:	4602      	mov	r2, r0
 8005870:	693b      	ldr	r3, [r7, #16]
 8005872:	1ad3      	subs	r3, r2, r3
 8005874:	2b02      	cmp	r3, #2
 8005876:	d901      	bls.n	800587c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8005878:	2303      	movs	r3, #3
 800587a:	e14d      	b.n	8005b18 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800587c:	4b1a      	ldr	r3, [pc, #104]	; (80058e8 <HAL_RCC_OscConfig+0x2ac>)
 800587e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005880:	f003 0302 	and.w	r3, r3, #2
 8005884:	2b00      	cmp	r3, #0
 8005886:	d1f0      	bne.n	800586a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	f003 0304 	and.w	r3, r3, #4
 8005890:	2b00      	cmp	r3, #0
 8005892:	f000 80a0 	beq.w	80059d6 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005896:	2300      	movs	r3, #0
 8005898:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800589a:	4b13      	ldr	r3, [pc, #76]	; (80058e8 <HAL_RCC_OscConfig+0x2ac>)
 800589c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800589e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80058a2:	2b00      	cmp	r3, #0
 80058a4:	d10f      	bne.n	80058c6 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80058a6:	2300      	movs	r3, #0
 80058a8:	60bb      	str	r3, [r7, #8]
 80058aa:	4b0f      	ldr	r3, [pc, #60]	; (80058e8 <HAL_RCC_OscConfig+0x2ac>)
 80058ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058ae:	4a0e      	ldr	r2, [pc, #56]	; (80058e8 <HAL_RCC_OscConfig+0x2ac>)
 80058b0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80058b4:	6413      	str	r3, [r2, #64]	; 0x40
 80058b6:	4b0c      	ldr	r3, [pc, #48]	; (80058e8 <HAL_RCC_OscConfig+0x2ac>)
 80058b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80058be:	60bb      	str	r3, [r7, #8]
 80058c0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80058c2:	2301      	movs	r3, #1
 80058c4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80058c6:	4b0b      	ldr	r3, [pc, #44]	; (80058f4 <HAL_RCC_OscConfig+0x2b8>)
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80058ce:	2b00      	cmp	r3, #0
 80058d0:	d121      	bne.n	8005916 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80058d2:	4b08      	ldr	r3, [pc, #32]	; (80058f4 <HAL_RCC_OscConfig+0x2b8>)
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	4a07      	ldr	r2, [pc, #28]	; (80058f4 <HAL_RCC_OscConfig+0x2b8>)
 80058d8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80058dc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80058de:	f7fd fb8d 	bl	8002ffc <HAL_GetTick>
 80058e2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80058e4:	e011      	b.n	800590a <HAL_RCC_OscConfig+0x2ce>
 80058e6:	bf00      	nop
 80058e8:	40023800 	.word	0x40023800
 80058ec:	42470000 	.word	0x42470000
 80058f0:	42470e80 	.word	0x42470e80
 80058f4:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80058f8:	f7fd fb80 	bl	8002ffc <HAL_GetTick>
 80058fc:	4602      	mov	r2, r0
 80058fe:	693b      	ldr	r3, [r7, #16]
 8005900:	1ad3      	subs	r3, r2, r3
 8005902:	2b02      	cmp	r3, #2
 8005904:	d901      	bls.n	800590a <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8005906:	2303      	movs	r3, #3
 8005908:	e106      	b.n	8005b18 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800590a:	4b85      	ldr	r3, [pc, #532]	; (8005b20 <HAL_RCC_OscConfig+0x4e4>)
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005912:	2b00      	cmp	r3, #0
 8005914:	d0f0      	beq.n	80058f8 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	689b      	ldr	r3, [r3, #8]
 800591a:	2b01      	cmp	r3, #1
 800591c:	d106      	bne.n	800592c <HAL_RCC_OscConfig+0x2f0>
 800591e:	4b81      	ldr	r3, [pc, #516]	; (8005b24 <HAL_RCC_OscConfig+0x4e8>)
 8005920:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005922:	4a80      	ldr	r2, [pc, #512]	; (8005b24 <HAL_RCC_OscConfig+0x4e8>)
 8005924:	f043 0301 	orr.w	r3, r3, #1
 8005928:	6713      	str	r3, [r2, #112]	; 0x70
 800592a:	e01c      	b.n	8005966 <HAL_RCC_OscConfig+0x32a>
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	689b      	ldr	r3, [r3, #8]
 8005930:	2b05      	cmp	r3, #5
 8005932:	d10c      	bne.n	800594e <HAL_RCC_OscConfig+0x312>
 8005934:	4b7b      	ldr	r3, [pc, #492]	; (8005b24 <HAL_RCC_OscConfig+0x4e8>)
 8005936:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005938:	4a7a      	ldr	r2, [pc, #488]	; (8005b24 <HAL_RCC_OscConfig+0x4e8>)
 800593a:	f043 0304 	orr.w	r3, r3, #4
 800593e:	6713      	str	r3, [r2, #112]	; 0x70
 8005940:	4b78      	ldr	r3, [pc, #480]	; (8005b24 <HAL_RCC_OscConfig+0x4e8>)
 8005942:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005944:	4a77      	ldr	r2, [pc, #476]	; (8005b24 <HAL_RCC_OscConfig+0x4e8>)
 8005946:	f043 0301 	orr.w	r3, r3, #1
 800594a:	6713      	str	r3, [r2, #112]	; 0x70
 800594c:	e00b      	b.n	8005966 <HAL_RCC_OscConfig+0x32a>
 800594e:	4b75      	ldr	r3, [pc, #468]	; (8005b24 <HAL_RCC_OscConfig+0x4e8>)
 8005950:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005952:	4a74      	ldr	r2, [pc, #464]	; (8005b24 <HAL_RCC_OscConfig+0x4e8>)
 8005954:	f023 0301 	bic.w	r3, r3, #1
 8005958:	6713      	str	r3, [r2, #112]	; 0x70
 800595a:	4b72      	ldr	r3, [pc, #456]	; (8005b24 <HAL_RCC_OscConfig+0x4e8>)
 800595c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800595e:	4a71      	ldr	r2, [pc, #452]	; (8005b24 <HAL_RCC_OscConfig+0x4e8>)
 8005960:	f023 0304 	bic.w	r3, r3, #4
 8005964:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	689b      	ldr	r3, [r3, #8]
 800596a:	2b00      	cmp	r3, #0
 800596c:	d015      	beq.n	800599a <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800596e:	f7fd fb45 	bl	8002ffc <HAL_GetTick>
 8005972:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005974:	e00a      	b.n	800598c <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005976:	f7fd fb41 	bl	8002ffc <HAL_GetTick>
 800597a:	4602      	mov	r2, r0
 800597c:	693b      	ldr	r3, [r7, #16]
 800597e:	1ad3      	subs	r3, r2, r3
 8005980:	f241 3288 	movw	r2, #5000	; 0x1388
 8005984:	4293      	cmp	r3, r2
 8005986:	d901      	bls.n	800598c <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8005988:	2303      	movs	r3, #3
 800598a:	e0c5      	b.n	8005b18 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800598c:	4b65      	ldr	r3, [pc, #404]	; (8005b24 <HAL_RCC_OscConfig+0x4e8>)
 800598e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005990:	f003 0302 	and.w	r3, r3, #2
 8005994:	2b00      	cmp	r3, #0
 8005996:	d0ee      	beq.n	8005976 <HAL_RCC_OscConfig+0x33a>
 8005998:	e014      	b.n	80059c4 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800599a:	f7fd fb2f 	bl	8002ffc <HAL_GetTick>
 800599e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80059a0:	e00a      	b.n	80059b8 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80059a2:	f7fd fb2b 	bl	8002ffc <HAL_GetTick>
 80059a6:	4602      	mov	r2, r0
 80059a8:	693b      	ldr	r3, [r7, #16]
 80059aa:	1ad3      	subs	r3, r2, r3
 80059ac:	f241 3288 	movw	r2, #5000	; 0x1388
 80059b0:	4293      	cmp	r3, r2
 80059b2:	d901      	bls.n	80059b8 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80059b4:	2303      	movs	r3, #3
 80059b6:	e0af      	b.n	8005b18 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80059b8:	4b5a      	ldr	r3, [pc, #360]	; (8005b24 <HAL_RCC_OscConfig+0x4e8>)
 80059ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80059bc:	f003 0302 	and.w	r3, r3, #2
 80059c0:	2b00      	cmp	r3, #0
 80059c2:	d1ee      	bne.n	80059a2 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80059c4:	7dfb      	ldrb	r3, [r7, #23]
 80059c6:	2b01      	cmp	r3, #1
 80059c8:	d105      	bne.n	80059d6 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80059ca:	4b56      	ldr	r3, [pc, #344]	; (8005b24 <HAL_RCC_OscConfig+0x4e8>)
 80059cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059ce:	4a55      	ldr	r2, [pc, #340]	; (8005b24 <HAL_RCC_OscConfig+0x4e8>)
 80059d0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80059d4:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	699b      	ldr	r3, [r3, #24]
 80059da:	2b00      	cmp	r3, #0
 80059dc:	f000 809b 	beq.w	8005b16 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80059e0:	4b50      	ldr	r3, [pc, #320]	; (8005b24 <HAL_RCC_OscConfig+0x4e8>)
 80059e2:	689b      	ldr	r3, [r3, #8]
 80059e4:	f003 030c 	and.w	r3, r3, #12
 80059e8:	2b08      	cmp	r3, #8
 80059ea:	d05c      	beq.n	8005aa6 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	699b      	ldr	r3, [r3, #24]
 80059f0:	2b02      	cmp	r3, #2
 80059f2:	d141      	bne.n	8005a78 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80059f4:	4b4c      	ldr	r3, [pc, #304]	; (8005b28 <HAL_RCC_OscConfig+0x4ec>)
 80059f6:	2200      	movs	r2, #0
 80059f8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80059fa:	f7fd faff 	bl	8002ffc <HAL_GetTick>
 80059fe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005a00:	e008      	b.n	8005a14 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005a02:	f7fd fafb 	bl	8002ffc <HAL_GetTick>
 8005a06:	4602      	mov	r2, r0
 8005a08:	693b      	ldr	r3, [r7, #16]
 8005a0a:	1ad3      	subs	r3, r2, r3
 8005a0c:	2b02      	cmp	r3, #2
 8005a0e:	d901      	bls.n	8005a14 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8005a10:	2303      	movs	r3, #3
 8005a12:	e081      	b.n	8005b18 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005a14:	4b43      	ldr	r3, [pc, #268]	; (8005b24 <HAL_RCC_OscConfig+0x4e8>)
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005a1c:	2b00      	cmp	r3, #0
 8005a1e:	d1f0      	bne.n	8005a02 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	69da      	ldr	r2, [r3, #28]
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	6a1b      	ldr	r3, [r3, #32]
 8005a28:	431a      	orrs	r2, r3
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a2e:	019b      	lsls	r3, r3, #6
 8005a30:	431a      	orrs	r2, r3
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a36:	085b      	lsrs	r3, r3, #1
 8005a38:	3b01      	subs	r3, #1
 8005a3a:	041b      	lsls	r3, r3, #16
 8005a3c:	431a      	orrs	r2, r3
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a42:	061b      	lsls	r3, r3, #24
 8005a44:	4937      	ldr	r1, [pc, #220]	; (8005b24 <HAL_RCC_OscConfig+0x4e8>)
 8005a46:	4313      	orrs	r3, r2
 8005a48:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005a4a:	4b37      	ldr	r3, [pc, #220]	; (8005b28 <HAL_RCC_OscConfig+0x4ec>)
 8005a4c:	2201      	movs	r2, #1
 8005a4e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005a50:	f7fd fad4 	bl	8002ffc <HAL_GetTick>
 8005a54:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005a56:	e008      	b.n	8005a6a <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005a58:	f7fd fad0 	bl	8002ffc <HAL_GetTick>
 8005a5c:	4602      	mov	r2, r0
 8005a5e:	693b      	ldr	r3, [r7, #16]
 8005a60:	1ad3      	subs	r3, r2, r3
 8005a62:	2b02      	cmp	r3, #2
 8005a64:	d901      	bls.n	8005a6a <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8005a66:	2303      	movs	r3, #3
 8005a68:	e056      	b.n	8005b18 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005a6a:	4b2e      	ldr	r3, [pc, #184]	; (8005b24 <HAL_RCC_OscConfig+0x4e8>)
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005a72:	2b00      	cmp	r3, #0
 8005a74:	d0f0      	beq.n	8005a58 <HAL_RCC_OscConfig+0x41c>
 8005a76:	e04e      	b.n	8005b16 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005a78:	4b2b      	ldr	r3, [pc, #172]	; (8005b28 <HAL_RCC_OscConfig+0x4ec>)
 8005a7a:	2200      	movs	r2, #0
 8005a7c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005a7e:	f7fd fabd 	bl	8002ffc <HAL_GetTick>
 8005a82:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005a84:	e008      	b.n	8005a98 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005a86:	f7fd fab9 	bl	8002ffc <HAL_GetTick>
 8005a8a:	4602      	mov	r2, r0
 8005a8c:	693b      	ldr	r3, [r7, #16]
 8005a8e:	1ad3      	subs	r3, r2, r3
 8005a90:	2b02      	cmp	r3, #2
 8005a92:	d901      	bls.n	8005a98 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8005a94:	2303      	movs	r3, #3
 8005a96:	e03f      	b.n	8005b18 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005a98:	4b22      	ldr	r3, [pc, #136]	; (8005b24 <HAL_RCC_OscConfig+0x4e8>)
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005aa0:	2b00      	cmp	r3, #0
 8005aa2:	d1f0      	bne.n	8005a86 <HAL_RCC_OscConfig+0x44a>
 8005aa4:	e037      	b.n	8005b16 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	699b      	ldr	r3, [r3, #24]
 8005aaa:	2b01      	cmp	r3, #1
 8005aac:	d101      	bne.n	8005ab2 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8005aae:	2301      	movs	r3, #1
 8005ab0:	e032      	b.n	8005b18 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005ab2:	4b1c      	ldr	r3, [pc, #112]	; (8005b24 <HAL_RCC_OscConfig+0x4e8>)
 8005ab4:	685b      	ldr	r3, [r3, #4]
 8005ab6:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	699b      	ldr	r3, [r3, #24]
 8005abc:	2b01      	cmp	r3, #1
 8005abe:	d028      	beq.n	8005b12 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005ac0:	68fb      	ldr	r3, [r7, #12]
 8005ac2:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005aca:	429a      	cmp	r2, r3
 8005acc:	d121      	bne.n	8005b12 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005ace:	68fb      	ldr	r3, [r7, #12]
 8005ad0:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005ad8:	429a      	cmp	r2, r3
 8005ada:	d11a      	bne.n	8005b12 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005adc:	68fa      	ldr	r2, [r7, #12]
 8005ade:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8005ae2:	4013      	ands	r3, r2
 8005ae4:	687a      	ldr	r2, [r7, #4]
 8005ae6:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005ae8:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005aea:	4293      	cmp	r3, r2
 8005aec:	d111      	bne.n	8005b12 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005aee:	68fb      	ldr	r3, [r7, #12]
 8005af0:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005af8:	085b      	lsrs	r3, r3, #1
 8005afa:	3b01      	subs	r3, #1
 8005afc:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005afe:	429a      	cmp	r2, r3
 8005b00:	d107      	bne.n	8005b12 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8005b02:	68fb      	ldr	r3, [r7, #12]
 8005b04:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b0c:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005b0e:	429a      	cmp	r2, r3
 8005b10:	d001      	beq.n	8005b16 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8005b12:	2301      	movs	r3, #1
 8005b14:	e000      	b.n	8005b18 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8005b16:	2300      	movs	r3, #0
}
 8005b18:	4618      	mov	r0, r3
 8005b1a:	3718      	adds	r7, #24
 8005b1c:	46bd      	mov	sp, r7
 8005b1e:	bd80      	pop	{r7, pc}
 8005b20:	40007000 	.word	0x40007000
 8005b24:	40023800 	.word	0x40023800
 8005b28:	42470060 	.word	0x42470060

08005b2c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005b2c:	b580      	push	{r7, lr}
 8005b2e:	b084      	sub	sp, #16
 8005b30:	af00      	add	r7, sp, #0
 8005b32:	6078      	str	r0, [r7, #4]
 8005b34:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	2b00      	cmp	r3, #0
 8005b3a:	d101      	bne.n	8005b40 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005b3c:	2301      	movs	r3, #1
 8005b3e:	e0cc      	b.n	8005cda <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005b40:	4b68      	ldr	r3, [pc, #416]	; (8005ce4 <HAL_RCC_ClockConfig+0x1b8>)
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	f003 0307 	and.w	r3, r3, #7
 8005b48:	683a      	ldr	r2, [r7, #0]
 8005b4a:	429a      	cmp	r2, r3
 8005b4c:	d90c      	bls.n	8005b68 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005b4e:	4b65      	ldr	r3, [pc, #404]	; (8005ce4 <HAL_RCC_ClockConfig+0x1b8>)
 8005b50:	683a      	ldr	r2, [r7, #0]
 8005b52:	b2d2      	uxtb	r2, r2
 8005b54:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005b56:	4b63      	ldr	r3, [pc, #396]	; (8005ce4 <HAL_RCC_ClockConfig+0x1b8>)
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	f003 0307 	and.w	r3, r3, #7
 8005b5e:	683a      	ldr	r2, [r7, #0]
 8005b60:	429a      	cmp	r2, r3
 8005b62:	d001      	beq.n	8005b68 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005b64:	2301      	movs	r3, #1
 8005b66:	e0b8      	b.n	8005cda <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	f003 0302 	and.w	r3, r3, #2
 8005b70:	2b00      	cmp	r3, #0
 8005b72:	d020      	beq.n	8005bb6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	f003 0304 	and.w	r3, r3, #4
 8005b7c:	2b00      	cmp	r3, #0
 8005b7e:	d005      	beq.n	8005b8c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005b80:	4b59      	ldr	r3, [pc, #356]	; (8005ce8 <HAL_RCC_ClockConfig+0x1bc>)
 8005b82:	689b      	ldr	r3, [r3, #8]
 8005b84:	4a58      	ldr	r2, [pc, #352]	; (8005ce8 <HAL_RCC_ClockConfig+0x1bc>)
 8005b86:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8005b8a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	f003 0308 	and.w	r3, r3, #8
 8005b94:	2b00      	cmp	r3, #0
 8005b96:	d005      	beq.n	8005ba4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005b98:	4b53      	ldr	r3, [pc, #332]	; (8005ce8 <HAL_RCC_ClockConfig+0x1bc>)
 8005b9a:	689b      	ldr	r3, [r3, #8]
 8005b9c:	4a52      	ldr	r2, [pc, #328]	; (8005ce8 <HAL_RCC_ClockConfig+0x1bc>)
 8005b9e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8005ba2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005ba4:	4b50      	ldr	r3, [pc, #320]	; (8005ce8 <HAL_RCC_ClockConfig+0x1bc>)
 8005ba6:	689b      	ldr	r3, [r3, #8]
 8005ba8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	689b      	ldr	r3, [r3, #8]
 8005bb0:	494d      	ldr	r1, [pc, #308]	; (8005ce8 <HAL_RCC_ClockConfig+0x1bc>)
 8005bb2:	4313      	orrs	r3, r2
 8005bb4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	f003 0301 	and.w	r3, r3, #1
 8005bbe:	2b00      	cmp	r3, #0
 8005bc0:	d044      	beq.n	8005c4c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	685b      	ldr	r3, [r3, #4]
 8005bc6:	2b01      	cmp	r3, #1
 8005bc8:	d107      	bne.n	8005bda <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005bca:	4b47      	ldr	r3, [pc, #284]	; (8005ce8 <HAL_RCC_ClockConfig+0x1bc>)
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005bd2:	2b00      	cmp	r3, #0
 8005bd4:	d119      	bne.n	8005c0a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005bd6:	2301      	movs	r3, #1
 8005bd8:	e07f      	b.n	8005cda <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	685b      	ldr	r3, [r3, #4]
 8005bde:	2b02      	cmp	r3, #2
 8005be0:	d003      	beq.n	8005bea <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005be6:	2b03      	cmp	r3, #3
 8005be8:	d107      	bne.n	8005bfa <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005bea:	4b3f      	ldr	r3, [pc, #252]	; (8005ce8 <HAL_RCC_ClockConfig+0x1bc>)
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005bf2:	2b00      	cmp	r3, #0
 8005bf4:	d109      	bne.n	8005c0a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005bf6:	2301      	movs	r3, #1
 8005bf8:	e06f      	b.n	8005cda <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005bfa:	4b3b      	ldr	r3, [pc, #236]	; (8005ce8 <HAL_RCC_ClockConfig+0x1bc>)
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	f003 0302 	and.w	r3, r3, #2
 8005c02:	2b00      	cmp	r3, #0
 8005c04:	d101      	bne.n	8005c0a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005c06:	2301      	movs	r3, #1
 8005c08:	e067      	b.n	8005cda <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005c0a:	4b37      	ldr	r3, [pc, #220]	; (8005ce8 <HAL_RCC_ClockConfig+0x1bc>)
 8005c0c:	689b      	ldr	r3, [r3, #8]
 8005c0e:	f023 0203 	bic.w	r2, r3, #3
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	685b      	ldr	r3, [r3, #4]
 8005c16:	4934      	ldr	r1, [pc, #208]	; (8005ce8 <HAL_RCC_ClockConfig+0x1bc>)
 8005c18:	4313      	orrs	r3, r2
 8005c1a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005c1c:	f7fd f9ee 	bl	8002ffc <HAL_GetTick>
 8005c20:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005c22:	e00a      	b.n	8005c3a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005c24:	f7fd f9ea 	bl	8002ffc <HAL_GetTick>
 8005c28:	4602      	mov	r2, r0
 8005c2a:	68fb      	ldr	r3, [r7, #12]
 8005c2c:	1ad3      	subs	r3, r2, r3
 8005c2e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005c32:	4293      	cmp	r3, r2
 8005c34:	d901      	bls.n	8005c3a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005c36:	2303      	movs	r3, #3
 8005c38:	e04f      	b.n	8005cda <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005c3a:	4b2b      	ldr	r3, [pc, #172]	; (8005ce8 <HAL_RCC_ClockConfig+0x1bc>)
 8005c3c:	689b      	ldr	r3, [r3, #8]
 8005c3e:	f003 020c 	and.w	r2, r3, #12
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	685b      	ldr	r3, [r3, #4]
 8005c46:	009b      	lsls	r3, r3, #2
 8005c48:	429a      	cmp	r2, r3
 8005c4a:	d1eb      	bne.n	8005c24 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005c4c:	4b25      	ldr	r3, [pc, #148]	; (8005ce4 <HAL_RCC_ClockConfig+0x1b8>)
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	f003 0307 	and.w	r3, r3, #7
 8005c54:	683a      	ldr	r2, [r7, #0]
 8005c56:	429a      	cmp	r2, r3
 8005c58:	d20c      	bcs.n	8005c74 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005c5a:	4b22      	ldr	r3, [pc, #136]	; (8005ce4 <HAL_RCC_ClockConfig+0x1b8>)
 8005c5c:	683a      	ldr	r2, [r7, #0]
 8005c5e:	b2d2      	uxtb	r2, r2
 8005c60:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005c62:	4b20      	ldr	r3, [pc, #128]	; (8005ce4 <HAL_RCC_ClockConfig+0x1b8>)
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	f003 0307 	and.w	r3, r3, #7
 8005c6a:	683a      	ldr	r2, [r7, #0]
 8005c6c:	429a      	cmp	r2, r3
 8005c6e:	d001      	beq.n	8005c74 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005c70:	2301      	movs	r3, #1
 8005c72:	e032      	b.n	8005cda <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	f003 0304 	and.w	r3, r3, #4
 8005c7c:	2b00      	cmp	r3, #0
 8005c7e:	d008      	beq.n	8005c92 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005c80:	4b19      	ldr	r3, [pc, #100]	; (8005ce8 <HAL_RCC_ClockConfig+0x1bc>)
 8005c82:	689b      	ldr	r3, [r3, #8]
 8005c84:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	68db      	ldr	r3, [r3, #12]
 8005c8c:	4916      	ldr	r1, [pc, #88]	; (8005ce8 <HAL_RCC_ClockConfig+0x1bc>)
 8005c8e:	4313      	orrs	r3, r2
 8005c90:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	f003 0308 	and.w	r3, r3, #8
 8005c9a:	2b00      	cmp	r3, #0
 8005c9c:	d009      	beq.n	8005cb2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005c9e:	4b12      	ldr	r3, [pc, #72]	; (8005ce8 <HAL_RCC_ClockConfig+0x1bc>)
 8005ca0:	689b      	ldr	r3, [r3, #8]
 8005ca2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	691b      	ldr	r3, [r3, #16]
 8005caa:	00db      	lsls	r3, r3, #3
 8005cac:	490e      	ldr	r1, [pc, #56]	; (8005ce8 <HAL_RCC_ClockConfig+0x1bc>)
 8005cae:	4313      	orrs	r3, r2
 8005cb0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005cb2:	f000 f821 	bl	8005cf8 <HAL_RCC_GetSysClockFreq>
 8005cb6:	4602      	mov	r2, r0
 8005cb8:	4b0b      	ldr	r3, [pc, #44]	; (8005ce8 <HAL_RCC_ClockConfig+0x1bc>)
 8005cba:	689b      	ldr	r3, [r3, #8]
 8005cbc:	091b      	lsrs	r3, r3, #4
 8005cbe:	f003 030f 	and.w	r3, r3, #15
 8005cc2:	490a      	ldr	r1, [pc, #40]	; (8005cec <HAL_RCC_ClockConfig+0x1c0>)
 8005cc4:	5ccb      	ldrb	r3, [r1, r3]
 8005cc6:	fa22 f303 	lsr.w	r3, r2, r3
 8005cca:	4a09      	ldr	r2, [pc, #36]	; (8005cf0 <HAL_RCC_ClockConfig+0x1c4>)
 8005ccc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8005cce:	4b09      	ldr	r3, [pc, #36]	; (8005cf4 <HAL_RCC_ClockConfig+0x1c8>)
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	4618      	mov	r0, r3
 8005cd4:	f7fc fbd0 	bl	8002478 <HAL_InitTick>

  return HAL_OK;
 8005cd8:	2300      	movs	r3, #0
}
 8005cda:	4618      	mov	r0, r3
 8005cdc:	3710      	adds	r7, #16
 8005cde:	46bd      	mov	sp, r7
 8005ce0:	bd80      	pop	{r7, pc}
 8005ce2:	bf00      	nop
 8005ce4:	40023c00 	.word	0x40023c00
 8005ce8:	40023800 	.word	0x40023800
 8005cec:	0800f588 	.word	0x0800f588
 8005cf0:	20000000 	.word	0x20000000
 8005cf4:	20000004 	.word	0x20000004

08005cf8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005cf8:	b5b0      	push	{r4, r5, r7, lr}
 8005cfa:	b084      	sub	sp, #16
 8005cfc:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8005cfe:	2100      	movs	r1, #0
 8005d00:	6079      	str	r1, [r7, #4]
 8005d02:	2100      	movs	r1, #0
 8005d04:	60f9      	str	r1, [r7, #12]
 8005d06:	2100      	movs	r1, #0
 8005d08:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8005d0a:	2100      	movs	r1, #0
 8005d0c:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005d0e:	4952      	ldr	r1, [pc, #328]	; (8005e58 <HAL_RCC_GetSysClockFreq+0x160>)
 8005d10:	6889      	ldr	r1, [r1, #8]
 8005d12:	f001 010c 	and.w	r1, r1, #12
 8005d16:	2908      	cmp	r1, #8
 8005d18:	d00d      	beq.n	8005d36 <HAL_RCC_GetSysClockFreq+0x3e>
 8005d1a:	2908      	cmp	r1, #8
 8005d1c:	f200 8094 	bhi.w	8005e48 <HAL_RCC_GetSysClockFreq+0x150>
 8005d20:	2900      	cmp	r1, #0
 8005d22:	d002      	beq.n	8005d2a <HAL_RCC_GetSysClockFreq+0x32>
 8005d24:	2904      	cmp	r1, #4
 8005d26:	d003      	beq.n	8005d30 <HAL_RCC_GetSysClockFreq+0x38>
 8005d28:	e08e      	b.n	8005e48 <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005d2a:	4b4c      	ldr	r3, [pc, #304]	; (8005e5c <HAL_RCC_GetSysClockFreq+0x164>)
 8005d2c:	60bb      	str	r3, [r7, #8]
       break;
 8005d2e:	e08e      	b.n	8005e4e <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005d30:	4b4b      	ldr	r3, [pc, #300]	; (8005e60 <HAL_RCC_GetSysClockFreq+0x168>)
 8005d32:	60bb      	str	r3, [r7, #8]
      break;
 8005d34:	e08b      	b.n	8005e4e <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005d36:	4948      	ldr	r1, [pc, #288]	; (8005e58 <HAL_RCC_GetSysClockFreq+0x160>)
 8005d38:	6849      	ldr	r1, [r1, #4]
 8005d3a:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 8005d3e:	6079      	str	r1, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005d40:	4945      	ldr	r1, [pc, #276]	; (8005e58 <HAL_RCC_GetSysClockFreq+0x160>)
 8005d42:	6849      	ldr	r1, [r1, #4]
 8005d44:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 8005d48:	2900      	cmp	r1, #0
 8005d4a:	d024      	beq.n	8005d96 <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005d4c:	4942      	ldr	r1, [pc, #264]	; (8005e58 <HAL_RCC_GetSysClockFreq+0x160>)
 8005d4e:	6849      	ldr	r1, [r1, #4]
 8005d50:	0989      	lsrs	r1, r1, #6
 8005d52:	4608      	mov	r0, r1
 8005d54:	f04f 0100 	mov.w	r1, #0
 8005d58:	f240 14ff 	movw	r4, #511	; 0x1ff
 8005d5c:	f04f 0500 	mov.w	r5, #0
 8005d60:	ea00 0204 	and.w	r2, r0, r4
 8005d64:	ea01 0305 	and.w	r3, r1, r5
 8005d68:	493d      	ldr	r1, [pc, #244]	; (8005e60 <HAL_RCC_GetSysClockFreq+0x168>)
 8005d6a:	fb01 f003 	mul.w	r0, r1, r3
 8005d6e:	2100      	movs	r1, #0
 8005d70:	fb01 f102 	mul.w	r1, r1, r2
 8005d74:	1844      	adds	r4, r0, r1
 8005d76:	493a      	ldr	r1, [pc, #232]	; (8005e60 <HAL_RCC_GetSysClockFreq+0x168>)
 8005d78:	fba2 0101 	umull	r0, r1, r2, r1
 8005d7c:	1863      	adds	r3, r4, r1
 8005d7e:	4619      	mov	r1, r3
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	461a      	mov	r2, r3
 8005d84:	f04f 0300 	mov.w	r3, #0
 8005d88:	f7fa ff06 	bl	8000b98 <__aeabi_uldivmod>
 8005d8c:	4602      	mov	r2, r0
 8005d8e:	460b      	mov	r3, r1
 8005d90:	4613      	mov	r3, r2
 8005d92:	60fb      	str	r3, [r7, #12]
 8005d94:	e04a      	b.n	8005e2c <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005d96:	4b30      	ldr	r3, [pc, #192]	; (8005e58 <HAL_RCC_GetSysClockFreq+0x160>)
 8005d98:	685b      	ldr	r3, [r3, #4]
 8005d9a:	099b      	lsrs	r3, r3, #6
 8005d9c:	461a      	mov	r2, r3
 8005d9e:	f04f 0300 	mov.w	r3, #0
 8005da2:	f240 10ff 	movw	r0, #511	; 0x1ff
 8005da6:	f04f 0100 	mov.w	r1, #0
 8005daa:	ea02 0400 	and.w	r4, r2, r0
 8005dae:	ea03 0501 	and.w	r5, r3, r1
 8005db2:	4620      	mov	r0, r4
 8005db4:	4629      	mov	r1, r5
 8005db6:	f04f 0200 	mov.w	r2, #0
 8005dba:	f04f 0300 	mov.w	r3, #0
 8005dbe:	014b      	lsls	r3, r1, #5
 8005dc0:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8005dc4:	0142      	lsls	r2, r0, #5
 8005dc6:	4610      	mov	r0, r2
 8005dc8:	4619      	mov	r1, r3
 8005dca:	1b00      	subs	r0, r0, r4
 8005dcc:	eb61 0105 	sbc.w	r1, r1, r5
 8005dd0:	f04f 0200 	mov.w	r2, #0
 8005dd4:	f04f 0300 	mov.w	r3, #0
 8005dd8:	018b      	lsls	r3, r1, #6
 8005dda:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8005dde:	0182      	lsls	r2, r0, #6
 8005de0:	1a12      	subs	r2, r2, r0
 8005de2:	eb63 0301 	sbc.w	r3, r3, r1
 8005de6:	f04f 0000 	mov.w	r0, #0
 8005dea:	f04f 0100 	mov.w	r1, #0
 8005dee:	00d9      	lsls	r1, r3, #3
 8005df0:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005df4:	00d0      	lsls	r0, r2, #3
 8005df6:	4602      	mov	r2, r0
 8005df8:	460b      	mov	r3, r1
 8005dfa:	1912      	adds	r2, r2, r4
 8005dfc:	eb45 0303 	adc.w	r3, r5, r3
 8005e00:	f04f 0000 	mov.w	r0, #0
 8005e04:	f04f 0100 	mov.w	r1, #0
 8005e08:	0299      	lsls	r1, r3, #10
 8005e0a:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8005e0e:	0290      	lsls	r0, r2, #10
 8005e10:	4602      	mov	r2, r0
 8005e12:	460b      	mov	r3, r1
 8005e14:	4610      	mov	r0, r2
 8005e16:	4619      	mov	r1, r3
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	461a      	mov	r2, r3
 8005e1c:	f04f 0300 	mov.w	r3, #0
 8005e20:	f7fa feba 	bl	8000b98 <__aeabi_uldivmod>
 8005e24:	4602      	mov	r2, r0
 8005e26:	460b      	mov	r3, r1
 8005e28:	4613      	mov	r3, r2
 8005e2a:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005e2c:	4b0a      	ldr	r3, [pc, #40]	; (8005e58 <HAL_RCC_GetSysClockFreq+0x160>)
 8005e2e:	685b      	ldr	r3, [r3, #4]
 8005e30:	0c1b      	lsrs	r3, r3, #16
 8005e32:	f003 0303 	and.w	r3, r3, #3
 8005e36:	3301      	adds	r3, #1
 8005e38:	005b      	lsls	r3, r3, #1
 8005e3a:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8005e3c:	68fa      	ldr	r2, [r7, #12]
 8005e3e:	683b      	ldr	r3, [r7, #0]
 8005e40:	fbb2 f3f3 	udiv	r3, r2, r3
 8005e44:	60bb      	str	r3, [r7, #8]
      break;
 8005e46:	e002      	b.n	8005e4e <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005e48:	4b04      	ldr	r3, [pc, #16]	; (8005e5c <HAL_RCC_GetSysClockFreq+0x164>)
 8005e4a:	60bb      	str	r3, [r7, #8]
      break;
 8005e4c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005e4e:	68bb      	ldr	r3, [r7, #8]
}
 8005e50:	4618      	mov	r0, r3
 8005e52:	3710      	adds	r7, #16
 8005e54:	46bd      	mov	sp, r7
 8005e56:	bdb0      	pop	{r4, r5, r7, pc}
 8005e58:	40023800 	.word	0x40023800
 8005e5c:	00f42400 	.word	0x00f42400
 8005e60:	00b71b00 	.word	0x00b71b00

08005e64 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005e64:	b480      	push	{r7}
 8005e66:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005e68:	4b03      	ldr	r3, [pc, #12]	; (8005e78 <HAL_RCC_GetHCLKFreq+0x14>)
 8005e6a:	681b      	ldr	r3, [r3, #0]
}
 8005e6c:	4618      	mov	r0, r3
 8005e6e:	46bd      	mov	sp, r7
 8005e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e74:	4770      	bx	lr
 8005e76:	bf00      	nop
 8005e78:	20000000 	.word	0x20000000

08005e7c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005e7c:	b580      	push	{r7, lr}
 8005e7e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8005e80:	f7ff fff0 	bl	8005e64 <HAL_RCC_GetHCLKFreq>
 8005e84:	4602      	mov	r2, r0
 8005e86:	4b05      	ldr	r3, [pc, #20]	; (8005e9c <HAL_RCC_GetPCLK1Freq+0x20>)
 8005e88:	689b      	ldr	r3, [r3, #8]
 8005e8a:	0a9b      	lsrs	r3, r3, #10
 8005e8c:	f003 0307 	and.w	r3, r3, #7
 8005e90:	4903      	ldr	r1, [pc, #12]	; (8005ea0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005e92:	5ccb      	ldrb	r3, [r1, r3]
 8005e94:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005e98:	4618      	mov	r0, r3
 8005e9a:	bd80      	pop	{r7, pc}
 8005e9c:	40023800 	.word	0x40023800
 8005ea0:	0800f598 	.word	0x0800f598

08005ea4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005ea4:	b580      	push	{r7, lr}
 8005ea6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8005ea8:	f7ff ffdc 	bl	8005e64 <HAL_RCC_GetHCLKFreq>
 8005eac:	4602      	mov	r2, r0
 8005eae:	4b05      	ldr	r3, [pc, #20]	; (8005ec4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005eb0:	689b      	ldr	r3, [r3, #8]
 8005eb2:	0b5b      	lsrs	r3, r3, #13
 8005eb4:	f003 0307 	and.w	r3, r3, #7
 8005eb8:	4903      	ldr	r1, [pc, #12]	; (8005ec8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005eba:	5ccb      	ldrb	r3, [r1, r3]
 8005ebc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005ec0:	4618      	mov	r0, r3
 8005ec2:	bd80      	pop	{r7, pc}
 8005ec4:	40023800 	.word	0x40023800
 8005ec8:	0800f598 	.word	0x0800f598

08005ecc <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8005ecc:	b480      	push	{r7}
 8005ece:	b083      	sub	sp, #12
 8005ed0:	af00      	add	r7, sp, #0
 8005ed2:	6078      	str	r0, [r7, #4]
 8005ed4:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	220f      	movs	r2, #15
 8005eda:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8005edc:	4b12      	ldr	r3, [pc, #72]	; (8005f28 <HAL_RCC_GetClockConfig+0x5c>)
 8005ede:	689b      	ldr	r3, [r3, #8]
 8005ee0:	f003 0203 	and.w	r2, r3, #3
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8005ee8:	4b0f      	ldr	r3, [pc, #60]	; (8005f28 <HAL_RCC_GetClockConfig+0x5c>)
 8005eea:	689b      	ldr	r3, [r3, #8]
 8005eec:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8005ef4:	4b0c      	ldr	r3, [pc, #48]	; (8005f28 <HAL_RCC_GetClockConfig+0x5c>)
 8005ef6:	689b      	ldr	r3, [r3, #8]
 8005ef8:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8005f00:	4b09      	ldr	r3, [pc, #36]	; (8005f28 <HAL_RCC_GetClockConfig+0x5c>)
 8005f02:	689b      	ldr	r3, [r3, #8]
 8005f04:	08db      	lsrs	r3, r3, #3
 8005f06:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8005f0e:	4b07      	ldr	r3, [pc, #28]	; (8005f2c <HAL_RCC_GetClockConfig+0x60>)
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	f003 0207 	and.w	r2, r3, #7
 8005f16:	683b      	ldr	r3, [r7, #0]
 8005f18:	601a      	str	r2, [r3, #0]
}
 8005f1a:	bf00      	nop
 8005f1c:	370c      	adds	r7, #12
 8005f1e:	46bd      	mov	sp, r7
 8005f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f24:	4770      	bx	lr
 8005f26:	bf00      	nop
 8005f28:	40023800 	.word	0x40023800
 8005f2c:	40023c00 	.word	0x40023c00

08005f30 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005f30:	b580      	push	{r7, lr}
 8005f32:	b086      	sub	sp, #24
 8005f34:	af00      	add	r7, sp, #0
 8005f36:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005f38:	2300      	movs	r3, #0
 8005f3a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8005f3c:	2300      	movs	r3, #0
 8005f3e:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	f003 0301 	and.w	r3, r3, #1
 8005f48:	2b00      	cmp	r3, #0
 8005f4a:	d105      	bne.n	8005f58 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8005f54:	2b00      	cmp	r3, #0
 8005f56:	d035      	beq.n	8005fc4 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8005f58:	4b62      	ldr	r3, [pc, #392]	; (80060e4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8005f5a:	2200      	movs	r2, #0
 8005f5c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005f5e:	f7fd f84d 	bl	8002ffc <HAL_GetTick>
 8005f62:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005f64:	e008      	b.n	8005f78 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8005f66:	f7fd f849 	bl	8002ffc <HAL_GetTick>
 8005f6a:	4602      	mov	r2, r0
 8005f6c:	697b      	ldr	r3, [r7, #20]
 8005f6e:	1ad3      	subs	r3, r2, r3
 8005f70:	2b02      	cmp	r3, #2
 8005f72:	d901      	bls.n	8005f78 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005f74:	2303      	movs	r3, #3
 8005f76:	e0b0      	b.n	80060da <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005f78:	4b5b      	ldr	r3, [pc, #364]	; (80060e8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005f80:	2b00      	cmp	r3, #0
 8005f82:	d1f0      	bne.n	8005f66 <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	685b      	ldr	r3, [r3, #4]
 8005f88:	019a      	lsls	r2, r3, #6
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	689b      	ldr	r3, [r3, #8]
 8005f8e:	071b      	lsls	r3, r3, #28
 8005f90:	4955      	ldr	r1, [pc, #340]	; (80060e8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005f92:	4313      	orrs	r3, r2
 8005f94:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8005f98:	4b52      	ldr	r3, [pc, #328]	; (80060e4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8005f9a:	2201      	movs	r2, #1
 8005f9c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005f9e:	f7fd f82d 	bl	8002ffc <HAL_GetTick>
 8005fa2:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005fa4:	e008      	b.n	8005fb8 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8005fa6:	f7fd f829 	bl	8002ffc <HAL_GetTick>
 8005faa:	4602      	mov	r2, r0
 8005fac:	697b      	ldr	r3, [r7, #20]
 8005fae:	1ad3      	subs	r3, r2, r3
 8005fb0:	2b02      	cmp	r3, #2
 8005fb2:	d901      	bls.n	8005fb8 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005fb4:	2303      	movs	r3, #3
 8005fb6:	e090      	b.n	80060da <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005fb8:	4b4b      	ldr	r3, [pc, #300]	; (80060e8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005fc0:	2b00      	cmp	r3, #0
 8005fc2:	d0f0      	beq.n	8005fa6 <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	f003 0302 	and.w	r3, r3, #2
 8005fcc:	2b00      	cmp	r3, #0
 8005fce:	f000 8083 	beq.w	80060d8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8005fd2:	2300      	movs	r3, #0
 8005fd4:	60fb      	str	r3, [r7, #12]
 8005fd6:	4b44      	ldr	r3, [pc, #272]	; (80060e8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005fd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005fda:	4a43      	ldr	r2, [pc, #268]	; (80060e8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005fdc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005fe0:	6413      	str	r3, [r2, #64]	; 0x40
 8005fe2:	4b41      	ldr	r3, [pc, #260]	; (80060e8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005fe4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005fe6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005fea:	60fb      	str	r3, [r7, #12]
 8005fec:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8005fee:	4b3f      	ldr	r3, [pc, #252]	; (80060ec <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	4a3e      	ldr	r2, [pc, #248]	; (80060ec <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8005ff4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005ff8:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8005ffa:	f7fc ffff 	bl	8002ffc <HAL_GetTick>
 8005ffe:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8006000:	e008      	b.n	8006014 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8006002:	f7fc fffb 	bl	8002ffc <HAL_GetTick>
 8006006:	4602      	mov	r2, r0
 8006008:	697b      	ldr	r3, [r7, #20]
 800600a:	1ad3      	subs	r3, r2, r3
 800600c:	2b02      	cmp	r3, #2
 800600e:	d901      	bls.n	8006014 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8006010:	2303      	movs	r3, #3
 8006012:	e062      	b.n	80060da <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8006014:	4b35      	ldr	r3, [pc, #212]	; (80060ec <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800601c:	2b00      	cmp	r3, #0
 800601e:	d0f0      	beq.n	8006002 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8006020:	4b31      	ldr	r3, [pc, #196]	; (80060e8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006022:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006024:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006028:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800602a:	693b      	ldr	r3, [r7, #16]
 800602c:	2b00      	cmp	r3, #0
 800602e:	d02f      	beq.n	8006090 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	68db      	ldr	r3, [r3, #12]
 8006034:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006038:	693a      	ldr	r2, [r7, #16]
 800603a:	429a      	cmp	r2, r3
 800603c:	d028      	beq.n	8006090 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800603e:	4b2a      	ldr	r3, [pc, #168]	; (80060e8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006040:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006042:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006046:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8006048:	4b29      	ldr	r3, [pc, #164]	; (80060f0 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800604a:	2201      	movs	r2, #1
 800604c:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800604e:	4b28      	ldr	r3, [pc, #160]	; (80060f0 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8006050:	2200      	movs	r2, #0
 8006052:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8006054:	4a24      	ldr	r2, [pc, #144]	; (80060e8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006056:	693b      	ldr	r3, [r7, #16]
 8006058:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800605a:	4b23      	ldr	r3, [pc, #140]	; (80060e8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800605c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800605e:	f003 0301 	and.w	r3, r3, #1
 8006062:	2b01      	cmp	r3, #1
 8006064:	d114      	bne.n	8006090 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8006066:	f7fc ffc9 	bl	8002ffc <HAL_GetTick>
 800606a:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800606c:	e00a      	b.n	8006084 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800606e:	f7fc ffc5 	bl	8002ffc <HAL_GetTick>
 8006072:	4602      	mov	r2, r0
 8006074:	697b      	ldr	r3, [r7, #20]
 8006076:	1ad3      	subs	r3, r2, r3
 8006078:	f241 3288 	movw	r2, #5000	; 0x1388
 800607c:	4293      	cmp	r3, r2
 800607e:	d901      	bls.n	8006084 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8006080:	2303      	movs	r3, #3
 8006082:	e02a      	b.n	80060da <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006084:	4b18      	ldr	r3, [pc, #96]	; (80060e8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006086:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006088:	f003 0302 	and.w	r3, r3, #2
 800608c:	2b00      	cmp	r3, #0
 800608e:	d0ee      	beq.n	800606e <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	68db      	ldr	r3, [r3, #12]
 8006094:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006098:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800609c:	d10d      	bne.n	80060ba <HAL_RCCEx_PeriphCLKConfig+0x18a>
 800609e:	4b12      	ldr	r3, [pc, #72]	; (80060e8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80060a0:	689b      	ldr	r3, [r3, #8]
 80060a2:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	68db      	ldr	r3, [r3, #12]
 80060aa:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80060ae:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80060b2:	490d      	ldr	r1, [pc, #52]	; (80060e8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80060b4:	4313      	orrs	r3, r2
 80060b6:	608b      	str	r3, [r1, #8]
 80060b8:	e005      	b.n	80060c6 <HAL_RCCEx_PeriphCLKConfig+0x196>
 80060ba:	4b0b      	ldr	r3, [pc, #44]	; (80060e8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80060bc:	689b      	ldr	r3, [r3, #8]
 80060be:	4a0a      	ldr	r2, [pc, #40]	; (80060e8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80060c0:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80060c4:	6093      	str	r3, [r2, #8]
 80060c6:	4b08      	ldr	r3, [pc, #32]	; (80060e8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80060c8:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	68db      	ldr	r3, [r3, #12]
 80060ce:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80060d2:	4905      	ldr	r1, [pc, #20]	; (80060e8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80060d4:	4313      	orrs	r3, r2
 80060d6:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 80060d8:	2300      	movs	r3, #0
}
 80060da:	4618      	mov	r0, r3
 80060dc:	3718      	adds	r7, #24
 80060de:	46bd      	mov	sp, r7
 80060e0:	bd80      	pop	{r7, pc}
 80060e2:	bf00      	nop
 80060e4:	42470068 	.word	0x42470068
 80060e8:	40023800 	.word	0x40023800
 80060ec:	40007000 	.word	0x40007000
 80060f0:	42470e40 	.word	0x42470e40

080060f4 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80060f4:	b580      	push	{r7, lr}
 80060f6:	b082      	sub	sp, #8
 80060f8:	af00      	add	r7, sp, #0
 80060fa:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if(hrtc == NULL)
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	2b00      	cmp	r3, #0
 8006100:	d101      	bne.n	8006106 <HAL_RTC_Init+0x12>
  {
     return HAL_ERROR;
 8006102:	2301      	movs	r3, #1
 8006104:	e083      	b.n	800620e <HAL_RTC_Init+0x11a>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if(hrtc->State == HAL_RTC_STATE_RESET)
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	7f5b      	ldrb	r3, [r3, #29]
 800610a:	b2db      	uxtb	r3, r3
 800610c:	2b00      	cmp	r3, #0
 800610e:	d105      	bne.n	800611c <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	2200      	movs	r2, #0
 8006114:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8006116:	6878      	ldr	r0, [r7, #4]
 8006118:	f7fc f868 	bl	80021ec <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	2202      	movs	r2, #2
 8006120:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	22ca      	movs	r2, #202	; 0xca
 8006128:	625a      	str	r2, [r3, #36]	; 0x24
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	2253      	movs	r2, #83	; 0x53
 8006130:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8006132:	6878      	ldr	r0, [r7, #4]
 8006134:	f000 f897 	bl	8006266 <RTC_EnterInitMode>
 8006138:	4603      	mov	r3, r0
 800613a:	2b00      	cmp	r3, #0
 800613c:	d008      	beq.n	8006150 <HAL_RTC_Init+0x5c>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	22ff      	movs	r2, #255	; 0xff
 8006144:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	2204      	movs	r2, #4
 800614a:	775a      	strb	r2, [r3, #29]

    return HAL_ERROR;
 800614c:	2301      	movs	r3, #1
 800614e:	e05e      	b.n	800620e <HAL_RTC_Init+0x11a>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	689b      	ldr	r3, [r3, #8]
 8006156:	687a      	ldr	r2, [r7, #4]
 8006158:	6812      	ldr	r2, [r2, #0]
 800615a:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800615e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006162:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	6899      	ldr	r1, [r3, #8]
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	685a      	ldr	r2, [r3, #4]
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	691b      	ldr	r3, [r3, #16]
 8006172:	431a      	orrs	r2, r3
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	695b      	ldr	r3, [r3, #20]
 8006178:	431a      	orrs	r2, r3
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	430a      	orrs	r2, r1
 8006180:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	687a      	ldr	r2, [r7, #4]
 8006188:	68d2      	ldr	r2, [r2, #12]
 800618a:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	6919      	ldr	r1, [r3, #16]
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	689b      	ldr	r3, [r3, #8]
 8006196:	041a      	lsls	r2, r3, #16
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	430a      	orrs	r2, r1
 800619e:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	68da      	ldr	r2, [r3, #12]
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80061ae:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	689b      	ldr	r3, [r3, #8]
 80061b6:	f003 0320 	and.w	r3, r3, #32
 80061ba:	2b00      	cmp	r3, #0
 80061bc:	d10e      	bne.n	80061dc <HAL_RTC_Init+0xe8>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80061be:	6878      	ldr	r0, [r7, #4]
 80061c0:	f000 f829 	bl	8006216 <HAL_RTC_WaitForSynchro>
 80061c4:	4603      	mov	r3, r0
 80061c6:	2b00      	cmp	r3, #0
 80061c8:	d008      	beq.n	80061dc <HAL_RTC_Init+0xe8>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	22ff      	movs	r2, #255	; 0xff
 80061d0:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	2204      	movs	r2, #4
 80061d6:	775a      	strb	r2, [r3, #29]

        return HAL_ERROR;
 80061d8:	2301      	movs	r3, #1
 80061da:	e018      	b.n	800620e <HAL_RTC_Init+0x11a>
      }
    }

    hrtc->Instance->TAFCR &= (uint32_t)~RTC_TAFCR_ALARMOUTTYPE;
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80061ea:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	6c19      	ldr	r1, [r3, #64]	; 0x40
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	699a      	ldr	r2, [r3, #24]
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	430a      	orrs	r2, r1
 80061fc:	641a      	str	r2, [r3, #64]	; 0x40

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	22ff      	movs	r2, #255	; 0xff
 8006204:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	2201      	movs	r2, #1
 800620a:	775a      	strb	r2, [r3, #29]

    return HAL_OK;
 800620c:	2300      	movs	r3, #0
  }
}
 800620e:	4618      	mov	r0, r3
 8006210:	3708      	adds	r7, #8
 8006212:	46bd      	mov	sp, r7
 8006214:	bd80      	pop	{r7, pc}

08006216 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 8006216:	b580      	push	{r7, lr}
 8006218:	b084      	sub	sp, #16
 800621a:	af00      	add	r7, sp, #0
 800621c:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800621e:	2300      	movs	r3, #0
 8006220:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	68da      	ldr	r2, [r3, #12]
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8006230:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8006232:	f7fc fee3 	bl	8002ffc <HAL_GetTick>
 8006236:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8006238:	e009      	b.n	800624e <HAL_RTC_WaitForSynchro+0x38>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 800623a:	f7fc fedf 	bl	8002ffc <HAL_GetTick>
 800623e:	4602      	mov	r2, r0
 8006240:	68fb      	ldr	r3, [r7, #12]
 8006242:	1ad3      	subs	r3, r2, r3
 8006244:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006248:	d901      	bls.n	800624e <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 800624a:	2303      	movs	r3, #3
 800624c:	e007      	b.n	800625e <HAL_RTC_WaitForSynchro+0x48>
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	68db      	ldr	r3, [r3, #12]
 8006254:	f003 0320 	and.w	r3, r3, #32
 8006258:	2b00      	cmp	r3, #0
 800625a:	d0ee      	beq.n	800623a <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 800625c:	2300      	movs	r3, #0
}
 800625e:	4618      	mov	r0, r3
 8006260:	3710      	adds	r7, #16
 8006262:	46bd      	mov	sp, r7
 8006264:	bd80      	pop	{r7, pc}

08006266 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 8006266:	b580      	push	{r7, lr}
 8006268:	b084      	sub	sp, #16
 800626a:	af00      	add	r7, sp, #0
 800626c:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800626e:	2300      	movs	r3, #0
 8006270:	60fb      	str	r3, [r7, #12]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	68db      	ldr	r3, [r3, #12]
 8006278:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800627c:	2b00      	cmp	r3, #0
 800627e:	d119      	bne.n	80062b4 <RTC_EnterInitMode+0x4e>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	f04f 32ff 	mov.w	r2, #4294967295
 8006288:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 800628a:	f7fc feb7 	bl	8002ffc <HAL_GetTick>
 800628e:	60f8      	str	r0, [r7, #12]

    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8006290:	e009      	b.n	80062a6 <RTC_EnterInitMode+0x40>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8006292:	f7fc feb3 	bl	8002ffc <HAL_GetTick>
 8006296:	4602      	mov	r2, r0
 8006298:	68fb      	ldr	r3, [r7, #12]
 800629a:	1ad3      	subs	r3, r2, r3
 800629c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80062a0:	d901      	bls.n	80062a6 <RTC_EnterInitMode+0x40>
      {
        return HAL_TIMEOUT;
 80062a2:	2303      	movs	r3, #3
 80062a4:	e007      	b.n	80062b6 <RTC_EnterInitMode+0x50>
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	68db      	ldr	r3, [r3, #12]
 80062ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80062b0:	2b00      	cmp	r3, #0
 80062b2:	d0ee      	beq.n	8006292 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return HAL_OK;
 80062b4:	2300      	movs	r3, #0
}
 80062b6:	4618      	mov	r0, r3
 80062b8:	3710      	adds	r7, #16
 80062ba:	46bd      	mov	sp, r7
 80062bc:	bd80      	pop	{r7, pc}

080062be <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80062be:	b580      	push	{r7, lr}
 80062c0:	b082      	sub	sp, #8
 80062c2:	af00      	add	r7, sp, #0
 80062c4:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	2b00      	cmp	r3, #0
 80062ca:	d101      	bne.n	80062d0 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80062cc:	2301      	movs	r3, #1
 80062ce:	e07b      	b.n	80063c8 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062d4:	2b00      	cmp	r3, #0
 80062d6:	d108      	bne.n	80062ea <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	685b      	ldr	r3, [r3, #4]
 80062dc:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80062e0:	d009      	beq.n	80062f6 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	2200      	movs	r2, #0
 80062e6:	61da      	str	r2, [r3, #28]
 80062e8:	e005      	b.n	80062f6 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	2200      	movs	r2, #0
 80062ee:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	2200      	movs	r2, #0
 80062f4:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	2200      	movs	r2, #0
 80062fa:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006302:	b2db      	uxtb	r3, r3
 8006304:	2b00      	cmp	r3, #0
 8006306:	d106      	bne.n	8006316 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	2200      	movs	r2, #0
 800630c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006310:	6878      	ldr	r0, [r7, #4]
 8006312:	f7fb ffb7 	bl	8002284 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	2202      	movs	r2, #2
 800631a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	681a      	ldr	r2, [r3, #0]
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800632c:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	685b      	ldr	r3, [r3, #4]
 8006332:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	689b      	ldr	r3, [r3, #8]
 800633a:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800633e:	431a      	orrs	r2, r3
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	68db      	ldr	r3, [r3, #12]
 8006344:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006348:	431a      	orrs	r2, r3
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	691b      	ldr	r3, [r3, #16]
 800634e:	f003 0302 	and.w	r3, r3, #2
 8006352:	431a      	orrs	r2, r3
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	695b      	ldr	r3, [r3, #20]
 8006358:	f003 0301 	and.w	r3, r3, #1
 800635c:	431a      	orrs	r2, r3
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	699b      	ldr	r3, [r3, #24]
 8006362:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006366:	431a      	orrs	r2, r3
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	69db      	ldr	r3, [r3, #28]
 800636c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006370:	431a      	orrs	r2, r3
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	6a1b      	ldr	r3, [r3, #32]
 8006376:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800637a:	ea42 0103 	orr.w	r1, r2, r3
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006382:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	430a      	orrs	r2, r1
 800638c:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	699b      	ldr	r3, [r3, #24]
 8006392:	0c1b      	lsrs	r3, r3, #16
 8006394:	f003 0104 	and.w	r1, r3, #4
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800639c:	f003 0210 	and.w	r2, r3, #16
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	430a      	orrs	r2, r1
 80063a6:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	69da      	ldr	r2, [r3, #28]
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80063b6:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	2200      	movs	r2, #0
 80063bc:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	2201      	movs	r2, #1
 80063c2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80063c6:	2300      	movs	r3, #0
}
 80063c8:	4618      	mov	r0, r3
 80063ca:	3708      	adds	r7, #8
 80063cc:	46bd      	mov	sp, r7
 80063ce:	bd80      	pop	{r7, pc}

080063d0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80063d0:	b580      	push	{r7, lr}
 80063d2:	b082      	sub	sp, #8
 80063d4:	af00      	add	r7, sp, #0
 80063d6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	2b00      	cmp	r3, #0
 80063dc:	d101      	bne.n	80063e2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80063de:	2301      	movs	r3, #1
 80063e0:	e041      	b.n	8006466 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80063e8:	b2db      	uxtb	r3, r3
 80063ea:	2b00      	cmp	r3, #0
 80063ec:	d106      	bne.n	80063fc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	2200      	movs	r2, #0
 80063f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80063f6:	6878      	ldr	r0, [r7, #4]
 80063f8:	f7fc faa2 	bl	8002940 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	2202      	movs	r2, #2
 8006400:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	681a      	ldr	r2, [r3, #0]
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	3304      	adds	r3, #4
 800640c:	4619      	mov	r1, r3
 800640e:	4610      	mov	r0, r2
 8006410:	f000 fba8 	bl	8006b64 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	2201      	movs	r2, #1
 8006418:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	2201      	movs	r2, #1
 8006420:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	2201      	movs	r2, #1
 8006428:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	2201      	movs	r2, #1
 8006430:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	2201      	movs	r2, #1
 8006438:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	2201      	movs	r2, #1
 8006440:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	2201      	movs	r2, #1
 8006448:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	2201      	movs	r2, #1
 8006450:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	2201      	movs	r2, #1
 8006458:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	2201      	movs	r2, #1
 8006460:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006464:	2300      	movs	r3, #0
}
 8006466:	4618      	mov	r0, r3
 8006468:	3708      	adds	r7, #8
 800646a:	46bd      	mov	sp, r7
 800646c:	bd80      	pop	{r7, pc}
	...

08006470 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006470:	b480      	push	{r7}
 8006472:	b085      	sub	sp, #20
 8006474:	af00      	add	r7, sp, #0
 8006476:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800647e:	b2db      	uxtb	r3, r3
 8006480:	2b01      	cmp	r3, #1
 8006482:	d001      	beq.n	8006488 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006484:	2301      	movs	r3, #1
 8006486:	e04e      	b.n	8006526 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	2202      	movs	r2, #2
 800648c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	68da      	ldr	r2, [r3, #12]
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	f042 0201 	orr.w	r2, r2, #1
 800649e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	4a23      	ldr	r2, [pc, #140]	; (8006534 <HAL_TIM_Base_Start_IT+0xc4>)
 80064a6:	4293      	cmp	r3, r2
 80064a8:	d022      	beq.n	80064f0 <HAL_TIM_Base_Start_IT+0x80>
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80064b2:	d01d      	beq.n	80064f0 <HAL_TIM_Base_Start_IT+0x80>
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	4a1f      	ldr	r2, [pc, #124]	; (8006538 <HAL_TIM_Base_Start_IT+0xc8>)
 80064ba:	4293      	cmp	r3, r2
 80064bc:	d018      	beq.n	80064f0 <HAL_TIM_Base_Start_IT+0x80>
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	4a1e      	ldr	r2, [pc, #120]	; (800653c <HAL_TIM_Base_Start_IT+0xcc>)
 80064c4:	4293      	cmp	r3, r2
 80064c6:	d013      	beq.n	80064f0 <HAL_TIM_Base_Start_IT+0x80>
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	4a1c      	ldr	r2, [pc, #112]	; (8006540 <HAL_TIM_Base_Start_IT+0xd0>)
 80064ce:	4293      	cmp	r3, r2
 80064d0:	d00e      	beq.n	80064f0 <HAL_TIM_Base_Start_IT+0x80>
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	681b      	ldr	r3, [r3, #0]
 80064d6:	4a1b      	ldr	r2, [pc, #108]	; (8006544 <HAL_TIM_Base_Start_IT+0xd4>)
 80064d8:	4293      	cmp	r3, r2
 80064da:	d009      	beq.n	80064f0 <HAL_TIM_Base_Start_IT+0x80>
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	4a19      	ldr	r2, [pc, #100]	; (8006548 <HAL_TIM_Base_Start_IT+0xd8>)
 80064e2:	4293      	cmp	r3, r2
 80064e4:	d004      	beq.n	80064f0 <HAL_TIM_Base_Start_IT+0x80>
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	4a18      	ldr	r2, [pc, #96]	; (800654c <HAL_TIM_Base_Start_IT+0xdc>)
 80064ec:	4293      	cmp	r3, r2
 80064ee:	d111      	bne.n	8006514 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	689b      	ldr	r3, [r3, #8]
 80064f6:	f003 0307 	and.w	r3, r3, #7
 80064fa:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80064fc:	68fb      	ldr	r3, [r7, #12]
 80064fe:	2b06      	cmp	r3, #6
 8006500:	d010      	beq.n	8006524 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	681a      	ldr	r2, [r3, #0]
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	f042 0201 	orr.w	r2, r2, #1
 8006510:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006512:	e007      	b.n	8006524 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	681a      	ldr	r2, [r3, #0]
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	f042 0201 	orr.w	r2, r2, #1
 8006522:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006524:	2300      	movs	r3, #0
}
 8006526:	4618      	mov	r0, r3
 8006528:	3714      	adds	r7, #20
 800652a:	46bd      	mov	sp, r7
 800652c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006530:	4770      	bx	lr
 8006532:	bf00      	nop
 8006534:	40010000 	.word	0x40010000
 8006538:	40000400 	.word	0x40000400
 800653c:	40000800 	.word	0x40000800
 8006540:	40000c00 	.word	0x40000c00
 8006544:	40010400 	.word	0x40010400
 8006548:	40014000 	.word	0x40014000
 800654c:	40001800 	.word	0x40001800

08006550 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8006550:	b580      	push	{r7, lr}
 8006552:	b082      	sub	sp, #8
 8006554:	af00      	add	r7, sp, #0
 8006556:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	2b00      	cmp	r3, #0
 800655c:	d101      	bne.n	8006562 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800655e:	2301      	movs	r3, #1
 8006560:	e041      	b.n	80065e6 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006568:	b2db      	uxtb	r3, r3
 800656a:	2b00      	cmp	r3, #0
 800656c:	d106      	bne.n	800657c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	2200      	movs	r2, #0
 8006572:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8006576:	6878      	ldr	r0, [r7, #4]
 8006578:	f7fc fa1a 	bl	80029b0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	2202      	movs	r2, #2
 8006580:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	681a      	ldr	r2, [r3, #0]
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	3304      	adds	r3, #4
 800658c:	4619      	mov	r1, r3
 800658e:	4610      	mov	r0, r2
 8006590:	f000 fae8 	bl	8006b64 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	2201      	movs	r2, #1
 8006598:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	2201      	movs	r2, #1
 80065a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	2201      	movs	r2, #1
 80065a8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	2201      	movs	r2, #1
 80065b0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	2201      	movs	r2, #1
 80065b8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	2201      	movs	r2, #1
 80065c0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	2201      	movs	r2, #1
 80065c8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	2201      	movs	r2, #1
 80065d0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	2201      	movs	r2, #1
 80065d8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	2201      	movs	r2, #1
 80065e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80065e4:	2300      	movs	r3, #0
}
 80065e6:	4618      	mov	r0, r3
 80065e8:	3708      	adds	r7, #8
 80065ea:	46bd      	mov	sp, r7
 80065ec:	bd80      	pop	{r7, pc}

080065ee <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80065ee:	b580      	push	{r7, lr}
 80065f0:	b082      	sub	sp, #8
 80065f2:	af00      	add	r7, sp, #0
 80065f4:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	681b      	ldr	r3, [r3, #0]
 80065fa:	691b      	ldr	r3, [r3, #16]
 80065fc:	f003 0302 	and.w	r3, r3, #2
 8006600:	2b02      	cmp	r3, #2
 8006602:	d122      	bne.n	800664a <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	68db      	ldr	r3, [r3, #12]
 800660a:	f003 0302 	and.w	r3, r3, #2
 800660e:	2b02      	cmp	r3, #2
 8006610:	d11b      	bne.n	800664a <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	f06f 0202 	mvn.w	r2, #2
 800661a:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	2201      	movs	r2, #1
 8006620:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	681b      	ldr	r3, [r3, #0]
 8006626:	699b      	ldr	r3, [r3, #24]
 8006628:	f003 0303 	and.w	r3, r3, #3
 800662c:	2b00      	cmp	r3, #0
 800662e:	d003      	beq.n	8006638 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006630:	6878      	ldr	r0, [r7, #4]
 8006632:	f000 fa78 	bl	8006b26 <HAL_TIM_IC_CaptureCallback>
 8006636:	e005      	b.n	8006644 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006638:	6878      	ldr	r0, [r7, #4]
 800663a:	f000 fa6a 	bl	8006b12 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800663e:	6878      	ldr	r0, [r7, #4]
 8006640:	f000 fa7b 	bl	8006b3a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	2200      	movs	r2, #0
 8006648:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	691b      	ldr	r3, [r3, #16]
 8006650:	f003 0304 	and.w	r3, r3, #4
 8006654:	2b04      	cmp	r3, #4
 8006656:	d122      	bne.n	800669e <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	68db      	ldr	r3, [r3, #12]
 800665e:	f003 0304 	and.w	r3, r3, #4
 8006662:	2b04      	cmp	r3, #4
 8006664:	d11b      	bne.n	800669e <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	681b      	ldr	r3, [r3, #0]
 800666a:	f06f 0204 	mvn.w	r2, #4
 800666e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	2202      	movs	r2, #2
 8006674:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	681b      	ldr	r3, [r3, #0]
 800667a:	699b      	ldr	r3, [r3, #24]
 800667c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006680:	2b00      	cmp	r3, #0
 8006682:	d003      	beq.n	800668c <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006684:	6878      	ldr	r0, [r7, #4]
 8006686:	f000 fa4e 	bl	8006b26 <HAL_TIM_IC_CaptureCallback>
 800668a:	e005      	b.n	8006698 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800668c:	6878      	ldr	r0, [r7, #4]
 800668e:	f000 fa40 	bl	8006b12 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006692:	6878      	ldr	r0, [r7, #4]
 8006694:	f000 fa51 	bl	8006b3a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	2200      	movs	r2, #0
 800669c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	681b      	ldr	r3, [r3, #0]
 80066a2:	691b      	ldr	r3, [r3, #16]
 80066a4:	f003 0308 	and.w	r3, r3, #8
 80066a8:	2b08      	cmp	r3, #8
 80066aa:	d122      	bne.n	80066f2 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	681b      	ldr	r3, [r3, #0]
 80066b0:	68db      	ldr	r3, [r3, #12]
 80066b2:	f003 0308 	and.w	r3, r3, #8
 80066b6:	2b08      	cmp	r3, #8
 80066b8:	d11b      	bne.n	80066f2 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	681b      	ldr	r3, [r3, #0]
 80066be:	f06f 0208 	mvn.w	r2, #8
 80066c2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	2204      	movs	r2, #4
 80066c8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	681b      	ldr	r3, [r3, #0]
 80066ce:	69db      	ldr	r3, [r3, #28]
 80066d0:	f003 0303 	and.w	r3, r3, #3
 80066d4:	2b00      	cmp	r3, #0
 80066d6:	d003      	beq.n	80066e0 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80066d8:	6878      	ldr	r0, [r7, #4]
 80066da:	f000 fa24 	bl	8006b26 <HAL_TIM_IC_CaptureCallback>
 80066de:	e005      	b.n	80066ec <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80066e0:	6878      	ldr	r0, [r7, #4]
 80066e2:	f000 fa16 	bl	8006b12 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80066e6:	6878      	ldr	r0, [r7, #4]
 80066e8:	f000 fa27 	bl	8006b3a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	2200      	movs	r2, #0
 80066f0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	681b      	ldr	r3, [r3, #0]
 80066f6:	691b      	ldr	r3, [r3, #16]
 80066f8:	f003 0310 	and.w	r3, r3, #16
 80066fc:	2b10      	cmp	r3, #16
 80066fe:	d122      	bne.n	8006746 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	681b      	ldr	r3, [r3, #0]
 8006704:	68db      	ldr	r3, [r3, #12]
 8006706:	f003 0310 	and.w	r3, r3, #16
 800670a:	2b10      	cmp	r3, #16
 800670c:	d11b      	bne.n	8006746 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	681b      	ldr	r3, [r3, #0]
 8006712:	f06f 0210 	mvn.w	r2, #16
 8006716:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	2208      	movs	r2, #8
 800671c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	681b      	ldr	r3, [r3, #0]
 8006722:	69db      	ldr	r3, [r3, #28]
 8006724:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006728:	2b00      	cmp	r3, #0
 800672a:	d003      	beq.n	8006734 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800672c:	6878      	ldr	r0, [r7, #4]
 800672e:	f000 f9fa 	bl	8006b26 <HAL_TIM_IC_CaptureCallback>
 8006732:	e005      	b.n	8006740 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006734:	6878      	ldr	r0, [r7, #4]
 8006736:	f000 f9ec 	bl	8006b12 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800673a:	6878      	ldr	r0, [r7, #4]
 800673c:	f000 f9fd 	bl	8006b3a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	2200      	movs	r2, #0
 8006744:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	681b      	ldr	r3, [r3, #0]
 800674a:	691b      	ldr	r3, [r3, #16]
 800674c:	f003 0301 	and.w	r3, r3, #1
 8006750:	2b01      	cmp	r3, #1
 8006752:	d10e      	bne.n	8006772 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	681b      	ldr	r3, [r3, #0]
 8006758:	68db      	ldr	r3, [r3, #12]
 800675a:	f003 0301 	and.w	r3, r3, #1
 800675e:	2b01      	cmp	r3, #1
 8006760:	d107      	bne.n	8006772 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	681b      	ldr	r3, [r3, #0]
 8006766:	f06f 0201 	mvn.w	r2, #1
 800676a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800676c:	6878      	ldr	r0, [r7, #4]
 800676e:	f7fb fcff 	bl	8002170 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	681b      	ldr	r3, [r3, #0]
 8006776:	691b      	ldr	r3, [r3, #16]
 8006778:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800677c:	2b80      	cmp	r3, #128	; 0x80
 800677e:	d10e      	bne.n	800679e <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	681b      	ldr	r3, [r3, #0]
 8006784:	68db      	ldr	r3, [r3, #12]
 8006786:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800678a:	2b80      	cmp	r3, #128	; 0x80
 800678c:	d107      	bne.n	800679e <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	681b      	ldr	r3, [r3, #0]
 8006792:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006796:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006798:	6878      	ldr	r0, [r7, #4]
 800679a:	f000 fd53 	bl	8007244 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	681b      	ldr	r3, [r3, #0]
 80067a2:	691b      	ldr	r3, [r3, #16]
 80067a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80067a8:	2b40      	cmp	r3, #64	; 0x40
 80067aa:	d10e      	bne.n	80067ca <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	68db      	ldr	r3, [r3, #12]
 80067b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80067b6:	2b40      	cmp	r3, #64	; 0x40
 80067b8:	d107      	bne.n	80067ca <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	681b      	ldr	r3, [r3, #0]
 80067be:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80067c2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80067c4:	6878      	ldr	r0, [r7, #4]
 80067c6:	f000 f9c2 	bl	8006b4e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	681b      	ldr	r3, [r3, #0]
 80067ce:	691b      	ldr	r3, [r3, #16]
 80067d0:	f003 0320 	and.w	r3, r3, #32
 80067d4:	2b20      	cmp	r3, #32
 80067d6:	d10e      	bne.n	80067f6 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	681b      	ldr	r3, [r3, #0]
 80067dc:	68db      	ldr	r3, [r3, #12]
 80067de:	f003 0320 	and.w	r3, r3, #32
 80067e2:	2b20      	cmp	r3, #32
 80067e4:	d107      	bne.n	80067f6 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	681b      	ldr	r3, [r3, #0]
 80067ea:	f06f 0220 	mvn.w	r2, #32
 80067ee:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80067f0:	6878      	ldr	r0, [r7, #4]
 80067f2:	f000 fd1d 	bl	8007230 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80067f6:	bf00      	nop
 80067f8:	3708      	adds	r7, #8
 80067fa:	46bd      	mov	sp, r7
 80067fc:	bd80      	pop	{r7, pc}
	...

08006800 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006800:	b580      	push	{r7, lr}
 8006802:	b086      	sub	sp, #24
 8006804:	af00      	add	r7, sp, #0
 8006806:	60f8      	str	r0, [r7, #12]
 8006808:	60b9      	str	r1, [r7, #8]
 800680a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800680c:	2300      	movs	r3, #0
 800680e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006810:	68fb      	ldr	r3, [r7, #12]
 8006812:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006816:	2b01      	cmp	r3, #1
 8006818:	d101      	bne.n	800681e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800681a:	2302      	movs	r3, #2
 800681c:	e0ae      	b.n	800697c <HAL_TIM_PWM_ConfigChannel+0x17c>
 800681e:	68fb      	ldr	r3, [r7, #12]
 8006820:	2201      	movs	r2, #1
 8006822:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	2b0c      	cmp	r3, #12
 800682a:	f200 809f 	bhi.w	800696c <HAL_TIM_PWM_ConfigChannel+0x16c>
 800682e:	a201      	add	r2, pc, #4	; (adr r2, 8006834 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8006830:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006834:	08006869 	.word	0x08006869
 8006838:	0800696d 	.word	0x0800696d
 800683c:	0800696d 	.word	0x0800696d
 8006840:	0800696d 	.word	0x0800696d
 8006844:	080068a9 	.word	0x080068a9
 8006848:	0800696d 	.word	0x0800696d
 800684c:	0800696d 	.word	0x0800696d
 8006850:	0800696d 	.word	0x0800696d
 8006854:	080068eb 	.word	0x080068eb
 8006858:	0800696d 	.word	0x0800696d
 800685c:	0800696d 	.word	0x0800696d
 8006860:	0800696d 	.word	0x0800696d
 8006864:	0800692b 	.word	0x0800692b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006868:	68fb      	ldr	r3, [r7, #12]
 800686a:	681b      	ldr	r3, [r3, #0]
 800686c:	68b9      	ldr	r1, [r7, #8]
 800686e:	4618      	mov	r0, r3
 8006870:	f000 fa18 	bl	8006ca4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006874:	68fb      	ldr	r3, [r7, #12]
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	699a      	ldr	r2, [r3, #24]
 800687a:	68fb      	ldr	r3, [r7, #12]
 800687c:	681b      	ldr	r3, [r3, #0]
 800687e:	f042 0208 	orr.w	r2, r2, #8
 8006882:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006884:	68fb      	ldr	r3, [r7, #12]
 8006886:	681b      	ldr	r3, [r3, #0]
 8006888:	699a      	ldr	r2, [r3, #24]
 800688a:	68fb      	ldr	r3, [r7, #12]
 800688c:	681b      	ldr	r3, [r3, #0]
 800688e:	f022 0204 	bic.w	r2, r2, #4
 8006892:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006894:	68fb      	ldr	r3, [r7, #12]
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	6999      	ldr	r1, [r3, #24]
 800689a:	68bb      	ldr	r3, [r7, #8]
 800689c:	691a      	ldr	r2, [r3, #16]
 800689e:	68fb      	ldr	r3, [r7, #12]
 80068a0:	681b      	ldr	r3, [r3, #0]
 80068a2:	430a      	orrs	r2, r1
 80068a4:	619a      	str	r2, [r3, #24]
      break;
 80068a6:	e064      	b.n	8006972 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80068a8:	68fb      	ldr	r3, [r7, #12]
 80068aa:	681b      	ldr	r3, [r3, #0]
 80068ac:	68b9      	ldr	r1, [r7, #8]
 80068ae:	4618      	mov	r0, r3
 80068b0:	f000 fa68 	bl	8006d84 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80068b4:	68fb      	ldr	r3, [r7, #12]
 80068b6:	681b      	ldr	r3, [r3, #0]
 80068b8:	699a      	ldr	r2, [r3, #24]
 80068ba:	68fb      	ldr	r3, [r7, #12]
 80068bc:	681b      	ldr	r3, [r3, #0]
 80068be:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80068c2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80068c4:	68fb      	ldr	r3, [r7, #12]
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	699a      	ldr	r2, [r3, #24]
 80068ca:	68fb      	ldr	r3, [r7, #12]
 80068cc:	681b      	ldr	r3, [r3, #0]
 80068ce:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80068d2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80068d4:	68fb      	ldr	r3, [r7, #12]
 80068d6:	681b      	ldr	r3, [r3, #0]
 80068d8:	6999      	ldr	r1, [r3, #24]
 80068da:	68bb      	ldr	r3, [r7, #8]
 80068dc:	691b      	ldr	r3, [r3, #16]
 80068de:	021a      	lsls	r2, r3, #8
 80068e0:	68fb      	ldr	r3, [r7, #12]
 80068e2:	681b      	ldr	r3, [r3, #0]
 80068e4:	430a      	orrs	r2, r1
 80068e6:	619a      	str	r2, [r3, #24]
      break;
 80068e8:	e043      	b.n	8006972 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80068ea:	68fb      	ldr	r3, [r7, #12]
 80068ec:	681b      	ldr	r3, [r3, #0]
 80068ee:	68b9      	ldr	r1, [r7, #8]
 80068f0:	4618      	mov	r0, r3
 80068f2:	f000 fabd 	bl	8006e70 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80068f6:	68fb      	ldr	r3, [r7, #12]
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	69da      	ldr	r2, [r3, #28]
 80068fc:	68fb      	ldr	r3, [r7, #12]
 80068fe:	681b      	ldr	r3, [r3, #0]
 8006900:	f042 0208 	orr.w	r2, r2, #8
 8006904:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006906:	68fb      	ldr	r3, [r7, #12]
 8006908:	681b      	ldr	r3, [r3, #0]
 800690a:	69da      	ldr	r2, [r3, #28]
 800690c:	68fb      	ldr	r3, [r7, #12]
 800690e:	681b      	ldr	r3, [r3, #0]
 8006910:	f022 0204 	bic.w	r2, r2, #4
 8006914:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006916:	68fb      	ldr	r3, [r7, #12]
 8006918:	681b      	ldr	r3, [r3, #0]
 800691a:	69d9      	ldr	r1, [r3, #28]
 800691c:	68bb      	ldr	r3, [r7, #8]
 800691e:	691a      	ldr	r2, [r3, #16]
 8006920:	68fb      	ldr	r3, [r7, #12]
 8006922:	681b      	ldr	r3, [r3, #0]
 8006924:	430a      	orrs	r2, r1
 8006926:	61da      	str	r2, [r3, #28]
      break;
 8006928:	e023      	b.n	8006972 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800692a:	68fb      	ldr	r3, [r7, #12]
 800692c:	681b      	ldr	r3, [r3, #0]
 800692e:	68b9      	ldr	r1, [r7, #8]
 8006930:	4618      	mov	r0, r3
 8006932:	f000 fb11 	bl	8006f58 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006936:	68fb      	ldr	r3, [r7, #12]
 8006938:	681b      	ldr	r3, [r3, #0]
 800693a:	69da      	ldr	r2, [r3, #28]
 800693c:	68fb      	ldr	r3, [r7, #12]
 800693e:	681b      	ldr	r3, [r3, #0]
 8006940:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006944:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006946:	68fb      	ldr	r3, [r7, #12]
 8006948:	681b      	ldr	r3, [r3, #0]
 800694a:	69da      	ldr	r2, [r3, #28]
 800694c:	68fb      	ldr	r3, [r7, #12]
 800694e:	681b      	ldr	r3, [r3, #0]
 8006950:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006954:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006956:	68fb      	ldr	r3, [r7, #12]
 8006958:	681b      	ldr	r3, [r3, #0]
 800695a:	69d9      	ldr	r1, [r3, #28]
 800695c:	68bb      	ldr	r3, [r7, #8]
 800695e:	691b      	ldr	r3, [r3, #16]
 8006960:	021a      	lsls	r2, r3, #8
 8006962:	68fb      	ldr	r3, [r7, #12]
 8006964:	681b      	ldr	r3, [r3, #0]
 8006966:	430a      	orrs	r2, r1
 8006968:	61da      	str	r2, [r3, #28]
      break;
 800696a:	e002      	b.n	8006972 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 800696c:	2301      	movs	r3, #1
 800696e:	75fb      	strb	r3, [r7, #23]
      break;
 8006970:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006972:	68fb      	ldr	r3, [r7, #12]
 8006974:	2200      	movs	r2, #0
 8006976:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800697a:	7dfb      	ldrb	r3, [r7, #23]
}
 800697c:	4618      	mov	r0, r3
 800697e:	3718      	adds	r7, #24
 8006980:	46bd      	mov	sp, r7
 8006982:	bd80      	pop	{r7, pc}

08006984 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006984:	b580      	push	{r7, lr}
 8006986:	b084      	sub	sp, #16
 8006988:	af00      	add	r7, sp, #0
 800698a:	6078      	str	r0, [r7, #4]
 800698c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800698e:	2300      	movs	r3, #0
 8006990:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006998:	2b01      	cmp	r3, #1
 800699a:	d101      	bne.n	80069a0 <HAL_TIM_ConfigClockSource+0x1c>
 800699c:	2302      	movs	r3, #2
 800699e:	e0b4      	b.n	8006b0a <HAL_TIM_ConfigClockSource+0x186>
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	2201      	movs	r2, #1
 80069a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	2202      	movs	r2, #2
 80069ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	681b      	ldr	r3, [r3, #0]
 80069b4:	689b      	ldr	r3, [r3, #8]
 80069b6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80069b8:	68bb      	ldr	r3, [r7, #8]
 80069ba:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80069be:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80069c0:	68bb      	ldr	r3, [r7, #8]
 80069c2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80069c6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	681b      	ldr	r3, [r3, #0]
 80069cc:	68ba      	ldr	r2, [r7, #8]
 80069ce:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80069d0:	683b      	ldr	r3, [r7, #0]
 80069d2:	681b      	ldr	r3, [r3, #0]
 80069d4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80069d8:	d03e      	beq.n	8006a58 <HAL_TIM_ConfigClockSource+0xd4>
 80069da:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80069de:	f200 8087 	bhi.w	8006af0 <HAL_TIM_ConfigClockSource+0x16c>
 80069e2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80069e6:	f000 8086 	beq.w	8006af6 <HAL_TIM_ConfigClockSource+0x172>
 80069ea:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80069ee:	d87f      	bhi.n	8006af0 <HAL_TIM_ConfigClockSource+0x16c>
 80069f0:	2b70      	cmp	r3, #112	; 0x70
 80069f2:	d01a      	beq.n	8006a2a <HAL_TIM_ConfigClockSource+0xa6>
 80069f4:	2b70      	cmp	r3, #112	; 0x70
 80069f6:	d87b      	bhi.n	8006af0 <HAL_TIM_ConfigClockSource+0x16c>
 80069f8:	2b60      	cmp	r3, #96	; 0x60
 80069fa:	d050      	beq.n	8006a9e <HAL_TIM_ConfigClockSource+0x11a>
 80069fc:	2b60      	cmp	r3, #96	; 0x60
 80069fe:	d877      	bhi.n	8006af0 <HAL_TIM_ConfigClockSource+0x16c>
 8006a00:	2b50      	cmp	r3, #80	; 0x50
 8006a02:	d03c      	beq.n	8006a7e <HAL_TIM_ConfigClockSource+0xfa>
 8006a04:	2b50      	cmp	r3, #80	; 0x50
 8006a06:	d873      	bhi.n	8006af0 <HAL_TIM_ConfigClockSource+0x16c>
 8006a08:	2b40      	cmp	r3, #64	; 0x40
 8006a0a:	d058      	beq.n	8006abe <HAL_TIM_ConfigClockSource+0x13a>
 8006a0c:	2b40      	cmp	r3, #64	; 0x40
 8006a0e:	d86f      	bhi.n	8006af0 <HAL_TIM_ConfigClockSource+0x16c>
 8006a10:	2b30      	cmp	r3, #48	; 0x30
 8006a12:	d064      	beq.n	8006ade <HAL_TIM_ConfigClockSource+0x15a>
 8006a14:	2b30      	cmp	r3, #48	; 0x30
 8006a16:	d86b      	bhi.n	8006af0 <HAL_TIM_ConfigClockSource+0x16c>
 8006a18:	2b20      	cmp	r3, #32
 8006a1a:	d060      	beq.n	8006ade <HAL_TIM_ConfigClockSource+0x15a>
 8006a1c:	2b20      	cmp	r3, #32
 8006a1e:	d867      	bhi.n	8006af0 <HAL_TIM_ConfigClockSource+0x16c>
 8006a20:	2b00      	cmp	r3, #0
 8006a22:	d05c      	beq.n	8006ade <HAL_TIM_ConfigClockSource+0x15a>
 8006a24:	2b10      	cmp	r3, #16
 8006a26:	d05a      	beq.n	8006ade <HAL_TIM_ConfigClockSource+0x15a>
 8006a28:	e062      	b.n	8006af0 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	6818      	ldr	r0, [r3, #0]
 8006a2e:	683b      	ldr	r3, [r7, #0]
 8006a30:	6899      	ldr	r1, [r3, #8]
 8006a32:	683b      	ldr	r3, [r7, #0]
 8006a34:	685a      	ldr	r2, [r3, #4]
 8006a36:	683b      	ldr	r3, [r7, #0]
 8006a38:	68db      	ldr	r3, [r3, #12]
 8006a3a:	f000 fb5d 	bl	80070f8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	681b      	ldr	r3, [r3, #0]
 8006a42:	689b      	ldr	r3, [r3, #8]
 8006a44:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006a46:	68bb      	ldr	r3, [r7, #8]
 8006a48:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006a4c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	681b      	ldr	r3, [r3, #0]
 8006a52:	68ba      	ldr	r2, [r7, #8]
 8006a54:	609a      	str	r2, [r3, #8]
      break;
 8006a56:	e04f      	b.n	8006af8 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	6818      	ldr	r0, [r3, #0]
 8006a5c:	683b      	ldr	r3, [r7, #0]
 8006a5e:	6899      	ldr	r1, [r3, #8]
 8006a60:	683b      	ldr	r3, [r7, #0]
 8006a62:	685a      	ldr	r2, [r3, #4]
 8006a64:	683b      	ldr	r3, [r7, #0]
 8006a66:	68db      	ldr	r3, [r3, #12]
 8006a68:	f000 fb46 	bl	80070f8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	681b      	ldr	r3, [r3, #0]
 8006a70:	689a      	ldr	r2, [r3, #8]
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	681b      	ldr	r3, [r3, #0]
 8006a76:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006a7a:	609a      	str	r2, [r3, #8]
      break;
 8006a7c:	e03c      	b.n	8006af8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	6818      	ldr	r0, [r3, #0]
 8006a82:	683b      	ldr	r3, [r7, #0]
 8006a84:	6859      	ldr	r1, [r3, #4]
 8006a86:	683b      	ldr	r3, [r7, #0]
 8006a88:	68db      	ldr	r3, [r3, #12]
 8006a8a:	461a      	mov	r2, r3
 8006a8c:	f000 faba 	bl	8007004 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	681b      	ldr	r3, [r3, #0]
 8006a94:	2150      	movs	r1, #80	; 0x50
 8006a96:	4618      	mov	r0, r3
 8006a98:	f000 fb13 	bl	80070c2 <TIM_ITRx_SetConfig>
      break;
 8006a9c:	e02c      	b.n	8006af8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	6818      	ldr	r0, [r3, #0]
 8006aa2:	683b      	ldr	r3, [r7, #0]
 8006aa4:	6859      	ldr	r1, [r3, #4]
 8006aa6:	683b      	ldr	r3, [r7, #0]
 8006aa8:	68db      	ldr	r3, [r3, #12]
 8006aaa:	461a      	mov	r2, r3
 8006aac:	f000 fad9 	bl	8007062 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	681b      	ldr	r3, [r3, #0]
 8006ab4:	2160      	movs	r1, #96	; 0x60
 8006ab6:	4618      	mov	r0, r3
 8006ab8:	f000 fb03 	bl	80070c2 <TIM_ITRx_SetConfig>
      break;
 8006abc:	e01c      	b.n	8006af8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	6818      	ldr	r0, [r3, #0]
 8006ac2:	683b      	ldr	r3, [r7, #0]
 8006ac4:	6859      	ldr	r1, [r3, #4]
 8006ac6:	683b      	ldr	r3, [r7, #0]
 8006ac8:	68db      	ldr	r3, [r3, #12]
 8006aca:	461a      	mov	r2, r3
 8006acc:	f000 fa9a 	bl	8007004 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	681b      	ldr	r3, [r3, #0]
 8006ad4:	2140      	movs	r1, #64	; 0x40
 8006ad6:	4618      	mov	r0, r3
 8006ad8:	f000 faf3 	bl	80070c2 <TIM_ITRx_SetConfig>
      break;
 8006adc:	e00c      	b.n	8006af8 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	681a      	ldr	r2, [r3, #0]
 8006ae2:	683b      	ldr	r3, [r7, #0]
 8006ae4:	681b      	ldr	r3, [r3, #0]
 8006ae6:	4619      	mov	r1, r3
 8006ae8:	4610      	mov	r0, r2
 8006aea:	f000 faea 	bl	80070c2 <TIM_ITRx_SetConfig>
      break;
 8006aee:	e003      	b.n	8006af8 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8006af0:	2301      	movs	r3, #1
 8006af2:	73fb      	strb	r3, [r7, #15]
      break;
 8006af4:	e000      	b.n	8006af8 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8006af6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	2201      	movs	r2, #1
 8006afc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	2200      	movs	r2, #0
 8006b04:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006b08:	7bfb      	ldrb	r3, [r7, #15]
}
 8006b0a:	4618      	mov	r0, r3
 8006b0c:	3710      	adds	r7, #16
 8006b0e:	46bd      	mov	sp, r7
 8006b10:	bd80      	pop	{r7, pc}

08006b12 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006b12:	b480      	push	{r7}
 8006b14:	b083      	sub	sp, #12
 8006b16:	af00      	add	r7, sp, #0
 8006b18:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006b1a:	bf00      	nop
 8006b1c:	370c      	adds	r7, #12
 8006b1e:	46bd      	mov	sp, r7
 8006b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b24:	4770      	bx	lr

08006b26 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006b26:	b480      	push	{r7}
 8006b28:	b083      	sub	sp, #12
 8006b2a:	af00      	add	r7, sp, #0
 8006b2c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006b2e:	bf00      	nop
 8006b30:	370c      	adds	r7, #12
 8006b32:	46bd      	mov	sp, r7
 8006b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b38:	4770      	bx	lr

08006b3a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006b3a:	b480      	push	{r7}
 8006b3c:	b083      	sub	sp, #12
 8006b3e:	af00      	add	r7, sp, #0
 8006b40:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006b42:	bf00      	nop
 8006b44:	370c      	adds	r7, #12
 8006b46:	46bd      	mov	sp, r7
 8006b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b4c:	4770      	bx	lr

08006b4e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006b4e:	b480      	push	{r7}
 8006b50:	b083      	sub	sp, #12
 8006b52:	af00      	add	r7, sp, #0
 8006b54:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006b56:	bf00      	nop
 8006b58:	370c      	adds	r7, #12
 8006b5a:	46bd      	mov	sp, r7
 8006b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b60:	4770      	bx	lr
	...

08006b64 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006b64:	b480      	push	{r7}
 8006b66:	b085      	sub	sp, #20
 8006b68:	af00      	add	r7, sp, #0
 8006b6a:	6078      	str	r0, [r7, #4]
 8006b6c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	681b      	ldr	r3, [r3, #0]
 8006b72:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	4a40      	ldr	r2, [pc, #256]	; (8006c78 <TIM_Base_SetConfig+0x114>)
 8006b78:	4293      	cmp	r3, r2
 8006b7a:	d013      	beq.n	8006ba4 <TIM_Base_SetConfig+0x40>
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006b82:	d00f      	beq.n	8006ba4 <TIM_Base_SetConfig+0x40>
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	4a3d      	ldr	r2, [pc, #244]	; (8006c7c <TIM_Base_SetConfig+0x118>)
 8006b88:	4293      	cmp	r3, r2
 8006b8a:	d00b      	beq.n	8006ba4 <TIM_Base_SetConfig+0x40>
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	4a3c      	ldr	r2, [pc, #240]	; (8006c80 <TIM_Base_SetConfig+0x11c>)
 8006b90:	4293      	cmp	r3, r2
 8006b92:	d007      	beq.n	8006ba4 <TIM_Base_SetConfig+0x40>
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	4a3b      	ldr	r2, [pc, #236]	; (8006c84 <TIM_Base_SetConfig+0x120>)
 8006b98:	4293      	cmp	r3, r2
 8006b9a:	d003      	beq.n	8006ba4 <TIM_Base_SetConfig+0x40>
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	4a3a      	ldr	r2, [pc, #232]	; (8006c88 <TIM_Base_SetConfig+0x124>)
 8006ba0:	4293      	cmp	r3, r2
 8006ba2:	d108      	bne.n	8006bb6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006ba4:	68fb      	ldr	r3, [r7, #12]
 8006ba6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006baa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006bac:	683b      	ldr	r3, [r7, #0]
 8006bae:	685b      	ldr	r3, [r3, #4]
 8006bb0:	68fa      	ldr	r2, [r7, #12]
 8006bb2:	4313      	orrs	r3, r2
 8006bb4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	4a2f      	ldr	r2, [pc, #188]	; (8006c78 <TIM_Base_SetConfig+0x114>)
 8006bba:	4293      	cmp	r3, r2
 8006bbc:	d02b      	beq.n	8006c16 <TIM_Base_SetConfig+0xb2>
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006bc4:	d027      	beq.n	8006c16 <TIM_Base_SetConfig+0xb2>
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	4a2c      	ldr	r2, [pc, #176]	; (8006c7c <TIM_Base_SetConfig+0x118>)
 8006bca:	4293      	cmp	r3, r2
 8006bcc:	d023      	beq.n	8006c16 <TIM_Base_SetConfig+0xb2>
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	4a2b      	ldr	r2, [pc, #172]	; (8006c80 <TIM_Base_SetConfig+0x11c>)
 8006bd2:	4293      	cmp	r3, r2
 8006bd4:	d01f      	beq.n	8006c16 <TIM_Base_SetConfig+0xb2>
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	4a2a      	ldr	r2, [pc, #168]	; (8006c84 <TIM_Base_SetConfig+0x120>)
 8006bda:	4293      	cmp	r3, r2
 8006bdc:	d01b      	beq.n	8006c16 <TIM_Base_SetConfig+0xb2>
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	4a29      	ldr	r2, [pc, #164]	; (8006c88 <TIM_Base_SetConfig+0x124>)
 8006be2:	4293      	cmp	r3, r2
 8006be4:	d017      	beq.n	8006c16 <TIM_Base_SetConfig+0xb2>
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	4a28      	ldr	r2, [pc, #160]	; (8006c8c <TIM_Base_SetConfig+0x128>)
 8006bea:	4293      	cmp	r3, r2
 8006bec:	d013      	beq.n	8006c16 <TIM_Base_SetConfig+0xb2>
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	4a27      	ldr	r2, [pc, #156]	; (8006c90 <TIM_Base_SetConfig+0x12c>)
 8006bf2:	4293      	cmp	r3, r2
 8006bf4:	d00f      	beq.n	8006c16 <TIM_Base_SetConfig+0xb2>
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	4a26      	ldr	r2, [pc, #152]	; (8006c94 <TIM_Base_SetConfig+0x130>)
 8006bfa:	4293      	cmp	r3, r2
 8006bfc:	d00b      	beq.n	8006c16 <TIM_Base_SetConfig+0xb2>
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	4a25      	ldr	r2, [pc, #148]	; (8006c98 <TIM_Base_SetConfig+0x134>)
 8006c02:	4293      	cmp	r3, r2
 8006c04:	d007      	beq.n	8006c16 <TIM_Base_SetConfig+0xb2>
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	4a24      	ldr	r2, [pc, #144]	; (8006c9c <TIM_Base_SetConfig+0x138>)
 8006c0a:	4293      	cmp	r3, r2
 8006c0c:	d003      	beq.n	8006c16 <TIM_Base_SetConfig+0xb2>
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	4a23      	ldr	r2, [pc, #140]	; (8006ca0 <TIM_Base_SetConfig+0x13c>)
 8006c12:	4293      	cmp	r3, r2
 8006c14:	d108      	bne.n	8006c28 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006c16:	68fb      	ldr	r3, [r7, #12]
 8006c18:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006c1c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006c1e:	683b      	ldr	r3, [r7, #0]
 8006c20:	68db      	ldr	r3, [r3, #12]
 8006c22:	68fa      	ldr	r2, [r7, #12]
 8006c24:	4313      	orrs	r3, r2
 8006c26:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006c28:	68fb      	ldr	r3, [r7, #12]
 8006c2a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006c2e:	683b      	ldr	r3, [r7, #0]
 8006c30:	695b      	ldr	r3, [r3, #20]
 8006c32:	4313      	orrs	r3, r2
 8006c34:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	68fa      	ldr	r2, [r7, #12]
 8006c3a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006c3c:	683b      	ldr	r3, [r7, #0]
 8006c3e:	689a      	ldr	r2, [r3, #8]
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006c44:	683b      	ldr	r3, [r7, #0]
 8006c46:	681a      	ldr	r2, [r3, #0]
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	4a0a      	ldr	r2, [pc, #40]	; (8006c78 <TIM_Base_SetConfig+0x114>)
 8006c50:	4293      	cmp	r3, r2
 8006c52:	d003      	beq.n	8006c5c <TIM_Base_SetConfig+0xf8>
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	4a0c      	ldr	r2, [pc, #48]	; (8006c88 <TIM_Base_SetConfig+0x124>)
 8006c58:	4293      	cmp	r3, r2
 8006c5a:	d103      	bne.n	8006c64 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006c5c:	683b      	ldr	r3, [r7, #0]
 8006c5e:	691a      	ldr	r2, [r3, #16]
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	2201      	movs	r2, #1
 8006c68:	615a      	str	r2, [r3, #20]
}
 8006c6a:	bf00      	nop
 8006c6c:	3714      	adds	r7, #20
 8006c6e:	46bd      	mov	sp, r7
 8006c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c74:	4770      	bx	lr
 8006c76:	bf00      	nop
 8006c78:	40010000 	.word	0x40010000
 8006c7c:	40000400 	.word	0x40000400
 8006c80:	40000800 	.word	0x40000800
 8006c84:	40000c00 	.word	0x40000c00
 8006c88:	40010400 	.word	0x40010400
 8006c8c:	40014000 	.word	0x40014000
 8006c90:	40014400 	.word	0x40014400
 8006c94:	40014800 	.word	0x40014800
 8006c98:	40001800 	.word	0x40001800
 8006c9c:	40001c00 	.word	0x40001c00
 8006ca0:	40002000 	.word	0x40002000

08006ca4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006ca4:	b480      	push	{r7}
 8006ca6:	b087      	sub	sp, #28
 8006ca8:	af00      	add	r7, sp, #0
 8006caa:	6078      	str	r0, [r7, #4]
 8006cac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	6a1b      	ldr	r3, [r3, #32]
 8006cb2:	f023 0201 	bic.w	r2, r3, #1
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	6a1b      	ldr	r3, [r3, #32]
 8006cbe:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	685b      	ldr	r3, [r3, #4]
 8006cc4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	699b      	ldr	r3, [r3, #24]
 8006cca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006ccc:	68fb      	ldr	r3, [r7, #12]
 8006cce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006cd2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006cd4:	68fb      	ldr	r3, [r7, #12]
 8006cd6:	f023 0303 	bic.w	r3, r3, #3
 8006cda:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006cdc:	683b      	ldr	r3, [r7, #0]
 8006cde:	681b      	ldr	r3, [r3, #0]
 8006ce0:	68fa      	ldr	r2, [r7, #12]
 8006ce2:	4313      	orrs	r3, r2
 8006ce4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006ce6:	697b      	ldr	r3, [r7, #20]
 8006ce8:	f023 0302 	bic.w	r3, r3, #2
 8006cec:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006cee:	683b      	ldr	r3, [r7, #0]
 8006cf0:	689b      	ldr	r3, [r3, #8]
 8006cf2:	697a      	ldr	r2, [r7, #20]
 8006cf4:	4313      	orrs	r3, r2
 8006cf6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	4a20      	ldr	r2, [pc, #128]	; (8006d7c <TIM_OC1_SetConfig+0xd8>)
 8006cfc:	4293      	cmp	r3, r2
 8006cfe:	d003      	beq.n	8006d08 <TIM_OC1_SetConfig+0x64>
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	4a1f      	ldr	r2, [pc, #124]	; (8006d80 <TIM_OC1_SetConfig+0xdc>)
 8006d04:	4293      	cmp	r3, r2
 8006d06:	d10c      	bne.n	8006d22 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006d08:	697b      	ldr	r3, [r7, #20]
 8006d0a:	f023 0308 	bic.w	r3, r3, #8
 8006d0e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006d10:	683b      	ldr	r3, [r7, #0]
 8006d12:	68db      	ldr	r3, [r3, #12]
 8006d14:	697a      	ldr	r2, [r7, #20]
 8006d16:	4313      	orrs	r3, r2
 8006d18:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006d1a:	697b      	ldr	r3, [r7, #20]
 8006d1c:	f023 0304 	bic.w	r3, r3, #4
 8006d20:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	4a15      	ldr	r2, [pc, #84]	; (8006d7c <TIM_OC1_SetConfig+0xd8>)
 8006d26:	4293      	cmp	r3, r2
 8006d28:	d003      	beq.n	8006d32 <TIM_OC1_SetConfig+0x8e>
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	4a14      	ldr	r2, [pc, #80]	; (8006d80 <TIM_OC1_SetConfig+0xdc>)
 8006d2e:	4293      	cmp	r3, r2
 8006d30:	d111      	bne.n	8006d56 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006d32:	693b      	ldr	r3, [r7, #16]
 8006d34:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006d38:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006d3a:	693b      	ldr	r3, [r7, #16]
 8006d3c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006d40:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006d42:	683b      	ldr	r3, [r7, #0]
 8006d44:	695b      	ldr	r3, [r3, #20]
 8006d46:	693a      	ldr	r2, [r7, #16]
 8006d48:	4313      	orrs	r3, r2
 8006d4a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006d4c:	683b      	ldr	r3, [r7, #0]
 8006d4e:	699b      	ldr	r3, [r3, #24]
 8006d50:	693a      	ldr	r2, [r7, #16]
 8006d52:	4313      	orrs	r3, r2
 8006d54:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	693a      	ldr	r2, [r7, #16]
 8006d5a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	68fa      	ldr	r2, [r7, #12]
 8006d60:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006d62:	683b      	ldr	r3, [r7, #0]
 8006d64:	685a      	ldr	r2, [r3, #4]
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	697a      	ldr	r2, [r7, #20]
 8006d6e:	621a      	str	r2, [r3, #32]
}
 8006d70:	bf00      	nop
 8006d72:	371c      	adds	r7, #28
 8006d74:	46bd      	mov	sp, r7
 8006d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d7a:	4770      	bx	lr
 8006d7c:	40010000 	.word	0x40010000
 8006d80:	40010400 	.word	0x40010400

08006d84 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006d84:	b480      	push	{r7}
 8006d86:	b087      	sub	sp, #28
 8006d88:	af00      	add	r7, sp, #0
 8006d8a:	6078      	str	r0, [r7, #4]
 8006d8c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	6a1b      	ldr	r3, [r3, #32]
 8006d92:	f023 0210 	bic.w	r2, r3, #16
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	6a1b      	ldr	r3, [r3, #32]
 8006d9e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	685b      	ldr	r3, [r3, #4]
 8006da4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	699b      	ldr	r3, [r3, #24]
 8006daa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006dac:	68fb      	ldr	r3, [r7, #12]
 8006dae:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006db2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006db4:	68fb      	ldr	r3, [r7, #12]
 8006db6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006dba:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006dbc:	683b      	ldr	r3, [r7, #0]
 8006dbe:	681b      	ldr	r3, [r3, #0]
 8006dc0:	021b      	lsls	r3, r3, #8
 8006dc2:	68fa      	ldr	r2, [r7, #12]
 8006dc4:	4313      	orrs	r3, r2
 8006dc6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006dc8:	697b      	ldr	r3, [r7, #20]
 8006dca:	f023 0320 	bic.w	r3, r3, #32
 8006dce:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006dd0:	683b      	ldr	r3, [r7, #0]
 8006dd2:	689b      	ldr	r3, [r3, #8]
 8006dd4:	011b      	lsls	r3, r3, #4
 8006dd6:	697a      	ldr	r2, [r7, #20]
 8006dd8:	4313      	orrs	r3, r2
 8006dda:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	4a22      	ldr	r2, [pc, #136]	; (8006e68 <TIM_OC2_SetConfig+0xe4>)
 8006de0:	4293      	cmp	r3, r2
 8006de2:	d003      	beq.n	8006dec <TIM_OC2_SetConfig+0x68>
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	4a21      	ldr	r2, [pc, #132]	; (8006e6c <TIM_OC2_SetConfig+0xe8>)
 8006de8:	4293      	cmp	r3, r2
 8006dea:	d10d      	bne.n	8006e08 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006dec:	697b      	ldr	r3, [r7, #20]
 8006dee:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006df2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006df4:	683b      	ldr	r3, [r7, #0]
 8006df6:	68db      	ldr	r3, [r3, #12]
 8006df8:	011b      	lsls	r3, r3, #4
 8006dfa:	697a      	ldr	r2, [r7, #20]
 8006dfc:	4313      	orrs	r3, r2
 8006dfe:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006e00:	697b      	ldr	r3, [r7, #20]
 8006e02:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006e06:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	4a17      	ldr	r2, [pc, #92]	; (8006e68 <TIM_OC2_SetConfig+0xe4>)
 8006e0c:	4293      	cmp	r3, r2
 8006e0e:	d003      	beq.n	8006e18 <TIM_OC2_SetConfig+0x94>
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	4a16      	ldr	r2, [pc, #88]	; (8006e6c <TIM_OC2_SetConfig+0xe8>)
 8006e14:	4293      	cmp	r3, r2
 8006e16:	d113      	bne.n	8006e40 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006e18:	693b      	ldr	r3, [r7, #16]
 8006e1a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006e1e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006e20:	693b      	ldr	r3, [r7, #16]
 8006e22:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006e26:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006e28:	683b      	ldr	r3, [r7, #0]
 8006e2a:	695b      	ldr	r3, [r3, #20]
 8006e2c:	009b      	lsls	r3, r3, #2
 8006e2e:	693a      	ldr	r2, [r7, #16]
 8006e30:	4313      	orrs	r3, r2
 8006e32:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006e34:	683b      	ldr	r3, [r7, #0]
 8006e36:	699b      	ldr	r3, [r3, #24]
 8006e38:	009b      	lsls	r3, r3, #2
 8006e3a:	693a      	ldr	r2, [r7, #16]
 8006e3c:	4313      	orrs	r3, r2
 8006e3e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	693a      	ldr	r2, [r7, #16]
 8006e44:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	68fa      	ldr	r2, [r7, #12]
 8006e4a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006e4c:	683b      	ldr	r3, [r7, #0]
 8006e4e:	685a      	ldr	r2, [r3, #4]
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	697a      	ldr	r2, [r7, #20]
 8006e58:	621a      	str	r2, [r3, #32]
}
 8006e5a:	bf00      	nop
 8006e5c:	371c      	adds	r7, #28
 8006e5e:	46bd      	mov	sp, r7
 8006e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e64:	4770      	bx	lr
 8006e66:	bf00      	nop
 8006e68:	40010000 	.word	0x40010000
 8006e6c:	40010400 	.word	0x40010400

08006e70 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006e70:	b480      	push	{r7}
 8006e72:	b087      	sub	sp, #28
 8006e74:	af00      	add	r7, sp, #0
 8006e76:	6078      	str	r0, [r7, #4]
 8006e78:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	6a1b      	ldr	r3, [r3, #32]
 8006e7e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	6a1b      	ldr	r3, [r3, #32]
 8006e8a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	685b      	ldr	r3, [r3, #4]
 8006e90:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	69db      	ldr	r3, [r3, #28]
 8006e96:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006e98:	68fb      	ldr	r3, [r7, #12]
 8006e9a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006e9e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006ea0:	68fb      	ldr	r3, [r7, #12]
 8006ea2:	f023 0303 	bic.w	r3, r3, #3
 8006ea6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006ea8:	683b      	ldr	r3, [r7, #0]
 8006eaa:	681b      	ldr	r3, [r3, #0]
 8006eac:	68fa      	ldr	r2, [r7, #12]
 8006eae:	4313      	orrs	r3, r2
 8006eb0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006eb2:	697b      	ldr	r3, [r7, #20]
 8006eb4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006eb8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006eba:	683b      	ldr	r3, [r7, #0]
 8006ebc:	689b      	ldr	r3, [r3, #8]
 8006ebe:	021b      	lsls	r3, r3, #8
 8006ec0:	697a      	ldr	r2, [r7, #20]
 8006ec2:	4313      	orrs	r3, r2
 8006ec4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	4a21      	ldr	r2, [pc, #132]	; (8006f50 <TIM_OC3_SetConfig+0xe0>)
 8006eca:	4293      	cmp	r3, r2
 8006ecc:	d003      	beq.n	8006ed6 <TIM_OC3_SetConfig+0x66>
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	4a20      	ldr	r2, [pc, #128]	; (8006f54 <TIM_OC3_SetConfig+0xe4>)
 8006ed2:	4293      	cmp	r3, r2
 8006ed4:	d10d      	bne.n	8006ef2 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006ed6:	697b      	ldr	r3, [r7, #20]
 8006ed8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006edc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006ede:	683b      	ldr	r3, [r7, #0]
 8006ee0:	68db      	ldr	r3, [r3, #12]
 8006ee2:	021b      	lsls	r3, r3, #8
 8006ee4:	697a      	ldr	r2, [r7, #20]
 8006ee6:	4313      	orrs	r3, r2
 8006ee8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006eea:	697b      	ldr	r3, [r7, #20]
 8006eec:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006ef0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	4a16      	ldr	r2, [pc, #88]	; (8006f50 <TIM_OC3_SetConfig+0xe0>)
 8006ef6:	4293      	cmp	r3, r2
 8006ef8:	d003      	beq.n	8006f02 <TIM_OC3_SetConfig+0x92>
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	4a15      	ldr	r2, [pc, #84]	; (8006f54 <TIM_OC3_SetConfig+0xe4>)
 8006efe:	4293      	cmp	r3, r2
 8006f00:	d113      	bne.n	8006f2a <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006f02:	693b      	ldr	r3, [r7, #16]
 8006f04:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006f08:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006f0a:	693b      	ldr	r3, [r7, #16]
 8006f0c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006f10:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006f12:	683b      	ldr	r3, [r7, #0]
 8006f14:	695b      	ldr	r3, [r3, #20]
 8006f16:	011b      	lsls	r3, r3, #4
 8006f18:	693a      	ldr	r2, [r7, #16]
 8006f1a:	4313      	orrs	r3, r2
 8006f1c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006f1e:	683b      	ldr	r3, [r7, #0]
 8006f20:	699b      	ldr	r3, [r3, #24]
 8006f22:	011b      	lsls	r3, r3, #4
 8006f24:	693a      	ldr	r2, [r7, #16]
 8006f26:	4313      	orrs	r3, r2
 8006f28:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	693a      	ldr	r2, [r7, #16]
 8006f2e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	68fa      	ldr	r2, [r7, #12]
 8006f34:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006f36:	683b      	ldr	r3, [r7, #0]
 8006f38:	685a      	ldr	r2, [r3, #4]
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	697a      	ldr	r2, [r7, #20]
 8006f42:	621a      	str	r2, [r3, #32]
}
 8006f44:	bf00      	nop
 8006f46:	371c      	adds	r7, #28
 8006f48:	46bd      	mov	sp, r7
 8006f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f4e:	4770      	bx	lr
 8006f50:	40010000 	.word	0x40010000
 8006f54:	40010400 	.word	0x40010400

08006f58 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006f58:	b480      	push	{r7}
 8006f5a:	b087      	sub	sp, #28
 8006f5c:	af00      	add	r7, sp, #0
 8006f5e:	6078      	str	r0, [r7, #4]
 8006f60:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	6a1b      	ldr	r3, [r3, #32]
 8006f66:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	6a1b      	ldr	r3, [r3, #32]
 8006f72:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	685b      	ldr	r3, [r3, #4]
 8006f78:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	69db      	ldr	r3, [r3, #28]
 8006f7e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006f80:	68fb      	ldr	r3, [r7, #12]
 8006f82:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006f86:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006f88:	68fb      	ldr	r3, [r7, #12]
 8006f8a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006f8e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006f90:	683b      	ldr	r3, [r7, #0]
 8006f92:	681b      	ldr	r3, [r3, #0]
 8006f94:	021b      	lsls	r3, r3, #8
 8006f96:	68fa      	ldr	r2, [r7, #12]
 8006f98:	4313      	orrs	r3, r2
 8006f9a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006f9c:	693b      	ldr	r3, [r7, #16]
 8006f9e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006fa2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006fa4:	683b      	ldr	r3, [r7, #0]
 8006fa6:	689b      	ldr	r3, [r3, #8]
 8006fa8:	031b      	lsls	r3, r3, #12
 8006faa:	693a      	ldr	r2, [r7, #16]
 8006fac:	4313      	orrs	r3, r2
 8006fae:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	4a12      	ldr	r2, [pc, #72]	; (8006ffc <TIM_OC4_SetConfig+0xa4>)
 8006fb4:	4293      	cmp	r3, r2
 8006fb6:	d003      	beq.n	8006fc0 <TIM_OC4_SetConfig+0x68>
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	4a11      	ldr	r2, [pc, #68]	; (8007000 <TIM_OC4_SetConfig+0xa8>)
 8006fbc:	4293      	cmp	r3, r2
 8006fbe:	d109      	bne.n	8006fd4 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006fc0:	697b      	ldr	r3, [r7, #20]
 8006fc2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006fc6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006fc8:	683b      	ldr	r3, [r7, #0]
 8006fca:	695b      	ldr	r3, [r3, #20]
 8006fcc:	019b      	lsls	r3, r3, #6
 8006fce:	697a      	ldr	r2, [r7, #20]
 8006fd0:	4313      	orrs	r3, r2
 8006fd2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	697a      	ldr	r2, [r7, #20]
 8006fd8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	68fa      	ldr	r2, [r7, #12]
 8006fde:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006fe0:	683b      	ldr	r3, [r7, #0]
 8006fe2:	685a      	ldr	r2, [r3, #4]
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	693a      	ldr	r2, [r7, #16]
 8006fec:	621a      	str	r2, [r3, #32]
}
 8006fee:	bf00      	nop
 8006ff0:	371c      	adds	r7, #28
 8006ff2:	46bd      	mov	sp, r7
 8006ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ff8:	4770      	bx	lr
 8006ffa:	bf00      	nop
 8006ffc:	40010000 	.word	0x40010000
 8007000:	40010400 	.word	0x40010400

08007004 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007004:	b480      	push	{r7}
 8007006:	b087      	sub	sp, #28
 8007008:	af00      	add	r7, sp, #0
 800700a:	60f8      	str	r0, [r7, #12]
 800700c:	60b9      	str	r1, [r7, #8]
 800700e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007010:	68fb      	ldr	r3, [r7, #12]
 8007012:	6a1b      	ldr	r3, [r3, #32]
 8007014:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007016:	68fb      	ldr	r3, [r7, #12]
 8007018:	6a1b      	ldr	r3, [r3, #32]
 800701a:	f023 0201 	bic.w	r2, r3, #1
 800701e:	68fb      	ldr	r3, [r7, #12]
 8007020:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007022:	68fb      	ldr	r3, [r7, #12]
 8007024:	699b      	ldr	r3, [r3, #24]
 8007026:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007028:	693b      	ldr	r3, [r7, #16]
 800702a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800702e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	011b      	lsls	r3, r3, #4
 8007034:	693a      	ldr	r2, [r7, #16]
 8007036:	4313      	orrs	r3, r2
 8007038:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800703a:	697b      	ldr	r3, [r7, #20]
 800703c:	f023 030a 	bic.w	r3, r3, #10
 8007040:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007042:	697a      	ldr	r2, [r7, #20]
 8007044:	68bb      	ldr	r3, [r7, #8]
 8007046:	4313      	orrs	r3, r2
 8007048:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800704a:	68fb      	ldr	r3, [r7, #12]
 800704c:	693a      	ldr	r2, [r7, #16]
 800704e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007050:	68fb      	ldr	r3, [r7, #12]
 8007052:	697a      	ldr	r2, [r7, #20]
 8007054:	621a      	str	r2, [r3, #32]
}
 8007056:	bf00      	nop
 8007058:	371c      	adds	r7, #28
 800705a:	46bd      	mov	sp, r7
 800705c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007060:	4770      	bx	lr

08007062 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007062:	b480      	push	{r7}
 8007064:	b087      	sub	sp, #28
 8007066:	af00      	add	r7, sp, #0
 8007068:	60f8      	str	r0, [r7, #12]
 800706a:	60b9      	str	r1, [r7, #8]
 800706c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800706e:	68fb      	ldr	r3, [r7, #12]
 8007070:	6a1b      	ldr	r3, [r3, #32]
 8007072:	f023 0210 	bic.w	r2, r3, #16
 8007076:	68fb      	ldr	r3, [r7, #12]
 8007078:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800707a:	68fb      	ldr	r3, [r7, #12]
 800707c:	699b      	ldr	r3, [r3, #24]
 800707e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007080:	68fb      	ldr	r3, [r7, #12]
 8007082:	6a1b      	ldr	r3, [r3, #32]
 8007084:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007086:	697b      	ldr	r3, [r7, #20]
 8007088:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800708c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	031b      	lsls	r3, r3, #12
 8007092:	697a      	ldr	r2, [r7, #20]
 8007094:	4313      	orrs	r3, r2
 8007096:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007098:	693b      	ldr	r3, [r7, #16]
 800709a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800709e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80070a0:	68bb      	ldr	r3, [r7, #8]
 80070a2:	011b      	lsls	r3, r3, #4
 80070a4:	693a      	ldr	r2, [r7, #16]
 80070a6:	4313      	orrs	r3, r2
 80070a8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80070aa:	68fb      	ldr	r3, [r7, #12]
 80070ac:	697a      	ldr	r2, [r7, #20]
 80070ae:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80070b0:	68fb      	ldr	r3, [r7, #12]
 80070b2:	693a      	ldr	r2, [r7, #16]
 80070b4:	621a      	str	r2, [r3, #32]
}
 80070b6:	bf00      	nop
 80070b8:	371c      	adds	r7, #28
 80070ba:	46bd      	mov	sp, r7
 80070bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070c0:	4770      	bx	lr

080070c2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80070c2:	b480      	push	{r7}
 80070c4:	b085      	sub	sp, #20
 80070c6:	af00      	add	r7, sp, #0
 80070c8:	6078      	str	r0, [r7, #4]
 80070ca:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	689b      	ldr	r3, [r3, #8]
 80070d0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80070d2:	68fb      	ldr	r3, [r7, #12]
 80070d4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80070d8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80070da:	683a      	ldr	r2, [r7, #0]
 80070dc:	68fb      	ldr	r3, [r7, #12]
 80070de:	4313      	orrs	r3, r2
 80070e0:	f043 0307 	orr.w	r3, r3, #7
 80070e4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	68fa      	ldr	r2, [r7, #12]
 80070ea:	609a      	str	r2, [r3, #8]
}
 80070ec:	bf00      	nop
 80070ee:	3714      	adds	r7, #20
 80070f0:	46bd      	mov	sp, r7
 80070f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070f6:	4770      	bx	lr

080070f8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80070f8:	b480      	push	{r7}
 80070fa:	b087      	sub	sp, #28
 80070fc:	af00      	add	r7, sp, #0
 80070fe:	60f8      	str	r0, [r7, #12]
 8007100:	60b9      	str	r1, [r7, #8]
 8007102:	607a      	str	r2, [r7, #4]
 8007104:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007106:	68fb      	ldr	r3, [r7, #12]
 8007108:	689b      	ldr	r3, [r3, #8]
 800710a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800710c:	697b      	ldr	r3, [r7, #20]
 800710e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007112:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007114:	683b      	ldr	r3, [r7, #0]
 8007116:	021a      	lsls	r2, r3, #8
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	431a      	orrs	r2, r3
 800711c:	68bb      	ldr	r3, [r7, #8]
 800711e:	4313      	orrs	r3, r2
 8007120:	697a      	ldr	r2, [r7, #20]
 8007122:	4313      	orrs	r3, r2
 8007124:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007126:	68fb      	ldr	r3, [r7, #12]
 8007128:	697a      	ldr	r2, [r7, #20]
 800712a:	609a      	str	r2, [r3, #8]
}
 800712c:	bf00      	nop
 800712e:	371c      	adds	r7, #28
 8007130:	46bd      	mov	sp, r7
 8007132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007136:	4770      	bx	lr

08007138 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007138:	b480      	push	{r7}
 800713a:	b085      	sub	sp, #20
 800713c:	af00      	add	r7, sp, #0
 800713e:	6078      	str	r0, [r7, #4]
 8007140:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007148:	2b01      	cmp	r3, #1
 800714a:	d101      	bne.n	8007150 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800714c:	2302      	movs	r3, #2
 800714e:	e05a      	b.n	8007206 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	2201      	movs	r2, #1
 8007154:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	2202      	movs	r2, #2
 800715c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	681b      	ldr	r3, [r3, #0]
 8007164:	685b      	ldr	r3, [r3, #4]
 8007166:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	681b      	ldr	r3, [r3, #0]
 800716c:	689b      	ldr	r3, [r3, #8]
 800716e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007170:	68fb      	ldr	r3, [r7, #12]
 8007172:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007176:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007178:	683b      	ldr	r3, [r7, #0]
 800717a:	681b      	ldr	r3, [r3, #0]
 800717c:	68fa      	ldr	r2, [r7, #12]
 800717e:	4313      	orrs	r3, r2
 8007180:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	681b      	ldr	r3, [r3, #0]
 8007186:	68fa      	ldr	r2, [r7, #12]
 8007188:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	681b      	ldr	r3, [r3, #0]
 800718e:	4a21      	ldr	r2, [pc, #132]	; (8007214 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8007190:	4293      	cmp	r3, r2
 8007192:	d022      	beq.n	80071da <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	681b      	ldr	r3, [r3, #0]
 8007198:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800719c:	d01d      	beq.n	80071da <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	681b      	ldr	r3, [r3, #0]
 80071a2:	4a1d      	ldr	r2, [pc, #116]	; (8007218 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80071a4:	4293      	cmp	r3, r2
 80071a6:	d018      	beq.n	80071da <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	681b      	ldr	r3, [r3, #0]
 80071ac:	4a1b      	ldr	r2, [pc, #108]	; (800721c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80071ae:	4293      	cmp	r3, r2
 80071b0:	d013      	beq.n	80071da <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	681b      	ldr	r3, [r3, #0]
 80071b6:	4a1a      	ldr	r2, [pc, #104]	; (8007220 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80071b8:	4293      	cmp	r3, r2
 80071ba:	d00e      	beq.n	80071da <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	681b      	ldr	r3, [r3, #0]
 80071c0:	4a18      	ldr	r2, [pc, #96]	; (8007224 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80071c2:	4293      	cmp	r3, r2
 80071c4:	d009      	beq.n	80071da <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	681b      	ldr	r3, [r3, #0]
 80071ca:	4a17      	ldr	r2, [pc, #92]	; (8007228 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80071cc:	4293      	cmp	r3, r2
 80071ce:	d004      	beq.n	80071da <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	681b      	ldr	r3, [r3, #0]
 80071d4:	4a15      	ldr	r2, [pc, #84]	; (800722c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80071d6:	4293      	cmp	r3, r2
 80071d8:	d10c      	bne.n	80071f4 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80071da:	68bb      	ldr	r3, [r7, #8]
 80071dc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80071e0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80071e2:	683b      	ldr	r3, [r7, #0]
 80071e4:	685b      	ldr	r3, [r3, #4]
 80071e6:	68ba      	ldr	r2, [r7, #8]
 80071e8:	4313      	orrs	r3, r2
 80071ea:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	681b      	ldr	r3, [r3, #0]
 80071f0:	68ba      	ldr	r2, [r7, #8]
 80071f2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	2201      	movs	r2, #1
 80071f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	2200      	movs	r2, #0
 8007200:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007204:	2300      	movs	r3, #0
}
 8007206:	4618      	mov	r0, r3
 8007208:	3714      	adds	r7, #20
 800720a:	46bd      	mov	sp, r7
 800720c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007210:	4770      	bx	lr
 8007212:	bf00      	nop
 8007214:	40010000 	.word	0x40010000
 8007218:	40000400 	.word	0x40000400
 800721c:	40000800 	.word	0x40000800
 8007220:	40000c00 	.word	0x40000c00
 8007224:	40010400 	.word	0x40010400
 8007228:	40014000 	.word	0x40014000
 800722c:	40001800 	.word	0x40001800

08007230 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007230:	b480      	push	{r7}
 8007232:	b083      	sub	sp, #12
 8007234:	af00      	add	r7, sp, #0
 8007236:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007238:	bf00      	nop
 800723a:	370c      	adds	r7, #12
 800723c:	46bd      	mov	sp, r7
 800723e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007242:	4770      	bx	lr

08007244 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007244:	b480      	push	{r7}
 8007246:	b083      	sub	sp, #12
 8007248:	af00      	add	r7, sp, #0
 800724a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800724c:	bf00      	nop
 800724e:	370c      	adds	r7, #12
 8007250:	46bd      	mov	sp, r7
 8007252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007256:	4770      	bx	lr

08007258 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007258:	b580      	push	{r7, lr}
 800725a:	b082      	sub	sp, #8
 800725c:	af00      	add	r7, sp, #0
 800725e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	2b00      	cmp	r3, #0
 8007264:	d101      	bne.n	800726a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007266:	2301      	movs	r3, #1
 8007268:	e03f      	b.n	80072ea <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007270:	b2db      	uxtb	r3, r3
 8007272:	2b00      	cmp	r3, #0
 8007274:	d106      	bne.n	8007284 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	2200      	movs	r2, #0
 800727a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800727e:	6878      	ldr	r0, [r7, #4]
 8007280:	f7fb fcbe 	bl	8002c00 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	2224      	movs	r2, #36	; 0x24
 8007288:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	681b      	ldr	r3, [r3, #0]
 8007290:	68da      	ldr	r2, [r3, #12]
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	681b      	ldr	r3, [r3, #0]
 8007296:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800729a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800729c:	6878      	ldr	r0, [r7, #4]
 800729e:	f000 fc7b 	bl	8007b98 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	681b      	ldr	r3, [r3, #0]
 80072a6:	691a      	ldr	r2, [r3, #16]
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	681b      	ldr	r3, [r3, #0]
 80072ac:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80072b0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	681b      	ldr	r3, [r3, #0]
 80072b6:	695a      	ldr	r2, [r3, #20]
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	681b      	ldr	r3, [r3, #0]
 80072bc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80072c0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	681b      	ldr	r3, [r3, #0]
 80072c6:	68da      	ldr	r2, [r3, #12]
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	681b      	ldr	r3, [r3, #0]
 80072cc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80072d0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	2200      	movs	r2, #0
 80072d6:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	2220      	movs	r2, #32
 80072dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	2220      	movs	r2, #32
 80072e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80072e8:	2300      	movs	r3, #0
}
 80072ea:	4618      	mov	r0, r3
 80072ec:	3708      	adds	r7, #8
 80072ee:	46bd      	mov	sp, r7
 80072f0:	bd80      	pop	{r7, pc}
	...

080072f4 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80072f4:	b580      	push	{r7, lr}
 80072f6:	b0ba      	sub	sp, #232	; 0xe8
 80072f8:	af00      	add	r7, sp, #0
 80072fa:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	681b      	ldr	r3, [r3, #0]
 8007300:	681b      	ldr	r3, [r3, #0]
 8007302:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	681b      	ldr	r3, [r3, #0]
 800730a:	68db      	ldr	r3, [r3, #12]
 800730c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	681b      	ldr	r3, [r3, #0]
 8007314:	695b      	ldr	r3, [r3, #20]
 8007316:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800731a:	2300      	movs	r3, #0
 800731c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8007320:	2300      	movs	r3, #0
 8007322:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8007326:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800732a:	f003 030f 	and.w	r3, r3, #15
 800732e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8007332:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007336:	2b00      	cmp	r3, #0
 8007338:	d10f      	bne.n	800735a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800733a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800733e:	f003 0320 	and.w	r3, r3, #32
 8007342:	2b00      	cmp	r3, #0
 8007344:	d009      	beq.n	800735a <HAL_UART_IRQHandler+0x66>
 8007346:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800734a:	f003 0320 	and.w	r3, r3, #32
 800734e:	2b00      	cmp	r3, #0
 8007350:	d003      	beq.n	800735a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8007352:	6878      	ldr	r0, [r7, #4]
 8007354:	f000 fb65 	bl	8007a22 <UART_Receive_IT>
      return;
 8007358:	e256      	b.n	8007808 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800735a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800735e:	2b00      	cmp	r3, #0
 8007360:	f000 80de 	beq.w	8007520 <HAL_UART_IRQHandler+0x22c>
 8007364:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007368:	f003 0301 	and.w	r3, r3, #1
 800736c:	2b00      	cmp	r3, #0
 800736e:	d106      	bne.n	800737e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8007370:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007374:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8007378:	2b00      	cmp	r3, #0
 800737a:	f000 80d1 	beq.w	8007520 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800737e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007382:	f003 0301 	and.w	r3, r3, #1
 8007386:	2b00      	cmp	r3, #0
 8007388:	d00b      	beq.n	80073a2 <HAL_UART_IRQHandler+0xae>
 800738a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800738e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007392:	2b00      	cmp	r3, #0
 8007394:	d005      	beq.n	80073a2 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800739a:	f043 0201 	orr.w	r2, r3, #1
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80073a2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80073a6:	f003 0304 	and.w	r3, r3, #4
 80073aa:	2b00      	cmp	r3, #0
 80073ac:	d00b      	beq.n	80073c6 <HAL_UART_IRQHandler+0xd2>
 80073ae:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80073b2:	f003 0301 	and.w	r3, r3, #1
 80073b6:	2b00      	cmp	r3, #0
 80073b8:	d005      	beq.n	80073c6 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80073be:	f043 0202 	orr.w	r2, r3, #2
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80073c6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80073ca:	f003 0302 	and.w	r3, r3, #2
 80073ce:	2b00      	cmp	r3, #0
 80073d0:	d00b      	beq.n	80073ea <HAL_UART_IRQHandler+0xf6>
 80073d2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80073d6:	f003 0301 	and.w	r3, r3, #1
 80073da:	2b00      	cmp	r3, #0
 80073dc:	d005      	beq.n	80073ea <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80073e2:	f043 0204 	orr.w	r2, r3, #4
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80073ea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80073ee:	f003 0308 	and.w	r3, r3, #8
 80073f2:	2b00      	cmp	r3, #0
 80073f4:	d011      	beq.n	800741a <HAL_UART_IRQHandler+0x126>
 80073f6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80073fa:	f003 0320 	and.w	r3, r3, #32
 80073fe:	2b00      	cmp	r3, #0
 8007400:	d105      	bne.n	800740e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8007402:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007406:	f003 0301 	and.w	r3, r3, #1
 800740a:	2b00      	cmp	r3, #0
 800740c:	d005      	beq.n	800741a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007412:	f043 0208 	orr.w	r2, r3, #8
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800741e:	2b00      	cmp	r3, #0
 8007420:	f000 81ed 	beq.w	80077fe <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007424:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007428:	f003 0320 	and.w	r3, r3, #32
 800742c:	2b00      	cmp	r3, #0
 800742e:	d008      	beq.n	8007442 <HAL_UART_IRQHandler+0x14e>
 8007430:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007434:	f003 0320 	and.w	r3, r3, #32
 8007438:	2b00      	cmp	r3, #0
 800743a:	d002      	beq.n	8007442 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800743c:	6878      	ldr	r0, [r7, #4]
 800743e:	f000 faf0 	bl	8007a22 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	681b      	ldr	r3, [r3, #0]
 8007446:	695b      	ldr	r3, [r3, #20]
 8007448:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800744c:	2b40      	cmp	r3, #64	; 0x40
 800744e:	bf0c      	ite	eq
 8007450:	2301      	moveq	r3, #1
 8007452:	2300      	movne	r3, #0
 8007454:	b2db      	uxtb	r3, r3
 8007456:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800745e:	f003 0308 	and.w	r3, r3, #8
 8007462:	2b00      	cmp	r3, #0
 8007464:	d103      	bne.n	800746e <HAL_UART_IRQHandler+0x17a>
 8007466:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800746a:	2b00      	cmp	r3, #0
 800746c:	d04f      	beq.n	800750e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800746e:	6878      	ldr	r0, [r7, #4]
 8007470:	f000 f9f8 	bl	8007864 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	681b      	ldr	r3, [r3, #0]
 8007478:	695b      	ldr	r3, [r3, #20]
 800747a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800747e:	2b40      	cmp	r3, #64	; 0x40
 8007480:	d141      	bne.n	8007506 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	681b      	ldr	r3, [r3, #0]
 8007486:	3314      	adds	r3, #20
 8007488:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800748c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007490:	e853 3f00 	ldrex	r3, [r3]
 8007494:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8007498:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800749c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80074a0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	681b      	ldr	r3, [r3, #0]
 80074a8:	3314      	adds	r3, #20
 80074aa:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80074ae:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80074b2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80074b6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80074ba:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80074be:	e841 2300 	strex	r3, r2, [r1]
 80074c2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80074c6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80074ca:	2b00      	cmp	r3, #0
 80074cc:	d1d9      	bne.n	8007482 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80074d2:	2b00      	cmp	r3, #0
 80074d4:	d013      	beq.n	80074fe <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80074da:	4a7d      	ldr	r2, [pc, #500]	; (80076d0 <HAL_UART_IRQHandler+0x3dc>)
 80074dc:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80074e2:	4618      	mov	r0, r3
 80074e4:	f7fc fd1e 	bl	8003f24 <HAL_DMA_Abort_IT>
 80074e8:	4603      	mov	r3, r0
 80074ea:	2b00      	cmp	r3, #0
 80074ec:	d016      	beq.n	800751c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80074f2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80074f4:	687a      	ldr	r2, [r7, #4]
 80074f6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80074f8:	4610      	mov	r0, r2
 80074fa:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80074fc:	e00e      	b.n	800751c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80074fe:	6878      	ldr	r0, [r7, #4]
 8007500:	f000 f99a 	bl	8007838 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007504:	e00a      	b.n	800751c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007506:	6878      	ldr	r0, [r7, #4]
 8007508:	f000 f996 	bl	8007838 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800750c:	e006      	b.n	800751c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800750e:	6878      	ldr	r0, [r7, #4]
 8007510:	f000 f992 	bl	8007838 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	2200      	movs	r2, #0
 8007518:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800751a:	e170      	b.n	80077fe <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800751c:	bf00      	nop
    return;
 800751e:	e16e      	b.n	80077fe <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007524:	2b01      	cmp	r3, #1
 8007526:	f040 814a 	bne.w	80077be <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800752a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800752e:	f003 0310 	and.w	r3, r3, #16
 8007532:	2b00      	cmp	r3, #0
 8007534:	f000 8143 	beq.w	80077be <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8007538:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800753c:	f003 0310 	and.w	r3, r3, #16
 8007540:	2b00      	cmp	r3, #0
 8007542:	f000 813c 	beq.w	80077be <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8007546:	2300      	movs	r3, #0
 8007548:	60bb      	str	r3, [r7, #8]
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	681b      	ldr	r3, [r3, #0]
 800754e:	681b      	ldr	r3, [r3, #0]
 8007550:	60bb      	str	r3, [r7, #8]
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	681b      	ldr	r3, [r3, #0]
 8007556:	685b      	ldr	r3, [r3, #4]
 8007558:	60bb      	str	r3, [r7, #8]
 800755a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	681b      	ldr	r3, [r3, #0]
 8007560:	695b      	ldr	r3, [r3, #20]
 8007562:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007566:	2b40      	cmp	r3, #64	; 0x40
 8007568:	f040 80b4 	bne.w	80076d4 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007570:	681b      	ldr	r3, [r3, #0]
 8007572:	685b      	ldr	r3, [r3, #4]
 8007574:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8007578:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800757c:	2b00      	cmp	r3, #0
 800757e:	f000 8140 	beq.w	8007802 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8007586:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800758a:	429a      	cmp	r2, r3
 800758c:	f080 8139 	bcs.w	8007802 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8007596:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800759c:	69db      	ldr	r3, [r3, #28]
 800759e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80075a2:	f000 8088 	beq.w	80076b6 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	681b      	ldr	r3, [r3, #0]
 80075aa:	330c      	adds	r3, #12
 80075ac:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80075b0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80075b4:	e853 3f00 	ldrex	r3, [r3]
 80075b8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80075bc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80075c0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80075c4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	681b      	ldr	r3, [r3, #0]
 80075cc:	330c      	adds	r3, #12
 80075ce:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80075d2:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80075d6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80075da:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80075de:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80075e2:	e841 2300 	strex	r3, r2, [r1]
 80075e6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80075ea:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80075ee:	2b00      	cmp	r3, #0
 80075f0:	d1d9      	bne.n	80075a6 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	681b      	ldr	r3, [r3, #0]
 80075f6:	3314      	adds	r3, #20
 80075f8:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80075fa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80075fc:	e853 3f00 	ldrex	r3, [r3]
 8007600:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8007602:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007604:	f023 0301 	bic.w	r3, r3, #1
 8007608:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	681b      	ldr	r3, [r3, #0]
 8007610:	3314      	adds	r3, #20
 8007612:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8007616:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800761a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800761c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800761e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8007622:	e841 2300 	strex	r3, r2, [r1]
 8007626:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8007628:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800762a:	2b00      	cmp	r3, #0
 800762c:	d1e1      	bne.n	80075f2 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	681b      	ldr	r3, [r3, #0]
 8007632:	3314      	adds	r3, #20
 8007634:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007636:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007638:	e853 3f00 	ldrex	r3, [r3]
 800763c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800763e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007640:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007644:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	681b      	ldr	r3, [r3, #0]
 800764c:	3314      	adds	r3, #20
 800764e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8007652:	66fa      	str	r2, [r7, #108]	; 0x6c
 8007654:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007656:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8007658:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800765a:	e841 2300 	strex	r3, r2, [r1]
 800765e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8007660:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007662:	2b00      	cmp	r3, #0
 8007664:	d1e3      	bne.n	800762e <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	2220      	movs	r2, #32
 800766a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	2200      	movs	r2, #0
 8007672:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	681b      	ldr	r3, [r3, #0]
 8007678:	330c      	adds	r3, #12
 800767a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800767c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800767e:	e853 3f00 	ldrex	r3, [r3]
 8007682:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8007684:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007686:	f023 0310 	bic.w	r3, r3, #16
 800768a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	681b      	ldr	r3, [r3, #0]
 8007692:	330c      	adds	r3, #12
 8007694:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8007698:	65ba      	str	r2, [r7, #88]	; 0x58
 800769a:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800769c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800769e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80076a0:	e841 2300 	strex	r3, r2, [r1]
 80076a4:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80076a6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80076a8:	2b00      	cmp	r3, #0
 80076aa:	d1e3      	bne.n	8007674 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80076b0:	4618      	mov	r0, r3
 80076b2:	f7fc fbc7 	bl	8003e44 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80076be:	b29b      	uxth	r3, r3
 80076c0:	1ad3      	subs	r3, r2, r3
 80076c2:	b29b      	uxth	r3, r3
 80076c4:	4619      	mov	r1, r3
 80076c6:	6878      	ldr	r0, [r7, #4]
 80076c8:	f000 f8c0 	bl	800784c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80076cc:	e099      	b.n	8007802 <HAL_UART_IRQHandler+0x50e>
 80076ce:	bf00      	nop
 80076d0:	0800792b 	.word	0x0800792b
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80076dc:	b29b      	uxth	r3, r3
 80076de:	1ad3      	subs	r3, r2, r3
 80076e0:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80076e8:	b29b      	uxth	r3, r3
 80076ea:	2b00      	cmp	r3, #0
 80076ec:	f000 808b 	beq.w	8007806 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 80076f0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80076f4:	2b00      	cmp	r3, #0
 80076f6:	f000 8086 	beq.w	8007806 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	681b      	ldr	r3, [r3, #0]
 80076fe:	330c      	adds	r3, #12
 8007700:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007702:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007704:	e853 3f00 	ldrex	r3, [r3]
 8007708:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800770a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800770c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007710:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	681b      	ldr	r3, [r3, #0]
 8007718:	330c      	adds	r3, #12
 800771a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800771e:	647a      	str	r2, [r7, #68]	; 0x44
 8007720:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007722:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007724:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007726:	e841 2300 	strex	r3, r2, [r1]
 800772a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800772c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800772e:	2b00      	cmp	r3, #0
 8007730:	d1e3      	bne.n	80076fa <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	681b      	ldr	r3, [r3, #0]
 8007736:	3314      	adds	r3, #20
 8007738:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800773a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800773c:	e853 3f00 	ldrex	r3, [r3]
 8007740:	623b      	str	r3, [r7, #32]
   return(result);
 8007742:	6a3b      	ldr	r3, [r7, #32]
 8007744:	f023 0301 	bic.w	r3, r3, #1
 8007748:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	681b      	ldr	r3, [r3, #0]
 8007750:	3314      	adds	r3, #20
 8007752:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8007756:	633a      	str	r2, [r7, #48]	; 0x30
 8007758:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800775a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800775c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800775e:	e841 2300 	strex	r3, r2, [r1]
 8007762:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007764:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007766:	2b00      	cmp	r3, #0
 8007768:	d1e3      	bne.n	8007732 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	2220      	movs	r2, #32
 800776e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	2200      	movs	r2, #0
 8007776:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	681b      	ldr	r3, [r3, #0]
 800777c:	330c      	adds	r3, #12
 800777e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007780:	693b      	ldr	r3, [r7, #16]
 8007782:	e853 3f00 	ldrex	r3, [r3]
 8007786:	60fb      	str	r3, [r7, #12]
   return(result);
 8007788:	68fb      	ldr	r3, [r7, #12]
 800778a:	f023 0310 	bic.w	r3, r3, #16
 800778e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	681b      	ldr	r3, [r3, #0]
 8007796:	330c      	adds	r3, #12
 8007798:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800779c:	61fa      	str	r2, [r7, #28]
 800779e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80077a0:	69b9      	ldr	r1, [r7, #24]
 80077a2:	69fa      	ldr	r2, [r7, #28]
 80077a4:	e841 2300 	strex	r3, r2, [r1]
 80077a8:	617b      	str	r3, [r7, #20]
   return(result);
 80077aa:	697b      	ldr	r3, [r7, #20]
 80077ac:	2b00      	cmp	r3, #0
 80077ae:	d1e3      	bne.n	8007778 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80077b0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80077b4:	4619      	mov	r1, r3
 80077b6:	6878      	ldr	r0, [r7, #4]
 80077b8:	f000 f848 	bl	800784c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80077bc:	e023      	b.n	8007806 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80077be:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80077c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80077c6:	2b00      	cmp	r3, #0
 80077c8:	d009      	beq.n	80077de <HAL_UART_IRQHandler+0x4ea>
 80077ca:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80077ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80077d2:	2b00      	cmp	r3, #0
 80077d4:	d003      	beq.n	80077de <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 80077d6:	6878      	ldr	r0, [r7, #4]
 80077d8:	f000 f8bb 	bl	8007952 <UART_Transmit_IT>
    return;
 80077dc:	e014      	b.n	8007808 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80077de:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80077e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80077e6:	2b00      	cmp	r3, #0
 80077e8:	d00e      	beq.n	8007808 <HAL_UART_IRQHandler+0x514>
 80077ea:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80077ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80077f2:	2b00      	cmp	r3, #0
 80077f4:	d008      	beq.n	8007808 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 80077f6:	6878      	ldr	r0, [r7, #4]
 80077f8:	f000 f8fb 	bl	80079f2 <UART_EndTransmit_IT>
    return;
 80077fc:	e004      	b.n	8007808 <HAL_UART_IRQHandler+0x514>
    return;
 80077fe:	bf00      	nop
 8007800:	e002      	b.n	8007808 <HAL_UART_IRQHandler+0x514>
      return;
 8007802:	bf00      	nop
 8007804:	e000      	b.n	8007808 <HAL_UART_IRQHandler+0x514>
      return;
 8007806:	bf00      	nop
  }
}
 8007808:	37e8      	adds	r7, #232	; 0xe8
 800780a:	46bd      	mov	sp, r7
 800780c:	bd80      	pop	{r7, pc}
 800780e:	bf00      	nop

08007810 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8007810:	b480      	push	{r7}
 8007812:	b083      	sub	sp, #12
 8007814:	af00      	add	r7, sp, #0
 8007816:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8007818:	bf00      	nop
 800781a:	370c      	adds	r7, #12
 800781c:	46bd      	mov	sp, r7
 800781e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007822:	4770      	bx	lr

08007824 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8007824:	b480      	push	{r7}
 8007826:	b083      	sub	sp, #12
 8007828:	af00      	add	r7, sp, #0
 800782a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 800782c:	bf00      	nop
 800782e:	370c      	adds	r7, #12
 8007830:	46bd      	mov	sp, r7
 8007832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007836:	4770      	bx	lr

08007838 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007838:	b480      	push	{r7}
 800783a:	b083      	sub	sp, #12
 800783c:	af00      	add	r7, sp, #0
 800783e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8007840:	bf00      	nop
 8007842:	370c      	adds	r7, #12
 8007844:	46bd      	mov	sp, r7
 8007846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800784a:	4770      	bx	lr

0800784c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800784c:	b480      	push	{r7}
 800784e:	b083      	sub	sp, #12
 8007850:	af00      	add	r7, sp, #0
 8007852:	6078      	str	r0, [r7, #4]
 8007854:	460b      	mov	r3, r1
 8007856:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8007858:	bf00      	nop
 800785a:	370c      	adds	r7, #12
 800785c:	46bd      	mov	sp, r7
 800785e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007862:	4770      	bx	lr

08007864 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007864:	b480      	push	{r7}
 8007866:	b095      	sub	sp, #84	; 0x54
 8007868:	af00      	add	r7, sp, #0
 800786a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	681b      	ldr	r3, [r3, #0]
 8007870:	330c      	adds	r3, #12
 8007872:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007874:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007876:	e853 3f00 	ldrex	r3, [r3]
 800787a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800787c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800787e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007882:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	681b      	ldr	r3, [r3, #0]
 8007888:	330c      	adds	r3, #12
 800788a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800788c:	643a      	str	r2, [r7, #64]	; 0x40
 800788e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007890:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007892:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007894:	e841 2300 	strex	r3, r2, [r1]
 8007898:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800789a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800789c:	2b00      	cmp	r3, #0
 800789e:	d1e5      	bne.n	800786c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	681b      	ldr	r3, [r3, #0]
 80078a4:	3314      	adds	r3, #20
 80078a6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80078a8:	6a3b      	ldr	r3, [r7, #32]
 80078aa:	e853 3f00 	ldrex	r3, [r3]
 80078ae:	61fb      	str	r3, [r7, #28]
   return(result);
 80078b0:	69fb      	ldr	r3, [r7, #28]
 80078b2:	f023 0301 	bic.w	r3, r3, #1
 80078b6:	64bb      	str	r3, [r7, #72]	; 0x48
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	681b      	ldr	r3, [r3, #0]
 80078bc:	3314      	adds	r3, #20
 80078be:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80078c0:	62fa      	str	r2, [r7, #44]	; 0x2c
 80078c2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80078c4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80078c6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80078c8:	e841 2300 	strex	r3, r2, [r1]
 80078cc:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80078ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078d0:	2b00      	cmp	r3, #0
 80078d2:	d1e5      	bne.n	80078a0 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80078d8:	2b01      	cmp	r3, #1
 80078da:	d119      	bne.n	8007910 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	681b      	ldr	r3, [r3, #0]
 80078e0:	330c      	adds	r3, #12
 80078e2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80078e4:	68fb      	ldr	r3, [r7, #12]
 80078e6:	e853 3f00 	ldrex	r3, [r3]
 80078ea:	60bb      	str	r3, [r7, #8]
   return(result);
 80078ec:	68bb      	ldr	r3, [r7, #8]
 80078ee:	f023 0310 	bic.w	r3, r3, #16
 80078f2:	647b      	str	r3, [r7, #68]	; 0x44
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	681b      	ldr	r3, [r3, #0]
 80078f8:	330c      	adds	r3, #12
 80078fa:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80078fc:	61ba      	str	r2, [r7, #24]
 80078fe:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007900:	6979      	ldr	r1, [r7, #20]
 8007902:	69ba      	ldr	r2, [r7, #24]
 8007904:	e841 2300 	strex	r3, r2, [r1]
 8007908:	613b      	str	r3, [r7, #16]
   return(result);
 800790a:	693b      	ldr	r3, [r7, #16]
 800790c:	2b00      	cmp	r3, #0
 800790e:	d1e5      	bne.n	80078dc <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	2220      	movs	r2, #32
 8007914:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	2200      	movs	r2, #0
 800791c:	631a      	str	r2, [r3, #48]	; 0x30
}
 800791e:	bf00      	nop
 8007920:	3754      	adds	r7, #84	; 0x54
 8007922:	46bd      	mov	sp, r7
 8007924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007928:	4770      	bx	lr

0800792a <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800792a:	b580      	push	{r7, lr}
 800792c:	b084      	sub	sp, #16
 800792e:	af00      	add	r7, sp, #0
 8007930:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007936:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8007938:	68fb      	ldr	r3, [r7, #12]
 800793a:	2200      	movs	r2, #0
 800793c:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800793e:	68fb      	ldr	r3, [r7, #12]
 8007940:	2200      	movs	r2, #0
 8007942:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007944:	68f8      	ldr	r0, [r7, #12]
 8007946:	f7ff ff77 	bl	8007838 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800794a:	bf00      	nop
 800794c:	3710      	adds	r7, #16
 800794e:	46bd      	mov	sp, r7
 8007950:	bd80      	pop	{r7, pc}

08007952 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8007952:	b480      	push	{r7}
 8007954:	b085      	sub	sp, #20
 8007956:	af00      	add	r7, sp, #0
 8007958:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007960:	b2db      	uxtb	r3, r3
 8007962:	2b21      	cmp	r3, #33	; 0x21
 8007964:	d13e      	bne.n	80079e4 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	689b      	ldr	r3, [r3, #8]
 800796a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800796e:	d114      	bne.n	800799a <UART_Transmit_IT+0x48>
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	691b      	ldr	r3, [r3, #16]
 8007974:	2b00      	cmp	r3, #0
 8007976:	d110      	bne.n	800799a <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	6a1b      	ldr	r3, [r3, #32]
 800797c:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800797e:	68fb      	ldr	r3, [r7, #12]
 8007980:	881b      	ldrh	r3, [r3, #0]
 8007982:	461a      	mov	r2, r3
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	681b      	ldr	r3, [r3, #0]
 8007988:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800798c:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	6a1b      	ldr	r3, [r3, #32]
 8007992:	1c9a      	adds	r2, r3, #2
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	621a      	str	r2, [r3, #32]
 8007998:	e008      	b.n	80079ac <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	6a1b      	ldr	r3, [r3, #32]
 800799e:	1c59      	adds	r1, r3, #1
 80079a0:	687a      	ldr	r2, [r7, #4]
 80079a2:	6211      	str	r1, [r2, #32]
 80079a4:	781a      	ldrb	r2, [r3, #0]
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	681b      	ldr	r3, [r3, #0]
 80079aa:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80079b0:	b29b      	uxth	r3, r3
 80079b2:	3b01      	subs	r3, #1
 80079b4:	b29b      	uxth	r3, r3
 80079b6:	687a      	ldr	r2, [r7, #4]
 80079b8:	4619      	mov	r1, r3
 80079ba:	84d1      	strh	r1, [r2, #38]	; 0x26
 80079bc:	2b00      	cmp	r3, #0
 80079be:	d10f      	bne.n	80079e0 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	681b      	ldr	r3, [r3, #0]
 80079c4:	68da      	ldr	r2, [r3, #12]
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	681b      	ldr	r3, [r3, #0]
 80079ca:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80079ce:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	681b      	ldr	r3, [r3, #0]
 80079d4:	68da      	ldr	r2, [r3, #12]
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	681b      	ldr	r3, [r3, #0]
 80079da:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80079de:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80079e0:	2300      	movs	r3, #0
 80079e2:	e000      	b.n	80079e6 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80079e4:	2302      	movs	r3, #2
  }
}
 80079e6:	4618      	mov	r0, r3
 80079e8:	3714      	adds	r7, #20
 80079ea:	46bd      	mov	sp, r7
 80079ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079f0:	4770      	bx	lr

080079f2 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80079f2:	b580      	push	{r7, lr}
 80079f4:	b082      	sub	sp, #8
 80079f6:	af00      	add	r7, sp, #0
 80079f8:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	681b      	ldr	r3, [r3, #0]
 80079fe:	68da      	ldr	r2, [r3, #12]
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	681b      	ldr	r3, [r3, #0]
 8007a04:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007a08:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	2220      	movs	r2, #32
 8007a0e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007a12:	6878      	ldr	r0, [r7, #4]
 8007a14:	f7ff fefc 	bl	8007810 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8007a18:	2300      	movs	r3, #0
}
 8007a1a:	4618      	mov	r0, r3
 8007a1c:	3708      	adds	r7, #8
 8007a1e:	46bd      	mov	sp, r7
 8007a20:	bd80      	pop	{r7, pc}

08007a22 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8007a22:	b580      	push	{r7, lr}
 8007a24:	b08c      	sub	sp, #48	; 0x30
 8007a26:	af00      	add	r7, sp, #0
 8007a28:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007a30:	b2db      	uxtb	r3, r3
 8007a32:	2b22      	cmp	r3, #34	; 0x22
 8007a34:	f040 80ab 	bne.w	8007b8e <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	689b      	ldr	r3, [r3, #8]
 8007a3c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007a40:	d117      	bne.n	8007a72 <UART_Receive_IT+0x50>
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	691b      	ldr	r3, [r3, #16]
 8007a46:	2b00      	cmp	r3, #0
 8007a48:	d113      	bne.n	8007a72 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8007a4a:	2300      	movs	r3, #0
 8007a4c:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007a52:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	681b      	ldr	r3, [r3, #0]
 8007a58:	685b      	ldr	r3, [r3, #4]
 8007a5a:	b29b      	uxth	r3, r3
 8007a5c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007a60:	b29a      	uxth	r2, r3
 8007a62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a64:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007a6a:	1c9a      	adds	r2, r3, #2
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	629a      	str	r2, [r3, #40]	; 0x28
 8007a70:	e026      	b.n	8007ac0 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007a76:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8007a78:	2300      	movs	r3, #0
 8007a7a:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	689b      	ldr	r3, [r3, #8]
 8007a80:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007a84:	d007      	beq.n	8007a96 <UART_Receive_IT+0x74>
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	689b      	ldr	r3, [r3, #8]
 8007a8a:	2b00      	cmp	r3, #0
 8007a8c:	d10a      	bne.n	8007aa4 <UART_Receive_IT+0x82>
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	691b      	ldr	r3, [r3, #16]
 8007a92:	2b00      	cmp	r3, #0
 8007a94:	d106      	bne.n	8007aa4 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	681b      	ldr	r3, [r3, #0]
 8007a9a:	685b      	ldr	r3, [r3, #4]
 8007a9c:	b2da      	uxtb	r2, r3
 8007a9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007aa0:	701a      	strb	r2, [r3, #0]
 8007aa2:	e008      	b.n	8007ab6 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	681b      	ldr	r3, [r3, #0]
 8007aa8:	685b      	ldr	r3, [r3, #4]
 8007aaa:	b2db      	uxtb	r3, r3
 8007aac:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007ab0:	b2da      	uxtb	r2, r3
 8007ab2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ab4:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007aba:	1c5a      	adds	r2, r3, #1
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007ac4:	b29b      	uxth	r3, r3
 8007ac6:	3b01      	subs	r3, #1
 8007ac8:	b29b      	uxth	r3, r3
 8007aca:	687a      	ldr	r2, [r7, #4]
 8007acc:	4619      	mov	r1, r3
 8007ace:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8007ad0:	2b00      	cmp	r3, #0
 8007ad2:	d15a      	bne.n	8007b8a <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	681b      	ldr	r3, [r3, #0]
 8007ad8:	68da      	ldr	r2, [r3, #12]
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	681b      	ldr	r3, [r3, #0]
 8007ade:	f022 0220 	bic.w	r2, r2, #32
 8007ae2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	681b      	ldr	r3, [r3, #0]
 8007ae8:	68da      	ldr	r2, [r3, #12]
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	681b      	ldr	r3, [r3, #0]
 8007aee:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007af2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	681b      	ldr	r3, [r3, #0]
 8007af8:	695a      	ldr	r2, [r3, #20]
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	681b      	ldr	r3, [r3, #0]
 8007afe:	f022 0201 	bic.w	r2, r2, #1
 8007b02:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	2220      	movs	r2, #32
 8007b08:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007b10:	2b01      	cmp	r3, #1
 8007b12:	d135      	bne.n	8007b80 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	2200      	movs	r2, #0
 8007b18:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	681b      	ldr	r3, [r3, #0]
 8007b1e:	330c      	adds	r3, #12
 8007b20:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b22:	697b      	ldr	r3, [r7, #20]
 8007b24:	e853 3f00 	ldrex	r3, [r3]
 8007b28:	613b      	str	r3, [r7, #16]
   return(result);
 8007b2a:	693b      	ldr	r3, [r7, #16]
 8007b2c:	f023 0310 	bic.w	r3, r3, #16
 8007b30:	627b      	str	r3, [r7, #36]	; 0x24
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	681b      	ldr	r3, [r3, #0]
 8007b36:	330c      	adds	r3, #12
 8007b38:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007b3a:	623a      	str	r2, [r7, #32]
 8007b3c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b3e:	69f9      	ldr	r1, [r7, #28]
 8007b40:	6a3a      	ldr	r2, [r7, #32]
 8007b42:	e841 2300 	strex	r3, r2, [r1]
 8007b46:	61bb      	str	r3, [r7, #24]
   return(result);
 8007b48:	69bb      	ldr	r3, [r7, #24]
 8007b4a:	2b00      	cmp	r3, #0
 8007b4c:	d1e5      	bne.n	8007b1a <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	681b      	ldr	r3, [r3, #0]
 8007b52:	681b      	ldr	r3, [r3, #0]
 8007b54:	f003 0310 	and.w	r3, r3, #16
 8007b58:	2b10      	cmp	r3, #16
 8007b5a:	d10a      	bne.n	8007b72 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8007b5c:	2300      	movs	r3, #0
 8007b5e:	60fb      	str	r3, [r7, #12]
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	681b      	ldr	r3, [r3, #0]
 8007b64:	681b      	ldr	r3, [r3, #0]
 8007b66:	60fb      	str	r3, [r7, #12]
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	681b      	ldr	r3, [r3, #0]
 8007b6c:	685b      	ldr	r3, [r3, #4]
 8007b6e:	60fb      	str	r3, [r7, #12]
 8007b70:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8007b76:	4619      	mov	r1, r3
 8007b78:	6878      	ldr	r0, [r7, #4]
 8007b7a:	f7ff fe67 	bl	800784c <HAL_UARTEx_RxEventCallback>
 8007b7e:	e002      	b.n	8007b86 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8007b80:	6878      	ldr	r0, [r7, #4]
 8007b82:	f7ff fe4f 	bl	8007824 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8007b86:	2300      	movs	r3, #0
 8007b88:	e002      	b.n	8007b90 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8007b8a:	2300      	movs	r3, #0
 8007b8c:	e000      	b.n	8007b90 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8007b8e:	2302      	movs	r3, #2
  }
}
 8007b90:	4618      	mov	r0, r3
 8007b92:	3730      	adds	r7, #48	; 0x30
 8007b94:	46bd      	mov	sp, r7
 8007b96:	bd80      	pop	{r7, pc}

08007b98 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007b98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007b9c:	b09f      	sub	sp, #124	; 0x7c
 8007b9e:	af00      	add	r7, sp, #0
 8007ba0:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007ba2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007ba4:	681b      	ldr	r3, [r3, #0]
 8007ba6:	691b      	ldr	r3, [r3, #16]
 8007ba8:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8007bac:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007bae:	68d9      	ldr	r1, [r3, #12]
 8007bb0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007bb2:	681a      	ldr	r2, [r3, #0]
 8007bb4:	ea40 0301 	orr.w	r3, r0, r1
 8007bb8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8007bba:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007bbc:	689a      	ldr	r2, [r3, #8]
 8007bbe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007bc0:	691b      	ldr	r3, [r3, #16]
 8007bc2:	431a      	orrs	r2, r3
 8007bc4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007bc6:	695b      	ldr	r3, [r3, #20]
 8007bc8:	431a      	orrs	r2, r3
 8007bca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007bcc:	69db      	ldr	r3, [r3, #28]
 8007bce:	4313      	orrs	r3, r2
 8007bd0:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8007bd2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007bd4:	681b      	ldr	r3, [r3, #0]
 8007bd6:	68db      	ldr	r3, [r3, #12]
 8007bd8:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8007bdc:	f021 010c 	bic.w	r1, r1, #12
 8007be0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007be2:	681a      	ldr	r2, [r3, #0]
 8007be4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007be6:	430b      	orrs	r3, r1
 8007be8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8007bea:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007bec:	681b      	ldr	r3, [r3, #0]
 8007bee:	695b      	ldr	r3, [r3, #20]
 8007bf0:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8007bf4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007bf6:	6999      	ldr	r1, [r3, #24]
 8007bf8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007bfa:	681a      	ldr	r2, [r3, #0]
 8007bfc:	ea40 0301 	orr.w	r3, r0, r1
 8007c00:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8007c02:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007c04:	681a      	ldr	r2, [r3, #0]
 8007c06:	4bc5      	ldr	r3, [pc, #788]	; (8007f1c <UART_SetConfig+0x384>)
 8007c08:	429a      	cmp	r2, r3
 8007c0a:	d004      	beq.n	8007c16 <UART_SetConfig+0x7e>
 8007c0c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007c0e:	681a      	ldr	r2, [r3, #0]
 8007c10:	4bc3      	ldr	r3, [pc, #780]	; (8007f20 <UART_SetConfig+0x388>)
 8007c12:	429a      	cmp	r2, r3
 8007c14:	d103      	bne.n	8007c1e <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8007c16:	f7fe f945 	bl	8005ea4 <HAL_RCC_GetPCLK2Freq>
 8007c1a:	6778      	str	r0, [r7, #116]	; 0x74
 8007c1c:	e002      	b.n	8007c24 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8007c1e:	f7fe f92d 	bl	8005e7c <HAL_RCC_GetPCLK1Freq>
 8007c22:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007c24:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007c26:	69db      	ldr	r3, [r3, #28]
 8007c28:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007c2c:	f040 80b6 	bne.w	8007d9c <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8007c30:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007c32:	461c      	mov	r4, r3
 8007c34:	f04f 0500 	mov.w	r5, #0
 8007c38:	4622      	mov	r2, r4
 8007c3a:	462b      	mov	r3, r5
 8007c3c:	1891      	adds	r1, r2, r2
 8007c3e:	6439      	str	r1, [r7, #64]	; 0x40
 8007c40:	415b      	adcs	r3, r3
 8007c42:	647b      	str	r3, [r7, #68]	; 0x44
 8007c44:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8007c48:	1912      	adds	r2, r2, r4
 8007c4a:	eb45 0303 	adc.w	r3, r5, r3
 8007c4e:	f04f 0000 	mov.w	r0, #0
 8007c52:	f04f 0100 	mov.w	r1, #0
 8007c56:	00d9      	lsls	r1, r3, #3
 8007c58:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8007c5c:	00d0      	lsls	r0, r2, #3
 8007c5e:	4602      	mov	r2, r0
 8007c60:	460b      	mov	r3, r1
 8007c62:	1911      	adds	r1, r2, r4
 8007c64:	6639      	str	r1, [r7, #96]	; 0x60
 8007c66:	416b      	adcs	r3, r5
 8007c68:	667b      	str	r3, [r7, #100]	; 0x64
 8007c6a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007c6c:	685b      	ldr	r3, [r3, #4]
 8007c6e:	461a      	mov	r2, r3
 8007c70:	f04f 0300 	mov.w	r3, #0
 8007c74:	1891      	adds	r1, r2, r2
 8007c76:	63b9      	str	r1, [r7, #56]	; 0x38
 8007c78:	415b      	adcs	r3, r3
 8007c7a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007c7c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8007c80:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8007c84:	f7f8 ff88 	bl	8000b98 <__aeabi_uldivmod>
 8007c88:	4602      	mov	r2, r0
 8007c8a:	460b      	mov	r3, r1
 8007c8c:	4ba5      	ldr	r3, [pc, #660]	; (8007f24 <UART_SetConfig+0x38c>)
 8007c8e:	fba3 2302 	umull	r2, r3, r3, r2
 8007c92:	095b      	lsrs	r3, r3, #5
 8007c94:	011e      	lsls	r6, r3, #4
 8007c96:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007c98:	461c      	mov	r4, r3
 8007c9a:	f04f 0500 	mov.w	r5, #0
 8007c9e:	4622      	mov	r2, r4
 8007ca0:	462b      	mov	r3, r5
 8007ca2:	1891      	adds	r1, r2, r2
 8007ca4:	6339      	str	r1, [r7, #48]	; 0x30
 8007ca6:	415b      	adcs	r3, r3
 8007ca8:	637b      	str	r3, [r7, #52]	; 0x34
 8007caa:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8007cae:	1912      	adds	r2, r2, r4
 8007cb0:	eb45 0303 	adc.w	r3, r5, r3
 8007cb4:	f04f 0000 	mov.w	r0, #0
 8007cb8:	f04f 0100 	mov.w	r1, #0
 8007cbc:	00d9      	lsls	r1, r3, #3
 8007cbe:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8007cc2:	00d0      	lsls	r0, r2, #3
 8007cc4:	4602      	mov	r2, r0
 8007cc6:	460b      	mov	r3, r1
 8007cc8:	1911      	adds	r1, r2, r4
 8007cca:	65b9      	str	r1, [r7, #88]	; 0x58
 8007ccc:	416b      	adcs	r3, r5
 8007cce:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007cd0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007cd2:	685b      	ldr	r3, [r3, #4]
 8007cd4:	461a      	mov	r2, r3
 8007cd6:	f04f 0300 	mov.w	r3, #0
 8007cda:	1891      	adds	r1, r2, r2
 8007cdc:	62b9      	str	r1, [r7, #40]	; 0x28
 8007cde:	415b      	adcs	r3, r3
 8007ce0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007ce2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8007ce6:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8007cea:	f7f8 ff55 	bl	8000b98 <__aeabi_uldivmod>
 8007cee:	4602      	mov	r2, r0
 8007cf0:	460b      	mov	r3, r1
 8007cf2:	4b8c      	ldr	r3, [pc, #560]	; (8007f24 <UART_SetConfig+0x38c>)
 8007cf4:	fba3 1302 	umull	r1, r3, r3, r2
 8007cf8:	095b      	lsrs	r3, r3, #5
 8007cfa:	2164      	movs	r1, #100	; 0x64
 8007cfc:	fb01 f303 	mul.w	r3, r1, r3
 8007d00:	1ad3      	subs	r3, r2, r3
 8007d02:	00db      	lsls	r3, r3, #3
 8007d04:	3332      	adds	r3, #50	; 0x32
 8007d06:	4a87      	ldr	r2, [pc, #540]	; (8007f24 <UART_SetConfig+0x38c>)
 8007d08:	fba2 2303 	umull	r2, r3, r2, r3
 8007d0c:	095b      	lsrs	r3, r3, #5
 8007d0e:	005b      	lsls	r3, r3, #1
 8007d10:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8007d14:	441e      	add	r6, r3
 8007d16:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007d18:	4618      	mov	r0, r3
 8007d1a:	f04f 0100 	mov.w	r1, #0
 8007d1e:	4602      	mov	r2, r0
 8007d20:	460b      	mov	r3, r1
 8007d22:	1894      	adds	r4, r2, r2
 8007d24:	623c      	str	r4, [r7, #32]
 8007d26:	415b      	adcs	r3, r3
 8007d28:	627b      	str	r3, [r7, #36]	; 0x24
 8007d2a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8007d2e:	1812      	adds	r2, r2, r0
 8007d30:	eb41 0303 	adc.w	r3, r1, r3
 8007d34:	f04f 0400 	mov.w	r4, #0
 8007d38:	f04f 0500 	mov.w	r5, #0
 8007d3c:	00dd      	lsls	r5, r3, #3
 8007d3e:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8007d42:	00d4      	lsls	r4, r2, #3
 8007d44:	4622      	mov	r2, r4
 8007d46:	462b      	mov	r3, r5
 8007d48:	1814      	adds	r4, r2, r0
 8007d4a:	653c      	str	r4, [r7, #80]	; 0x50
 8007d4c:	414b      	adcs	r3, r1
 8007d4e:	657b      	str	r3, [r7, #84]	; 0x54
 8007d50:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007d52:	685b      	ldr	r3, [r3, #4]
 8007d54:	461a      	mov	r2, r3
 8007d56:	f04f 0300 	mov.w	r3, #0
 8007d5a:	1891      	adds	r1, r2, r2
 8007d5c:	61b9      	str	r1, [r7, #24]
 8007d5e:	415b      	adcs	r3, r3
 8007d60:	61fb      	str	r3, [r7, #28]
 8007d62:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007d66:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8007d6a:	f7f8 ff15 	bl	8000b98 <__aeabi_uldivmod>
 8007d6e:	4602      	mov	r2, r0
 8007d70:	460b      	mov	r3, r1
 8007d72:	4b6c      	ldr	r3, [pc, #432]	; (8007f24 <UART_SetConfig+0x38c>)
 8007d74:	fba3 1302 	umull	r1, r3, r3, r2
 8007d78:	095b      	lsrs	r3, r3, #5
 8007d7a:	2164      	movs	r1, #100	; 0x64
 8007d7c:	fb01 f303 	mul.w	r3, r1, r3
 8007d80:	1ad3      	subs	r3, r2, r3
 8007d82:	00db      	lsls	r3, r3, #3
 8007d84:	3332      	adds	r3, #50	; 0x32
 8007d86:	4a67      	ldr	r2, [pc, #412]	; (8007f24 <UART_SetConfig+0x38c>)
 8007d88:	fba2 2303 	umull	r2, r3, r2, r3
 8007d8c:	095b      	lsrs	r3, r3, #5
 8007d8e:	f003 0207 	and.w	r2, r3, #7
 8007d92:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007d94:	681b      	ldr	r3, [r3, #0]
 8007d96:	4432      	add	r2, r6
 8007d98:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8007d9a:	e0b9      	b.n	8007f10 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007d9c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007d9e:	461c      	mov	r4, r3
 8007da0:	f04f 0500 	mov.w	r5, #0
 8007da4:	4622      	mov	r2, r4
 8007da6:	462b      	mov	r3, r5
 8007da8:	1891      	adds	r1, r2, r2
 8007daa:	6139      	str	r1, [r7, #16]
 8007dac:	415b      	adcs	r3, r3
 8007dae:	617b      	str	r3, [r7, #20]
 8007db0:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8007db4:	1912      	adds	r2, r2, r4
 8007db6:	eb45 0303 	adc.w	r3, r5, r3
 8007dba:	f04f 0000 	mov.w	r0, #0
 8007dbe:	f04f 0100 	mov.w	r1, #0
 8007dc2:	00d9      	lsls	r1, r3, #3
 8007dc4:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8007dc8:	00d0      	lsls	r0, r2, #3
 8007dca:	4602      	mov	r2, r0
 8007dcc:	460b      	mov	r3, r1
 8007dce:	eb12 0804 	adds.w	r8, r2, r4
 8007dd2:	eb43 0905 	adc.w	r9, r3, r5
 8007dd6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007dd8:	685b      	ldr	r3, [r3, #4]
 8007dda:	4618      	mov	r0, r3
 8007ddc:	f04f 0100 	mov.w	r1, #0
 8007de0:	f04f 0200 	mov.w	r2, #0
 8007de4:	f04f 0300 	mov.w	r3, #0
 8007de8:	008b      	lsls	r3, r1, #2
 8007dea:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8007dee:	0082      	lsls	r2, r0, #2
 8007df0:	4640      	mov	r0, r8
 8007df2:	4649      	mov	r1, r9
 8007df4:	f7f8 fed0 	bl	8000b98 <__aeabi_uldivmod>
 8007df8:	4602      	mov	r2, r0
 8007dfa:	460b      	mov	r3, r1
 8007dfc:	4b49      	ldr	r3, [pc, #292]	; (8007f24 <UART_SetConfig+0x38c>)
 8007dfe:	fba3 2302 	umull	r2, r3, r3, r2
 8007e02:	095b      	lsrs	r3, r3, #5
 8007e04:	011e      	lsls	r6, r3, #4
 8007e06:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007e08:	4618      	mov	r0, r3
 8007e0a:	f04f 0100 	mov.w	r1, #0
 8007e0e:	4602      	mov	r2, r0
 8007e10:	460b      	mov	r3, r1
 8007e12:	1894      	adds	r4, r2, r2
 8007e14:	60bc      	str	r4, [r7, #8]
 8007e16:	415b      	adcs	r3, r3
 8007e18:	60fb      	str	r3, [r7, #12]
 8007e1a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8007e1e:	1812      	adds	r2, r2, r0
 8007e20:	eb41 0303 	adc.w	r3, r1, r3
 8007e24:	f04f 0400 	mov.w	r4, #0
 8007e28:	f04f 0500 	mov.w	r5, #0
 8007e2c:	00dd      	lsls	r5, r3, #3
 8007e2e:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8007e32:	00d4      	lsls	r4, r2, #3
 8007e34:	4622      	mov	r2, r4
 8007e36:	462b      	mov	r3, r5
 8007e38:	1814      	adds	r4, r2, r0
 8007e3a:	64bc      	str	r4, [r7, #72]	; 0x48
 8007e3c:	414b      	adcs	r3, r1
 8007e3e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007e40:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007e42:	685b      	ldr	r3, [r3, #4]
 8007e44:	4618      	mov	r0, r3
 8007e46:	f04f 0100 	mov.w	r1, #0
 8007e4a:	f04f 0200 	mov.w	r2, #0
 8007e4e:	f04f 0300 	mov.w	r3, #0
 8007e52:	008b      	lsls	r3, r1, #2
 8007e54:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8007e58:	0082      	lsls	r2, r0, #2
 8007e5a:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8007e5e:	f7f8 fe9b 	bl	8000b98 <__aeabi_uldivmod>
 8007e62:	4602      	mov	r2, r0
 8007e64:	460b      	mov	r3, r1
 8007e66:	4b2f      	ldr	r3, [pc, #188]	; (8007f24 <UART_SetConfig+0x38c>)
 8007e68:	fba3 1302 	umull	r1, r3, r3, r2
 8007e6c:	095b      	lsrs	r3, r3, #5
 8007e6e:	2164      	movs	r1, #100	; 0x64
 8007e70:	fb01 f303 	mul.w	r3, r1, r3
 8007e74:	1ad3      	subs	r3, r2, r3
 8007e76:	011b      	lsls	r3, r3, #4
 8007e78:	3332      	adds	r3, #50	; 0x32
 8007e7a:	4a2a      	ldr	r2, [pc, #168]	; (8007f24 <UART_SetConfig+0x38c>)
 8007e7c:	fba2 2303 	umull	r2, r3, r2, r3
 8007e80:	095b      	lsrs	r3, r3, #5
 8007e82:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007e86:	441e      	add	r6, r3
 8007e88:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007e8a:	4618      	mov	r0, r3
 8007e8c:	f04f 0100 	mov.w	r1, #0
 8007e90:	4602      	mov	r2, r0
 8007e92:	460b      	mov	r3, r1
 8007e94:	1894      	adds	r4, r2, r2
 8007e96:	603c      	str	r4, [r7, #0]
 8007e98:	415b      	adcs	r3, r3
 8007e9a:	607b      	str	r3, [r7, #4]
 8007e9c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007ea0:	1812      	adds	r2, r2, r0
 8007ea2:	eb41 0303 	adc.w	r3, r1, r3
 8007ea6:	f04f 0400 	mov.w	r4, #0
 8007eaa:	f04f 0500 	mov.w	r5, #0
 8007eae:	00dd      	lsls	r5, r3, #3
 8007eb0:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8007eb4:	00d4      	lsls	r4, r2, #3
 8007eb6:	4622      	mov	r2, r4
 8007eb8:	462b      	mov	r3, r5
 8007eba:	eb12 0a00 	adds.w	sl, r2, r0
 8007ebe:	eb43 0b01 	adc.w	fp, r3, r1
 8007ec2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007ec4:	685b      	ldr	r3, [r3, #4]
 8007ec6:	4618      	mov	r0, r3
 8007ec8:	f04f 0100 	mov.w	r1, #0
 8007ecc:	f04f 0200 	mov.w	r2, #0
 8007ed0:	f04f 0300 	mov.w	r3, #0
 8007ed4:	008b      	lsls	r3, r1, #2
 8007ed6:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8007eda:	0082      	lsls	r2, r0, #2
 8007edc:	4650      	mov	r0, sl
 8007ede:	4659      	mov	r1, fp
 8007ee0:	f7f8 fe5a 	bl	8000b98 <__aeabi_uldivmod>
 8007ee4:	4602      	mov	r2, r0
 8007ee6:	460b      	mov	r3, r1
 8007ee8:	4b0e      	ldr	r3, [pc, #56]	; (8007f24 <UART_SetConfig+0x38c>)
 8007eea:	fba3 1302 	umull	r1, r3, r3, r2
 8007eee:	095b      	lsrs	r3, r3, #5
 8007ef0:	2164      	movs	r1, #100	; 0x64
 8007ef2:	fb01 f303 	mul.w	r3, r1, r3
 8007ef6:	1ad3      	subs	r3, r2, r3
 8007ef8:	011b      	lsls	r3, r3, #4
 8007efa:	3332      	adds	r3, #50	; 0x32
 8007efc:	4a09      	ldr	r2, [pc, #36]	; (8007f24 <UART_SetConfig+0x38c>)
 8007efe:	fba2 2303 	umull	r2, r3, r2, r3
 8007f02:	095b      	lsrs	r3, r3, #5
 8007f04:	f003 020f 	and.w	r2, r3, #15
 8007f08:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007f0a:	681b      	ldr	r3, [r3, #0]
 8007f0c:	4432      	add	r2, r6
 8007f0e:	609a      	str	r2, [r3, #8]
}
 8007f10:	bf00      	nop
 8007f12:	377c      	adds	r7, #124	; 0x7c
 8007f14:	46bd      	mov	sp, r7
 8007f16:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007f1a:	bf00      	nop
 8007f1c:	40011000 	.word	0x40011000
 8007f20:	40011400 	.word	0x40011400
 8007f24:	51eb851f 	.word	0x51eb851f

08007f28 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8007f28:	b480      	push	{r7}
 8007f2a:	b087      	sub	sp, #28
 8007f2c:	af00      	add	r7, sp, #0
 8007f2e:	60f8      	str	r0, [r7, #12]
 8007f30:	60b9      	str	r1, [r7, #8]
 8007f32:	4613      	mov	r3, r2
 8007f34:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8007f36:	79fb      	ldrb	r3, [r7, #7]
 8007f38:	2b02      	cmp	r3, #2
 8007f3a:	d165      	bne.n	8008008 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8007f3c:	68bb      	ldr	r3, [r7, #8]
 8007f3e:	4a41      	ldr	r2, [pc, #260]	; (8008044 <USB_SetTurnaroundTime+0x11c>)
 8007f40:	4293      	cmp	r3, r2
 8007f42:	d906      	bls.n	8007f52 <USB_SetTurnaroundTime+0x2a>
 8007f44:	68bb      	ldr	r3, [r7, #8]
 8007f46:	4a40      	ldr	r2, [pc, #256]	; (8008048 <USB_SetTurnaroundTime+0x120>)
 8007f48:	4293      	cmp	r3, r2
 8007f4a:	d202      	bcs.n	8007f52 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8007f4c:	230f      	movs	r3, #15
 8007f4e:	617b      	str	r3, [r7, #20]
 8007f50:	e062      	b.n	8008018 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8007f52:	68bb      	ldr	r3, [r7, #8]
 8007f54:	4a3c      	ldr	r2, [pc, #240]	; (8008048 <USB_SetTurnaroundTime+0x120>)
 8007f56:	4293      	cmp	r3, r2
 8007f58:	d306      	bcc.n	8007f68 <USB_SetTurnaroundTime+0x40>
 8007f5a:	68bb      	ldr	r3, [r7, #8]
 8007f5c:	4a3b      	ldr	r2, [pc, #236]	; (800804c <USB_SetTurnaroundTime+0x124>)
 8007f5e:	4293      	cmp	r3, r2
 8007f60:	d202      	bcs.n	8007f68 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8007f62:	230e      	movs	r3, #14
 8007f64:	617b      	str	r3, [r7, #20]
 8007f66:	e057      	b.n	8008018 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8007f68:	68bb      	ldr	r3, [r7, #8]
 8007f6a:	4a38      	ldr	r2, [pc, #224]	; (800804c <USB_SetTurnaroundTime+0x124>)
 8007f6c:	4293      	cmp	r3, r2
 8007f6e:	d306      	bcc.n	8007f7e <USB_SetTurnaroundTime+0x56>
 8007f70:	68bb      	ldr	r3, [r7, #8]
 8007f72:	4a37      	ldr	r2, [pc, #220]	; (8008050 <USB_SetTurnaroundTime+0x128>)
 8007f74:	4293      	cmp	r3, r2
 8007f76:	d202      	bcs.n	8007f7e <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8007f78:	230d      	movs	r3, #13
 8007f7a:	617b      	str	r3, [r7, #20]
 8007f7c:	e04c      	b.n	8008018 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8007f7e:	68bb      	ldr	r3, [r7, #8]
 8007f80:	4a33      	ldr	r2, [pc, #204]	; (8008050 <USB_SetTurnaroundTime+0x128>)
 8007f82:	4293      	cmp	r3, r2
 8007f84:	d306      	bcc.n	8007f94 <USB_SetTurnaroundTime+0x6c>
 8007f86:	68bb      	ldr	r3, [r7, #8]
 8007f88:	4a32      	ldr	r2, [pc, #200]	; (8008054 <USB_SetTurnaroundTime+0x12c>)
 8007f8a:	4293      	cmp	r3, r2
 8007f8c:	d802      	bhi.n	8007f94 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8007f8e:	230c      	movs	r3, #12
 8007f90:	617b      	str	r3, [r7, #20]
 8007f92:	e041      	b.n	8008018 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8007f94:	68bb      	ldr	r3, [r7, #8]
 8007f96:	4a2f      	ldr	r2, [pc, #188]	; (8008054 <USB_SetTurnaroundTime+0x12c>)
 8007f98:	4293      	cmp	r3, r2
 8007f9a:	d906      	bls.n	8007faa <USB_SetTurnaroundTime+0x82>
 8007f9c:	68bb      	ldr	r3, [r7, #8]
 8007f9e:	4a2e      	ldr	r2, [pc, #184]	; (8008058 <USB_SetTurnaroundTime+0x130>)
 8007fa0:	4293      	cmp	r3, r2
 8007fa2:	d802      	bhi.n	8007faa <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8007fa4:	230b      	movs	r3, #11
 8007fa6:	617b      	str	r3, [r7, #20]
 8007fa8:	e036      	b.n	8008018 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8007faa:	68bb      	ldr	r3, [r7, #8]
 8007fac:	4a2a      	ldr	r2, [pc, #168]	; (8008058 <USB_SetTurnaroundTime+0x130>)
 8007fae:	4293      	cmp	r3, r2
 8007fb0:	d906      	bls.n	8007fc0 <USB_SetTurnaroundTime+0x98>
 8007fb2:	68bb      	ldr	r3, [r7, #8]
 8007fb4:	4a29      	ldr	r2, [pc, #164]	; (800805c <USB_SetTurnaroundTime+0x134>)
 8007fb6:	4293      	cmp	r3, r2
 8007fb8:	d802      	bhi.n	8007fc0 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8007fba:	230a      	movs	r3, #10
 8007fbc:	617b      	str	r3, [r7, #20]
 8007fbe:	e02b      	b.n	8008018 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8007fc0:	68bb      	ldr	r3, [r7, #8]
 8007fc2:	4a26      	ldr	r2, [pc, #152]	; (800805c <USB_SetTurnaroundTime+0x134>)
 8007fc4:	4293      	cmp	r3, r2
 8007fc6:	d906      	bls.n	8007fd6 <USB_SetTurnaroundTime+0xae>
 8007fc8:	68bb      	ldr	r3, [r7, #8]
 8007fca:	4a25      	ldr	r2, [pc, #148]	; (8008060 <USB_SetTurnaroundTime+0x138>)
 8007fcc:	4293      	cmp	r3, r2
 8007fce:	d202      	bcs.n	8007fd6 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8007fd0:	2309      	movs	r3, #9
 8007fd2:	617b      	str	r3, [r7, #20]
 8007fd4:	e020      	b.n	8008018 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8007fd6:	68bb      	ldr	r3, [r7, #8]
 8007fd8:	4a21      	ldr	r2, [pc, #132]	; (8008060 <USB_SetTurnaroundTime+0x138>)
 8007fda:	4293      	cmp	r3, r2
 8007fdc:	d306      	bcc.n	8007fec <USB_SetTurnaroundTime+0xc4>
 8007fde:	68bb      	ldr	r3, [r7, #8]
 8007fe0:	4a20      	ldr	r2, [pc, #128]	; (8008064 <USB_SetTurnaroundTime+0x13c>)
 8007fe2:	4293      	cmp	r3, r2
 8007fe4:	d802      	bhi.n	8007fec <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8007fe6:	2308      	movs	r3, #8
 8007fe8:	617b      	str	r3, [r7, #20]
 8007fea:	e015      	b.n	8008018 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8007fec:	68bb      	ldr	r3, [r7, #8]
 8007fee:	4a1d      	ldr	r2, [pc, #116]	; (8008064 <USB_SetTurnaroundTime+0x13c>)
 8007ff0:	4293      	cmp	r3, r2
 8007ff2:	d906      	bls.n	8008002 <USB_SetTurnaroundTime+0xda>
 8007ff4:	68bb      	ldr	r3, [r7, #8]
 8007ff6:	4a1c      	ldr	r2, [pc, #112]	; (8008068 <USB_SetTurnaroundTime+0x140>)
 8007ff8:	4293      	cmp	r3, r2
 8007ffa:	d202      	bcs.n	8008002 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8007ffc:	2307      	movs	r3, #7
 8007ffe:	617b      	str	r3, [r7, #20]
 8008000:	e00a      	b.n	8008018 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8008002:	2306      	movs	r3, #6
 8008004:	617b      	str	r3, [r7, #20]
 8008006:	e007      	b.n	8008018 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8008008:	79fb      	ldrb	r3, [r7, #7]
 800800a:	2b00      	cmp	r3, #0
 800800c:	d102      	bne.n	8008014 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800800e:	2309      	movs	r3, #9
 8008010:	617b      	str	r3, [r7, #20]
 8008012:	e001      	b.n	8008018 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8008014:	2309      	movs	r3, #9
 8008016:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8008018:	68fb      	ldr	r3, [r7, #12]
 800801a:	68db      	ldr	r3, [r3, #12]
 800801c:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8008020:	68fb      	ldr	r3, [r7, #12]
 8008022:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8008024:	68fb      	ldr	r3, [r7, #12]
 8008026:	68da      	ldr	r2, [r3, #12]
 8008028:	697b      	ldr	r3, [r7, #20]
 800802a:	029b      	lsls	r3, r3, #10
 800802c:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8008030:	431a      	orrs	r2, r3
 8008032:	68fb      	ldr	r3, [r7, #12]
 8008034:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8008036:	2300      	movs	r3, #0
}
 8008038:	4618      	mov	r0, r3
 800803a:	371c      	adds	r7, #28
 800803c:	46bd      	mov	sp, r7
 800803e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008042:	4770      	bx	lr
 8008044:	00d8acbf 	.word	0x00d8acbf
 8008048:	00e4e1c0 	.word	0x00e4e1c0
 800804c:	00f42400 	.word	0x00f42400
 8008050:	01067380 	.word	0x01067380
 8008054:	011a499f 	.word	0x011a499f
 8008058:	01312cff 	.word	0x01312cff
 800805c:	014ca43f 	.word	0x014ca43f
 8008060:	016e3600 	.word	0x016e3600
 8008064:	01a6ab1f 	.word	0x01a6ab1f
 8008068:	01e84800 	.word	0x01e84800

0800806c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800806c:	b480      	push	{r7}
 800806e:	b085      	sub	sp, #20
 8008070:	af00      	add	r7, sp, #0
 8008072:	6078      	str	r0, [r7, #4]
 8008074:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8008076:	2300      	movs	r3, #0
 8008078:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800807a:	683b      	ldr	r3, [r7, #0]
 800807c:	019b      	lsls	r3, r3, #6
 800807e:	f043 0220 	orr.w	r2, r3, #32
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8008086:	68fb      	ldr	r3, [r7, #12]
 8008088:	3301      	adds	r3, #1
 800808a:	60fb      	str	r3, [r7, #12]
 800808c:	4a08      	ldr	r2, [pc, #32]	; (80080b0 <USB_FlushTxFifo+0x44>)
 800808e:	4293      	cmp	r3, r2
 8008090:	d901      	bls.n	8008096 <USB_FlushTxFifo+0x2a>
    {
      return HAL_TIMEOUT;
 8008092:	2303      	movs	r3, #3
 8008094:	e006      	b.n	80080a4 <USB_FlushTxFifo+0x38>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	691b      	ldr	r3, [r3, #16]
 800809a:	f003 0320 	and.w	r3, r3, #32
 800809e:	2b20      	cmp	r3, #32
 80080a0:	d0f1      	beq.n	8008086 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 80080a2:	2300      	movs	r3, #0
}
 80080a4:	4618      	mov	r0, r3
 80080a6:	3714      	adds	r7, #20
 80080a8:	46bd      	mov	sp, r7
 80080aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080ae:	4770      	bx	lr
 80080b0:	00030d40 	.word	0x00030d40

080080b4 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 80080b4:	b480      	push	{r7}
 80080b6:	b087      	sub	sp, #28
 80080b8:	af00      	add	r7, sp, #0
 80080ba:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 80080c0:	693b      	ldr	r3, [r7, #16]
 80080c2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80080c6:	689b      	ldr	r3, [r3, #8]
 80080c8:	f003 0306 	and.w	r3, r3, #6
 80080cc:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 80080ce:	68fb      	ldr	r3, [r7, #12]
 80080d0:	2b00      	cmp	r3, #0
 80080d2:	d102      	bne.n	80080da <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 80080d4:	2300      	movs	r3, #0
 80080d6:	75fb      	strb	r3, [r7, #23]
 80080d8:	e00a      	b.n	80080f0 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 80080da:	68fb      	ldr	r3, [r7, #12]
 80080dc:	2b02      	cmp	r3, #2
 80080de:	d002      	beq.n	80080e6 <USB_GetDevSpeed+0x32>
 80080e0:	68fb      	ldr	r3, [r7, #12]
 80080e2:	2b06      	cmp	r3, #6
 80080e4:	d102      	bne.n	80080ec <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 80080e6:	2302      	movs	r3, #2
 80080e8:	75fb      	strb	r3, [r7, #23]
 80080ea:	e001      	b.n	80080f0 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 80080ec:	230f      	movs	r3, #15
 80080ee:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 80080f0:	7dfb      	ldrb	r3, [r7, #23]
}
 80080f2:	4618      	mov	r0, r3
 80080f4:	371c      	adds	r7, #28
 80080f6:	46bd      	mov	sp, r7
 80080f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080fc:	4770      	bx	lr

080080fe <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80080fe:	b480      	push	{r7}
 8008100:	b085      	sub	sp, #20
 8008102:	af00      	add	r7, sp, #0
 8008104:	6078      	str	r0, [r7, #4]
 8008106:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800810c:	683b      	ldr	r3, [r7, #0]
 800810e:	781b      	ldrb	r3, [r3, #0]
 8008110:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8008112:	683b      	ldr	r3, [r7, #0]
 8008114:	785b      	ldrb	r3, [r3, #1]
 8008116:	2b01      	cmp	r3, #1
 8008118:	d13a      	bne.n	8008190 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800811a:	68fb      	ldr	r3, [r7, #12]
 800811c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008120:	69da      	ldr	r2, [r3, #28]
 8008122:	683b      	ldr	r3, [r7, #0]
 8008124:	781b      	ldrb	r3, [r3, #0]
 8008126:	f003 030f 	and.w	r3, r3, #15
 800812a:	2101      	movs	r1, #1
 800812c:	fa01 f303 	lsl.w	r3, r1, r3
 8008130:	b29b      	uxth	r3, r3
 8008132:	68f9      	ldr	r1, [r7, #12]
 8008134:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008138:	4313      	orrs	r3, r2
 800813a:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800813c:	68bb      	ldr	r3, [r7, #8]
 800813e:	015a      	lsls	r2, r3, #5
 8008140:	68fb      	ldr	r3, [r7, #12]
 8008142:	4413      	add	r3, r2
 8008144:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008148:	681b      	ldr	r3, [r3, #0]
 800814a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800814e:	2b00      	cmp	r3, #0
 8008150:	d155      	bne.n	80081fe <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8008152:	68bb      	ldr	r3, [r7, #8]
 8008154:	015a      	lsls	r2, r3, #5
 8008156:	68fb      	ldr	r3, [r7, #12]
 8008158:	4413      	add	r3, r2
 800815a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800815e:	681a      	ldr	r2, [r3, #0]
 8008160:	683b      	ldr	r3, [r7, #0]
 8008162:	689b      	ldr	r3, [r3, #8]
 8008164:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8008168:	683b      	ldr	r3, [r7, #0]
 800816a:	78db      	ldrb	r3, [r3, #3]
 800816c:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800816e:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8008170:	68bb      	ldr	r3, [r7, #8]
 8008172:	059b      	lsls	r3, r3, #22
 8008174:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8008176:	4313      	orrs	r3, r2
 8008178:	68ba      	ldr	r2, [r7, #8]
 800817a:	0151      	lsls	r1, r2, #5
 800817c:	68fa      	ldr	r2, [r7, #12]
 800817e:	440a      	add	r2, r1
 8008180:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008184:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008188:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800818c:	6013      	str	r3, [r2, #0]
 800818e:	e036      	b.n	80081fe <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8008190:	68fb      	ldr	r3, [r7, #12]
 8008192:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008196:	69da      	ldr	r2, [r3, #28]
 8008198:	683b      	ldr	r3, [r7, #0]
 800819a:	781b      	ldrb	r3, [r3, #0]
 800819c:	f003 030f 	and.w	r3, r3, #15
 80081a0:	2101      	movs	r1, #1
 80081a2:	fa01 f303 	lsl.w	r3, r1, r3
 80081a6:	041b      	lsls	r3, r3, #16
 80081a8:	68f9      	ldr	r1, [r7, #12]
 80081aa:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80081ae:	4313      	orrs	r3, r2
 80081b0:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 80081b2:	68bb      	ldr	r3, [r7, #8]
 80081b4:	015a      	lsls	r2, r3, #5
 80081b6:	68fb      	ldr	r3, [r7, #12]
 80081b8:	4413      	add	r3, r2
 80081ba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80081be:	681b      	ldr	r3, [r3, #0]
 80081c0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80081c4:	2b00      	cmp	r3, #0
 80081c6:	d11a      	bne.n	80081fe <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80081c8:	68bb      	ldr	r3, [r7, #8]
 80081ca:	015a      	lsls	r2, r3, #5
 80081cc:	68fb      	ldr	r3, [r7, #12]
 80081ce:	4413      	add	r3, r2
 80081d0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80081d4:	681a      	ldr	r2, [r3, #0]
 80081d6:	683b      	ldr	r3, [r7, #0]
 80081d8:	689b      	ldr	r3, [r3, #8]
 80081da:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 80081de:	683b      	ldr	r3, [r7, #0]
 80081e0:	78db      	ldrb	r3, [r3, #3]
 80081e2:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80081e4:	430b      	orrs	r3, r1
 80081e6:	4313      	orrs	r3, r2
 80081e8:	68ba      	ldr	r2, [r7, #8]
 80081ea:	0151      	lsls	r1, r2, #5
 80081ec:	68fa      	ldr	r2, [r7, #12]
 80081ee:	440a      	add	r2, r1
 80081f0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80081f4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80081f8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80081fc:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 80081fe:	2300      	movs	r3, #0
}
 8008200:	4618      	mov	r0, r3
 8008202:	3714      	adds	r7, #20
 8008204:	46bd      	mov	sp, r7
 8008206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800820a:	4770      	bx	lr

0800820c <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800820c:	b580      	push	{r7, lr}
 800820e:	b08a      	sub	sp, #40	; 0x28
 8008210:	af02      	add	r7, sp, #8
 8008212:	60f8      	str	r0, [r7, #12]
 8008214:	60b9      	str	r1, [r7, #8]
 8008216:	4613      	mov	r3, r2
 8008218:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800821a:	68fb      	ldr	r3, [r7, #12]
 800821c:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800821e:	68bb      	ldr	r3, [r7, #8]
 8008220:	781b      	ldrb	r3, [r3, #0]
 8008222:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8008224:	68bb      	ldr	r3, [r7, #8]
 8008226:	785b      	ldrb	r3, [r3, #1]
 8008228:	2b01      	cmp	r3, #1
 800822a:	f040 815c 	bne.w	80084e6 <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800822e:	68bb      	ldr	r3, [r7, #8]
 8008230:	695b      	ldr	r3, [r3, #20]
 8008232:	2b00      	cmp	r3, #0
 8008234:	d132      	bne.n	800829c <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8008236:	69bb      	ldr	r3, [r7, #24]
 8008238:	015a      	lsls	r2, r3, #5
 800823a:	69fb      	ldr	r3, [r7, #28]
 800823c:	4413      	add	r3, r2
 800823e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008242:	691b      	ldr	r3, [r3, #16]
 8008244:	69ba      	ldr	r2, [r7, #24]
 8008246:	0151      	lsls	r1, r2, #5
 8008248:	69fa      	ldr	r2, [r7, #28]
 800824a:	440a      	add	r2, r1
 800824c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008250:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8008254:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8008258:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800825a:	69bb      	ldr	r3, [r7, #24]
 800825c:	015a      	lsls	r2, r3, #5
 800825e:	69fb      	ldr	r3, [r7, #28]
 8008260:	4413      	add	r3, r2
 8008262:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008266:	691b      	ldr	r3, [r3, #16]
 8008268:	69ba      	ldr	r2, [r7, #24]
 800826a:	0151      	lsls	r1, r2, #5
 800826c:	69fa      	ldr	r2, [r7, #28]
 800826e:	440a      	add	r2, r1
 8008270:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008274:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8008278:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800827a:	69bb      	ldr	r3, [r7, #24]
 800827c:	015a      	lsls	r2, r3, #5
 800827e:	69fb      	ldr	r3, [r7, #28]
 8008280:	4413      	add	r3, r2
 8008282:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008286:	691b      	ldr	r3, [r3, #16]
 8008288:	69ba      	ldr	r2, [r7, #24]
 800828a:	0151      	lsls	r1, r2, #5
 800828c:	69fa      	ldr	r2, [r7, #28]
 800828e:	440a      	add	r2, r1
 8008290:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008294:	0cdb      	lsrs	r3, r3, #19
 8008296:	04db      	lsls	r3, r3, #19
 8008298:	6113      	str	r3, [r2, #16]
 800829a:	e074      	b.n	8008386 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800829c:	69bb      	ldr	r3, [r7, #24]
 800829e:	015a      	lsls	r2, r3, #5
 80082a0:	69fb      	ldr	r3, [r7, #28]
 80082a2:	4413      	add	r3, r2
 80082a4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80082a8:	691b      	ldr	r3, [r3, #16]
 80082aa:	69ba      	ldr	r2, [r7, #24]
 80082ac:	0151      	lsls	r1, r2, #5
 80082ae:	69fa      	ldr	r2, [r7, #28]
 80082b0:	440a      	add	r2, r1
 80082b2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80082b6:	0cdb      	lsrs	r3, r3, #19
 80082b8:	04db      	lsls	r3, r3, #19
 80082ba:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80082bc:	69bb      	ldr	r3, [r7, #24]
 80082be:	015a      	lsls	r2, r3, #5
 80082c0:	69fb      	ldr	r3, [r7, #28]
 80082c2:	4413      	add	r3, r2
 80082c4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80082c8:	691b      	ldr	r3, [r3, #16]
 80082ca:	69ba      	ldr	r2, [r7, #24]
 80082cc:	0151      	lsls	r1, r2, #5
 80082ce:	69fa      	ldr	r2, [r7, #28]
 80082d0:	440a      	add	r2, r1
 80082d2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80082d6:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80082da:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80082de:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 80082e0:	69bb      	ldr	r3, [r7, #24]
 80082e2:	015a      	lsls	r2, r3, #5
 80082e4:	69fb      	ldr	r3, [r7, #28]
 80082e6:	4413      	add	r3, r2
 80082e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80082ec:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 80082ee:	68bb      	ldr	r3, [r7, #8]
 80082f0:	6959      	ldr	r1, [r3, #20]
 80082f2:	68bb      	ldr	r3, [r7, #8]
 80082f4:	689b      	ldr	r3, [r3, #8]
 80082f6:	440b      	add	r3, r1
 80082f8:	1e59      	subs	r1, r3, #1
 80082fa:	68bb      	ldr	r3, [r7, #8]
 80082fc:	689b      	ldr	r3, [r3, #8]
 80082fe:	fbb1 f3f3 	udiv	r3, r1, r3
 8008302:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8008304:	4b9d      	ldr	r3, [pc, #628]	; (800857c <USB_EPStartXfer+0x370>)
 8008306:	400b      	ands	r3, r1
 8008308:	69b9      	ldr	r1, [r7, #24]
 800830a:	0148      	lsls	r0, r1, #5
 800830c:	69f9      	ldr	r1, [r7, #28]
 800830e:	4401      	add	r1, r0
 8008310:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8008314:	4313      	orrs	r3, r2
 8008316:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8008318:	69bb      	ldr	r3, [r7, #24]
 800831a:	015a      	lsls	r2, r3, #5
 800831c:	69fb      	ldr	r3, [r7, #28]
 800831e:	4413      	add	r3, r2
 8008320:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008324:	691a      	ldr	r2, [r3, #16]
 8008326:	68bb      	ldr	r3, [r7, #8]
 8008328:	695b      	ldr	r3, [r3, #20]
 800832a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800832e:	69b9      	ldr	r1, [r7, #24]
 8008330:	0148      	lsls	r0, r1, #5
 8008332:	69f9      	ldr	r1, [r7, #28]
 8008334:	4401      	add	r1, r0
 8008336:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800833a:	4313      	orrs	r3, r2
 800833c:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 800833e:	68bb      	ldr	r3, [r7, #8]
 8008340:	78db      	ldrb	r3, [r3, #3]
 8008342:	2b01      	cmp	r3, #1
 8008344:	d11f      	bne.n	8008386 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8008346:	69bb      	ldr	r3, [r7, #24]
 8008348:	015a      	lsls	r2, r3, #5
 800834a:	69fb      	ldr	r3, [r7, #28]
 800834c:	4413      	add	r3, r2
 800834e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008352:	691b      	ldr	r3, [r3, #16]
 8008354:	69ba      	ldr	r2, [r7, #24]
 8008356:	0151      	lsls	r1, r2, #5
 8008358:	69fa      	ldr	r2, [r7, #28]
 800835a:	440a      	add	r2, r1
 800835c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008360:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8008364:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8008366:	69bb      	ldr	r3, [r7, #24]
 8008368:	015a      	lsls	r2, r3, #5
 800836a:	69fb      	ldr	r3, [r7, #28]
 800836c:	4413      	add	r3, r2
 800836e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008372:	691b      	ldr	r3, [r3, #16]
 8008374:	69ba      	ldr	r2, [r7, #24]
 8008376:	0151      	lsls	r1, r2, #5
 8008378:	69fa      	ldr	r2, [r7, #28]
 800837a:	440a      	add	r2, r1
 800837c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008380:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8008384:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8008386:	79fb      	ldrb	r3, [r7, #7]
 8008388:	2b01      	cmp	r3, #1
 800838a:	d14b      	bne.n	8008424 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800838c:	68bb      	ldr	r3, [r7, #8]
 800838e:	691b      	ldr	r3, [r3, #16]
 8008390:	2b00      	cmp	r3, #0
 8008392:	d009      	beq.n	80083a8 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8008394:	69bb      	ldr	r3, [r7, #24]
 8008396:	015a      	lsls	r2, r3, #5
 8008398:	69fb      	ldr	r3, [r7, #28]
 800839a:	4413      	add	r3, r2
 800839c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80083a0:	461a      	mov	r2, r3
 80083a2:	68bb      	ldr	r3, [r7, #8]
 80083a4:	691b      	ldr	r3, [r3, #16]
 80083a6:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 80083a8:	68bb      	ldr	r3, [r7, #8]
 80083aa:	78db      	ldrb	r3, [r3, #3]
 80083ac:	2b01      	cmp	r3, #1
 80083ae:	d128      	bne.n	8008402 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80083b0:	69fb      	ldr	r3, [r7, #28]
 80083b2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80083b6:	689b      	ldr	r3, [r3, #8]
 80083b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80083bc:	2b00      	cmp	r3, #0
 80083be:	d110      	bne.n	80083e2 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80083c0:	69bb      	ldr	r3, [r7, #24]
 80083c2:	015a      	lsls	r2, r3, #5
 80083c4:	69fb      	ldr	r3, [r7, #28]
 80083c6:	4413      	add	r3, r2
 80083c8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80083cc:	681b      	ldr	r3, [r3, #0]
 80083ce:	69ba      	ldr	r2, [r7, #24]
 80083d0:	0151      	lsls	r1, r2, #5
 80083d2:	69fa      	ldr	r2, [r7, #28]
 80083d4:	440a      	add	r2, r1
 80083d6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80083da:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80083de:	6013      	str	r3, [r2, #0]
 80083e0:	e00f      	b.n	8008402 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80083e2:	69bb      	ldr	r3, [r7, #24]
 80083e4:	015a      	lsls	r2, r3, #5
 80083e6:	69fb      	ldr	r3, [r7, #28]
 80083e8:	4413      	add	r3, r2
 80083ea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80083ee:	681b      	ldr	r3, [r3, #0]
 80083f0:	69ba      	ldr	r2, [r7, #24]
 80083f2:	0151      	lsls	r1, r2, #5
 80083f4:	69fa      	ldr	r2, [r7, #28]
 80083f6:	440a      	add	r2, r1
 80083f8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80083fc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008400:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8008402:	69bb      	ldr	r3, [r7, #24]
 8008404:	015a      	lsls	r2, r3, #5
 8008406:	69fb      	ldr	r3, [r7, #28]
 8008408:	4413      	add	r3, r2
 800840a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800840e:	681b      	ldr	r3, [r3, #0]
 8008410:	69ba      	ldr	r2, [r7, #24]
 8008412:	0151      	lsls	r1, r2, #5
 8008414:	69fa      	ldr	r2, [r7, #28]
 8008416:	440a      	add	r2, r1
 8008418:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800841c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8008420:	6013      	str	r3, [r2, #0]
 8008422:	e12f      	b.n	8008684 <USB_EPStartXfer+0x478>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8008424:	69bb      	ldr	r3, [r7, #24]
 8008426:	015a      	lsls	r2, r3, #5
 8008428:	69fb      	ldr	r3, [r7, #28]
 800842a:	4413      	add	r3, r2
 800842c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008430:	681b      	ldr	r3, [r3, #0]
 8008432:	69ba      	ldr	r2, [r7, #24]
 8008434:	0151      	lsls	r1, r2, #5
 8008436:	69fa      	ldr	r2, [r7, #28]
 8008438:	440a      	add	r2, r1
 800843a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800843e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8008442:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8008444:	68bb      	ldr	r3, [r7, #8]
 8008446:	78db      	ldrb	r3, [r3, #3]
 8008448:	2b01      	cmp	r3, #1
 800844a:	d015      	beq.n	8008478 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 800844c:	68bb      	ldr	r3, [r7, #8]
 800844e:	695b      	ldr	r3, [r3, #20]
 8008450:	2b00      	cmp	r3, #0
 8008452:	f000 8117 	beq.w	8008684 <USB_EPStartXfer+0x478>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8008456:	69fb      	ldr	r3, [r7, #28]
 8008458:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800845c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800845e:	68bb      	ldr	r3, [r7, #8]
 8008460:	781b      	ldrb	r3, [r3, #0]
 8008462:	f003 030f 	and.w	r3, r3, #15
 8008466:	2101      	movs	r1, #1
 8008468:	fa01 f303 	lsl.w	r3, r1, r3
 800846c:	69f9      	ldr	r1, [r7, #28]
 800846e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008472:	4313      	orrs	r3, r2
 8008474:	634b      	str	r3, [r1, #52]	; 0x34
 8008476:	e105      	b.n	8008684 <USB_EPStartXfer+0x478>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8008478:	69fb      	ldr	r3, [r7, #28]
 800847a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800847e:	689b      	ldr	r3, [r3, #8]
 8008480:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008484:	2b00      	cmp	r3, #0
 8008486:	d110      	bne.n	80084aa <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8008488:	69bb      	ldr	r3, [r7, #24]
 800848a:	015a      	lsls	r2, r3, #5
 800848c:	69fb      	ldr	r3, [r7, #28]
 800848e:	4413      	add	r3, r2
 8008490:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008494:	681b      	ldr	r3, [r3, #0]
 8008496:	69ba      	ldr	r2, [r7, #24]
 8008498:	0151      	lsls	r1, r2, #5
 800849a:	69fa      	ldr	r2, [r7, #28]
 800849c:	440a      	add	r2, r1
 800849e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80084a2:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80084a6:	6013      	str	r3, [r2, #0]
 80084a8:	e00f      	b.n	80084ca <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80084aa:	69bb      	ldr	r3, [r7, #24]
 80084ac:	015a      	lsls	r2, r3, #5
 80084ae:	69fb      	ldr	r3, [r7, #28]
 80084b0:	4413      	add	r3, r2
 80084b2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80084b6:	681b      	ldr	r3, [r3, #0]
 80084b8:	69ba      	ldr	r2, [r7, #24]
 80084ba:	0151      	lsls	r1, r2, #5
 80084bc:	69fa      	ldr	r2, [r7, #28]
 80084be:	440a      	add	r2, r1
 80084c0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80084c4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80084c8:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 80084ca:	68bb      	ldr	r3, [r7, #8]
 80084cc:	68d9      	ldr	r1, [r3, #12]
 80084ce:	68bb      	ldr	r3, [r7, #8]
 80084d0:	781a      	ldrb	r2, [r3, #0]
 80084d2:	68bb      	ldr	r3, [r7, #8]
 80084d4:	695b      	ldr	r3, [r3, #20]
 80084d6:	b298      	uxth	r0, r3
 80084d8:	79fb      	ldrb	r3, [r7, #7]
 80084da:	9300      	str	r3, [sp, #0]
 80084dc:	4603      	mov	r3, r0
 80084de:	68f8      	ldr	r0, [r7, #12]
 80084e0:	f000 fa2b 	bl	800893a <USB_WritePacket>
 80084e4:	e0ce      	b.n	8008684 <USB_EPStartXfer+0x478>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80084e6:	69bb      	ldr	r3, [r7, #24]
 80084e8:	015a      	lsls	r2, r3, #5
 80084ea:	69fb      	ldr	r3, [r7, #28]
 80084ec:	4413      	add	r3, r2
 80084ee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80084f2:	691b      	ldr	r3, [r3, #16]
 80084f4:	69ba      	ldr	r2, [r7, #24]
 80084f6:	0151      	lsls	r1, r2, #5
 80084f8:	69fa      	ldr	r2, [r7, #28]
 80084fa:	440a      	add	r2, r1
 80084fc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008500:	0cdb      	lsrs	r3, r3, #19
 8008502:	04db      	lsls	r3, r3, #19
 8008504:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8008506:	69bb      	ldr	r3, [r7, #24]
 8008508:	015a      	lsls	r2, r3, #5
 800850a:	69fb      	ldr	r3, [r7, #28]
 800850c:	4413      	add	r3, r2
 800850e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008512:	691b      	ldr	r3, [r3, #16]
 8008514:	69ba      	ldr	r2, [r7, #24]
 8008516:	0151      	lsls	r1, r2, #5
 8008518:	69fa      	ldr	r2, [r7, #28]
 800851a:	440a      	add	r2, r1
 800851c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008520:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8008524:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8008528:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 800852a:	68bb      	ldr	r3, [r7, #8]
 800852c:	695b      	ldr	r3, [r3, #20]
 800852e:	2b00      	cmp	r3, #0
 8008530:	d126      	bne.n	8008580 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8008532:	69bb      	ldr	r3, [r7, #24]
 8008534:	015a      	lsls	r2, r3, #5
 8008536:	69fb      	ldr	r3, [r7, #28]
 8008538:	4413      	add	r3, r2
 800853a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800853e:	691a      	ldr	r2, [r3, #16]
 8008540:	68bb      	ldr	r3, [r7, #8]
 8008542:	689b      	ldr	r3, [r3, #8]
 8008544:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008548:	69b9      	ldr	r1, [r7, #24]
 800854a:	0148      	lsls	r0, r1, #5
 800854c:	69f9      	ldr	r1, [r7, #28]
 800854e:	4401      	add	r1, r0
 8008550:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8008554:	4313      	orrs	r3, r2
 8008556:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8008558:	69bb      	ldr	r3, [r7, #24]
 800855a:	015a      	lsls	r2, r3, #5
 800855c:	69fb      	ldr	r3, [r7, #28]
 800855e:	4413      	add	r3, r2
 8008560:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008564:	691b      	ldr	r3, [r3, #16]
 8008566:	69ba      	ldr	r2, [r7, #24]
 8008568:	0151      	lsls	r1, r2, #5
 800856a:	69fa      	ldr	r2, [r7, #28]
 800856c:	440a      	add	r2, r1
 800856e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008572:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8008576:	6113      	str	r3, [r2, #16]
 8008578:	e036      	b.n	80085e8 <USB_EPStartXfer+0x3dc>
 800857a:	bf00      	nop
 800857c:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8008580:	68bb      	ldr	r3, [r7, #8]
 8008582:	695a      	ldr	r2, [r3, #20]
 8008584:	68bb      	ldr	r3, [r7, #8]
 8008586:	689b      	ldr	r3, [r3, #8]
 8008588:	4413      	add	r3, r2
 800858a:	1e5a      	subs	r2, r3, #1
 800858c:	68bb      	ldr	r3, [r7, #8]
 800858e:	689b      	ldr	r3, [r3, #8]
 8008590:	fbb2 f3f3 	udiv	r3, r2, r3
 8008594:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8008596:	69bb      	ldr	r3, [r7, #24]
 8008598:	015a      	lsls	r2, r3, #5
 800859a:	69fb      	ldr	r3, [r7, #28]
 800859c:	4413      	add	r3, r2
 800859e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80085a2:	691a      	ldr	r2, [r3, #16]
 80085a4:	8afb      	ldrh	r3, [r7, #22]
 80085a6:	04d9      	lsls	r1, r3, #19
 80085a8:	4b39      	ldr	r3, [pc, #228]	; (8008690 <USB_EPStartXfer+0x484>)
 80085aa:	400b      	ands	r3, r1
 80085ac:	69b9      	ldr	r1, [r7, #24]
 80085ae:	0148      	lsls	r0, r1, #5
 80085b0:	69f9      	ldr	r1, [r7, #28]
 80085b2:	4401      	add	r1, r0
 80085b4:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80085b8:	4313      	orrs	r3, r2
 80085ba:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 80085bc:	69bb      	ldr	r3, [r7, #24]
 80085be:	015a      	lsls	r2, r3, #5
 80085c0:	69fb      	ldr	r3, [r7, #28]
 80085c2:	4413      	add	r3, r2
 80085c4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80085c8:	691a      	ldr	r2, [r3, #16]
 80085ca:	68bb      	ldr	r3, [r7, #8]
 80085cc:	689b      	ldr	r3, [r3, #8]
 80085ce:	8af9      	ldrh	r1, [r7, #22]
 80085d0:	fb01 f303 	mul.w	r3, r1, r3
 80085d4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80085d8:	69b9      	ldr	r1, [r7, #24]
 80085da:	0148      	lsls	r0, r1, #5
 80085dc:	69f9      	ldr	r1, [r7, #28]
 80085de:	4401      	add	r1, r0
 80085e0:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80085e4:	4313      	orrs	r3, r2
 80085e6:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 80085e8:	79fb      	ldrb	r3, [r7, #7]
 80085ea:	2b01      	cmp	r3, #1
 80085ec:	d10d      	bne.n	800860a <USB_EPStartXfer+0x3fe>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80085ee:	68bb      	ldr	r3, [r7, #8]
 80085f0:	68db      	ldr	r3, [r3, #12]
 80085f2:	2b00      	cmp	r3, #0
 80085f4:	d009      	beq.n	800860a <USB_EPStartXfer+0x3fe>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80085f6:	68bb      	ldr	r3, [r7, #8]
 80085f8:	68d9      	ldr	r1, [r3, #12]
 80085fa:	69bb      	ldr	r3, [r7, #24]
 80085fc:	015a      	lsls	r2, r3, #5
 80085fe:	69fb      	ldr	r3, [r7, #28]
 8008600:	4413      	add	r3, r2
 8008602:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008606:	460a      	mov	r2, r1
 8008608:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800860a:	68bb      	ldr	r3, [r7, #8]
 800860c:	78db      	ldrb	r3, [r3, #3]
 800860e:	2b01      	cmp	r3, #1
 8008610:	d128      	bne.n	8008664 <USB_EPStartXfer+0x458>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8008612:	69fb      	ldr	r3, [r7, #28]
 8008614:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008618:	689b      	ldr	r3, [r3, #8]
 800861a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800861e:	2b00      	cmp	r3, #0
 8008620:	d110      	bne.n	8008644 <USB_EPStartXfer+0x438>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8008622:	69bb      	ldr	r3, [r7, #24]
 8008624:	015a      	lsls	r2, r3, #5
 8008626:	69fb      	ldr	r3, [r7, #28]
 8008628:	4413      	add	r3, r2
 800862a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800862e:	681b      	ldr	r3, [r3, #0]
 8008630:	69ba      	ldr	r2, [r7, #24]
 8008632:	0151      	lsls	r1, r2, #5
 8008634:	69fa      	ldr	r2, [r7, #28]
 8008636:	440a      	add	r2, r1
 8008638:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800863c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8008640:	6013      	str	r3, [r2, #0]
 8008642:	e00f      	b.n	8008664 <USB_EPStartXfer+0x458>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8008644:	69bb      	ldr	r3, [r7, #24]
 8008646:	015a      	lsls	r2, r3, #5
 8008648:	69fb      	ldr	r3, [r7, #28]
 800864a:	4413      	add	r3, r2
 800864c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008650:	681b      	ldr	r3, [r3, #0]
 8008652:	69ba      	ldr	r2, [r7, #24]
 8008654:	0151      	lsls	r1, r2, #5
 8008656:	69fa      	ldr	r2, [r7, #28]
 8008658:	440a      	add	r2, r1
 800865a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800865e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008662:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8008664:	69bb      	ldr	r3, [r7, #24]
 8008666:	015a      	lsls	r2, r3, #5
 8008668:	69fb      	ldr	r3, [r7, #28]
 800866a:	4413      	add	r3, r2
 800866c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008670:	681b      	ldr	r3, [r3, #0]
 8008672:	69ba      	ldr	r2, [r7, #24]
 8008674:	0151      	lsls	r1, r2, #5
 8008676:	69fa      	ldr	r2, [r7, #28]
 8008678:	440a      	add	r2, r1
 800867a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800867e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8008682:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8008684:	2300      	movs	r3, #0
}
 8008686:	4618      	mov	r0, r3
 8008688:	3720      	adds	r7, #32
 800868a:	46bd      	mov	sp, r7
 800868c:	bd80      	pop	{r7, pc}
 800868e:	bf00      	nop
 8008690:	1ff80000 	.word	0x1ff80000

08008694 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8008694:	b480      	push	{r7}
 8008696:	b087      	sub	sp, #28
 8008698:	af00      	add	r7, sp, #0
 800869a:	60f8      	str	r0, [r7, #12]
 800869c:	60b9      	str	r1, [r7, #8]
 800869e:	4613      	mov	r3, r2
 80086a0:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80086a2:	68fb      	ldr	r3, [r7, #12]
 80086a4:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 80086a6:	68bb      	ldr	r3, [r7, #8]
 80086a8:	781b      	ldrb	r3, [r3, #0]
 80086aa:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 80086ac:	68bb      	ldr	r3, [r7, #8]
 80086ae:	785b      	ldrb	r3, [r3, #1]
 80086b0:	2b01      	cmp	r3, #1
 80086b2:	f040 80cd 	bne.w	8008850 <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80086b6:	68bb      	ldr	r3, [r7, #8]
 80086b8:	695b      	ldr	r3, [r3, #20]
 80086ba:	2b00      	cmp	r3, #0
 80086bc:	d132      	bne.n	8008724 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80086be:	693b      	ldr	r3, [r7, #16]
 80086c0:	015a      	lsls	r2, r3, #5
 80086c2:	697b      	ldr	r3, [r7, #20]
 80086c4:	4413      	add	r3, r2
 80086c6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80086ca:	691b      	ldr	r3, [r3, #16]
 80086cc:	693a      	ldr	r2, [r7, #16]
 80086ce:	0151      	lsls	r1, r2, #5
 80086d0:	697a      	ldr	r2, [r7, #20]
 80086d2:	440a      	add	r2, r1
 80086d4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80086d8:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80086dc:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80086e0:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80086e2:	693b      	ldr	r3, [r7, #16]
 80086e4:	015a      	lsls	r2, r3, #5
 80086e6:	697b      	ldr	r3, [r7, #20]
 80086e8:	4413      	add	r3, r2
 80086ea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80086ee:	691b      	ldr	r3, [r3, #16]
 80086f0:	693a      	ldr	r2, [r7, #16]
 80086f2:	0151      	lsls	r1, r2, #5
 80086f4:	697a      	ldr	r2, [r7, #20]
 80086f6:	440a      	add	r2, r1
 80086f8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80086fc:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8008700:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8008702:	693b      	ldr	r3, [r7, #16]
 8008704:	015a      	lsls	r2, r3, #5
 8008706:	697b      	ldr	r3, [r7, #20]
 8008708:	4413      	add	r3, r2
 800870a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800870e:	691b      	ldr	r3, [r3, #16]
 8008710:	693a      	ldr	r2, [r7, #16]
 8008712:	0151      	lsls	r1, r2, #5
 8008714:	697a      	ldr	r2, [r7, #20]
 8008716:	440a      	add	r2, r1
 8008718:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800871c:	0cdb      	lsrs	r3, r3, #19
 800871e:	04db      	lsls	r3, r3, #19
 8008720:	6113      	str	r3, [r2, #16]
 8008722:	e04e      	b.n	80087c2 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8008724:	693b      	ldr	r3, [r7, #16]
 8008726:	015a      	lsls	r2, r3, #5
 8008728:	697b      	ldr	r3, [r7, #20]
 800872a:	4413      	add	r3, r2
 800872c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008730:	691b      	ldr	r3, [r3, #16]
 8008732:	693a      	ldr	r2, [r7, #16]
 8008734:	0151      	lsls	r1, r2, #5
 8008736:	697a      	ldr	r2, [r7, #20]
 8008738:	440a      	add	r2, r1
 800873a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800873e:	0cdb      	lsrs	r3, r3, #19
 8008740:	04db      	lsls	r3, r3, #19
 8008742:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8008744:	693b      	ldr	r3, [r7, #16]
 8008746:	015a      	lsls	r2, r3, #5
 8008748:	697b      	ldr	r3, [r7, #20]
 800874a:	4413      	add	r3, r2
 800874c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008750:	691b      	ldr	r3, [r3, #16]
 8008752:	693a      	ldr	r2, [r7, #16]
 8008754:	0151      	lsls	r1, r2, #5
 8008756:	697a      	ldr	r2, [r7, #20]
 8008758:	440a      	add	r2, r1
 800875a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800875e:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8008762:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8008766:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8008768:	68bb      	ldr	r3, [r7, #8]
 800876a:	695a      	ldr	r2, [r3, #20]
 800876c:	68bb      	ldr	r3, [r7, #8]
 800876e:	689b      	ldr	r3, [r3, #8]
 8008770:	429a      	cmp	r2, r3
 8008772:	d903      	bls.n	800877c <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8008774:	68bb      	ldr	r3, [r7, #8]
 8008776:	689a      	ldr	r2, [r3, #8]
 8008778:	68bb      	ldr	r3, [r7, #8]
 800877a:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800877c:	693b      	ldr	r3, [r7, #16]
 800877e:	015a      	lsls	r2, r3, #5
 8008780:	697b      	ldr	r3, [r7, #20]
 8008782:	4413      	add	r3, r2
 8008784:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008788:	691b      	ldr	r3, [r3, #16]
 800878a:	693a      	ldr	r2, [r7, #16]
 800878c:	0151      	lsls	r1, r2, #5
 800878e:	697a      	ldr	r2, [r7, #20]
 8008790:	440a      	add	r2, r1
 8008792:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008796:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800879a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800879c:	693b      	ldr	r3, [r7, #16]
 800879e:	015a      	lsls	r2, r3, #5
 80087a0:	697b      	ldr	r3, [r7, #20]
 80087a2:	4413      	add	r3, r2
 80087a4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80087a8:	691a      	ldr	r2, [r3, #16]
 80087aa:	68bb      	ldr	r3, [r7, #8]
 80087ac:	695b      	ldr	r3, [r3, #20]
 80087ae:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80087b2:	6939      	ldr	r1, [r7, #16]
 80087b4:	0148      	lsls	r0, r1, #5
 80087b6:	6979      	ldr	r1, [r7, #20]
 80087b8:	4401      	add	r1, r0
 80087ba:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80087be:	4313      	orrs	r3, r2
 80087c0:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 80087c2:	79fb      	ldrb	r3, [r7, #7]
 80087c4:	2b01      	cmp	r3, #1
 80087c6:	d11e      	bne.n	8008806 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80087c8:	68bb      	ldr	r3, [r7, #8]
 80087ca:	691b      	ldr	r3, [r3, #16]
 80087cc:	2b00      	cmp	r3, #0
 80087ce:	d009      	beq.n	80087e4 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80087d0:	693b      	ldr	r3, [r7, #16]
 80087d2:	015a      	lsls	r2, r3, #5
 80087d4:	697b      	ldr	r3, [r7, #20]
 80087d6:	4413      	add	r3, r2
 80087d8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80087dc:	461a      	mov	r2, r3
 80087de:	68bb      	ldr	r3, [r7, #8]
 80087e0:	691b      	ldr	r3, [r3, #16]
 80087e2:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80087e4:	693b      	ldr	r3, [r7, #16]
 80087e6:	015a      	lsls	r2, r3, #5
 80087e8:	697b      	ldr	r3, [r7, #20]
 80087ea:	4413      	add	r3, r2
 80087ec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80087f0:	681b      	ldr	r3, [r3, #0]
 80087f2:	693a      	ldr	r2, [r7, #16]
 80087f4:	0151      	lsls	r1, r2, #5
 80087f6:	697a      	ldr	r2, [r7, #20]
 80087f8:	440a      	add	r2, r1
 80087fa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80087fe:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8008802:	6013      	str	r3, [r2, #0]
 8008804:	e092      	b.n	800892c <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8008806:	693b      	ldr	r3, [r7, #16]
 8008808:	015a      	lsls	r2, r3, #5
 800880a:	697b      	ldr	r3, [r7, #20]
 800880c:	4413      	add	r3, r2
 800880e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008812:	681b      	ldr	r3, [r3, #0]
 8008814:	693a      	ldr	r2, [r7, #16]
 8008816:	0151      	lsls	r1, r2, #5
 8008818:	697a      	ldr	r2, [r7, #20]
 800881a:	440a      	add	r2, r1
 800881c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008820:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8008824:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8008826:	68bb      	ldr	r3, [r7, #8]
 8008828:	695b      	ldr	r3, [r3, #20]
 800882a:	2b00      	cmp	r3, #0
 800882c:	d07e      	beq.n	800892c <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800882e:	697b      	ldr	r3, [r7, #20]
 8008830:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008834:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008836:	68bb      	ldr	r3, [r7, #8]
 8008838:	781b      	ldrb	r3, [r3, #0]
 800883a:	f003 030f 	and.w	r3, r3, #15
 800883e:	2101      	movs	r1, #1
 8008840:	fa01 f303 	lsl.w	r3, r1, r3
 8008844:	6979      	ldr	r1, [r7, #20]
 8008846:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800884a:	4313      	orrs	r3, r2
 800884c:	634b      	str	r3, [r1, #52]	; 0x34
 800884e:	e06d      	b.n	800892c <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8008850:	693b      	ldr	r3, [r7, #16]
 8008852:	015a      	lsls	r2, r3, #5
 8008854:	697b      	ldr	r3, [r7, #20]
 8008856:	4413      	add	r3, r2
 8008858:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800885c:	691b      	ldr	r3, [r3, #16]
 800885e:	693a      	ldr	r2, [r7, #16]
 8008860:	0151      	lsls	r1, r2, #5
 8008862:	697a      	ldr	r2, [r7, #20]
 8008864:	440a      	add	r2, r1
 8008866:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800886a:	0cdb      	lsrs	r3, r3, #19
 800886c:	04db      	lsls	r3, r3, #19
 800886e:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8008870:	693b      	ldr	r3, [r7, #16]
 8008872:	015a      	lsls	r2, r3, #5
 8008874:	697b      	ldr	r3, [r7, #20]
 8008876:	4413      	add	r3, r2
 8008878:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800887c:	691b      	ldr	r3, [r3, #16]
 800887e:	693a      	ldr	r2, [r7, #16]
 8008880:	0151      	lsls	r1, r2, #5
 8008882:	697a      	ldr	r2, [r7, #20]
 8008884:	440a      	add	r2, r1
 8008886:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800888a:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800888e:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8008892:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8008894:	68bb      	ldr	r3, [r7, #8]
 8008896:	695b      	ldr	r3, [r3, #20]
 8008898:	2b00      	cmp	r3, #0
 800889a:	d003      	beq.n	80088a4 <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 800889c:	68bb      	ldr	r3, [r7, #8]
 800889e:	689a      	ldr	r2, [r3, #8]
 80088a0:	68bb      	ldr	r3, [r7, #8]
 80088a2:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80088a4:	693b      	ldr	r3, [r7, #16]
 80088a6:	015a      	lsls	r2, r3, #5
 80088a8:	697b      	ldr	r3, [r7, #20]
 80088aa:	4413      	add	r3, r2
 80088ac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80088b0:	691b      	ldr	r3, [r3, #16]
 80088b2:	693a      	ldr	r2, [r7, #16]
 80088b4:	0151      	lsls	r1, r2, #5
 80088b6:	697a      	ldr	r2, [r7, #20]
 80088b8:	440a      	add	r2, r1
 80088ba:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80088be:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80088c2:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 80088c4:	693b      	ldr	r3, [r7, #16]
 80088c6:	015a      	lsls	r2, r3, #5
 80088c8:	697b      	ldr	r3, [r7, #20]
 80088ca:	4413      	add	r3, r2
 80088cc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80088d0:	691a      	ldr	r2, [r3, #16]
 80088d2:	68bb      	ldr	r3, [r7, #8]
 80088d4:	689b      	ldr	r3, [r3, #8]
 80088d6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80088da:	6939      	ldr	r1, [r7, #16]
 80088dc:	0148      	lsls	r0, r1, #5
 80088de:	6979      	ldr	r1, [r7, #20]
 80088e0:	4401      	add	r1, r0
 80088e2:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80088e6:	4313      	orrs	r3, r2
 80088e8:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 80088ea:	79fb      	ldrb	r3, [r7, #7]
 80088ec:	2b01      	cmp	r3, #1
 80088ee:	d10d      	bne.n	800890c <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80088f0:	68bb      	ldr	r3, [r7, #8]
 80088f2:	68db      	ldr	r3, [r3, #12]
 80088f4:	2b00      	cmp	r3, #0
 80088f6:	d009      	beq.n	800890c <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80088f8:	68bb      	ldr	r3, [r7, #8]
 80088fa:	68d9      	ldr	r1, [r3, #12]
 80088fc:	693b      	ldr	r3, [r7, #16]
 80088fe:	015a      	lsls	r2, r3, #5
 8008900:	697b      	ldr	r3, [r7, #20]
 8008902:	4413      	add	r3, r2
 8008904:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008908:	460a      	mov	r2, r1
 800890a:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800890c:	693b      	ldr	r3, [r7, #16]
 800890e:	015a      	lsls	r2, r3, #5
 8008910:	697b      	ldr	r3, [r7, #20]
 8008912:	4413      	add	r3, r2
 8008914:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008918:	681b      	ldr	r3, [r3, #0]
 800891a:	693a      	ldr	r2, [r7, #16]
 800891c:	0151      	lsls	r1, r2, #5
 800891e:	697a      	ldr	r2, [r7, #20]
 8008920:	440a      	add	r2, r1
 8008922:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008926:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800892a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800892c:	2300      	movs	r3, #0
}
 800892e:	4618      	mov	r0, r3
 8008930:	371c      	adds	r7, #28
 8008932:	46bd      	mov	sp, r7
 8008934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008938:	4770      	bx	lr

0800893a <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800893a:	b480      	push	{r7}
 800893c:	b089      	sub	sp, #36	; 0x24
 800893e:	af00      	add	r7, sp, #0
 8008940:	60f8      	str	r0, [r7, #12]
 8008942:	60b9      	str	r1, [r7, #8]
 8008944:	4611      	mov	r1, r2
 8008946:	461a      	mov	r2, r3
 8008948:	460b      	mov	r3, r1
 800894a:	71fb      	strb	r3, [r7, #7]
 800894c:	4613      	mov	r3, r2
 800894e:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008950:	68fb      	ldr	r3, [r7, #12]
 8008952:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8008954:	68bb      	ldr	r3, [r7, #8]
 8008956:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8008958:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800895c:	2b00      	cmp	r3, #0
 800895e:	d123      	bne.n	80089a8 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8008960:	88bb      	ldrh	r3, [r7, #4]
 8008962:	3303      	adds	r3, #3
 8008964:	089b      	lsrs	r3, r3, #2
 8008966:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8008968:	2300      	movs	r3, #0
 800896a:	61bb      	str	r3, [r7, #24]
 800896c:	e018      	b.n	80089a0 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800896e:	79fb      	ldrb	r3, [r7, #7]
 8008970:	031a      	lsls	r2, r3, #12
 8008972:	697b      	ldr	r3, [r7, #20]
 8008974:	4413      	add	r3, r2
 8008976:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800897a:	461a      	mov	r2, r3
 800897c:	69fb      	ldr	r3, [r7, #28]
 800897e:	681b      	ldr	r3, [r3, #0]
 8008980:	6013      	str	r3, [r2, #0]
      pSrc++;
 8008982:	69fb      	ldr	r3, [r7, #28]
 8008984:	3301      	adds	r3, #1
 8008986:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8008988:	69fb      	ldr	r3, [r7, #28]
 800898a:	3301      	adds	r3, #1
 800898c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800898e:	69fb      	ldr	r3, [r7, #28]
 8008990:	3301      	adds	r3, #1
 8008992:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8008994:	69fb      	ldr	r3, [r7, #28]
 8008996:	3301      	adds	r3, #1
 8008998:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800899a:	69bb      	ldr	r3, [r7, #24]
 800899c:	3301      	adds	r3, #1
 800899e:	61bb      	str	r3, [r7, #24]
 80089a0:	69ba      	ldr	r2, [r7, #24]
 80089a2:	693b      	ldr	r3, [r7, #16]
 80089a4:	429a      	cmp	r2, r3
 80089a6:	d3e2      	bcc.n	800896e <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 80089a8:	2300      	movs	r3, #0
}
 80089aa:	4618      	mov	r0, r3
 80089ac:	3724      	adds	r7, #36	; 0x24
 80089ae:	46bd      	mov	sp, r7
 80089b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089b4:	4770      	bx	lr

080089b6 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80089b6:	b480      	push	{r7}
 80089b8:	b08b      	sub	sp, #44	; 0x2c
 80089ba:	af00      	add	r7, sp, #0
 80089bc:	60f8      	str	r0, [r7, #12]
 80089be:	60b9      	str	r1, [r7, #8]
 80089c0:	4613      	mov	r3, r2
 80089c2:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80089c4:	68fb      	ldr	r3, [r7, #12]
 80089c6:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 80089c8:	68bb      	ldr	r3, [r7, #8]
 80089ca:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 80089cc:	88fb      	ldrh	r3, [r7, #6]
 80089ce:	089b      	lsrs	r3, r3, #2
 80089d0:	b29b      	uxth	r3, r3
 80089d2:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 80089d4:	88fb      	ldrh	r3, [r7, #6]
 80089d6:	f003 0303 	and.w	r3, r3, #3
 80089da:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 80089dc:	2300      	movs	r3, #0
 80089de:	623b      	str	r3, [r7, #32]
 80089e0:	e014      	b.n	8008a0c <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80089e2:	69bb      	ldr	r3, [r7, #24]
 80089e4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80089e8:	681a      	ldr	r2, [r3, #0]
 80089ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089ec:	601a      	str	r2, [r3, #0]
    pDest++;
 80089ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089f0:	3301      	adds	r3, #1
 80089f2:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80089f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089f6:	3301      	adds	r3, #1
 80089f8:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80089fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089fc:	3301      	adds	r3, #1
 80089fe:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8008a00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a02:	3301      	adds	r3, #1
 8008a04:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8008a06:	6a3b      	ldr	r3, [r7, #32]
 8008a08:	3301      	adds	r3, #1
 8008a0a:	623b      	str	r3, [r7, #32]
 8008a0c:	6a3a      	ldr	r2, [r7, #32]
 8008a0e:	697b      	ldr	r3, [r7, #20]
 8008a10:	429a      	cmp	r2, r3
 8008a12:	d3e6      	bcc.n	80089e2 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8008a14:	8bfb      	ldrh	r3, [r7, #30]
 8008a16:	2b00      	cmp	r3, #0
 8008a18:	d01e      	beq.n	8008a58 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8008a1a:	2300      	movs	r3, #0
 8008a1c:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8008a1e:	69bb      	ldr	r3, [r7, #24]
 8008a20:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008a24:	461a      	mov	r2, r3
 8008a26:	f107 0310 	add.w	r3, r7, #16
 8008a2a:	6812      	ldr	r2, [r2, #0]
 8008a2c:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8008a2e:	693a      	ldr	r2, [r7, #16]
 8008a30:	6a3b      	ldr	r3, [r7, #32]
 8008a32:	b2db      	uxtb	r3, r3
 8008a34:	00db      	lsls	r3, r3, #3
 8008a36:	fa22 f303 	lsr.w	r3, r2, r3
 8008a3a:	b2da      	uxtb	r2, r3
 8008a3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a3e:	701a      	strb	r2, [r3, #0]
      i++;
 8008a40:	6a3b      	ldr	r3, [r7, #32]
 8008a42:	3301      	adds	r3, #1
 8008a44:	623b      	str	r3, [r7, #32]
      pDest++;
 8008a46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a48:	3301      	adds	r3, #1
 8008a4a:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8008a4c:	8bfb      	ldrh	r3, [r7, #30]
 8008a4e:	3b01      	subs	r3, #1
 8008a50:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8008a52:	8bfb      	ldrh	r3, [r7, #30]
 8008a54:	2b00      	cmp	r3, #0
 8008a56:	d1ea      	bne.n	8008a2e <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8008a58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8008a5a:	4618      	mov	r0, r3
 8008a5c:	372c      	adds	r7, #44	; 0x2c
 8008a5e:	46bd      	mov	sp, r7
 8008a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a64:	4770      	bx	lr

08008a66 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8008a66:	b480      	push	{r7}
 8008a68:	b085      	sub	sp, #20
 8008a6a:	af00      	add	r7, sp, #0
 8008a6c:	6078      	str	r0, [r7, #4]
 8008a6e:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008a70:	687b      	ldr	r3, [r7, #4]
 8008a72:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8008a74:	683b      	ldr	r3, [r7, #0]
 8008a76:	781b      	ldrb	r3, [r3, #0]
 8008a78:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8008a7a:	683b      	ldr	r3, [r7, #0]
 8008a7c:	785b      	ldrb	r3, [r3, #1]
 8008a7e:	2b01      	cmp	r3, #1
 8008a80:	d12c      	bne.n	8008adc <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8008a82:	68bb      	ldr	r3, [r7, #8]
 8008a84:	015a      	lsls	r2, r3, #5
 8008a86:	68fb      	ldr	r3, [r7, #12]
 8008a88:	4413      	add	r3, r2
 8008a8a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008a8e:	681b      	ldr	r3, [r3, #0]
 8008a90:	2b00      	cmp	r3, #0
 8008a92:	db12      	blt.n	8008aba <USB_EPSetStall+0x54>
 8008a94:	68bb      	ldr	r3, [r7, #8]
 8008a96:	2b00      	cmp	r3, #0
 8008a98:	d00f      	beq.n	8008aba <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8008a9a:	68bb      	ldr	r3, [r7, #8]
 8008a9c:	015a      	lsls	r2, r3, #5
 8008a9e:	68fb      	ldr	r3, [r7, #12]
 8008aa0:	4413      	add	r3, r2
 8008aa2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008aa6:	681b      	ldr	r3, [r3, #0]
 8008aa8:	68ba      	ldr	r2, [r7, #8]
 8008aaa:	0151      	lsls	r1, r2, #5
 8008aac:	68fa      	ldr	r2, [r7, #12]
 8008aae:	440a      	add	r2, r1
 8008ab0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008ab4:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8008ab8:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8008aba:	68bb      	ldr	r3, [r7, #8]
 8008abc:	015a      	lsls	r2, r3, #5
 8008abe:	68fb      	ldr	r3, [r7, #12]
 8008ac0:	4413      	add	r3, r2
 8008ac2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008ac6:	681b      	ldr	r3, [r3, #0]
 8008ac8:	68ba      	ldr	r2, [r7, #8]
 8008aca:	0151      	lsls	r1, r2, #5
 8008acc:	68fa      	ldr	r2, [r7, #12]
 8008ace:	440a      	add	r2, r1
 8008ad0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008ad4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8008ad8:	6013      	str	r3, [r2, #0]
 8008ada:	e02b      	b.n	8008b34 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8008adc:	68bb      	ldr	r3, [r7, #8]
 8008ade:	015a      	lsls	r2, r3, #5
 8008ae0:	68fb      	ldr	r3, [r7, #12]
 8008ae2:	4413      	add	r3, r2
 8008ae4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008ae8:	681b      	ldr	r3, [r3, #0]
 8008aea:	2b00      	cmp	r3, #0
 8008aec:	db12      	blt.n	8008b14 <USB_EPSetStall+0xae>
 8008aee:	68bb      	ldr	r3, [r7, #8]
 8008af0:	2b00      	cmp	r3, #0
 8008af2:	d00f      	beq.n	8008b14 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8008af4:	68bb      	ldr	r3, [r7, #8]
 8008af6:	015a      	lsls	r2, r3, #5
 8008af8:	68fb      	ldr	r3, [r7, #12]
 8008afa:	4413      	add	r3, r2
 8008afc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008b00:	681b      	ldr	r3, [r3, #0]
 8008b02:	68ba      	ldr	r2, [r7, #8]
 8008b04:	0151      	lsls	r1, r2, #5
 8008b06:	68fa      	ldr	r2, [r7, #12]
 8008b08:	440a      	add	r2, r1
 8008b0a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008b0e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8008b12:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8008b14:	68bb      	ldr	r3, [r7, #8]
 8008b16:	015a      	lsls	r2, r3, #5
 8008b18:	68fb      	ldr	r3, [r7, #12]
 8008b1a:	4413      	add	r3, r2
 8008b1c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008b20:	681b      	ldr	r3, [r3, #0]
 8008b22:	68ba      	ldr	r2, [r7, #8]
 8008b24:	0151      	lsls	r1, r2, #5
 8008b26:	68fa      	ldr	r2, [r7, #12]
 8008b28:	440a      	add	r2, r1
 8008b2a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008b2e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8008b32:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8008b34:	2300      	movs	r3, #0
}
 8008b36:	4618      	mov	r0, r3
 8008b38:	3714      	adds	r7, #20
 8008b3a:	46bd      	mov	sp, r7
 8008b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b40:	4770      	bx	lr

08008b42 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8008b42:	b480      	push	{r7}
 8008b44:	b085      	sub	sp, #20
 8008b46:	af00      	add	r7, sp, #0
 8008b48:	6078      	str	r0, [r7, #4]
 8008b4a:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008b4c:	687b      	ldr	r3, [r7, #4]
 8008b4e:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8008b50:	683b      	ldr	r3, [r7, #0]
 8008b52:	781b      	ldrb	r3, [r3, #0]
 8008b54:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8008b56:	683b      	ldr	r3, [r7, #0]
 8008b58:	785b      	ldrb	r3, [r3, #1]
 8008b5a:	2b01      	cmp	r3, #1
 8008b5c:	d128      	bne.n	8008bb0 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8008b5e:	68bb      	ldr	r3, [r7, #8]
 8008b60:	015a      	lsls	r2, r3, #5
 8008b62:	68fb      	ldr	r3, [r7, #12]
 8008b64:	4413      	add	r3, r2
 8008b66:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008b6a:	681b      	ldr	r3, [r3, #0]
 8008b6c:	68ba      	ldr	r2, [r7, #8]
 8008b6e:	0151      	lsls	r1, r2, #5
 8008b70:	68fa      	ldr	r2, [r7, #12]
 8008b72:	440a      	add	r2, r1
 8008b74:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008b78:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8008b7c:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8008b7e:	683b      	ldr	r3, [r7, #0]
 8008b80:	78db      	ldrb	r3, [r3, #3]
 8008b82:	2b03      	cmp	r3, #3
 8008b84:	d003      	beq.n	8008b8e <USB_EPClearStall+0x4c>
 8008b86:	683b      	ldr	r3, [r7, #0]
 8008b88:	78db      	ldrb	r3, [r3, #3]
 8008b8a:	2b02      	cmp	r3, #2
 8008b8c:	d138      	bne.n	8008c00 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8008b8e:	68bb      	ldr	r3, [r7, #8]
 8008b90:	015a      	lsls	r2, r3, #5
 8008b92:	68fb      	ldr	r3, [r7, #12]
 8008b94:	4413      	add	r3, r2
 8008b96:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008b9a:	681b      	ldr	r3, [r3, #0]
 8008b9c:	68ba      	ldr	r2, [r7, #8]
 8008b9e:	0151      	lsls	r1, r2, #5
 8008ba0:	68fa      	ldr	r2, [r7, #12]
 8008ba2:	440a      	add	r2, r1
 8008ba4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008ba8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008bac:	6013      	str	r3, [r2, #0]
 8008bae:	e027      	b.n	8008c00 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8008bb0:	68bb      	ldr	r3, [r7, #8]
 8008bb2:	015a      	lsls	r2, r3, #5
 8008bb4:	68fb      	ldr	r3, [r7, #12]
 8008bb6:	4413      	add	r3, r2
 8008bb8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008bbc:	681b      	ldr	r3, [r3, #0]
 8008bbe:	68ba      	ldr	r2, [r7, #8]
 8008bc0:	0151      	lsls	r1, r2, #5
 8008bc2:	68fa      	ldr	r2, [r7, #12]
 8008bc4:	440a      	add	r2, r1
 8008bc6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008bca:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8008bce:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8008bd0:	683b      	ldr	r3, [r7, #0]
 8008bd2:	78db      	ldrb	r3, [r3, #3]
 8008bd4:	2b03      	cmp	r3, #3
 8008bd6:	d003      	beq.n	8008be0 <USB_EPClearStall+0x9e>
 8008bd8:	683b      	ldr	r3, [r7, #0]
 8008bda:	78db      	ldrb	r3, [r3, #3]
 8008bdc:	2b02      	cmp	r3, #2
 8008bde:	d10f      	bne.n	8008c00 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8008be0:	68bb      	ldr	r3, [r7, #8]
 8008be2:	015a      	lsls	r2, r3, #5
 8008be4:	68fb      	ldr	r3, [r7, #12]
 8008be6:	4413      	add	r3, r2
 8008be8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008bec:	681b      	ldr	r3, [r3, #0]
 8008bee:	68ba      	ldr	r2, [r7, #8]
 8008bf0:	0151      	lsls	r1, r2, #5
 8008bf2:	68fa      	ldr	r2, [r7, #12]
 8008bf4:	440a      	add	r2, r1
 8008bf6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008bfa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008bfe:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8008c00:	2300      	movs	r3, #0
}
 8008c02:	4618      	mov	r0, r3
 8008c04:	3714      	adds	r7, #20
 8008c06:	46bd      	mov	sp, r7
 8008c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c0c:	4770      	bx	lr

08008c0e <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8008c0e:	b480      	push	{r7}
 8008c10:	b085      	sub	sp, #20
 8008c12:	af00      	add	r7, sp, #0
 8008c14:	6078      	str	r0, [r7, #4]
 8008c16:	460b      	mov	r3, r1
 8008c18:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008c1a:	687b      	ldr	r3, [r7, #4]
 8008c1c:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8008c1e:	68fb      	ldr	r3, [r7, #12]
 8008c20:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008c24:	681b      	ldr	r3, [r3, #0]
 8008c26:	68fa      	ldr	r2, [r7, #12]
 8008c28:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008c2c:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8008c30:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8008c32:	68fb      	ldr	r3, [r7, #12]
 8008c34:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008c38:	681a      	ldr	r2, [r3, #0]
 8008c3a:	78fb      	ldrb	r3, [r7, #3]
 8008c3c:	011b      	lsls	r3, r3, #4
 8008c3e:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8008c42:	68f9      	ldr	r1, [r7, #12]
 8008c44:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008c48:	4313      	orrs	r3, r2
 8008c4a:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8008c4c:	2300      	movs	r3, #0
}
 8008c4e:	4618      	mov	r0, r3
 8008c50:	3714      	adds	r7, #20
 8008c52:	46bd      	mov	sp, r7
 8008c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c58:	4770      	bx	lr

08008c5a <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8008c5a:	b480      	push	{r7}
 8008c5c:	b085      	sub	sp, #20
 8008c5e:	af00      	add	r7, sp, #0
 8008c60:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8008c62:	687b      	ldr	r3, [r7, #4]
 8008c64:	695b      	ldr	r3, [r3, #20]
 8008c66:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8008c68:	687b      	ldr	r3, [r7, #4]
 8008c6a:	699b      	ldr	r3, [r3, #24]
 8008c6c:	68fa      	ldr	r2, [r7, #12]
 8008c6e:	4013      	ands	r3, r2
 8008c70:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8008c72:	68fb      	ldr	r3, [r7, #12]
}
 8008c74:	4618      	mov	r0, r3
 8008c76:	3714      	adds	r7, #20
 8008c78:	46bd      	mov	sp, r7
 8008c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c7e:	4770      	bx	lr

08008c80 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8008c80:	b480      	push	{r7}
 8008c82:	b085      	sub	sp, #20
 8008c84:	af00      	add	r7, sp, #0
 8008c86:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008c88:	687b      	ldr	r3, [r7, #4]
 8008c8a:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8008c8c:	68fb      	ldr	r3, [r7, #12]
 8008c8e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008c92:	699b      	ldr	r3, [r3, #24]
 8008c94:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8008c96:	68fb      	ldr	r3, [r7, #12]
 8008c98:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008c9c:	69db      	ldr	r3, [r3, #28]
 8008c9e:	68ba      	ldr	r2, [r7, #8]
 8008ca0:	4013      	ands	r3, r2
 8008ca2:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8008ca4:	68bb      	ldr	r3, [r7, #8]
 8008ca6:	0c1b      	lsrs	r3, r3, #16
}
 8008ca8:	4618      	mov	r0, r3
 8008caa:	3714      	adds	r7, #20
 8008cac:	46bd      	mov	sp, r7
 8008cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cb2:	4770      	bx	lr

08008cb4 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8008cb4:	b480      	push	{r7}
 8008cb6:	b085      	sub	sp, #20
 8008cb8:	af00      	add	r7, sp, #0
 8008cba:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008cbc:	687b      	ldr	r3, [r7, #4]
 8008cbe:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8008cc0:	68fb      	ldr	r3, [r7, #12]
 8008cc2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008cc6:	699b      	ldr	r3, [r3, #24]
 8008cc8:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8008cca:	68fb      	ldr	r3, [r7, #12]
 8008ccc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008cd0:	69db      	ldr	r3, [r3, #28]
 8008cd2:	68ba      	ldr	r2, [r7, #8]
 8008cd4:	4013      	ands	r3, r2
 8008cd6:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8008cd8:	68bb      	ldr	r3, [r7, #8]
 8008cda:	b29b      	uxth	r3, r3
}
 8008cdc:	4618      	mov	r0, r3
 8008cde:	3714      	adds	r7, #20
 8008ce0:	46bd      	mov	sp, r7
 8008ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ce6:	4770      	bx	lr

08008ce8 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8008ce8:	b480      	push	{r7}
 8008cea:	b085      	sub	sp, #20
 8008cec:	af00      	add	r7, sp, #0
 8008cee:	6078      	str	r0, [r7, #4]
 8008cf0:	460b      	mov	r3, r1
 8008cf2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008cf4:	687b      	ldr	r3, [r7, #4]
 8008cf6:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8008cf8:	78fb      	ldrb	r3, [r7, #3]
 8008cfa:	015a      	lsls	r2, r3, #5
 8008cfc:	68fb      	ldr	r3, [r7, #12]
 8008cfe:	4413      	add	r3, r2
 8008d00:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008d04:	689b      	ldr	r3, [r3, #8]
 8008d06:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8008d08:	68fb      	ldr	r3, [r7, #12]
 8008d0a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008d0e:	695b      	ldr	r3, [r3, #20]
 8008d10:	68ba      	ldr	r2, [r7, #8]
 8008d12:	4013      	ands	r3, r2
 8008d14:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8008d16:	68bb      	ldr	r3, [r7, #8]
}
 8008d18:	4618      	mov	r0, r3
 8008d1a:	3714      	adds	r7, #20
 8008d1c:	46bd      	mov	sp, r7
 8008d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d22:	4770      	bx	lr

08008d24 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8008d24:	b480      	push	{r7}
 8008d26:	b087      	sub	sp, #28
 8008d28:	af00      	add	r7, sp, #0
 8008d2a:	6078      	str	r0, [r7, #4]
 8008d2c:	460b      	mov	r3, r1
 8008d2e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008d30:	687b      	ldr	r3, [r7, #4]
 8008d32:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8008d34:	697b      	ldr	r3, [r7, #20]
 8008d36:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008d3a:	691b      	ldr	r3, [r3, #16]
 8008d3c:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8008d3e:	697b      	ldr	r3, [r7, #20]
 8008d40:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008d44:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008d46:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8008d48:	78fb      	ldrb	r3, [r7, #3]
 8008d4a:	f003 030f 	and.w	r3, r3, #15
 8008d4e:	68fa      	ldr	r2, [r7, #12]
 8008d50:	fa22 f303 	lsr.w	r3, r2, r3
 8008d54:	01db      	lsls	r3, r3, #7
 8008d56:	b2db      	uxtb	r3, r3
 8008d58:	693a      	ldr	r2, [r7, #16]
 8008d5a:	4313      	orrs	r3, r2
 8008d5c:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8008d5e:	78fb      	ldrb	r3, [r7, #3]
 8008d60:	015a      	lsls	r2, r3, #5
 8008d62:	697b      	ldr	r3, [r7, #20]
 8008d64:	4413      	add	r3, r2
 8008d66:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008d6a:	689b      	ldr	r3, [r3, #8]
 8008d6c:	693a      	ldr	r2, [r7, #16]
 8008d6e:	4013      	ands	r3, r2
 8008d70:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8008d72:	68bb      	ldr	r3, [r7, #8]
}
 8008d74:	4618      	mov	r0, r3
 8008d76:	371c      	adds	r7, #28
 8008d78:	46bd      	mov	sp, r7
 8008d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d7e:	4770      	bx	lr

08008d80 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8008d80:	b480      	push	{r7}
 8008d82:	b083      	sub	sp, #12
 8008d84:	af00      	add	r7, sp, #0
 8008d86:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8008d88:	687b      	ldr	r3, [r7, #4]
 8008d8a:	695b      	ldr	r3, [r3, #20]
 8008d8c:	f003 0301 	and.w	r3, r3, #1
}
 8008d90:	4618      	mov	r0, r3
 8008d92:	370c      	adds	r7, #12
 8008d94:	46bd      	mov	sp, r7
 8008d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d9a:	4770      	bx	lr

08008d9c <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8008d9c:	b480      	push	{r7}
 8008d9e:	b085      	sub	sp, #20
 8008da0:	af00      	add	r7, sp, #0
 8008da2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008da4:	687b      	ldr	r3, [r7, #4]
 8008da6:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8008da8:	68fb      	ldr	r3, [r7, #12]
 8008daa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008dae:	681b      	ldr	r3, [r3, #0]
 8008db0:	68fa      	ldr	r2, [r7, #12]
 8008db2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008db6:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8008dba:	f023 0307 	bic.w	r3, r3, #7
 8008dbe:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8008dc0:	68fb      	ldr	r3, [r7, #12]
 8008dc2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008dc6:	685b      	ldr	r3, [r3, #4]
 8008dc8:	68fa      	ldr	r2, [r7, #12]
 8008dca:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008dce:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008dd2:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8008dd4:	2300      	movs	r3, #0
}
 8008dd6:	4618      	mov	r0, r3
 8008dd8:	3714      	adds	r7, #20
 8008dda:	46bd      	mov	sp, r7
 8008ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008de0:	4770      	bx	lr
	...

08008de4 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8008de4:	b480      	push	{r7}
 8008de6:	b087      	sub	sp, #28
 8008de8:	af00      	add	r7, sp, #0
 8008dea:	60f8      	str	r0, [r7, #12]
 8008dec:	460b      	mov	r3, r1
 8008dee:	607a      	str	r2, [r7, #4]
 8008df0:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008df2:	68fb      	ldr	r3, [r7, #12]
 8008df4:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8008df6:	68fb      	ldr	r3, [r7, #12]
 8008df8:	333c      	adds	r3, #60	; 0x3c
 8008dfa:	3304      	adds	r3, #4
 8008dfc:	681b      	ldr	r3, [r3, #0]
 8008dfe:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8008e00:	693b      	ldr	r3, [r7, #16]
 8008e02:	4a26      	ldr	r2, [pc, #152]	; (8008e9c <USB_EP0_OutStart+0xb8>)
 8008e04:	4293      	cmp	r3, r2
 8008e06:	d90a      	bls.n	8008e1e <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8008e08:	697b      	ldr	r3, [r7, #20]
 8008e0a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008e0e:	681b      	ldr	r3, [r3, #0]
 8008e10:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008e14:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008e18:	d101      	bne.n	8008e1e <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8008e1a:	2300      	movs	r3, #0
 8008e1c:	e037      	b.n	8008e8e <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8008e1e:	697b      	ldr	r3, [r7, #20]
 8008e20:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008e24:	461a      	mov	r2, r3
 8008e26:	2300      	movs	r3, #0
 8008e28:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8008e2a:	697b      	ldr	r3, [r7, #20]
 8008e2c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008e30:	691b      	ldr	r3, [r3, #16]
 8008e32:	697a      	ldr	r2, [r7, #20]
 8008e34:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008e38:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8008e3c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8008e3e:	697b      	ldr	r3, [r7, #20]
 8008e40:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008e44:	691b      	ldr	r3, [r3, #16]
 8008e46:	697a      	ldr	r2, [r7, #20]
 8008e48:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008e4c:	f043 0318 	orr.w	r3, r3, #24
 8008e50:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8008e52:	697b      	ldr	r3, [r7, #20]
 8008e54:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008e58:	691b      	ldr	r3, [r3, #16]
 8008e5a:	697a      	ldr	r2, [r7, #20]
 8008e5c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008e60:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8008e64:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8008e66:	7afb      	ldrb	r3, [r7, #11]
 8008e68:	2b01      	cmp	r3, #1
 8008e6a:	d10f      	bne.n	8008e8c <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8008e6c:	697b      	ldr	r3, [r7, #20]
 8008e6e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008e72:	461a      	mov	r2, r3
 8008e74:	687b      	ldr	r3, [r7, #4]
 8008e76:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8008e78:	697b      	ldr	r3, [r7, #20]
 8008e7a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008e7e:	681b      	ldr	r3, [r3, #0]
 8008e80:	697a      	ldr	r2, [r7, #20]
 8008e82:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008e86:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8008e8a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8008e8c:	2300      	movs	r3, #0
}
 8008e8e:	4618      	mov	r0, r3
 8008e90:	371c      	adds	r7, #28
 8008e92:	46bd      	mov	sp, r7
 8008e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e98:	4770      	bx	lr
 8008e9a:	bf00      	nop
 8008e9c:	4f54300a 	.word	0x4f54300a

08008ea0 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8008ea0:	b480      	push	{r7}
 8008ea2:	b083      	sub	sp, #12
 8008ea4:	af00      	add	r7, sp, #0
 8008ea6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8008ea8:	2300      	movs	r3, #0
}
 8008eaa:	4618      	mov	r0, r3
 8008eac:	370c      	adds	r7, #12
 8008eae:	46bd      	mov	sp, r7
 8008eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008eb4:	4770      	bx	lr

08008eb6 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008eb6:	b580      	push	{r7, lr}
 8008eb8:	b084      	sub	sp, #16
 8008eba:	af00      	add	r7, sp, #0
 8008ebc:	6078      	str	r0, [r7, #4]
 8008ebe:	460b      	mov	r3, r1
 8008ec0:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8008ec2:	2303      	movs	r3, #3
 8008ec4:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8008ec6:	687b      	ldr	r3, [r7, #4]
 8008ec8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008ecc:	2b00      	cmp	r3, #0
 8008ece:	d009      	beq.n	8008ee4 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 8008ed0:	687b      	ldr	r3, [r7, #4]
 8008ed2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008ed6:	681b      	ldr	r3, [r3, #0]
 8008ed8:	78fa      	ldrb	r2, [r7, #3]
 8008eda:	4611      	mov	r1, r2
 8008edc:	6878      	ldr	r0, [r7, #4]
 8008ede:	4798      	blx	r3
 8008ee0:	4603      	mov	r3, r0
 8008ee2:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8008ee4:	7bfb      	ldrb	r3, [r7, #15]
}
 8008ee6:	4618      	mov	r0, r3
 8008ee8:	3710      	adds	r7, #16
 8008eea:	46bd      	mov	sp, r7
 8008eec:	bd80      	pop	{r7, pc}

08008eee <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008eee:	b580      	push	{r7, lr}
 8008ef0:	b082      	sub	sp, #8
 8008ef2:	af00      	add	r7, sp, #0
 8008ef4:	6078      	str	r0, [r7, #4]
 8008ef6:	460b      	mov	r3, r1
 8008ef8:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 8008efa:	687b      	ldr	r3, [r7, #4]
 8008efc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008f00:	2b00      	cmp	r3, #0
 8008f02:	d007      	beq.n	8008f14 <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 8008f04:	687b      	ldr	r3, [r7, #4]
 8008f06:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008f0a:	685b      	ldr	r3, [r3, #4]
 8008f0c:	78fa      	ldrb	r2, [r7, #3]
 8008f0e:	4611      	mov	r1, r2
 8008f10:	6878      	ldr	r0, [r7, #4]
 8008f12:	4798      	blx	r3
  }

  return USBD_OK;
 8008f14:	2300      	movs	r3, #0
}
 8008f16:	4618      	mov	r0, r3
 8008f18:	3708      	adds	r7, #8
 8008f1a:	46bd      	mov	sp, r7
 8008f1c:	bd80      	pop	{r7, pc}

08008f1e <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8008f1e:	b580      	push	{r7, lr}
 8008f20:	b084      	sub	sp, #16
 8008f22:	af00      	add	r7, sp, #0
 8008f24:	6078      	str	r0, [r7, #4]
 8008f26:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8008f28:	687b      	ldr	r3, [r7, #4]
 8008f2a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8008f2e:	6839      	ldr	r1, [r7, #0]
 8008f30:	4618      	mov	r0, r3
 8008f32:	f000 ff8f 	bl	8009e54 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8008f36:	687b      	ldr	r3, [r7, #4]
 8008f38:	2201      	movs	r2, #1
 8008f3a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8008f3e:	687b      	ldr	r3, [r7, #4]
 8008f40:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8008f44:	461a      	mov	r2, r3
 8008f46:	687b      	ldr	r3, [r7, #4]
 8008f48:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8008f4c:	687b      	ldr	r3, [r7, #4]
 8008f4e:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8008f52:	f003 031f 	and.w	r3, r3, #31
 8008f56:	2b02      	cmp	r3, #2
 8008f58:	d01a      	beq.n	8008f90 <USBD_LL_SetupStage+0x72>
 8008f5a:	2b02      	cmp	r3, #2
 8008f5c:	d822      	bhi.n	8008fa4 <USBD_LL_SetupStage+0x86>
 8008f5e:	2b00      	cmp	r3, #0
 8008f60:	d002      	beq.n	8008f68 <USBD_LL_SetupStage+0x4a>
 8008f62:	2b01      	cmp	r3, #1
 8008f64:	d00a      	beq.n	8008f7c <USBD_LL_SetupStage+0x5e>
 8008f66:	e01d      	b.n	8008fa4 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8008f68:	687b      	ldr	r3, [r7, #4]
 8008f6a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8008f6e:	4619      	mov	r1, r3
 8008f70:	6878      	ldr	r0, [r7, #4]
 8008f72:	f000 fa61 	bl	8009438 <USBD_StdDevReq>
 8008f76:	4603      	mov	r3, r0
 8008f78:	73fb      	strb	r3, [r7, #15]
      break;
 8008f7a:	e020      	b.n	8008fbe <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8008f7c:	687b      	ldr	r3, [r7, #4]
 8008f7e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8008f82:	4619      	mov	r1, r3
 8008f84:	6878      	ldr	r0, [r7, #4]
 8008f86:	f000 fac5 	bl	8009514 <USBD_StdItfReq>
 8008f8a:	4603      	mov	r3, r0
 8008f8c:	73fb      	strb	r3, [r7, #15]
      break;
 8008f8e:	e016      	b.n	8008fbe <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8008f90:	687b      	ldr	r3, [r7, #4]
 8008f92:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8008f96:	4619      	mov	r1, r3
 8008f98:	6878      	ldr	r0, [r7, #4]
 8008f9a:	f000 fb04 	bl	80095a6 <USBD_StdEPReq>
 8008f9e:	4603      	mov	r3, r0
 8008fa0:	73fb      	strb	r3, [r7, #15]
      break;
 8008fa2:	e00c      	b.n	8008fbe <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8008fa4:	687b      	ldr	r3, [r7, #4]
 8008fa6:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8008faa:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8008fae:	b2db      	uxtb	r3, r3
 8008fb0:	4619      	mov	r1, r3
 8008fb2:	6878      	ldr	r0, [r7, #4]
 8008fb4:	f003 fee2 	bl	800cd7c <USBD_LL_StallEP>
 8008fb8:	4603      	mov	r3, r0
 8008fba:	73fb      	strb	r3, [r7, #15]
      break;
 8008fbc:	bf00      	nop
  }

  return ret;
 8008fbe:	7bfb      	ldrb	r3, [r7, #15]
}
 8008fc0:	4618      	mov	r0, r3
 8008fc2:	3710      	adds	r7, #16
 8008fc4:	46bd      	mov	sp, r7
 8008fc6:	bd80      	pop	{r7, pc}

08008fc8 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8008fc8:	b580      	push	{r7, lr}
 8008fca:	b086      	sub	sp, #24
 8008fcc:	af00      	add	r7, sp, #0
 8008fce:	60f8      	str	r0, [r7, #12]
 8008fd0:	460b      	mov	r3, r1
 8008fd2:	607a      	str	r2, [r7, #4]
 8008fd4:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8008fd6:	7afb      	ldrb	r3, [r7, #11]
 8008fd8:	2b00      	cmp	r3, #0
 8008fda:	d138      	bne.n	800904e <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 8008fdc:	68fb      	ldr	r3, [r7, #12]
 8008fde:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8008fe2:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8008fe4:	68fb      	ldr	r3, [r7, #12]
 8008fe6:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8008fea:	2b03      	cmp	r3, #3
 8008fec:	d14a      	bne.n	8009084 <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 8008fee:	693b      	ldr	r3, [r7, #16]
 8008ff0:	689a      	ldr	r2, [r3, #8]
 8008ff2:	693b      	ldr	r3, [r7, #16]
 8008ff4:	68db      	ldr	r3, [r3, #12]
 8008ff6:	429a      	cmp	r2, r3
 8008ff8:	d913      	bls.n	8009022 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8008ffa:	693b      	ldr	r3, [r7, #16]
 8008ffc:	689a      	ldr	r2, [r3, #8]
 8008ffe:	693b      	ldr	r3, [r7, #16]
 8009000:	68db      	ldr	r3, [r3, #12]
 8009002:	1ad2      	subs	r2, r2, r3
 8009004:	693b      	ldr	r3, [r7, #16]
 8009006:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8009008:	693b      	ldr	r3, [r7, #16]
 800900a:	68da      	ldr	r2, [r3, #12]
 800900c:	693b      	ldr	r3, [r7, #16]
 800900e:	689b      	ldr	r3, [r3, #8]
 8009010:	4293      	cmp	r3, r2
 8009012:	bf28      	it	cs
 8009014:	4613      	movcs	r3, r2
 8009016:	461a      	mov	r2, r3
 8009018:	6879      	ldr	r1, [r7, #4]
 800901a:	68f8      	ldr	r0, [r7, #12]
 800901c:	f000 ff91 	bl	8009f42 <USBD_CtlContinueRx>
 8009020:	e030      	b.n	8009084 <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009022:	68fb      	ldr	r3, [r7, #12]
 8009024:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009028:	b2db      	uxtb	r3, r3
 800902a:	2b03      	cmp	r3, #3
 800902c:	d10b      	bne.n	8009046 <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 800902e:	68fb      	ldr	r3, [r7, #12]
 8009030:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009034:	691b      	ldr	r3, [r3, #16]
 8009036:	2b00      	cmp	r3, #0
 8009038:	d005      	beq.n	8009046 <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 800903a:	68fb      	ldr	r3, [r7, #12]
 800903c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009040:	691b      	ldr	r3, [r3, #16]
 8009042:	68f8      	ldr	r0, [r7, #12]
 8009044:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8009046:	68f8      	ldr	r0, [r7, #12]
 8009048:	f000 ff8c 	bl	8009f64 <USBD_CtlSendStatus>
 800904c:	e01a      	b.n	8009084 <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800904e:	68fb      	ldr	r3, [r7, #12]
 8009050:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009054:	b2db      	uxtb	r3, r3
 8009056:	2b03      	cmp	r3, #3
 8009058:	d114      	bne.n	8009084 <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 800905a:	68fb      	ldr	r3, [r7, #12]
 800905c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009060:	699b      	ldr	r3, [r3, #24]
 8009062:	2b00      	cmp	r3, #0
 8009064:	d00e      	beq.n	8009084 <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 8009066:	68fb      	ldr	r3, [r7, #12]
 8009068:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800906c:	699b      	ldr	r3, [r3, #24]
 800906e:	7afa      	ldrb	r2, [r7, #11]
 8009070:	4611      	mov	r1, r2
 8009072:	68f8      	ldr	r0, [r7, #12]
 8009074:	4798      	blx	r3
 8009076:	4603      	mov	r3, r0
 8009078:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 800907a:	7dfb      	ldrb	r3, [r7, #23]
 800907c:	2b00      	cmp	r3, #0
 800907e:	d001      	beq.n	8009084 <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 8009080:	7dfb      	ldrb	r3, [r7, #23]
 8009082:	e000      	b.n	8009086 <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 8009084:	2300      	movs	r3, #0
}
 8009086:	4618      	mov	r0, r3
 8009088:	3718      	adds	r7, #24
 800908a:	46bd      	mov	sp, r7
 800908c:	bd80      	pop	{r7, pc}

0800908e <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800908e:	b580      	push	{r7, lr}
 8009090:	b086      	sub	sp, #24
 8009092:	af00      	add	r7, sp, #0
 8009094:	60f8      	str	r0, [r7, #12]
 8009096:	460b      	mov	r3, r1
 8009098:	607a      	str	r2, [r7, #4]
 800909a:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800909c:	7afb      	ldrb	r3, [r7, #11]
 800909e:	2b00      	cmp	r3, #0
 80090a0:	d16b      	bne.n	800917a <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 80090a2:	68fb      	ldr	r3, [r7, #12]
 80090a4:	3314      	adds	r3, #20
 80090a6:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80090a8:	68fb      	ldr	r3, [r7, #12]
 80090aa:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80090ae:	2b02      	cmp	r3, #2
 80090b0:	d156      	bne.n	8009160 <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 80090b2:	693b      	ldr	r3, [r7, #16]
 80090b4:	689a      	ldr	r2, [r3, #8]
 80090b6:	693b      	ldr	r3, [r7, #16]
 80090b8:	68db      	ldr	r3, [r3, #12]
 80090ba:	429a      	cmp	r2, r3
 80090bc:	d914      	bls.n	80090e8 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 80090be:	693b      	ldr	r3, [r7, #16]
 80090c0:	689a      	ldr	r2, [r3, #8]
 80090c2:	693b      	ldr	r3, [r7, #16]
 80090c4:	68db      	ldr	r3, [r3, #12]
 80090c6:	1ad2      	subs	r2, r2, r3
 80090c8:	693b      	ldr	r3, [r7, #16]
 80090ca:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 80090cc:	693b      	ldr	r3, [r7, #16]
 80090ce:	689b      	ldr	r3, [r3, #8]
 80090d0:	461a      	mov	r2, r3
 80090d2:	6879      	ldr	r1, [r7, #4]
 80090d4:	68f8      	ldr	r0, [r7, #12]
 80090d6:	f000 ff23 	bl	8009f20 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80090da:	2300      	movs	r3, #0
 80090dc:	2200      	movs	r2, #0
 80090de:	2100      	movs	r1, #0
 80090e0:	68f8      	ldr	r0, [r7, #12]
 80090e2:	f003 fef5 	bl	800ced0 <USBD_LL_PrepareReceive>
 80090e6:	e03b      	b.n	8009160 <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 80090e8:	693b      	ldr	r3, [r7, #16]
 80090ea:	68da      	ldr	r2, [r3, #12]
 80090ec:	693b      	ldr	r3, [r7, #16]
 80090ee:	689b      	ldr	r3, [r3, #8]
 80090f0:	429a      	cmp	r2, r3
 80090f2:	d11c      	bne.n	800912e <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 80090f4:	693b      	ldr	r3, [r7, #16]
 80090f6:	685a      	ldr	r2, [r3, #4]
 80090f8:	693b      	ldr	r3, [r7, #16]
 80090fa:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 80090fc:	429a      	cmp	r2, r3
 80090fe:	d316      	bcc.n	800912e <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8009100:	693b      	ldr	r3, [r7, #16]
 8009102:	685a      	ldr	r2, [r3, #4]
 8009104:	68fb      	ldr	r3, [r7, #12]
 8009106:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800910a:	429a      	cmp	r2, r3
 800910c:	d20f      	bcs.n	800912e <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800910e:	2200      	movs	r2, #0
 8009110:	2100      	movs	r1, #0
 8009112:	68f8      	ldr	r0, [r7, #12]
 8009114:	f000 ff04 	bl	8009f20 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8009118:	68fb      	ldr	r3, [r7, #12]
 800911a:	2200      	movs	r2, #0
 800911c:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009120:	2300      	movs	r3, #0
 8009122:	2200      	movs	r2, #0
 8009124:	2100      	movs	r1, #0
 8009126:	68f8      	ldr	r0, [r7, #12]
 8009128:	f003 fed2 	bl	800ced0 <USBD_LL_PrepareReceive>
 800912c:	e018      	b.n	8009160 <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800912e:	68fb      	ldr	r3, [r7, #12]
 8009130:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009134:	b2db      	uxtb	r3, r3
 8009136:	2b03      	cmp	r3, #3
 8009138:	d10b      	bne.n	8009152 <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 800913a:	68fb      	ldr	r3, [r7, #12]
 800913c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009140:	68db      	ldr	r3, [r3, #12]
 8009142:	2b00      	cmp	r3, #0
 8009144:	d005      	beq.n	8009152 <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 8009146:	68fb      	ldr	r3, [r7, #12]
 8009148:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800914c:	68db      	ldr	r3, [r3, #12]
 800914e:	68f8      	ldr	r0, [r7, #12]
 8009150:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8009152:	2180      	movs	r1, #128	; 0x80
 8009154:	68f8      	ldr	r0, [r7, #12]
 8009156:	f003 fe11 	bl	800cd7c <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800915a:	68f8      	ldr	r0, [r7, #12]
 800915c:	f000 ff15 	bl	8009f8a <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 8009160:	68fb      	ldr	r3, [r7, #12]
 8009162:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8009166:	2b01      	cmp	r3, #1
 8009168:	d122      	bne.n	80091b0 <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 800916a:	68f8      	ldr	r0, [r7, #12]
 800916c:	f7ff fe98 	bl	8008ea0 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8009170:	68fb      	ldr	r3, [r7, #12]
 8009172:	2200      	movs	r2, #0
 8009174:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8009178:	e01a      	b.n	80091b0 <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800917a:	68fb      	ldr	r3, [r7, #12]
 800917c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009180:	b2db      	uxtb	r3, r3
 8009182:	2b03      	cmp	r3, #3
 8009184:	d114      	bne.n	80091b0 <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 8009186:	68fb      	ldr	r3, [r7, #12]
 8009188:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800918c:	695b      	ldr	r3, [r3, #20]
 800918e:	2b00      	cmp	r3, #0
 8009190:	d00e      	beq.n	80091b0 <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 8009192:	68fb      	ldr	r3, [r7, #12]
 8009194:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009198:	695b      	ldr	r3, [r3, #20]
 800919a:	7afa      	ldrb	r2, [r7, #11]
 800919c:	4611      	mov	r1, r2
 800919e:	68f8      	ldr	r0, [r7, #12]
 80091a0:	4798      	blx	r3
 80091a2:	4603      	mov	r3, r0
 80091a4:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 80091a6:	7dfb      	ldrb	r3, [r7, #23]
 80091a8:	2b00      	cmp	r3, #0
 80091aa:	d001      	beq.n	80091b0 <USBD_LL_DataInStage+0x122>
        {
          return ret;
 80091ac:	7dfb      	ldrb	r3, [r7, #23]
 80091ae:	e000      	b.n	80091b2 <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 80091b0:	2300      	movs	r3, #0
}
 80091b2:	4618      	mov	r0, r3
 80091b4:	3718      	adds	r7, #24
 80091b6:	46bd      	mov	sp, r7
 80091b8:	bd80      	pop	{r7, pc}

080091ba <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 80091ba:	b580      	push	{r7, lr}
 80091bc:	b082      	sub	sp, #8
 80091be:	af00      	add	r7, sp, #0
 80091c0:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80091c2:	687b      	ldr	r3, [r7, #4]
 80091c4:	2201      	movs	r2, #1
 80091c6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 80091ca:	687b      	ldr	r3, [r7, #4]
 80091cc:	2200      	movs	r2, #0
 80091ce:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 80091d2:	687b      	ldr	r3, [r7, #4]
 80091d4:	2200      	movs	r2, #0
 80091d6:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80091d8:	687b      	ldr	r3, [r7, #4]
 80091da:	2200      	movs	r2, #0
 80091dc:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 80091e0:	687b      	ldr	r3, [r7, #4]
 80091e2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80091e6:	2b00      	cmp	r3, #0
 80091e8:	d101      	bne.n	80091ee <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 80091ea:	2303      	movs	r3, #3
 80091ec:	e02f      	b.n	800924e <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 80091ee:	687b      	ldr	r3, [r7, #4]
 80091f0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80091f4:	2b00      	cmp	r3, #0
 80091f6:	d00f      	beq.n	8009218 <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 80091f8:	687b      	ldr	r3, [r7, #4]
 80091fa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80091fe:	685b      	ldr	r3, [r3, #4]
 8009200:	2b00      	cmp	r3, #0
 8009202:	d009      	beq.n	8009218 <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8009204:	687b      	ldr	r3, [r7, #4]
 8009206:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800920a:	685b      	ldr	r3, [r3, #4]
 800920c:	687a      	ldr	r2, [r7, #4]
 800920e:	6852      	ldr	r2, [r2, #4]
 8009210:	b2d2      	uxtb	r2, r2
 8009212:	4611      	mov	r1, r2
 8009214:	6878      	ldr	r0, [r7, #4]
 8009216:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8009218:	2340      	movs	r3, #64	; 0x40
 800921a:	2200      	movs	r2, #0
 800921c:	2100      	movs	r1, #0
 800921e:	6878      	ldr	r0, [r7, #4]
 8009220:	f003 fd86 	bl	800cd30 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8009224:	687b      	ldr	r3, [r7, #4]
 8009226:	2201      	movs	r2, #1
 8009228:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800922c:	687b      	ldr	r3, [r7, #4]
 800922e:	2240      	movs	r2, #64	; 0x40
 8009230:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8009234:	2340      	movs	r3, #64	; 0x40
 8009236:	2200      	movs	r2, #0
 8009238:	2180      	movs	r1, #128	; 0x80
 800923a:	6878      	ldr	r0, [r7, #4]
 800923c:	f003 fd78 	bl	800cd30 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8009240:	687b      	ldr	r3, [r7, #4]
 8009242:	2201      	movs	r2, #1
 8009244:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8009246:	687b      	ldr	r3, [r7, #4]
 8009248:	2240      	movs	r2, #64	; 0x40
 800924a:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 800924c:	2300      	movs	r3, #0
}
 800924e:	4618      	mov	r0, r3
 8009250:	3708      	adds	r7, #8
 8009252:	46bd      	mov	sp, r7
 8009254:	bd80      	pop	{r7, pc}

08009256 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8009256:	b480      	push	{r7}
 8009258:	b083      	sub	sp, #12
 800925a:	af00      	add	r7, sp, #0
 800925c:	6078      	str	r0, [r7, #4]
 800925e:	460b      	mov	r3, r1
 8009260:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8009262:	687b      	ldr	r3, [r7, #4]
 8009264:	78fa      	ldrb	r2, [r7, #3]
 8009266:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8009268:	2300      	movs	r3, #0
}
 800926a:	4618      	mov	r0, r3
 800926c:	370c      	adds	r7, #12
 800926e:	46bd      	mov	sp, r7
 8009270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009274:	4770      	bx	lr

08009276 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8009276:	b480      	push	{r7}
 8009278:	b083      	sub	sp, #12
 800927a:	af00      	add	r7, sp, #0
 800927c:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800927e:	687b      	ldr	r3, [r7, #4]
 8009280:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009284:	b2da      	uxtb	r2, r3
 8009286:	687b      	ldr	r3, [r7, #4]
 8009288:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800928c:	687b      	ldr	r3, [r7, #4]
 800928e:	2204      	movs	r2, #4
 8009290:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8009294:	2300      	movs	r3, #0
}
 8009296:	4618      	mov	r0, r3
 8009298:	370c      	adds	r7, #12
 800929a:	46bd      	mov	sp, r7
 800929c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092a0:	4770      	bx	lr

080092a2 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 80092a2:	b480      	push	{r7}
 80092a4:	b083      	sub	sp, #12
 80092a6:	af00      	add	r7, sp, #0
 80092a8:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 80092aa:	687b      	ldr	r3, [r7, #4]
 80092ac:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80092b0:	b2db      	uxtb	r3, r3
 80092b2:	2b04      	cmp	r3, #4
 80092b4:	d106      	bne.n	80092c4 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 80092b6:	687b      	ldr	r3, [r7, #4]
 80092b8:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 80092bc:	b2da      	uxtb	r2, r3
 80092be:	687b      	ldr	r3, [r7, #4]
 80092c0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 80092c4:	2300      	movs	r3, #0
}
 80092c6:	4618      	mov	r0, r3
 80092c8:	370c      	adds	r7, #12
 80092ca:	46bd      	mov	sp, r7
 80092cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092d0:	4770      	bx	lr

080092d2 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80092d2:	b580      	push	{r7, lr}
 80092d4:	b082      	sub	sp, #8
 80092d6:	af00      	add	r7, sp, #0
 80092d8:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 80092da:	687b      	ldr	r3, [r7, #4]
 80092dc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80092e0:	2b00      	cmp	r3, #0
 80092e2:	d101      	bne.n	80092e8 <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 80092e4:	2303      	movs	r3, #3
 80092e6:	e012      	b.n	800930e <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80092e8:	687b      	ldr	r3, [r7, #4]
 80092ea:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80092ee:	b2db      	uxtb	r3, r3
 80092f0:	2b03      	cmp	r3, #3
 80092f2:	d10b      	bne.n	800930c <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 80092f4:	687b      	ldr	r3, [r7, #4]
 80092f6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80092fa:	69db      	ldr	r3, [r3, #28]
 80092fc:	2b00      	cmp	r3, #0
 80092fe:	d005      	beq.n	800930c <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 8009300:	687b      	ldr	r3, [r7, #4]
 8009302:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009306:	69db      	ldr	r3, [r3, #28]
 8009308:	6878      	ldr	r0, [r7, #4]
 800930a:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800930c:	2300      	movs	r3, #0
}
 800930e:	4618      	mov	r0, r3
 8009310:	3708      	adds	r7, #8
 8009312:	46bd      	mov	sp, r7
 8009314:	bd80      	pop	{r7, pc}

08009316 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8009316:	b580      	push	{r7, lr}
 8009318:	b082      	sub	sp, #8
 800931a:	af00      	add	r7, sp, #0
 800931c:	6078      	str	r0, [r7, #4]
 800931e:	460b      	mov	r3, r1
 8009320:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 8009322:	687b      	ldr	r3, [r7, #4]
 8009324:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009328:	2b00      	cmp	r3, #0
 800932a:	d101      	bne.n	8009330 <USBD_LL_IsoINIncomplete+0x1a>
  {
    return USBD_FAIL;
 800932c:	2303      	movs	r3, #3
 800932e:	e014      	b.n	800935a <USBD_LL_IsoINIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009330:	687b      	ldr	r3, [r7, #4]
 8009332:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009336:	b2db      	uxtb	r3, r3
 8009338:	2b03      	cmp	r3, #3
 800933a:	d10d      	bne.n	8009358 <USBD_LL_IsoINIncomplete+0x42>
  {
    if (pdev->pClass->IsoINIncomplete != NULL)
 800933c:	687b      	ldr	r3, [r7, #4]
 800933e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009342:	6a1b      	ldr	r3, [r3, #32]
 8009344:	2b00      	cmp	r3, #0
 8009346:	d007      	beq.n	8009358 <USBD_LL_IsoINIncomplete+0x42>
    {
      (void)pdev->pClass->IsoINIncomplete(pdev, epnum);
 8009348:	687b      	ldr	r3, [r7, #4]
 800934a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800934e:	6a1b      	ldr	r3, [r3, #32]
 8009350:	78fa      	ldrb	r2, [r7, #3]
 8009352:	4611      	mov	r1, r2
 8009354:	6878      	ldr	r0, [r7, #4]
 8009356:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8009358:	2300      	movs	r3, #0
}
 800935a:	4618      	mov	r0, r3
 800935c:	3708      	adds	r7, #8
 800935e:	46bd      	mov	sp, r7
 8009360:	bd80      	pop	{r7, pc}

08009362 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8009362:	b580      	push	{r7, lr}
 8009364:	b082      	sub	sp, #8
 8009366:	af00      	add	r7, sp, #0
 8009368:	6078      	str	r0, [r7, #4]
 800936a:	460b      	mov	r3, r1
 800936c:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 800936e:	687b      	ldr	r3, [r7, #4]
 8009370:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009374:	2b00      	cmp	r3, #0
 8009376:	d101      	bne.n	800937c <USBD_LL_IsoOUTIncomplete+0x1a>
  {
    return USBD_FAIL;
 8009378:	2303      	movs	r3, #3
 800937a:	e014      	b.n	80093a6 <USBD_LL_IsoOUTIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800937c:	687b      	ldr	r3, [r7, #4]
 800937e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009382:	b2db      	uxtb	r3, r3
 8009384:	2b03      	cmp	r3, #3
 8009386:	d10d      	bne.n	80093a4 <USBD_LL_IsoOUTIncomplete+0x42>
  {
    if (pdev->pClass->IsoOUTIncomplete != NULL)
 8009388:	687b      	ldr	r3, [r7, #4]
 800938a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800938e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009390:	2b00      	cmp	r3, #0
 8009392:	d007      	beq.n	80093a4 <USBD_LL_IsoOUTIncomplete+0x42>
    {
      (void)pdev->pClass->IsoOUTIncomplete(pdev, epnum);
 8009394:	687b      	ldr	r3, [r7, #4]
 8009396:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800939a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800939c:	78fa      	ldrb	r2, [r7, #3]
 800939e:	4611      	mov	r1, r2
 80093a0:	6878      	ldr	r0, [r7, #4]
 80093a2:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80093a4:	2300      	movs	r3, #0
}
 80093a6:	4618      	mov	r0, r3
 80093a8:	3708      	adds	r7, #8
 80093aa:	46bd      	mov	sp, r7
 80093ac:	bd80      	pop	{r7, pc}

080093ae <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 80093ae:	b480      	push	{r7}
 80093b0:	b083      	sub	sp, #12
 80093b2:	af00      	add	r7, sp, #0
 80093b4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80093b6:	2300      	movs	r3, #0
}
 80093b8:	4618      	mov	r0, r3
 80093ba:	370c      	adds	r7, #12
 80093bc:	46bd      	mov	sp, r7
 80093be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093c2:	4770      	bx	lr

080093c4 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 80093c4:	b580      	push	{r7, lr}
 80093c6:	b082      	sub	sp, #8
 80093c8:	af00      	add	r7, sp, #0
 80093ca:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80093cc:	687b      	ldr	r3, [r7, #4]
 80093ce:	2201      	movs	r2, #1
 80093d0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 80093d4:	687b      	ldr	r3, [r7, #4]
 80093d6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80093da:	2b00      	cmp	r3, #0
 80093dc:	d009      	beq.n	80093f2 <USBD_LL_DevDisconnected+0x2e>
  {
    (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 80093de:	687b      	ldr	r3, [r7, #4]
 80093e0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80093e4:	685b      	ldr	r3, [r3, #4]
 80093e6:	687a      	ldr	r2, [r7, #4]
 80093e8:	6852      	ldr	r2, [r2, #4]
 80093ea:	b2d2      	uxtb	r2, r2
 80093ec:	4611      	mov	r1, r2
 80093ee:	6878      	ldr	r0, [r7, #4]
 80093f0:	4798      	blx	r3
  }

  return USBD_OK;
 80093f2:	2300      	movs	r3, #0
}
 80093f4:	4618      	mov	r0, r3
 80093f6:	3708      	adds	r7, #8
 80093f8:	46bd      	mov	sp, r7
 80093fa:	bd80      	pop	{r7, pc}

080093fc <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 80093fc:	b480      	push	{r7}
 80093fe:	b087      	sub	sp, #28
 8009400:	af00      	add	r7, sp, #0
 8009402:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8009404:	687b      	ldr	r3, [r7, #4]
 8009406:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8009408:	697b      	ldr	r3, [r7, #20]
 800940a:	781b      	ldrb	r3, [r3, #0]
 800940c:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800940e:	697b      	ldr	r3, [r7, #20]
 8009410:	3301      	adds	r3, #1
 8009412:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8009414:	697b      	ldr	r3, [r7, #20]
 8009416:	781b      	ldrb	r3, [r3, #0]
 8009418:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800941a:	8a3b      	ldrh	r3, [r7, #16]
 800941c:	021b      	lsls	r3, r3, #8
 800941e:	b21a      	sxth	r2, r3
 8009420:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8009424:	4313      	orrs	r3, r2
 8009426:	b21b      	sxth	r3, r3
 8009428:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800942a:	89fb      	ldrh	r3, [r7, #14]
}
 800942c:	4618      	mov	r0, r3
 800942e:	371c      	adds	r7, #28
 8009430:	46bd      	mov	sp, r7
 8009432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009436:	4770      	bx	lr

08009438 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009438:	b580      	push	{r7, lr}
 800943a:	b084      	sub	sp, #16
 800943c:	af00      	add	r7, sp, #0
 800943e:	6078      	str	r0, [r7, #4]
 8009440:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8009442:	2300      	movs	r3, #0
 8009444:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009446:	683b      	ldr	r3, [r7, #0]
 8009448:	781b      	ldrb	r3, [r3, #0]
 800944a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800944e:	2b40      	cmp	r3, #64	; 0x40
 8009450:	d005      	beq.n	800945e <USBD_StdDevReq+0x26>
 8009452:	2b40      	cmp	r3, #64	; 0x40
 8009454:	d853      	bhi.n	80094fe <USBD_StdDevReq+0xc6>
 8009456:	2b00      	cmp	r3, #0
 8009458:	d00b      	beq.n	8009472 <USBD_StdDevReq+0x3a>
 800945a:	2b20      	cmp	r3, #32
 800945c:	d14f      	bne.n	80094fe <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800945e:	687b      	ldr	r3, [r7, #4]
 8009460:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009464:	689b      	ldr	r3, [r3, #8]
 8009466:	6839      	ldr	r1, [r7, #0]
 8009468:	6878      	ldr	r0, [r7, #4]
 800946a:	4798      	blx	r3
 800946c:	4603      	mov	r3, r0
 800946e:	73fb      	strb	r3, [r7, #15]
      break;
 8009470:	e04a      	b.n	8009508 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8009472:	683b      	ldr	r3, [r7, #0]
 8009474:	785b      	ldrb	r3, [r3, #1]
 8009476:	2b09      	cmp	r3, #9
 8009478:	d83b      	bhi.n	80094f2 <USBD_StdDevReq+0xba>
 800947a:	a201      	add	r2, pc, #4	; (adr r2, 8009480 <USBD_StdDevReq+0x48>)
 800947c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009480:	080094d5 	.word	0x080094d5
 8009484:	080094e9 	.word	0x080094e9
 8009488:	080094f3 	.word	0x080094f3
 800948c:	080094df 	.word	0x080094df
 8009490:	080094f3 	.word	0x080094f3
 8009494:	080094b3 	.word	0x080094b3
 8009498:	080094a9 	.word	0x080094a9
 800949c:	080094f3 	.word	0x080094f3
 80094a0:	080094cb 	.word	0x080094cb
 80094a4:	080094bd 	.word	0x080094bd
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 80094a8:	6839      	ldr	r1, [r7, #0]
 80094aa:	6878      	ldr	r0, [r7, #4]
 80094ac:	f000 f9de 	bl	800986c <USBD_GetDescriptor>
          break;
 80094b0:	e024      	b.n	80094fc <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 80094b2:	6839      	ldr	r1, [r7, #0]
 80094b4:	6878      	ldr	r0, [r7, #4]
 80094b6:	f000 fb43 	bl	8009b40 <USBD_SetAddress>
          break;
 80094ba:	e01f      	b.n	80094fc <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 80094bc:	6839      	ldr	r1, [r7, #0]
 80094be:	6878      	ldr	r0, [r7, #4]
 80094c0:	f000 fb82 	bl	8009bc8 <USBD_SetConfig>
 80094c4:	4603      	mov	r3, r0
 80094c6:	73fb      	strb	r3, [r7, #15]
          break;
 80094c8:	e018      	b.n	80094fc <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 80094ca:	6839      	ldr	r1, [r7, #0]
 80094cc:	6878      	ldr	r0, [r7, #4]
 80094ce:	f000 fc21 	bl	8009d14 <USBD_GetConfig>
          break;
 80094d2:	e013      	b.n	80094fc <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 80094d4:	6839      	ldr	r1, [r7, #0]
 80094d6:	6878      	ldr	r0, [r7, #4]
 80094d8:	f000 fc52 	bl	8009d80 <USBD_GetStatus>
          break;
 80094dc:	e00e      	b.n	80094fc <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 80094de:	6839      	ldr	r1, [r7, #0]
 80094e0:	6878      	ldr	r0, [r7, #4]
 80094e2:	f000 fc81 	bl	8009de8 <USBD_SetFeature>
          break;
 80094e6:	e009      	b.n	80094fc <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 80094e8:	6839      	ldr	r1, [r7, #0]
 80094ea:	6878      	ldr	r0, [r7, #4]
 80094ec:	f000 fc90 	bl	8009e10 <USBD_ClrFeature>
          break;
 80094f0:	e004      	b.n	80094fc <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 80094f2:	6839      	ldr	r1, [r7, #0]
 80094f4:	6878      	ldr	r0, [r7, #4]
 80094f6:	f000 fce7 	bl	8009ec8 <USBD_CtlError>
          break;
 80094fa:	bf00      	nop
      }
      break;
 80094fc:	e004      	b.n	8009508 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 80094fe:	6839      	ldr	r1, [r7, #0]
 8009500:	6878      	ldr	r0, [r7, #4]
 8009502:	f000 fce1 	bl	8009ec8 <USBD_CtlError>
      break;
 8009506:	bf00      	nop
  }

  return ret;
 8009508:	7bfb      	ldrb	r3, [r7, #15]
}
 800950a:	4618      	mov	r0, r3
 800950c:	3710      	adds	r7, #16
 800950e:	46bd      	mov	sp, r7
 8009510:	bd80      	pop	{r7, pc}
 8009512:	bf00      	nop

08009514 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009514:	b580      	push	{r7, lr}
 8009516:	b084      	sub	sp, #16
 8009518:	af00      	add	r7, sp, #0
 800951a:	6078      	str	r0, [r7, #4]
 800951c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800951e:	2300      	movs	r3, #0
 8009520:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009522:	683b      	ldr	r3, [r7, #0]
 8009524:	781b      	ldrb	r3, [r3, #0]
 8009526:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800952a:	2b40      	cmp	r3, #64	; 0x40
 800952c:	d005      	beq.n	800953a <USBD_StdItfReq+0x26>
 800952e:	2b40      	cmp	r3, #64	; 0x40
 8009530:	d82f      	bhi.n	8009592 <USBD_StdItfReq+0x7e>
 8009532:	2b00      	cmp	r3, #0
 8009534:	d001      	beq.n	800953a <USBD_StdItfReq+0x26>
 8009536:	2b20      	cmp	r3, #32
 8009538:	d12b      	bne.n	8009592 <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800953a:	687b      	ldr	r3, [r7, #4]
 800953c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009540:	b2db      	uxtb	r3, r3
 8009542:	3b01      	subs	r3, #1
 8009544:	2b02      	cmp	r3, #2
 8009546:	d81d      	bhi.n	8009584 <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8009548:	683b      	ldr	r3, [r7, #0]
 800954a:	889b      	ldrh	r3, [r3, #4]
 800954c:	b2db      	uxtb	r3, r3
 800954e:	2b01      	cmp	r3, #1
 8009550:	d813      	bhi.n	800957a <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8009552:	687b      	ldr	r3, [r7, #4]
 8009554:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009558:	689b      	ldr	r3, [r3, #8]
 800955a:	6839      	ldr	r1, [r7, #0]
 800955c:	6878      	ldr	r0, [r7, #4]
 800955e:	4798      	blx	r3
 8009560:	4603      	mov	r3, r0
 8009562:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8009564:	683b      	ldr	r3, [r7, #0]
 8009566:	88db      	ldrh	r3, [r3, #6]
 8009568:	2b00      	cmp	r3, #0
 800956a:	d110      	bne.n	800958e <USBD_StdItfReq+0x7a>
 800956c:	7bfb      	ldrb	r3, [r7, #15]
 800956e:	2b00      	cmp	r3, #0
 8009570:	d10d      	bne.n	800958e <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 8009572:	6878      	ldr	r0, [r7, #4]
 8009574:	f000 fcf6 	bl	8009f64 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8009578:	e009      	b.n	800958e <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 800957a:	6839      	ldr	r1, [r7, #0]
 800957c:	6878      	ldr	r0, [r7, #4]
 800957e:	f000 fca3 	bl	8009ec8 <USBD_CtlError>
          break;
 8009582:	e004      	b.n	800958e <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 8009584:	6839      	ldr	r1, [r7, #0]
 8009586:	6878      	ldr	r0, [r7, #4]
 8009588:	f000 fc9e 	bl	8009ec8 <USBD_CtlError>
          break;
 800958c:	e000      	b.n	8009590 <USBD_StdItfReq+0x7c>
          break;
 800958e:	bf00      	nop
      }
      break;
 8009590:	e004      	b.n	800959c <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 8009592:	6839      	ldr	r1, [r7, #0]
 8009594:	6878      	ldr	r0, [r7, #4]
 8009596:	f000 fc97 	bl	8009ec8 <USBD_CtlError>
      break;
 800959a:	bf00      	nop
  }

  return ret;
 800959c:	7bfb      	ldrb	r3, [r7, #15]
}
 800959e:	4618      	mov	r0, r3
 80095a0:	3710      	adds	r7, #16
 80095a2:	46bd      	mov	sp, r7
 80095a4:	bd80      	pop	{r7, pc}

080095a6 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80095a6:	b580      	push	{r7, lr}
 80095a8:	b084      	sub	sp, #16
 80095aa:	af00      	add	r7, sp, #0
 80095ac:	6078      	str	r0, [r7, #4]
 80095ae:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 80095b0:	2300      	movs	r3, #0
 80095b2:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 80095b4:	683b      	ldr	r3, [r7, #0]
 80095b6:	889b      	ldrh	r3, [r3, #4]
 80095b8:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80095ba:	683b      	ldr	r3, [r7, #0]
 80095bc:	781b      	ldrb	r3, [r3, #0]
 80095be:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80095c2:	2b40      	cmp	r3, #64	; 0x40
 80095c4:	d007      	beq.n	80095d6 <USBD_StdEPReq+0x30>
 80095c6:	2b40      	cmp	r3, #64	; 0x40
 80095c8:	f200 8145 	bhi.w	8009856 <USBD_StdEPReq+0x2b0>
 80095cc:	2b00      	cmp	r3, #0
 80095ce:	d00c      	beq.n	80095ea <USBD_StdEPReq+0x44>
 80095d0:	2b20      	cmp	r3, #32
 80095d2:	f040 8140 	bne.w	8009856 <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80095d6:	687b      	ldr	r3, [r7, #4]
 80095d8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80095dc:	689b      	ldr	r3, [r3, #8]
 80095de:	6839      	ldr	r1, [r7, #0]
 80095e0:	6878      	ldr	r0, [r7, #4]
 80095e2:	4798      	blx	r3
 80095e4:	4603      	mov	r3, r0
 80095e6:	73fb      	strb	r3, [r7, #15]
      break;
 80095e8:	e13a      	b.n	8009860 <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80095ea:	683b      	ldr	r3, [r7, #0]
 80095ec:	785b      	ldrb	r3, [r3, #1]
 80095ee:	2b03      	cmp	r3, #3
 80095f0:	d007      	beq.n	8009602 <USBD_StdEPReq+0x5c>
 80095f2:	2b03      	cmp	r3, #3
 80095f4:	f300 8129 	bgt.w	800984a <USBD_StdEPReq+0x2a4>
 80095f8:	2b00      	cmp	r3, #0
 80095fa:	d07f      	beq.n	80096fc <USBD_StdEPReq+0x156>
 80095fc:	2b01      	cmp	r3, #1
 80095fe:	d03c      	beq.n	800967a <USBD_StdEPReq+0xd4>
 8009600:	e123      	b.n	800984a <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8009602:	687b      	ldr	r3, [r7, #4]
 8009604:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009608:	b2db      	uxtb	r3, r3
 800960a:	2b02      	cmp	r3, #2
 800960c:	d002      	beq.n	8009614 <USBD_StdEPReq+0x6e>
 800960e:	2b03      	cmp	r3, #3
 8009610:	d016      	beq.n	8009640 <USBD_StdEPReq+0x9a>
 8009612:	e02c      	b.n	800966e <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009614:	7bbb      	ldrb	r3, [r7, #14]
 8009616:	2b00      	cmp	r3, #0
 8009618:	d00d      	beq.n	8009636 <USBD_StdEPReq+0x90>
 800961a:	7bbb      	ldrb	r3, [r7, #14]
 800961c:	2b80      	cmp	r3, #128	; 0x80
 800961e:	d00a      	beq.n	8009636 <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8009620:	7bbb      	ldrb	r3, [r7, #14]
 8009622:	4619      	mov	r1, r3
 8009624:	6878      	ldr	r0, [r7, #4]
 8009626:	f003 fba9 	bl	800cd7c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800962a:	2180      	movs	r1, #128	; 0x80
 800962c:	6878      	ldr	r0, [r7, #4]
 800962e:	f003 fba5 	bl	800cd7c <USBD_LL_StallEP>
 8009632:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8009634:	e020      	b.n	8009678 <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 8009636:	6839      	ldr	r1, [r7, #0]
 8009638:	6878      	ldr	r0, [r7, #4]
 800963a:	f000 fc45 	bl	8009ec8 <USBD_CtlError>
              break;
 800963e:	e01b      	b.n	8009678 <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8009640:	683b      	ldr	r3, [r7, #0]
 8009642:	885b      	ldrh	r3, [r3, #2]
 8009644:	2b00      	cmp	r3, #0
 8009646:	d10e      	bne.n	8009666 <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8009648:	7bbb      	ldrb	r3, [r7, #14]
 800964a:	2b00      	cmp	r3, #0
 800964c:	d00b      	beq.n	8009666 <USBD_StdEPReq+0xc0>
 800964e:	7bbb      	ldrb	r3, [r7, #14]
 8009650:	2b80      	cmp	r3, #128	; 0x80
 8009652:	d008      	beq.n	8009666 <USBD_StdEPReq+0xc0>
 8009654:	683b      	ldr	r3, [r7, #0]
 8009656:	88db      	ldrh	r3, [r3, #6]
 8009658:	2b00      	cmp	r3, #0
 800965a:	d104      	bne.n	8009666 <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800965c:	7bbb      	ldrb	r3, [r7, #14]
 800965e:	4619      	mov	r1, r3
 8009660:	6878      	ldr	r0, [r7, #4]
 8009662:	f003 fb8b 	bl	800cd7c <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8009666:	6878      	ldr	r0, [r7, #4]
 8009668:	f000 fc7c 	bl	8009f64 <USBD_CtlSendStatus>

              break;
 800966c:	e004      	b.n	8009678 <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 800966e:	6839      	ldr	r1, [r7, #0]
 8009670:	6878      	ldr	r0, [r7, #4]
 8009672:	f000 fc29 	bl	8009ec8 <USBD_CtlError>
              break;
 8009676:	bf00      	nop
          }
          break;
 8009678:	e0ec      	b.n	8009854 <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800967a:	687b      	ldr	r3, [r7, #4]
 800967c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009680:	b2db      	uxtb	r3, r3
 8009682:	2b02      	cmp	r3, #2
 8009684:	d002      	beq.n	800968c <USBD_StdEPReq+0xe6>
 8009686:	2b03      	cmp	r3, #3
 8009688:	d016      	beq.n	80096b8 <USBD_StdEPReq+0x112>
 800968a:	e030      	b.n	80096ee <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800968c:	7bbb      	ldrb	r3, [r7, #14]
 800968e:	2b00      	cmp	r3, #0
 8009690:	d00d      	beq.n	80096ae <USBD_StdEPReq+0x108>
 8009692:	7bbb      	ldrb	r3, [r7, #14]
 8009694:	2b80      	cmp	r3, #128	; 0x80
 8009696:	d00a      	beq.n	80096ae <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8009698:	7bbb      	ldrb	r3, [r7, #14]
 800969a:	4619      	mov	r1, r3
 800969c:	6878      	ldr	r0, [r7, #4]
 800969e:	f003 fb6d 	bl	800cd7c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80096a2:	2180      	movs	r1, #128	; 0x80
 80096a4:	6878      	ldr	r0, [r7, #4]
 80096a6:	f003 fb69 	bl	800cd7c <USBD_LL_StallEP>
 80096aa:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80096ac:	e025      	b.n	80096fa <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 80096ae:	6839      	ldr	r1, [r7, #0]
 80096b0:	6878      	ldr	r0, [r7, #4]
 80096b2:	f000 fc09 	bl	8009ec8 <USBD_CtlError>
              break;
 80096b6:	e020      	b.n	80096fa <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80096b8:	683b      	ldr	r3, [r7, #0]
 80096ba:	885b      	ldrh	r3, [r3, #2]
 80096bc:	2b00      	cmp	r3, #0
 80096be:	d11b      	bne.n	80096f8 <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 80096c0:	7bbb      	ldrb	r3, [r7, #14]
 80096c2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80096c6:	2b00      	cmp	r3, #0
 80096c8:	d004      	beq.n	80096d4 <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 80096ca:	7bbb      	ldrb	r3, [r7, #14]
 80096cc:	4619      	mov	r1, r3
 80096ce:	6878      	ldr	r0, [r7, #4]
 80096d0:	f003 fb73 	bl	800cdba <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 80096d4:	6878      	ldr	r0, [r7, #4]
 80096d6:	f000 fc45 	bl	8009f64 <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80096da:	687b      	ldr	r3, [r7, #4]
 80096dc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80096e0:	689b      	ldr	r3, [r3, #8]
 80096e2:	6839      	ldr	r1, [r7, #0]
 80096e4:	6878      	ldr	r0, [r7, #4]
 80096e6:	4798      	blx	r3
 80096e8:	4603      	mov	r3, r0
 80096ea:	73fb      	strb	r3, [r7, #15]
              }
              break;
 80096ec:	e004      	b.n	80096f8 <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 80096ee:	6839      	ldr	r1, [r7, #0]
 80096f0:	6878      	ldr	r0, [r7, #4]
 80096f2:	f000 fbe9 	bl	8009ec8 <USBD_CtlError>
              break;
 80096f6:	e000      	b.n	80096fa <USBD_StdEPReq+0x154>
              break;
 80096f8:	bf00      	nop
          }
          break;
 80096fa:	e0ab      	b.n	8009854 <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 80096fc:	687b      	ldr	r3, [r7, #4]
 80096fe:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009702:	b2db      	uxtb	r3, r3
 8009704:	2b02      	cmp	r3, #2
 8009706:	d002      	beq.n	800970e <USBD_StdEPReq+0x168>
 8009708:	2b03      	cmp	r3, #3
 800970a:	d032      	beq.n	8009772 <USBD_StdEPReq+0x1cc>
 800970c:	e097      	b.n	800983e <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800970e:	7bbb      	ldrb	r3, [r7, #14]
 8009710:	2b00      	cmp	r3, #0
 8009712:	d007      	beq.n	8009724 <USBD_StdEPReq+0x17e>
 8009714:	7bbb      	ldrb	r3, [r7, #14]
 8009716:	2b80      	cmp	r3, #128	; 0x80
 8009718:	d004      	beq.n	8009724 <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 800971a:	6839      	ldr	r1, [r7, #0]
 800971c:	6878      	ldr	r0, [r7, #4]
 800971e:	f000 fbd3 	bl	8009ec8 <USBD_CtlError>
                break;
 8009722:	e091      	b.n	8009848 <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009724:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009728:	2b00      	cmp	r3, #0
 800972a:	da0b      	bge.n	8009744 <USBD_StdEPReq+0x19e>
 800972c:	7bbb      	ldrb	r3, [r7, #14]
 800972e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009732:	4613      	mov	r3, r2
 8009734:	009b      	lsls	r3, r3, #2
 8009736:	4413      	add	r3, r2
 8009738:	009b      	lsls	r3, r3, #2
 800973a:	3310      	adds	r3, #16
 800973c:	687a      	ldr	r2, [r7, #4]
 800973e:	4413      	add	r3, r2
 8009740:	3304      	adds	r3, #4
 8009742:	e00b      	b.n	800975c <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8009744:	7bbb      	ldrb	r3, [r7, #14]
 8009746:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800974a:	4613      	mov	r3, r2
 800974c:	009b      	lsls	r3, r3, #2
 800974e:	4413      	add	r3, r2
 8009750:	009b      	lsls	r3, r3, #2
 8009752:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8009756:	687a      	ldr	r2, [r7, #4]
 8009758:	4413      	add	r3, r2
 800975a:	3304      	adds	r3, #4
 800975c:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800975e:	68bb      	ldr	r3, [r7, #8]
 8009760:	2200      	movs	r2, #0
 8009762:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8009764:	68bb      	ldr	r3, [r7, #8]
 8009766:	2202      	movs	r2, #2
 8009768:	4619      	mov	r1, r3
 800976a:	6878      	ldr	r0, [r7, #4]
 800976c:	f000 fbbd 	bl	8009eea <USBD_CtlSendData>
              break;
 8009770:	e06a      	b.n	8009848 <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8009772:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009776:	2b00      	cmp	r3, #0
 8009778:	da11      	bge.n	800979e <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800977a:	7bbb      	ldrb	r3, [r7, #14]
 800977c:	f003 020f 	and.w	r2, r3, #15
 8009780:	6879      	ldr	r1, [r7, #4]
 8009782:	4613      	mov	r3, r2
 8009784:	009b      	lsls	r3, r3, #2
 8009786:	4413      	add	r3, r2
 8009788:	009b      	lsls	r3, r3, #2
 800978a:	440b      	add	r3, r1
 800978c:	3324      	adds	r3, #36	; 0x24
 800978e:	881b      	ldrh	r3, [r3, #0]
 8009790:	2b00      	cmp	r3, #0
 8009792:	d117      	bne.n	80097c4 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 8009794:	6839      	ldr	r1, [r7, #0]
 8009796:	6878      	ldr	r0, [r7, #4]
 8009798:	f000 fb96 	bl	8009ec8 <USBD_CtlError>
                  break;
 800979c:	e054      	b.n	8009848 <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800979e:	7bbb      	ldrb	r3, [r7, #14]
 80097a0:	f003 020f 	and.w	r2, r3, #15
 80097a4:	6879      	ldr	r1, [r7, #4]
 80097a6:	4613      	mov	r3, r2
 80097a8:	009b      	lsls	r3, r3, #2
 80097aa:	4413      	add	r3, r2
 80097ac:	009b      	lsls	r3, r3, #2
 80097ae:	440b      	add	r3, r1
 80097b0:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80097b4:	881b      	ldrh	r3, [r3, #0]
 80097b6:	2b00      	cmp	r3, #0
 80097b8:	d104      	bne.n	80097c4 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 80097ba:	6839      	ldr	r1, [r7, #0]
 80097bc:	6878      	ldr	r0, [r7, #4]
 80097be:	f000 fb83 	bl	8009ec8 <USBD_CtlError>
                  break;
 80097c2:	e041      	b.n	8009848 <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80097c4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80097c8:	2b00      	cmp	r3, #0
 80097ca:	da0b      	bge.n	80097e4 <USBD_StdEPReq+0x23e>
 80097cc:	7bbb      	ldrb	r3, [r7, #14]
 80097ce:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80097d2:	4613      	mov	r3, r2
 80097d4:	009b      	lsls	r3, r3, #2
 80097d6:	4413      	add	r3, r2
 80097d8:	009b      	lsls	r3, r3, #2
 80097da:	3310      	adds	r3, #16
 80097dc:	687a      	ldr	r2, [r7, #4]
 80097de:	4413      	add	r3, r2
 80097e0:	3304      	adds	r3, #4
 80097e2:	e00b      	b.n	80097fc <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80097e4:	7bbb      	ldrb	r3, [r7, #14]
 80097e6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80097ea:	4613      	mov	r3, r2
 80097ec:	009b      	lsls	r3, r3, #2
 80097ee:	4413      	add	r3, r2
 80097f0:	009b      	lsls	r3, r3, #2
 80097f2:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80097f6:	687a      	ldr	r2, [r7, #4]
 80097f8:	4413      	add	r3, r2
 80097fa:	3304      	adds	r3, #4
 80097fc:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80097fe:	7bbb      	ldrb	r3, [r7, #14]
 8009800:	2b00      	cmp	r3, #0
 8009802:	d002      	beq.n	800980a <USBD_StdEPReq+0x264>
 8009804:	7bbb      	ldrb	r3, [r7, #14]
 8009806:	2b80      	cmp	r3, #128	; 0x80
 8009808:	d103      	bne.n	8009812 <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 800980a:	68bb      	ldr	r3, [r7, #8]
 800980c:	2200      	movs	r2, #0
 800980e:	601a      	str	r2, [r3, #0]
 8009810:	e00e      	b.n	8009830 <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8009812:	7bbb      	ldrb	r3, [r7, #14]
 8009814:	4619      	mov	r1, r3
 8009816:	6878      	ldr	r0, [r7, #4]
 8009818:	f003 faee 	bl	800cdf8 <USBD_LL_IsStallEP>
 800981c:	4603      	mov	r3, r0
 800981e:	2b00      	cmp	r3, #0
 8009820:	d003      	beq.n	800982a <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 8009822:	68bb      	ldr	r3, [r7, #8]
 8009824:	2201      	movs	r2, #1
 8009826:	601a      	str	r2, [r3, #0]
 8009828:	e002      	b.n	8009830 <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 800982a:	68bb      	ldr	r3, [r7, #8]
 800982c:	2200      	movs	r2, #0
 800982e:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8009830:	68bb      	ldr	r3, [r7, #8]
 8009832:	2202      	movs	r2, #2
 8009834:	4619      	mov	r1, r3
 8009836:	6878      	ldr	r0, [r7, #4]
 8009838:	f000 fb57 	bl	8009eea <USBD_CtlSendData>
              break;
 800983c:	e004      	b.n	8009848 <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 800983e:	6839      	ldr	r1, [r7, #0]
 8009840:	6878      	ldr	r0, [r7, #4]
 8009842:	f000 fb41 	bl	8009ec8 <USBD_CtlError>
              break;
 8009846:	bf00      	nop
          }
          break;
 8009848:	e004      	b.n	8009854 <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 800984a:	6839      	ldr	r1, [r7, #0]
 800984c:	6878      	ldr	r0, [r7, #4]
 800984e:	f000 fb3b 	bl	8009ec8 <USBD_CtlError>
          break;
 8009852:	bf00      	nop
      }
      break;
 8009854:	e004      	b.n	8009860 <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 8009856:	6839      	ldr	r1, [r7, #0]
 8009858:	6878      	ldr	r0, [r7, #4]
 800985a:	f000 fb35 	bl	8009ec8 <USBD_CtlError>
      break;
 800985e:	bf00      	nop
  }

  return ret;
 8009860:	7bfb      	ldrb	r3, [r7, #15]
}
 8009862:	4618      	mov	r0, r3
 8009864:	3710      	adds	r7, #16
 8009866:	46bd      	mov	sp, r7
 8009868:	bd80      	pop	{r7, pc}
	...

0800986c <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800986c:	b580      	push	{r7, lr}
 800986e:	b084      	sub	sp, #16
 8009870:	af00      	add	r7, sp, #0
 8009872:	6078      	str	r0, [r7, #4]
 8009874:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8009876:	2300      	movs	r3, #0
 8009878:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800987a:	2300      	movs	r3, #0
 800987c:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800987e:	2300      	movs	r3, #0
 8009880:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8009882:	683b      	ldr	r3, [r7, #0]
 8009884:	885b      	ldrh	r3, [r3, #2]
 8009886:	0a1b      	lsrs	r3, r3, #8
 8009888:	b29b      	uxth	r3, r3
 800988a:	3b01      	subs	r3, #1
 800988c:	2b06      	cmp	r3, #6
 800988e:	f200 8128 	bhi.w	8009ae2 <USBD_GetDescriptor+0x276>
 8009892:	a201      	add	r2, pc, #4	; (adr r2, 8009898 <USBD_GetDescriptor+0x2c>)
 8009894:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009898:	080098b5 	.word	0x080098b5
 800989c:	080098cd 	.word	0x080098cd
 80098a0:	0800990d 	.word	0x0800990d
 80098a4:	08009ae3 	.word	0x08009ae3
 80098a8:	08009ae3 	.word	0x08009ae3
 80098ac:	08009a83 	.word	0x08009a83
 80098b0:	08009aaf 	.word	0x08009aaf
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80098b4:	687b      	ldr	r3, [r7, #4]
 80098b6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80098ba:	681b      	ldr	r3, [r3, #0]
 80098bc:	687a      	ldr	r2, [r7, #4]
 80098be:	7c12      	ldrb	r2, [r2, #16]
 80098c0:	f107 0108 	add.w	r1, r7, #8
 80098c4:	4610      	mov	r0, r2
 80098c6:	4798      	blx	r3
 80098c8:	60f8      	str	r0, [r7, #12]
      break;
 80098ca:	e112      	b.n	8009af2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80098cc:	687b      	ldr	r3, [r7, #4]
 80098ce:	7c1b      	ldrb	r3, [r3, #16]
 80098d0:	2b00      	cmp	r3, #0
 80098d2:	d10d      	bne.n	80098f0 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 80098d4:	687b      	ldr	r3, [r7, #4]
 80098d6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80098da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80098dc:	f107 0208 	add.w	r2, r7, #8
 80098e0:	4610      	mov	r0, r2
 80098e2:	4798      	blx	r3
 80098e4:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80098e6:	68fb      	ldr	r3, [r7, #12]
 80098e8:	3301      	adds	r3, #1
 80098ea:	2202      	movs	r2, #2
 80098ec:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 80098ee:	e100      	b.n	8009af2 <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 80098f0:	687b      	ldr	r3, [r7, #4]
 80098f2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80098f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80098f8:	f107 0208 	add.w	r2, r7, #8
 80098fc:	4610      	mov	r0, r2
 80098fe:	4798      	blx	r3
 8009900:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8009902:	68fb      	ldr	r3, [r7, #12]
 8009904:	3301      	adds	r3, #1
 8009906:	2202      	movs	r2, #2
 8009908:	701a      	strb	r2, [r3, #0]
      break;
 800990a:	e0f2      	b.n	8009af2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800990c:	683b      	ldr	r3, [r7, #0]
 800990e:	885b      	ldrh	r3, [r3, #2]
 8009910:	b2db      	uxtb	r3, r3
 8009912:	2b05      	cmp	r3, #5
 8009914:	f200 80ac 	bhi.w	8009a70 <USBD_GetDescriptor+0x204>
 8009918:	a201      	add	r2, pc, #4	; (adr r2, 8009920 <USBD_GetDescriptor+0xb4>)
 800991a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800991e:	bf00      	nop
 8009920:	08009939 	.word	0x08009939
 8009924:	0800996d 	.word	0x0800996d
 8009928:	080099a1 	.word	0x080099a1
 800992c:	080099d5 	.word	0x080099d5
 8009930:	08009a09 	.word	0x08009a09
 8009934:	08009a3d 	.word	0x08009a3d
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8009938:	687b      	ldr	r3, [r7, #4]
 800993a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800993e:	685b      	ldr	r3, [r3, #4]
 8009940:	2b00      	cmp	r3, #0
 8009942:	d00b      	beq.n	800995c <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8009944:	687b      	ldr	r3, [r7, #4]
 8009946:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800994a:	685b      	ldr	r3, [r3, #4]
 800994c:	687a      	ldr	r2, [r7, #4]
 800994e:	7c12      	ldrb	r2, [r2, #16]
 8009950:	f107 0108 	add.w	r1, r7, #8
 8009954:	4610      	mov	r0, r2
 8009956:	4798      	blx	r3
 8009958:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800995a:	e091      	b.n	8009a80 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800995c:	6839      	ldr	r1, [r7, #0]
 800995e:	6878      	ldr	r0, [r7, #4]
 8009960:	f000 fab2 	bl	8009ec8 <USBD_CtlError>
            err++;
 8009964:	7afb      	ldrb	r3, [r7, #11]
 8009966:	3301      	adds	r3, #1
 8009968:	72fb      	strb	r3, [r7, #11]
          break;
 800996a:	e089      	b.n	8009a80 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800996c:	687b      	ldr	r3, [r7, #4]
 800996e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009972:	689b      	ldr	r3, [r3, #8]
 8009974:	2b00      	cmp	r3, #0
 8009976:	d00b      	beq.n	8009990 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8009978:	687b      	ldr	r3, [r7, #4]
 800997a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800997e:	689b      	ldr	r3, [r3, #8]
 8009980:	687a      	ldr	r2, [r7, #4]
 8009982:	7c12      	ldrb	r2, [r2, #16]
 8009984:	f107 0108 	add.w	r1, r7, #8
 8009988:	4610      	mov	r0, r2
 800998a:	4798      	blx	r3
 800998c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800998e:	e077      	b.n	8009a80 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009990:	6839      	ldr	r1, [r7, #0]
 8009992:	6878      	ldr	r0, [r7, #4]
 8009994:	f000 fa98 	bl	8009ec8 <USBD_CtlError>
            err++;
 8009998:	7afb      	ldrb	r3, [r7, #11]
 800999a:	3301      	adds	r3, #1
 800999c:	72fb      	strb	r3, [r7, #11]
          break;
 800999e:	e06f      	b.n	8009a80 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 80099a0:	687b      	ldr	r3, [r7, #4]
 80099a2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80099a6:	68db      	ldr	r3, [r3, #12]
 80099a8:	2b00      	cmp	r3, #0
 80099aa:	d00b      	beq.n	80099c4 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 80099ac:	687b      	ldr	r3, [r7, #4]
 80099ae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80099b2:	68db      	ldr	r3, [r3, #12]
 80099b4:	687a      	ldr	r2, [r7, #4]
 80099b6:	7c12      	ldrb	r2, [r2, #16]
 80099b8:	f107 0108 	add.w	r1, r7, #8
 80099bc:	4610      	mov	r0, r2
 80099be:	4798      	blx	r3
 80099c0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80099c2:	e05d      	b.n	8009a80 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80099c4:	6839      	ldr	r1, [r7, #0]
 80099c6:	6878      	ldr	r0, [r7, #4]
 80099c8:	f000 fa7e 	bl	8009ec8 <USBD_CtlError>
            err++;
 80099cc:	7afb      	ldrb	r3, [r7, #11]
 80099ce:	3301      	adds	r3, #1
 80099d0:	72fb      	strb	r3, [r7, #11]
          break;
 80099d2:	e055      	b.n	8009a80 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 80099d4:	687b      	ldr	r3, [r7, #4]
 80099d6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80099da:	691b      	ldr	r3, [r3, #16]
 80099dc:	2b00      	cmp	r3, #0
 80099de:	d00b      	beq.n	80099f8 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 80099e0:	687b      	ldr	r3, [r7, #4]
 80099e2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80099e6:	691b      	ldr	r3, [r3, #16]
 80099e8:	687a      	ldr	r2, [r7, #4]
 80099ea:	7c12      	ldrb	r2, [r2, #16]
 80099ec:	f107 0108 	add.w	r1, r7, #8
 80099f0:	4610      	mov	r0, r2
 80099f2:	4798      	blx	r3
 80099f4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80099f6:	e043      	b.n	8009a80 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80099f8:	6839      	ldr	r1, [r7, #0]
 80099fa:	6878      	ldr	r0, [r7, #4]
 80099fc:	f000 fa64 	bl	8009ec8 <USBD_CtlError>
            err++;
 8009a00:	7afb      	ldrb	r3, [r7, #11]
 8009a02:	3301      	adds	r3, #1
 8009a04:	72fb      	strb	r3, [r7, #11]
          break;
 8009a06:	e03b      	b.n	8009a80 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8009a08:	687b      	ldr	r3, [r7, #4]
 8009a0a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009a0e:	695b      	ldr	r3, [r3, #20]
 8009a10:	2b00      	cmp	r3, #0
 8009a12:	d00b      	beq.n	8009a2c <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8009a14:	687b      	ldr	r3, [r7, #4]
 8009a16:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009a1a:	695b      	ldr	r3, [r3, #20]
 8009a1c:	687a      	ldr	r2, [r7, #4]
 8009a1e:	7c12      	ldrb	r2, [r2, #16]
 8009a20:	f107 0108 	add.w	r1, r7, #8
 8009a24:	4610      	mov	r0, r2
 8009a26:	4798      	blx	r3
 8009a28:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009a2a:	e029      	b.n	8009a80 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009a2c:	6839      	ldr	r1, [r7, #0]
 8009a2e:	6878      	ldr	r0, [r7, #4]
 8009a30:	f000 fa4a 	bl	8009ec8 <USBD_CtlError>
            err++;
 8009a34:	7afb      	ldrb	r3, [r7, #11]
 8009a36:	3301      	adds	r3, #1
 8009a38:	72fb      	strb	r3, [r7, #11]
          break;
 8009a3a:	e021      	b.n	8009a80 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8009a3c:	687b      	ldr	r3, [r7, #4]
 8009a3e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009a42:	699b      	ldr	r3, [r3, #24]
 8009a44:	2b00      	cmp	r3, #0
 8009a46:	d00b      	beq.n	8009a60 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8009a48:	687b      	ldr	r3, [r7, #4]
 8009a4a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009a4e:	699b      	ldr	r3, [r3, #24]
 8009a50:	687a      	ldr	r2, [r7, #4]
 8009a52:	7c12      	ldrb	r2, [r2, #16]
 8009a54:	f107 0108 	add.w	r1, r7, #8
 8009a58:	4610      	mov	r0, r2
 8009a5a:	4798      	blx	r3
 8009a5c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009a5e:	e00f      	b.n	8009a80 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009a60:	6839      	ldr	r1, [r7, #0]
 8009a62:	6878      	ldr	r0, [r7, #4]
 8009a64:	f000 fa30 	bl	8009ec8 <USBD_CtlError>
            err++;
 8009a68:	7afb      	ldrb	r3, [r7, #11]
 8009a6a:	3301      	adds	r3, #1
 8009a6c:	72fb      	strb	r3, [r7, #11]
          break;
 8009a6e:	e007      	b.n	8009a80 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8009a70:	6839      	ldr	r1, [r7, #0]
 8009a72:	6878      	ldr	r0, [r7, #4]
 8009a74:	f000 fa28 	bl	8009ec8 <USBD_CtlError>
          err++;
 8009a78:	7afb      	ldrb	r3, [r7, #11]
 8009a7a:	3301      	adds	r3, #1
 8009a7c:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 8009a7e:	bf00      	nop
      }
      break;
 8009a80:	e037      	b.n	8009af2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009a82:	687b      	ldr	r3, [r7, #4]
 8009a84:	7c1b      	ldrb	r3, [r3, #16]
 8009a86:	2b00      	cmp	r3, #0
 8009a88:	d109      	bne.n	8009a9e <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8009a8a:	687b      	ldr	r3, [r7, #4]
 8009a8c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009a90:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009a92:	f107 0208 	add.w	r2, r7, #8
 8009a96:	4610      	mov	r0, r2
 8009a98:	4798      	blx	r3
 8009a9a:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009a9c:	e029      	b.n	8009af2 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8009a9e:	6839      	ldr	r1, [r7, #0]
 8009aa0:	6878      	ldr	r0, [r7, #4]
 8009aa2:	f000 fa11 	bl	8009ec8 <USBD_CtlError>
        err++;
 8009aa6:	7afb      	ldrb	r3, [r7, #11]
 8009aa8:	3301      	adds	r3, #1
 8009aaa:	72fb      	strb	r3, [r7, #11]
      break;
 8009aac:	e021      	b.n	8009af2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009aae:	687b      	ldr	r3, [r7, #4]
 8009ab0:	7c1b      	ldrb	r3, [r3, #16]
 8009ab2:	2b00      	cmp	r3, #0
 8009ab4:	d10d      	bne.n	8009ad2 <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8009ab6:	687b      	ldr	r3, [r7, #4]
 8009ab8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009abc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009abe:	f107 0208 	add.w	r2, r7, #8
 8009ac2:	4610      	mov	r0, r2
 8009ac4:	4798      	blx	r3
 8009ac6:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8009ac8:	68fb      	ldr	r3, [r7, #12]
 8009aca:	3301      	adds	r3, #1
 8009acc:	2207      	movs	r2, #7
 8009ace:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009ad0:	e00f      	b.n	8009af2 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8009ad2:	6839      	ldr	r1, [r7, #0]
 8009ad4:	6878      	ldr	r0, [r7, #4]
 8009ad6:	f000 f9f7 	bl	8009ec8 <USBD_CtlError>
        err++;
 8009ada:	7afb      	ldrb	r3, [r7, #11]
 8009adc:	3301      	adds	r3, #1
 8009ade:	72fb      	strb	r3, [r7, #11]
      break;
 8009ae0:	e007      	b.n	8009af2 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8009ae2:	6839      	ldr	r1, [r7, #0]
 8009ae4:	6878      	ldr	r0, [r7, #4]
 8009ae6:	f000 f9ef 	bl	8009ec8 <USBD_CtlError>
      err++;
 8009aea:	7afb      	ldrb	r3, [r7, #11]
 8009aec:	3301      	adds	r3, #1
 8009aee:	72fb      	strb	r3, [r7, #11]
      break;
 8009af0:	bf00      	nop
  }

  if (err != 0U)
 8009af2:	7afb      	ldrb	r3, [r7, #11]
 8009af4:	2b00      	cmp	r3, #0
 8009af6:	d11e      	bne.n	8009b36 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8009af8:	683b      	ldr	r3, [r7, #0]
 8009afa:	88db      	ldrh	r3, [r3, #6]
 8009afc:	2b00      	cmp	r3, #0
 8009afe:	d016      	beq.n	8009b2e <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8009b00:	893b      	ldrh	r3, [r7, #8]
 8009b02:	2b00      	cmp	r3, #0
 8009b04:	d00e      	beq.n	8009b24 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 8009b06:	683b      	ldr	r3, [r7, #0]
 8009b08:	88da      	ldrh	r2, [r3, #6]
 8009b0a:	893b      	ldrh	r3, [r7, #8]
 8009b0c:	4293      	cmp	r3, r2
 8009b0e:	bf28      	it	cs
 8009b10:	4613      	movcs	r3, r2
 8009b12:	b29b      	uxth	r3, r3
 8009b14:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8009b16:	893b      	ldrh	r3, [r7, #8]
 8009b18:	461a      	mov	r2, r3
 8009b1a:	68f9      	ldr	r1, [r7, #12]
 8009b1c:	6878      	ldr	r0, [r7, #4]
 8009b1e:	f000 f9e4 	bl	8009eea <USBD_CtlSendData>
 8009b22:	e009      	b.n	8009b38 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8009b24:	6839      	ldr	r1, [r7, #0]
 8009b26:	6878      	ldr	r0, [r7, #4]
 8009b28:	f000 f9ce 	bl	8009ec8 <USBD_CtlError>
 8009b2c:	e004      	b.n	8009b38 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8009b2e:	6878      	ldr	r0, [r7, #4]
 8009b30:	f000 fa18 	bl	8009f64 <USBD_CtlSendStatus>
 8009b34:	e000      	b.n	8009b38 <USBD_GetDescriptor+0x2cc>
    return;
 8009b36:	bf00      	nop
  }
}
 8009b38:	3710      	adds	r7, #16
 8009b3a:	46bd      	mov	sp, r7
 8009b3c:	bd80      	pop	{r7, pc}
 8009b3e:	bf00      	nop

08009b40 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009b40:	b580      	push	{r7, lr}
 8009b42:	b084      	sub	sp, #16
 8009b44:	af00      	add	r7, sp, #0
 8009b46:	6078      	str	r0, [r7, #4]
 8009b48:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8009b4a:	683b      	ldr	r3, [r7, #0]
 8009b4c:	889b      	ldrh	r3, [r3, #4]
 8009b4e:	2b00      	cmp	r3, #0
 8009b50:	d131      	bne.n	8009bb6 <USBD_SetAddress+0x76>
 8009b52:	683b      	ldr	r3, [r7, #0]
 8009b54:	88db      	ldrh	r3, [r3, #6]
 8009b56:	2b00      	cmp	r3, #0
 8009b58:	d12d      	bne.n	8009bb6 <USBD_SetAddress+0x76>
 8009b5a:	683b      	ldr	r3, [r7, #0]
 8009b5c:	885b      	ldrh	r3, [r3, #2]
 8009b5e:	2b7f      	cmp	r3, #127	; 0x7f
 8009b60:	d829      	bhi.n	8009bb6 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8009b62:	683b      	ldr	r3, [r7, #0]
 8009b64:	885b      	ldrh	r3, [r3, #2]
 8009b66:	b2db      	uxtb	r3, r3
 8009b68:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009b6c:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009b6e:	687b      	ldr	r3, [r7, #4]
 8009b70:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009b74:	b2db      	uxtb	r3, r3
 8009b76:	2b03      	cmp	r3, #3
 8009b78:	d104      	bne.n	8009b84 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8009b7a:	6839      	ldr	r1, [r7, #0]
 8009b7c:	6878      	ldr	r0, [r7, #4]
 8009b7e:	f000 f9a3 	bl	8009ec8 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009b82:	e01d      	b.n	8009bc0 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8009b84:	687b      	ldr	r3, [r7, #4]
 8009b86:	7bfa      	ldrb	r2, [r7, #15]
 8009b88:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8009b8c:	7bfb      	ldrb	r3, [r7, #15]
 8009b8e:	4619      	mov	r1, r3
 8009b90:	6878      	ldr	r0, [r7, #4]
 8009b92:	f003 f95d 	bl	800ce50 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8009b96:	6878      	ldr	r0, [r7, #4]
 8009b98:	f000 f9e4 	bl	8009f64 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8009b9c:	7bfb      	ldrb	r3, [r7, #15]
 8009b9e:	2b00      	cmp	r3, #0
 8009ba0:	d004      	beq.n	8009bac <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8009ba2:	687b      	ldr	r3, [r7, #4]
 8009ba4:	2202      	movs	r2, #2
 8009ba6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009baa:	e009      	b.n	8009bc0 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8009bac:	687b      	ldr	r3, [r7, #4]
 8009bae:	2201      	movs	r2, #1
 8009bb0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009bb4:	e004      	b.n	8009bc0 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8009bb6:	6839      	ldr	r1, [r7, #0]
 8009bb8:	6878      	ldr	r0, [r7, #4]
 8009bba:	f000 f985 	bl	8009ec8 <USBD_CtlError>
  }
}
 8009bbe:	bf00      	nop
 8009bc0:	bf00      	nop
 8009bc2:	3710      	adds	r7, #16
 8009bc4:	46bd      	mov	sp, r7
 8009bc6:	bd80      	pop	{r7, pc}

08009bc8 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009bc8:	b580      	push	{r7, lr}
 8009bca:	b084      	sub	sp, #16
 8009bcc:	af00      	add	r7, sp, #0
 8009bce:	6078      	str	r0, [r7, #4]
 8009bd0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8009bd2:	2300      	movs	r3, #0
 8009bd4:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8009bd6:	683b      	ldr	r3, [r7, #0]
 8009bd8:	885b      	ldrh	r3, [r3, #2]
 8009bda:	b2da      	uxtb	r2, r3
 8009bdc:	4b4c      	ldr	r3, [pc, #304]	; (8009d10 <USBD_SetConfig+0x148>)
 8009bde:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8009be0:	4b4b      	ldr	r3, [pc, #300]	; (8009d10 <USBD_SetConfig+0x148>)
 8009be2:	781b      	ldrb	r3, [r3, #0]
 8009be4:	2b01      	cmp	r3, #1
 8009be6:	d905      	bls.n	8009bf4 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8009be8:	6839      	ldr	r1, [r7, #0]
 8009bea:	6878      	ldr	r0, [r7, #4]
 8009bec:	f000 f96c 	bl	8009ec8 <USBD_CtlError>
    return USBD_FAIL;
 8009bf0:	2303      	movs	r3, #3
 8009bf2:	e088      	b.n	8009d06 <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 8009bf4:	687b      	ldr	r3, [r7, #4]
 8009bf6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009bfa:	b2db      	uxtb	r3, r3
 8009bfc:	2b02      	cmp	r3, #2
 8009bfe:	d002      	beq.n	8009c06 <USBD_SetConfig+0x3e>
 8009c00:	2b03      	cmp	r3, #3
 8009c02:	d025      	beq.n	8009c50 <USBD_SetConfig+0x88>
 8009c04:	e071      	b.n	8009cea <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8009c06:	4b42      	ldr	r3, [pc, #264]	; (8009d10 <USBD_SetConfig+0x148>)
 8009c08:	781b      	ldrb	r3, [r3, #0]
 8009c0a:	2b00      	cmp	r3, #0
 8009c0c:	d01c      	beq.n	8009c48 <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 8009c0e:	4b40      	ldr	r3, [pc, #256]	; (8009d10 <USBD_SetConfig+0x148>)
 8009c10:	781b      	ldrb	r3, [r3, #0]
 8009c12:	461a      	mov	r2, r3
 8009c14:	687b      	ldr	r3, [r7, #4]
 8009c16:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8009c18:	4b3d      	ldr	r3, [pc, #244]	; (8009d10 <USBD_SetConfig+0x148>)
 8009c1a:	781b      	ldrb	r3, [r3, #0]
 8009c1c:	4619      	mov	r1, r3
 8009c1e:	6878      	ldr	r0, [r7, #4]
 8009c20:	f7ff f949 	bl	8008eb6 <USBD_SetClassConfig>
 8009c24:	4603      	mov	r3, r0
 8009c26:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8009c28:	7bfb      	ldrb	r3, [r7, #15]
 8009c2a:	2b00      	cmp	r3, #0
 8009c2c:	d004      	beq.n	8009c38 <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 8009c2e:	6839      	ldr	r1, [r7, #0]
 8009c30:	6878      	ldr	r0, [r7, #4]
 8009c32:	f000 f949 	bl	8009ec8 <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8009c36:	e065      	b.n	8009d04 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 8009c38:	6878      	ldr	r0, [r7, #4]
 8009c3a:	f000 f993 	bl	8009f64 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8009c3e:	687b      	ldr	r3, [r7, #4]
 8009c40:	2203      	movs	r2, #3
 8009c42:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8009c46:	e05d      	b.n	8009d04 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 8009c48:	6878      	ldr	r0, [r7, #4]
 8009c4a:	f000 f98b 	bl	8009f64 <USBD_CtlSendStatus>
      break;
 8009c4e:	e059      	b.n	8009d04 <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8009c50:	4b2f      	ldr	r3, [pc, #188]	; (8009d10 <USBD_SetConfig+0x148>)
 8009c52:	781b      	ldrb	r3, [r3, #0]
 8009c54:	2b00      	cmp	r3, #0
 8009c56:	d112      	bne.n	8009c7e <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8009c58:	687b      	ldr	r3, [r7, #4]
 8009c5a:	2202      	movs	r2, #2
 8009c5c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8009c60:	4b2b      	ldr	r3, [pc, #172]	; (8009d10 <USBD_SetConfig+0x148>)
 8009c62:	781b      	ldrb	r3, [r3, #0]
 8009c64:	461a      	mov	r2, r3
 8009c66:	687b      	ldr	r3, [r7, #4]
 8009c68:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8009c6a:	4b29      	ldr	r3, [pc, #164]	; (8009d10 <USBD_SetConfig+0x148>)
 8009c6c:	781b      	ldrb	r3, [r3, #0]
 8009c6e:	4619      	mov	r1, r3
 8009c70:	6878      	ldr	r0, [r7, #4]
 8009c72:	f7ff f93c 	bl	8008eee <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8009c76:	6878      	ldr	r0, [r7, #4]
 8009c78:	f000 f974 	bl	8009f64 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8009c7c:	e042      	b.n	8009d04 <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 8009c7e:	4b24      	ldr	r3, [pc, #144]	; (8009d10 <USBD_SetConfig+0x148>)
 8009c80:	781b      	ldrb	r3, [r3, #0]
 8009c82:	461a      	mov	r2, r3
 8009c84:	687b      	ldr	r3, [r7, #4]
 8009c86:	685b      	ldr	r3, [r3, #4]
 8009c88:	429a      	cmp	r2, r3
 8009c8a:	d02a      	beq.n	8009ce2 <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8009c8c:	687b      	ldr	r3, [r7, #4]
 8009c8e:	685b      	ldr	r3, [r3, #4]
 8009c90:	b2db      	uxtb	r3, r3
 8009c92:	4619      	mov	r1, r3
 8009c94:	6878      	ldr	r0, [r7, #4]
 8009c96:	f7ff f92a 	bl	8008eee <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8009c9a:	4b1d      	ldr	r3, [pc, #116]	; (8009d10 <USBD_SetConfig+0x148>)
 8009c9c:	781b      	ldrb	r3, [r3, #0]
 8009c9e:	461a      	mov	r2, r3
 8009ca0:	687b      	ldr	r3, [r7, #4]
 8009ca2:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8009ca4:	4b1a      	ldr	r3, [pc, #104]	; (8009d10 <USBD_SetConfig+0x148>)
 8009ca6:	781b      	ldrb	r3, [r3, #0]
 8009ca8:	4619      	mov	r1, r3
 8009caa:	6878      	ldr	r0, [r7, #4]
 8009cac:	f7ff f903 	bl	8008eb6 <USBD_SetClassConfig>
 8009cb0:	4603      	mov	r3, r0
 8009cb2:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8009cb4:	7bfb      	ldrb	r3, [r7, #15]
 8009cb6:	2b00      	cmp	r3, #0
 8009cb8:	d00f      	beq.n	8009cda <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 8009cba:	6839      	ldr	r1, [r7, #0]
 8009cbc:	6878      	ldr	r0, [r7, #4]
 8009cbe:	f000 f903 	bl	8009ec8 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8009cc2:	687b      	ldr	r3, [r7, #4]
 8009cc4:	685b      	ldr	r3, [r3, #4]
 8009cc6:	b2db      	uxtb	r3, r3
 8009cc8:	4619      	mov	r1, r3
 8009cca:	6878      	ldr	r0, [r7, #4]
 8009ccc:	f7ff f90f 	bl	8008eee <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8009cd0:	687b      	ldr	r3, [r7, #4]
 8009cd2:	2202      	movs	r2, #2
 8009cd4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8009cd8:	e014      	b.n	8009d04 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 8009cda:	6878      	ldr	r0, [r7, #4]
 8009cdc:	f000 f942 	bl	8009f64 <USBD_CtlSendStatus>
      break;
 8009ce0:	e010      	b.n	8009d04 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 8009ce2:	6878      	ldr	r0, [r7, #4]
 8009ce4:	f000 f93e 	bl	8009f64 <USBD_CtlSendStatus>
      break;
 8009ce8:	e00c      	b.n	8009d04 <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 8009cea:	6839      	ldr	r1, [r7, #0]
 8009cec:	6878      	ldr	r0, [r7, #4]
 8009cee:	f000 f8eb 	bl	8009ec8 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8009cf2:	4b07      	ldr	r3, [pc, #28]	; (8009d10 <USBD_SetConfig+0x148>)
 8009cf4:	781b      	ldrb	r3, [r3, #0]
 8009cf6:	4619      	mov	r1, r3
 8009cf8:	6878      	ldr	r0, [r7, #4]
 8009cfa:	f7ff f8f8 	bl	8008eee <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8009cfe:	2303      	movs	r3, #3
 8009d00:	73fb      	strb	r3, [r7, #15]
      break;
 8009d02:	bf00      	nop
  }

  return ret;
 8009d04:	7bfb      	ldrb	r3, [r7, #15]
}
 8009d06:	4618      	mov	r0, r3
 8009d08:	3710      	adds	r7, #16
 8009d0a:	46bd      	mov	sp, r7
 8009d0c:	bd80      	pop	{r7, pc}
 8009d0e:	bf00      	nop
 8009d10:	20000108 	.word	0x20000108

08009d14 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009d14:	b580      	push	{r7, lr}
 8009d16:	b082      	sub	sp, #8
 8009d18:	af00      	add	r7, sp, #0
 8009d1a:	6078      	str	r0, [r7, #4]
 8009d1c:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8009d1e:	683b      	ldr	r3, [r7, #0]
 8009d20:	88db      	ldrh	r3, [r3, #6]
 8009d22:	2b01      	cmp	r3, #1
 8009d24:	d004      	beq.n	8009d30 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8009d26:	6839      	ldr	r1, [r7, #0]
 8009d28:	6878      	ldr	r0, [r7, #4]
 8009d2a:	f000 f8cd 	bl	8009ec8 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8009d2e:	e023      	b.n	8009d78 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8009d30:	687b      	ldr	r3, [r7, #4]
 8009d32:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009d36:	b2db      	uxtb	r3, r3
 8009d38:	2b02      	cmp	r3, #2
 8009d3a:	dc02      	bgt.n	8009d42 <USBD_GetConfig+0x2e>
 8009d3c:	2b00      	cmp	r3, #0
 8009d3e:	dc03      	bgt.n	8009d48 <USBD_GetConfig+0x34>
 8009d40:	e015      	b.n	8009d6e <USBD_GetConfig+0x5a>
 8009d42:	2b03      	cmp	r3, #3
 8009d44:	d00b      	beq.n	8009d5e <USBD_GetConfig+0x4a>
 8009d46:	e012      	b.n	8009d6e <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8009d48:	687b      	ldr	r3, [r7, #4]
 8009d4a:	2200      	movs	r2, #0
 8009d4c:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8009d4e:	687b      	ldr	r3, [r7, #4]
 8009d50:	3308      	adds	r3, #8
 8009d52:	2201      	movs	r2, #1
 8009d54:	4619      	mov	r1, r3
 8009d56:	6878      	ldr	r0, [r7, #4]
 8009d58:	f000 f8c7 	bl	8009eea <USBD_CtlSendData>
        break;
 8009d5c:	e00c      	b.n	8009d78 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8009d5e:	687b      	ldr	r3, [r7, #4]
 8009d60:	3304      	adds	r3, #4
 8009d62:	2201      	movs	r2, #1
 8009d64:	4619      	mov	r1, r3
 8009d66:	6878      	ldr	r0, [r7, #4]
 8009d68:	f000 f8bf 	bl	8009eea <USBD_CtlSendData>
        break;
 8009d6c:	e004      	b.n	8009d78 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8009d6e:	6839      	ldr	r1, [r7, #0]
 8009d70:	6878      	ldr	r0, [r7, #4]
 8009d72:	f000 f8a9 	bl	8009ec8 <USBD_CtlError>
        break;
 8009d76:	bf00      	nop
}
 8009d78:	bf00      	nop
 8009d7a:	3708      	adds	r7, #8
 8009d7c:	46bd      	mov	sp, r7
 8009d7e:	bd80      	pop	{r7, pc}

08009d80 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009d80:	b580      	push	{r7, lr}
 8009d82:	b082      	sub	sp, #8
 8009d84:	af00      	add	r7, sp, #0
 8009d86:	6078      	str	r0, [r7, #4]
 8009d88:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8009d8a:	687b      	ldr	r3, [r7, #4]
 8009d8c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009d90:	b2db      	uxtb	r3, r3
 8009d92:	3b01      	subs	r3, #1
 8009d94:	2b02      	cmp	r3, #2
 8009d96:	d81e      	bhi.n	8009dd6 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8009d98:	683b      	ldr	r3, [r7, #0]
 8009d9a:	88db      	ldrh	r3, [r3, #6]
 8009d9c:	2b02      	cmp	r3, #2
 8009d9e:	d004      	beq.n	8009daa <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8009da0:	6839      	ldr	r1, [r7, #0]
 8009da2:	6878      	ldr	r0, [r7, #4]
 8009da4:	f000 f890 	bl	8009ec8 <USBD_CtlError>
        break;
 8009da8:	e01a      	b.n	8009de0 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8009daa:	687b      	ldr	r3, [r7, #4]
 8009dac:	2201      	movs	r2, #1
 8009dae:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 8009db0:	687b      	ldr	r3, [r7, #4]
 8009db2:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8009db6:	2b00      	cmp	r3, #0
 8009db8:	d005      	beq.n	8009dc6 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8009dba:	687b      	ldr	r3, [r7, #4]
 8009dbc:	68db      	ldr	r3, [r3, #12]
 8009dbe:	f043 0202 	orr.w	r2, r3, #2
 8009dc2:	687b      	ldr	r3, [r7, #4]
 8009dc4:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8009dc6:	687b      	ldr	r3, [r7, #4]
 8009dc8:	330c      	adds	r3, #12
 8009dca:	2202      	movs	r2, #2
 8009dcc:	4619      	mov	r1, r3
 8009dce:	6878      	ldr	r0, [r7, #4]
 8009dd0:	f000 f88b 	bl	8009eea <USBD_CtlSendData>
      break;
 8009dd4:	e004      	b.n	8009de0 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8009dd6:	6839      	ldr	r1, [r7, #0]
 8009dd8:	6878      	ldr	r0, [r7, #4]
 8009dda:	f000 f875 	bl	8009ec8 <USBD_CtlError>
      break;
 8009dde:	bf00      	nop
  }
}
 8009de0:	bf00      	nop
 8009de2:	3708      	adds	r7, #8
 8009de4:	46bd      	mov	sp, r7
 8009de6:	bd80      	pop	{r7, pc}

08009de8 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009de8:	b580      	push	{r7, lr}
 8009dea:	b082      	sub	sp, #8
 8009dec:	af00      	add	r7, sp, #0
 8009dee:	6078      	str	r0, [r7, #4]
 8009df0:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8009df2:	683b      	ldr	r3, [r7, #0]
 8009df4:	885b      	ldrh	r3, [r3, #2]
 8009df6:	2b01      	cmp	r3, #1
 8009df8:	d106      	bne.n	8009e08 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8009dfa:	687b      	ldr	r3, [r7, #4]
 8009dfc:	2201      	movs	r2, #1
 8009dfe:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8009e02:	6878      	ldr	r0, [r7, #4]
 8009e04:	f000 f8ae 	bl	8009f64 <USBD_CtlSendStatus>
  }
}
 8009e08:	bf00      	nop
 8009e0a:	3708      	adds	r7, #8
 8009e0c:	46bd      	mov	sp, r7
 8009e0e:	bd80      	pop	{r7, pc}

08009e10 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009e10:	b580      	push	{r7, lr}
 8009e12:	b082      	sub	sp, #8
 8009e14:	af00      	add	r7, sp, #0
 8009e16:	6078      	str	r0, [r7, #4]
 8009e18:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8009e1a:	687b      	ldr	r3, [r7, #4]
 8009e1c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009e20:	b2db      	uxtb	r3, r3
 8009e22:	3b01      	subs	r3, #1
 8009e24:	2b02      	cmp	r3, #2
 8009e26:	d80b      	bhi.n	8009e40 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8009e28:	683b      	ldr	r3, [r7, #0]
 8009e2a:	885b      	ldrh	r3, [r3, #2]
 8009e2c:	2b01      	cmp	r3, #1
 8009e2e:	d10c      	bne.n	8009e4a <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8009e30:	687b      	ldr	r3, [r7, #4]
 8009e32:	2200      	movs	r2, #0
 8009e34:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8009e38:	6878      	ldr	r0, [r7, #4]
 8009e3a:	f000 f893 	bl	8009f64 <USBD_CtlSendStatus>
      }
      break;
 8009e3e:	e004      	b.n	8009e4a <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8009e40:	6839      	ldr	r1, [r7, #0]
 8009e42:	6878      	ldr	r0, [r7, #4]
 8009e44:	f000 f840 	bl	8009ec8 <USBD_CtlError>
      break;
 8009e48:	e000      	b.n	8009e4c <USBD_ClrFeature+0x3c>
      break;
 8009e4a:	bf00      	nop
  }
}
 8009e4c:	bf00      	nop
 8009e4e:	3708      	adds	r7, #8
 8009e50:	46bd      	mov	sp, r7
 8009e52:	bd80      	pop	{r7, pc}

08009e54 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8009e54:	b580      	push	{r7, lr}
 8009e56:	b084      	sub	sp, #16
 8009e58:	af00      	add	r7, sp, #0
 8009e5a:	6078      	str	r0, [r7, #4]
 8009e5c:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8009e5e:	683b      	ldr	r3, [r7, #0]
 8009e60:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8009e62:	68fb      	ldr	r3, [r7, #12]
 8009e64:	781a      	ldrb	r2, [r3, #0]
 8009e66:	687b      	ldr	r3, [r7, #4]
 8009e68:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8009e6a:	68fb      	ldr	r3, [r7, #12]
 8009e6c:	3301      	adds	r3, #1
 8009e6e:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8009e70:	68fb      	ldr	r3, [r7, #12]
 8009e72:	781a      	ldrb	r2, [r3, #0]
 8009e74:	687b      	ldr	r3, [r7, #4]
 8009e76:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8009e78:	68fb      	ldr	r3, [r7, #12]
 8009e7a:	3301      	adds	r3, #1
 8009e7c:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8009e7e:	68f8      	ldr	r0, [r7, #12]
 8009e80:	f7ff fabc 	bl	80093fc <SWAPBYTE>
 8009e84:	4603      	mov	r3, r0
 8009e86:	461a      	mov	r2, r3
 8009e88:	687b      	ldr	r3, [r7, #4]
 8009e8a:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8009e8c:	68fb      	ldr	r3, [r7, #12]
 8009e8e:	3301      	adds	r3, #1
 8009e90:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8009e92:	68fb      	ldr	r3, [r7, #12]
 8009e94:	3301      	adds	r3, #1
 8009e96:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8009e98:	68f8      	ldr	r0, [r7, #12]
 8009e9a:	f7ff faaf 	bl	80093fc <SWAPBYTE>
 8009e9e:	4603      	mov	r3, r0
 8009ea0:	461a      	mov	r2, r3
 8009ea2:	687b      	ldr	r3, [r7, #4]
 8009ea4:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8009ea6:	68fb      	ldr	r3, [r7, #12]
 8009ea8:	3301      	adds	r3, #1
 8009eaa:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8009eac:	68fb      	ldr	r3, [r7, #12]
 8009eae:	3301      	adds	r3, #1
 8009eb0:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8009eb2:	68f8      	ldr	r0, [r7, #12]
 8009eb4:	f7ff faa2 	bl	80093fc <SWAPBYTE>
 8009eb8:	4603      	mov	r3, r0
 8009eba:	461a      	mov	r2, r3
 8009ebc:	687b      	ldr	r3, [r7, #4]
 8009ebe:	80da      	strh	r2, [r3, #6]
}
 8009ec0:	bf00      	nop
 8009ec2:	3710      	adds	r7, #16
 8009ec4:	46bd      	mov	sp, r7
 8009ec6:	bd80      	pop	{r7, pc}

08009ec8 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009ec8:	b580      	push	{r7, lr}
 8009eca:	b082      	sub	sp, #8
 8009ecc:	af00      	add	r7, sp, #0
 8009ece:	6078      	str	r0, [r7, #4]
 8009ed0:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8009ed2:	2180      	movs	r1, #128	; 0x80
 8009ed4:	6878      	ldr	r0, [r7, #4]
 8009ed6:	f002 ff51 	bl	800cd7c <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8009eda:	2100      	movs	r1, #0
 8009edc:	6878      	ldr	r0, [r7, #4]
 8009ede:	f002 ff4d 	bl	800cd7c <USBD_LL_StallEP>
}
 8009ee2:	bf00      	nop
 8009ee4:	3708      	adds	r7, #8
 8009ee6:	46bd      	mov	sp, r7
 8009ee8:	bd80      	pop	{r7, pc}

08009eea <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8009eea:	b580      	push	{r7, lr}
 8009eec:	b084      	sub	sp, #16
 8009eee:	af00      	add	r7, sp, #0
 8009ef0:	60f8      	str	r0, [r7, #12]
 8009ef2:	60b9      	str	r1, [r7, #8]
 8009ef4:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8009ef6:	68fb      	ldr	r3, [r7, #12]
 8009ef8:	2202      	movs	r2, #2
 8009efa:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8009efe:	68fb      	ldr	r3, [r7, #12]
 8009f00:	687a      	ldr	r2, [r7, #4]
 8009f02:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8009f04:	68fb      	ldr	r3, [r7, #12]
 8009f06:	687a      	ldr	r2, [r7, #4]
 8009f08:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8009f0a:	687b      	ldr	r3, [r7, #4]
 8009f0c:	68ba      	ldr	r2, [r7, #8]
 8009f0e:	2100      	movs	r1, #0
 8009f10:	68f8      	ldr	r0, [r7, #12]
 8009f12:	f002 ffbc 	bl	800ce8e <USBD_LL_Transmit>

  return USBD_OK;
 8009f16:	2300      	movs	r3, #0
}
 8009f18:	4618      	mov	r0, r3
 8009f1a:	3710      	adds	r7, #16
 8009f1c:	46bd      	mov	sp, r7
 8009f1e:	bd80      	pop	{r7, pc}

08009f20 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8009f20:	b580      	push	{r7, lr}
 8009f22:	b084      	sub	sp, #16
 8009f24:	af00      	add	r7, sp, #0
 8009f26:	60f8      	str	r0, [r7, #12]
 8009f28:	60b9      	str	r1, [r7, #8]
 8009f2a:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8009f2c:	687b      	ldr	r3, [r7, #4]
 8009f2e:	68ba      	ldr	r2, [r7, #8]
 8009f30:	2100      	movs	r1, #0
 8009f32:	68f8      	ldr	r0, [r7, #12]
 8009f34:	f002 ffab 	bl	800ce8e <USBD_LL_Transmit>

  return USBD_OK;
 8009f38:	2300      	movs	r3, #0
}
 8009f3a:	4618      	mov	r0, r3
 8009f3c:	3710      	adds	r7, #16
 8009f3e:	46bd      	mov	sp, r7
 8009f40:	bd80      	pop	{r7, pc}

08009f42 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8009f42:	b580      	push	{r7, lr}
 8009f44:	b084      	sub	sp, #16
 8009f46:	af00      	add	r7, sp, #0
 8009f48:	60f8      	str	r0, [r7, #12]
 8009f4a:	60b9      	str	r1, [r7, #8]
 8009f4c:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8009f4e:	687b      	ldr	r3, [r7, #4]
 8009f50:	68ba      	ldr	r2, [r7, #8]
 8009f52:	2100      	movs	r1, #0
 8009f54:	68f8      	ldr	r0, [r7, #12]
 8009f56:	f002 ffbb 	bl	800ced0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009f5a:	2300      	movs	r3, #0
}
 8009f5c:	4618      	mov	r0, r3
 8009f5e:	3710      	adds	r7, #16
 8009f60:	46bd      	mov	sp, r7
 8009f62:	bd80      	pop	{r7, pc}

08009f64 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8009f64:	b580      	push	{r7, lr}
 8009f66:	b082      	sub	sp, #8
 8009f68:	af00      	add	r7, sp, #0
 8009f6a:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8009f6c:	687b      	ldr	r3, [r7, #4]
 8009f6e:	2204      	movs	r2, #4
 8009f70:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8009f74:	2300      	movs	r3, #0
 8009f76:	2200      	movs	r2, #0
 8009f78:	2100      	movs	r1, #0
 8009f7a:	6878      	ldr	r0, [r7, #4]
 8009f7c:	f002 ff87 	bl	800ce8e <USBD_LL_Transmit>

  return USBD_OK;
 8009f80:	2300      	movs	r3, #0
}
 8009f82:	4618      	mov	r0, r3
 8009f84:	3708      	adds	r7, #8
 8009f86:	46bd      	mov	sp, r7
 8009f88:	bd80      	pop	{r7, pc}

08009f8a <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8009f8a:	b580      	push	{r7, lr}
 8009f8c:	b082      	sub	sp, #8
 8009f8e:	af00      	add	r7, sp, #0
 8009f90:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8009f92:	687b      	ldr	r3, [r7, #4]
 8009f94:	2205      	movs	r2, #5
 8009f96:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009f9a:	2300      	movs	r3, #0
 8009f9c:	2200      	movs	r2, #0
 8009f9e:	2100      	movs	r1, #0
 8009fa0:	6878      	ldr	r0, [r7, #4]
 8009fa2:	f002 ff95 	bl	800ced0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009fa6:	2300      	movs	r3, #0
}
 8009fa8:	4618      	mov	r0, r3
 8009faa:	3708      	adds	r7, #8
 8009fac:	46bd      	mov	sp, r7
 8009fae:	bd80      	pop	{r7, pc}

08009fb0 <__NVIC_SetPriority>:
{
 8009fb0:	b480      	push	{r7}
 8009fb2:	b083      	sub	sp, #12
 8009fb4:	af00      	add	r7, sp, #0
 8009fb6:	4603      	mov	r3, r0
 8009fb8:	6039      	str	r1, [r7, #0]
 8009fba:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8009fbc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009fc0:	2b00      	cmp	r3, #0
 8009fc2:	db0a      	blt.n	8009fda <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8009fc4:	683b      	ldr	r3, [r7, #0]
 8009fc6:	b2da      	uxtb	r2, r3
 8009fc8:	490c      	ldr	r1, [pc, #48]	; (8009ffc <__NVIC_SetPriority+0x4c>)
 8009fca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009fce:	0112      	lsls	r2, r2, #4
 8009fd0:	b2d2      	uxtb	r2, r2
 8009fd2:	440b      	add	r3, r1
 8009fd4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8009fd8:	e00a      	b.n	8009ff0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8009fda:	683b      	ldr	r3, [r7, #0]
 8009fdc:	b2da      	uxtb	r2, r3
 8009fde:	4908      	ldr	r1, [pc, #32]	; (800a000 <__NVIC_SetPriority+0x50>)
 8009fe0:	79fb      	ldrb	r3, [r7, #7]
 8009fe2:	f003 030f 	and.w	r3, r3, #15
 8009fe6:	3b04      	subs	r3, #4
 8009fe8:	0112      	lsls	r2, r2, #4
 8009fea:	b2d2      	uxtb	r2, r2
 8009fec:	440b      	add	r3, r1
 8009fee:	761a      	strb	r2, [r3, #24]
}
 8009ff0:	bf00      	nop
 8009ff2:	370c      	adds	r7, #12
 8009ff4:	46bd      	mov	sp, r7
 8009ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ffa:	4770      	bx	lr
 8009ffc:	e000e100 	.word	0xe000e100
 800a000:	e000ed00 	.word	0xe000ed00

0800a004 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800a004:	b580      	push	{r7, lr}
 800a006:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 800a008:	4b05      	ldr	r3, [pc, #20]	; (800a020 <SysTick_Handler+0x1c>)
 800a00a:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800a00c:	f001 fd36 	bl	800ba7c <xTaskGetSchedulerState>
 800a010:	4603      	mov	r3, r0
 800a012:	2b01      	cmp	r3, #1
 800a014:	d001      	beq.n	800a01a <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800a016:	f002 fb1f 	bl	800c658 <xPortSysTickHandler>
  }
}
 800a01a:	bf00      	nop
 800a01c:	bd80      	pop	{r7, pc}
 800a01e:	bf00      	nop
 800a020:	e000e010 	.word	0xe000e010

0800a024 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800a024:	b580      	push	{r7, lr}
 800a026:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800a028:	2100      	movs	r1, #0
 800a02a:	f06f 0004 	mvn.w	r0, #4
 800a02e:	f7ff ffbf 	bl	8009fb0 <__NVIC_SetPriority>
#endif
}
 800a032:	bf00      	nop
 800a034:	bd80      	pop	{r7, pc}
	...

0800a038 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800a038:	b480      	push	{r7}
 800a03a:	b083      	sub	sp, #12
 800a03c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a03e:	f3ef 8305 	mrs	r3, IPSR
 800a042:	603b      	str	r3, [r7, #0]
  return(result);
 800a044:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800a046:	2b00      	cmp	r3, #0
 800a048:	d003      	beq.n	800a052 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800a04a:	f06f 0305 	mvn.w	r3, #5
 800a04e:	607b      	str	r3, [r7, #4]
 800a050:	e00c      	b.n	800a06c <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800a052:	4b0a      	ldr	r3, [pc, #40]	; (800a07c <osKernelInitialize+0x44>)
 800a054:	681b      	ldr	r3, [r3, #0]
 800a056:	2b00      	cmp	r3, #0
 800a058:	d105      	bne.n	800a066 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800a05a:	4b08      	ldr	r3, [pc, #32]	; (800a07c <osKernelInitialize+0x44>)
 800a05c:	2201      	movs	r2, #1
 800a05e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800a060:	2300      	movs	r3, #0
 800a062:	607b      	str	r3, [r7, #4]
 800a064:	e002      	b.n	800a06c <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800a066:	f04f 33ff 	mov.w	r3, #4294967295
 800a06a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800a06c:	687b      	ldr	r3, [r7, #4]
}
 800a06e:	4618      	mov	r0, r3
 800a070:	370c      	adds	r7, #12
 800a072:	46bd      	mov	sp, r7
 800a074:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a078:	4770      	bx	lr
 800a07a:	bf00      	nop
 800a07c:	2000010c 	.word	0x2000010c

0800a080 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800a080:	b580      	push	{r7, lr}
 800a082:	b082      	sub	sp, #8
 800a084:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a086:	f3ef 8305 	mrs	r3, IPSR
 800a08a:	603b      	str	r3, [r7, #0]
  return(result);
 800a08c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800a08e:	2b00      	cmp	r3, #0
 800a090:	d003      	beq.n	800a09a <osKernelStart+0x1a>
    stat = osErrorISR;
 800a092:	f06f 0305 	mvn.w	r3, #5
 800a096:	607b      	str	r3, [r7, #4]
 800a098:	e010      	b.n	800a0bc <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800a09a:	4b0b      	ldr	r3, [pc, #44]	; (800a0c8 <osKernelStart+0x48>)
 800a09c:	681b      	ldr	r3, [r3, #0]
 800a09e:	2b01      	cmp	r3, #1
 800a0a0:	d109      	bne.n	800a0b6 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800a0a2:	f7ff ffbf 	bl	800a024 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800a0a6:	4b08      	ldr	r3, [pc, #32]	; (800a0c8 <osKernelStart+0x48>)
 800a0a8:	2202      	movs	r2, #2
 800a0aa:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800a0ac:	f001 f866 	bl	800b17c <vTaskStartScheduler>
      stat = osOK;
 800a0b0:	2300      	movs	r3, #0
 800a0b2:	607b      	str	r3, [r7, #4]
 800a0b4:	e002      	b.n	800a0bc <osKernelStart+0x3c>
    } else {
      stat = osError;
 800a0b6:	f04f 33ff 	mov.w	r3, #4294967295
 800a0ba:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800a0bc:	687b      	ldr	r3, [r7, #4]
}
 800a0be:	4618      	mov	r0, r3
 800a0c0:	3708      	adds	r7, #8
 800a0c2:	46bd      	mov	sp, r7
 800a0c4:	bd80      	pop	{r7, pc}
 800a0c6:	bf00      	nop
 800a0c8:	2000010c 	.word	0x2000010c

0800a0cc <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800a0cc:	b580      	push	{r7, lr}
 800a0ce:	b08e      	sub	sp, #56	; 0x38
 800a0d0:	af04      	add	r7, sp, #16
 800a0d2:	60f8      	str	r0, [r7, #12]
 800a0d4:	60b9      	str	r1, [r7, #8]
 800a0d6:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800a0d8:	2300      	movs	r3, #0
 800a0da:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a0dc:	f3ef 8305 	mrs	r3, IPSR
 800a0e0:	617b      	str	r3, [r7, #20]
  return(result);
 800a0e2:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800a0e4:	2b00      	cmp	r3, #0
 800a0e6:	d17e      	bne.n	800a1e6 <osThreadNew+0x11a>
 800a0e8:	68fb      	ldr	r3, [r7, #12]
 800a0ea:	2b00      	cmp	r3, #0
 800a0ec:	d07b      	beq.n	800a1e6 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800a0ee:	2380      	movs	r3, #128	; 0x80
 800a0f0:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800a0f2:	2318      	movs	r3, #24
 800a0f4:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800a0f6:	2300      	movs	r3, #0
 800a0f8:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 800a0fa:	f04f 33ff 	mov.w	r3, #4294967295
 800a0fe:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800a100:	687b      	ldr	r3, [r7, #4]
 800a102:	2b00      	cmp	r3, #0
 800a104:	d045      	beq.n	800a192 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800a106:	687b      	ldr	r3, [r7, #4]
 800a108:	681b      	ldr	r3, [r3, #0]
 800a10a:	2b00      	cmp	r3, #0
 800a10c:	d002      	beq.n	800a114 <osThreadNew+0x48>
        name = attr->name;
 800a10e:	687b      	ldr	r3, [r7, #4]
 800a110:	681b      	ldr	r3, [r3, #0]
 800a112:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 800a114:	687b      	ldr	r3, [r7, #4]
 800a116:	699b      	ldr	r3, [r3, #24]
 800a118:	2b00      	cmp	r3, #0
 800a11a:	d002      	beq.n	800a122 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800a11c:	687b      	ldr	r3, [r7, #4]
 800a11e:	699b      	ldr	r3, [r3, #24]
 800a120:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800a122:	69fb      	ldr	r3, [r7, #28]
 800a124:	2b00      	cmp	r3, #0
 800a126:	d008      	beq.n	800a13a <osThreadNew+0x6e>
 800a128:	69fb      	ldr	r3, [r7, #28]
 800a12a:	2b38      	cmp	r3, #56	; 0x38
 800a12c:	d805      	bhi.n	800a13a <osThreadNew+0x6e>
 800a12e:	687b      	ldr	r3, [r7, #4]
 800a130:	685b      	ldr	r3, [r3, #4]
 800a132:	f003 0301 	and.w	r3, r3, #1
 800a136:	2b00      	cmp	r3, #0
 800a138:	d001      	beq.n	800a13e <osThreadNew+0x72>
        return (NULL);
 800a13a:	2300      	movs	r3, #0
 800a13c:	e054      	b.n	800a1e8 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800a13e:	687b      	ldr	r3, [r7, #4]
 800a140:	695b      	ldr	r3, [r3, #20]
 800a142:	2b00      	cmp	r3, #0
 800a144:	d003      	beq.n	800a14e <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800a146:	687b      	ldr	r3, [r7, #4]
 800a148:	695b      	ldr	r3, [r3, #20]
 800a14a:	089b      	lsrs	r3, r3, #2
 800a14c:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800a14e:	687b      	ldr	r3, [r7, #4]
 800a150:	689b      	ldr	r3, [r3, #8]
 800a152:	2b00      	cmp	r3, #0
 800a154:	d00e      	beq.n	800a174 <osThreadNew+0xa8>
 800a156:	687b      	ldr	r3, [r7, #4]
 800a158:	68db      	ldr	r3, [r3, #12]
 800a15a:	2b5b      	cmp	r3, #91	; 0x5b
 800a15c:	d90a      	bls.n	800a174 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800a15e:	687b      	ldr	r3, [r7, #4]
 800a160:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800a162:	2b00      	cmp	r3, #0
 800a164:	d006      	beq.n	800a174 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800a166:	687b      	ldr	r3, [r7, #4]
 800a168:	695b      	ldr	r3, [r3, #20]
 800a16a:	2b00      	cmp	r3, #0
 800a16c:	d002      	beq.n	800a174 <osThreadNew+0xa8>
        mem = 1;
 800a16e:	2301      	movs	r3, #1
 800a170:	61bb      	str	r3, [r7, #24]
 800a172:	e010      	b.n	800a196 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800a174:	687b      	ldr	r3, [r7, #4]
 800a176:	689b      	ldr	r3, [r3, #8]
 800a178:	2b00      	cmp	r3, #0
 800a17a:	d10c      	bne.n	800a196 <osThreadNew+0xca>
 800a17c:	687b      	ldr	r3, [r7, #4]
 800a17e:	68db      	ldr	r3, [r3, #12]
 800a180:	2b00      	cmp	r3, #0
 800a182:	d108      	bne.n	800a196 <osThreadNew+0xca>
 800a184:	687b      	ldr	r3, [r7, #4]
 800a186:	691b      	ldr	r3, [r3, #16]
 800a188:	2b00      	cmp	r3, #0
 800a18a:	d104      	bne.n	800a196 <osThreadNew+0xca>
          mem = 0;
 800a18c:	2300      	movs	r3, #0
 800a18e:	61bb      	str	r3, [r7, #24]
 800a190:	e001      	b.n	800a196 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800a192:	2300      	movs	r3, #0
 800a194:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800a196:	69bb      	ldr	r3, [r7, #24]
 800a198:	2b01      	cmp	r3, #1
 800a19a:	d110      	bne.n	800a1be <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800a19c:	687b      	ldr	r3, [r7, #4]
 800a19e:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800a1a0:	687a      	ldr	r2, [r7, #4]
 800a1a2:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800a1a4:	9202      	str	r2, [sp, #8]
 800a1a6:	9301      	str	r3, [sp, #4]
 800a1a8:	69fb      	ldr	r3, [r7, #28]
 800a1aa:	9300      	str	r3, [sp, #0]
 800a1ac:	68bb      	ldr	r3, [r7, #8]
 800a1ae:	6a3a      	ldr	r2, [r7, #32]
 800a1b0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800a1b2:	68f8      	ldr	r0, [r7, #12]
 800a1b4:	f000 fe0c 	bl	800add0 <xTaskCreateStatic>
 800a1b8:	4603      	mov	r3, r0
 800a1ba:	613b      	str	r3, [r7, #16]
 800a1bc:	e013      	b.n	800a1e6 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800a1be:	69bb      	ldr	r3, [r7, #24]
 800a1c0:	2b00      	cmp	r3, #0
 800a1c2:	d110      	bne.n	800a1e6 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800a1c4:	6a3b      	ldr	r3, [r7, #32]
 800a1c6:	b29a      	uxth	r2, r3
 800a1c8:	f107 0310 	add.w	r3, r7, #16
 800a1cc:	9301      	str	r3, [sp, #4]
 800a1ce:	69fb      	ldr	r3, [r7, #28]
 800a1d0:	9300      	str	r3, [sp, #0]
 800a1d2:	68bb      	ldr	r3, [r7, #8]
 800a1d4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800a1d6:	68f8      	ldr	r0, [r7, #12]
 800a1d8:	f000 fe57 	bl	800ae8a <xTaskCreate>
 800a1dc:	4603      	mov	r3, r0
 800a1de:	2b01      	cmp	r3, #1
 800a1e0:	d001      	beq.n	800a1e6 <osThreadNew+0x11a>
            hTask = NULL;
 800a1e2:	2300      	movs	r3, #0
 800a1e4:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800a1e6:	693b      	ldr	r3, [r7, #16]
}
 800a1e8:	4618      	mov	r0, r3
 800a1ea:	3728      	adds	r7, #40	; 0x28
 800a1ec:	46bd      	mov	sp, r7
 800a1ee:	bd80      	pop	{r7, pc}

0800a1f0 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800a1f0:	b580      	push	{r7, lr}
 800a1f2:	b084      	sub	sp, #16
 800a1f4:	af00      	add	r7, sp, #0
 800a1f6:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a1f8:	f3ef 8305 	mrs	r3, IPSR
 800a1fc:	60bb      	str	r3, [r7, #8]
  return(result);
 800a1fe:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800a200:	2b00      	cmp	r3, #0
 800a202:	d003      	beq.n	800a20c <osDelay+0x1c>
    stat = osErrorISR;
 800a204:	f06f 0305 	mvn.w	r3, #5
 800a208:	60fb      	str	r3, [r7, #12]
 800a20a:	e007      	b.n	800a21c <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800a20c:	2300      	movs	r3, #0
 800a20e:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800a210:	687b      	ldr	r3, [r7, #4]
 800a212:	2b00      	cmp	r3, #0
 800a214:	d002      	beq.n	800a21c <osDelay+0x2c>
      vTaskDelay(ticks);
 800a216:	6878      	ldr	r0, [r7, #4]
 800a218:	f000 ff7c 	bl	800b114 <vTaskDelay>
    }
  }

  return (stat);
 800a21c:	68fb      	ldr	r3, [r7, #12]
}
 800a21e:	4618      	mov	r0, r3
 800a220:	3710      	adds	r7, #16
 800a222:	46bd      	mov	sp, r7
 800a224:	bd80      	pop	{r7, pc}
	...

0800a228 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800a228:	b480      	push	{r7}
 800a22a:	b085      	sub	sp, #20
 800a22c:	af00      	add	r7, sp, #0
 800a22e:	60f8      	str	r0, [r7, #12]
 800a230:	60b9      	str	r1, [r7, #8]
 800a232:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800a234:	68fb      	ldr	r3, [r7, #12]
 800a236:	4a07      	ldr	r2, [pc, #28]	; (800a254 <vApplicationGetIdleTaskMemory+0x2c>)
 800a238:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800a23a:	68bb      	ldr	r3, [r7, #8]
 800a23c:	4a06      	ldr	r2, [pc, #24]	; (800a258 <vApplicationGetIdleTaskMemory+0x30>)
 800a23e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800a240:	687b      	ldr	r3, [r7, #4]
 800a242:	2280      	movs	r2, #128	; 0x80
 800a244:	601a      	str	r2, [r3, #0]
}
 800a246:	bf00      	nop
 800a248:	3714      	adds	r7, #20
 800a24a:	46bd      	mov	sp, r7
 800a24c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a250:	4770      	bx	lr
 800a252:	bf00      	nop
 800a254:	20000110 	.word	0x20000110
 800a258:	2000016c 	.word	0x2000016c

0800a25c <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800a25c:	b480      	push	{r7}
 800a25e:	b085      	sub	sp, #20
 800a260:	af00      	add	r7, sp, #0
 800a262:	60f8      	str	r0, [r7, #12]
 800a264:	60b9      	str	r1, [r7, #8]
 800a266:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800a268:	68fb      	ldr	r3, [r7, #12]
 800a26a:	4a07      	ldr	r2, [pc, #28]	; (800a288 <vApplicationGetTimerTaskMemory+0x2c>)
 800a26c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800a26e:	68bb      	ldr	r3, [r7, #8]
 800a270:	4a06      	ldr	r2, [pc, #24]	; (800a28c <vApplicationGetTimerTaskMemory+0x30>)
 800a272:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800a274:	687b      	ldr	r3, [r7, #4]
 800a276:	f44f 7280 	mov.w	r2, #256	; 0x100
 800a27a:	601a      	str	r2, [r3, #0]
}
 800a27c:	bf00      	nop
 800a27e:	3714      	adds	r7, #20
 800a280:	46bd      	mov	sp, r7
 800a282:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a286:	4770      	bx	lr
 800a288:	2000036c 	.word	0x2000036c
 800a28c:	200003c8 	.word	0x200003c8

0800a290 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800a290:	b480      	push	{r7}
 800a292:	b083      	sub	sp, #12
 800a294:	af00      	add	r7, sp, #0
 800a296:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a298:	687b      	ldr	r3, [r7, #4]
 800a29a:	f103 0208 	add.w	r2, r3, #8
 800a29e:	687b      	ldr	r3, [r7, #4]
 800a2a0:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800a2a2:	687b      	ldr	r3, [r7, #4]
 800a2a4:	f04f 32ff 	mov.w	r2, #4294967295
 800a2a8:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a2aa:	687b      	ldr	r3, [r7, #4]
 800a2ac:	f103 0208 	add.w	r2, r3, #8
 800a2b0:	687b      	ldr	r3, [r7, #4]
 800a2b2:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a2b4:	687b      	ldr	r3, [r7, #4]
 800a2b6:	f103 0208 	add.w	r2, r3, #8
 800a2ba:	687b      	ldr	r3, [r7, #4]
 800a2bc:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800a2be:	687b      	ldr	r3, [r7, #4]
 800a2c0:	2200      	movs	r2, #0
 800a2c2:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800a2c4:	bf00      	nop
 800a2c6:	370c      	adds	r7, #12
 800a2c8:	46bd      	mov	sp, r7
 800a2ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2ce:	4770      	bx	lr

0800a2d0 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800a2d0:	b480      	push	{r7}
 800a2d2:	b083      	sub	sp, #12
 800a2d4:	af00      	add	r7, sp, #0
 800a2d6:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800a2d8:	687b      	ldr	r3, [r7, #4]
 800a2da:	2200      	movs	r2, #0
 800a2dc:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800a2de:	bf00      	nop
 800a2e0:	370c      	adds	r7, #12
 800a2e2:	46bd      	mov	sp, r7
 800a2e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2e8:	4770      	bx	lr

0800a2ea <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800a2ea:	b480      	push	{r7}
 800a2ec:	b085      	sub	sp, #20
 800a2ee:	af00      	add	r7, sp, #0
 800a2f0:	6078      	str	r0, [r7, #4]
 800a2f2:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800a2f4:	687b      	ldr	r3, [r7, #4]
 800a2f6:	685b      	ldr	r3, [r3, #4]
 800a2f8:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800a2fa:	683b      	ldr	r3, [r7, #0]
 800a2fc:	68fa      	ldr	r2, [r7, #12]
 800a2fe:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800a300:	68fb      	ldr	r3, [r7, #12]
 800a302:	689a      	ldr	r2, [r3, #8]
 800a304:	683b      	ldr	r3, [r7, #0]
 800a306:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800a308:	68fb      	ldr	r3, [r7, #12]
 800a30a:	689b      	ldr	r3, [r3, #8]
 800a30c:	683a      	ldr	r2, [r7, #0]
 800a30e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800a310:	68fb      	ldr	r3, [r7, #12]
 800a312:	683a      	ldr	r2, [r7, #0]
 800a314:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800a316:	683b      	ldr	r3, [r7, #0]
 800a318:	687a      	ldr	r2, [r7, #4]
 800a31a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800a31c:	687b      	ldr	r3, [r7, #4]
 800a31e:	681b      	ldr	r3, [r3, #0]
 800a320:	1c5a      	adds	r2, r3, #1
 800a322:	687b      	ldr	r3, [r7, #4]
 800a324:	601a      	str	r2, [r3, #0]
}
 800a326:	bf00      	nop
 800a328:	3714      	adds	r7, #20
 800a32a:	46bd      	mov	sp, r7
 800a32c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a330:	4770      	bx	lr

0800a332 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800a332:	b480      	push	{r7}
 800a334:	b085      	sub	sp, #20
 800a336:	af00      	add	r7, sp, #0
 800a338:	6078      	str	r0, [r7, #4]
 800a33a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800a33c:	683b      	ldr	r3, [r7, #0]
 800a33e:	681b      	ldr	r3, [r3, #0]
 800a340:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800a342:	68bb      	ldr	r3, [r7, #8]
 800a344:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a348:	d103      	bne.n	800a352 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800a34a:	687b      	ldr	r3, [r7, #4]
 800a34c:	691b      	ldr	r3, [r3, #16]
 800a34e:	60fb      	str	r3, [r7, #12]
 800a350:	e00c      	b.n	800a36c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800a352:	687b      	ldr	r3, [r7, #4]
 800a354:	3308      	adds	r3, #8
 800a356:	60fb      	str	r3, [r7, #12]
 800a358:	e002      	b.n	800a360 <vListInsert+0x2e>
 800a35a:	68fb      	ldr	r3, [r7, #12]
 800a35c:	685b      	ldr	r3, [r3, #4]
 800a35e:	60fb      	str	r3, [r7, #12]
 800a360:	68fb      	ldr	r3, [r7, #12]
 800a362:	685b      	ldr	r3, [r3, #4]
 800a364:	681b      	ldr	r3, [r3, #0]
 800a366:	68ba      	ldr	r2, [r7, #8]
 800a368:	429a      	cmp	r2, r3
 800a36a:	d2f6      	bcs.n	800a35a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800a36c:	68fb      	ldr	r3, [r7, #12]
 800a36e:	685a      	ldr	r2, [r3, #4]
 800a370:	683b      	ldr	r3, [r7, #0]
 800a372:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800a374:	683b      	ldr	r3, [r7, #0]
 800a376:	685b      	ldr	r3, [r3, #4]
 800a378:	683a      	ldr	r2, [r7, #0]
 800a37a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800a37c:	683b      	ldr	r3, [r7, #0]
 800a37e:	68fa      	ldr	r2, [r7, #12]
 800a380:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800a382:	68fb      	ldr	r3, [r7, #12]
 800a384:	683a      	ldr	r2, [r7, #0]
 800a386:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800a388:	683b      	ldr	r3, [r7, #0]
 800a38a:	687a      	ldr	r2, [r7, #4]
 800a38c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800a38e:	687b      	ldr	r3, [r7, #4]
 800a390:	681b      	ldr	r3, [r3, #0]
 800a392:	1c5a      	adds	r2, r3, #1
 800a394:	687b      	ldr	r3, [r7, #4]
 800a396:	601a      	str	r2, [r3, #0]
}
 800a398:	bf00      	nop
 800a39a:	3714      	adds	r7, #20
 800a39c:	46bd      	mov	sp, r7
 800a39e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3a2:	4770      	bx	lr

0800a3a4 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800a3a4:	b480      	push	{r7}
 800a3a6:	b085      	sub	sp, #20
 800a3a8:	af00      	add	r7, sp, #0
 800a3aa:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800a3ac:	687b      	ldr	r3, [r7, #4]
 800a3ae:	691b      	ldr	r3, [r3, #16]
 800a3b0:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800a3b2:	687b      	ldr	r3, [r7, #4]
 800a3b4:	685b      	ldr	r3, [r3, #4]
 800a3b6:	687a      	ldr	r2, [r7, #4]
 800a3b8:	6892      	ldr	r2, [r2, #8]
 800a3ba:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800a3bc:	687b      	ldr	r3, [r7, #4]
 800a3be:	689b      	ldr	r3, [r3, #8]
 800a3c0:	687a      	ldr	r2, [r7, #4]
 800a3c2:	6852      	ldr	r2, [r2, #4]
 800a3c4:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800a3c6:	68fb      	ldr	r3, [r7, #12]
 800a3c8:	685b      	ldr	r3, [r3, #4]
 800a3ca:	687a      	ldr	r2, [r7, #4]
 800a3cc:	429a      	cmp	r2, r3
 800a3ce:	d103      	bne.n	800a3d8 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800a3d0:	687b      	ldr	r3, [r7, #4]
 800a3d2:	689a      	ldr	r2, [r3, #8]
 800a3d4:	68fb      	ldr	r3, [r7, #12]
 800a3d6:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800a3d8:	687b      	ldr	r3, [r7, #4]
 800a3da:	2200      	movs	r2, #0
 800a3dc:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800a3de:	68fb      	ldr	r3, [r7, #12]
 800a3e0:	681b      	ldr	r3, [r3, #0]
 800a3e2:	1e5a      	subs	r2, r3, #1
 800a3e4:	68fb      	ldr	r3, [r7, #12]
 800a3e6:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800a3e8:	68fb      	ldr	r3, [r7, #12]
 800a3ea:	681b      	ldr	r3, [r3, #0]
}
 800a3ec:	4618      	mov	r0, r3
 800a3ee:	3714      	adds	r7, #20
 800a3f0:	46bd      	mov	sp, r7
 800a3f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3f6:	4770      	bx	lr

0800a3f8 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800a3f8:	b580      	push	{r7, lr}
 800a3fa:	b084      	sub	sp, #16
 800a3fc:	af00      	add	r7, sp, #0
 800a3fe:	6078      	str	r0, [r7, #4]
 800a400:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800a402:	687b      	ldr	r3, [r7, #4]
 800a404:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800a406:	68fb      	ldr	r3, [r7, #12]
 800a408:	2b00      	cmp	r3, #0
 800a40a:	d10a      	bne.n	800a422 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800a40c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a410:	f383 8811 	msr	BASEPRI, r3
 800a414:	f3bf 8f6f 	isb	sy
 800a418:	f3bf 8f4f 	dsb	sy
 800a41c:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800a41e:	bf00      	nop
 800a420:	e7fe      	b.n	800a420 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800a422:	f002 f887 	bl	800c534 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800a426:	68fb      	ldr	r3, [r7, #12]
 800a428:	681a      	ldr	r2, [r3, #0]
 800a42a:	68fb      	ldr	r3, [r7, #12]
 800a42c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a42e:	68f9      	ldr	r1, [r7, #12]
 800a430:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800a432:	fb01 f303 	mul.w	r3, r1, r3
 800a436:	441a      	add	r2, r3
 800a438:	68fb      	ldr	r3, [r7, #12]
 800a43a:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800a43c:	68fb      	ldr	r3, [r7, #12]
 800a43e:	2200      	movs	r2, #0
 800a440:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800a442:	68fb      	ldr	r3, [r7, #12]
 800a444:	681a      	ldr	r2, [r3, #0]
 800a446:	68fb      	ldr	r3, [r7, #12]
 800a448:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800a44a:	68fb      	ldr	r3, [r7, #12]
 800a44c:	681a      	ldr	r2, [r3, #0]
 800a44e:	68fb      	ldr	r3, [r7, #12]
 800a450:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a452:	3b01      	subs	r3, #1
 800a454:	68f9      	ldr	r1, [r7, #12]
 800a456:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800a458:	fb01 f303 	mul.w	r3, r1, r3
 800a45c:	441a      	add	r2, r3
 800a45e:	68fb      	ldr	r3, [r7, #12]
 800a460:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800a462:	68fb      	ldr	r3, [r7, #12]
 800a464:	22ff      	movs	r2, #255	; 0xff
 800a466:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800a46a:	68fb      	ldr	r3, [r7, #12]
 800a46c:	22ff      	movs	r2, #255	; 0xff
 800a46e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800a472:	683b      	ldr	r3, [r7, #0]
 800a474:	2b00      	cmp	r3, #0
 800a476:	d114      	bne.n	800a4a2 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a478:	68fb      	ldr	r3, [r7, #12]
 800a47a:	691b      	ldr	r3, [r3, #16]
 800a47c:	2b00      	cmp	r3, #0
 800a47e:	d01a      	beq.n	800a4b6 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a480:	68fb      	ldr	r3, [r7, #12]
 800a482:	3310      	adds	r3, #16
 800a484:	4618      	mov	r0, r3
 800a486:	f001 f903 	bl	800b690 <xTaskRemoveFromEventList>
 800a48a:	4603      	mov	r3, r0
 800a48c:	2b00      	cmp	r3, #0
 800a48e:	d012      	beq.n	800a4b6 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800a490:	4b0c      	ldr	r3, [pc, #48]	; (800a4c4 <xQueueGenericReset+0xcc>)
 800a492:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a496:	601a      	str	r2, [r3, #0]
 800a498:	f3bf 8f4f 	dsb	sy
 800a49c:	f3bf 8f6f 	isb	sy
 800a4a0:	e009      	b.n	800a4b6 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800a4a2:	68fb      	ldr	r3, [r7, #12]
 800a4a4:	3310      	adds	r3, #16
 800a4a6:	4618      	mov	r0, r3
 800a4a8:	f7ff fef2 	bl	800a290 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800a4ac:	68fb      	ldr	r3, [r7, #12]
 800a4ae:	3324      	adds	r3, #36	; 0x24
 800a4b0:	4618      	mov	r0, r3
 800a4b2:	f7ff feed 	bl	800a290 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800a4b6:	f002 f86d 	bl	800c594 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800a4ba:	2301      	movs	r3, #1
}
 800a4bc:	4618      	mov	r0, r3
 800a4be:	3710      	adds	r7, #16
 800a4c0:	46bd      	mov	sp, r7
 800a4c2:	bd80      	pop	{r7, pc}
 800a4c4:	e000ed04 	.word	0xe000ed04

0800a4c8 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800a4c8:	b580      	push	{r7, lr}
 800a4ca:	b08e      	sub	sp, #56	; 0x38
 800a4cc:	af02      	add	r7, sp, #8
 800a4ce:	60f8      	str	r0, [r7, #12]
 800a4d0:	60b9      	str	r1, [r7, #8]
 800a4d2:	607a      	str	r2, [r7, #4]
 800a4d4:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800a4d6:	68fb      	ldr	r3, [r7, #12]
 800a4d8:	2b00      	cmp	r3, #0
 800a4da:	d10a      	bne.n	800a4f2 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800a4dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a4e0:	f383 8811 	msr	BASEPRI, r3
 800a4e4:	f3bf 8f6f 	isb	sy
 800a4e8:	f3bf 8f4f 	dsb	sy
 800a4ec:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800a4ee:	bf00      	nop
 800a4f0:	e7fe      	b.n	800a4f0 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800a4f2:	683b      	ldr	r3, [r7, #0]
 800a4f4:	2b00      	cmp	r3, #0
 800a4f6:	d10a      	bne.n	800a50e <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800a4f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a4fc:	f383 8811 	msr	BASEPRI, r3
 800a500:	f3bf 8f6f 	isb	sy
 800a504:	f3bf 8f4f 	dsb	sy
 800a508:	627b      	str	r3, [r7, #36]	; 0x24
}
 800a50a:	bf00      	nop
 800a50c:	e7fe      	b.n	800a50c <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800a50e:	687b      	ldr	r3, [r7, #4]
 800a510:	2b00      	cmp	r3, #0
 800a512:	d002      	beq.n	800a51a <xQueueGenericCreateStatic+0x52>
 800a514:	68bb      	ldr	r3, [r7, #8]
 800a516:	2b00      	cmp	r3, #0
 800a518:	d001      	beq.n	800a51e <xQueueGenericCreateStatic+0x56>
 800a51a:	2301      	movs	r3, #1
 800a51c:	e000      	b.n	800a520 <xQueueGenericCreateStatic+0x58>
 800a51e:	2300      	movs	r3, #0
 800a520:	2b00      	cmp	r3, #0
 800a522:	d10a      	bne.n	800a53a <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800a524:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a528:	f383 8811 	msr	BASEPRI, r3
 800a52c:	f3bf 8f6f 	isb	sy
 800a530:	f3bf 8f4f 	dsb	sy
 800a534:	623b      	str	r3, [r7, #32]
}
 800a536:	bf00      	nop
 800a538:	e7fe      	b.n	800a538 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800a53a:	687b      	ldr	r3, [r7, #4]
 800a53c:	2b00      	cmp	r3, #0
 800a53e:	d102      	bne.n	800a546 <xQueueGenericCreateStatic+0x7e>
 800a540:	68bb      	ldr	r3, [r7, #8]
 800a542:	2b00      	cmp	r3, #0
 800a544:	d101      	bne.n	800a54a <xQueueGenericCreateStatic+0x82>
 800a546:	2301      	movs	r3, #1
 800a548:	e000      	b.n	800a54c <xQueueGenericCreateStatic+0x84>
 800a54a:	2300      	movs	r3, #0
 800a54c:	2b00      	cmp	r3, #0
 800a54e:	d10a      	bne.n	800a566 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800a550:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a554:	f383 8811 	msr	BASEPRI, r3
 800a558:	f3bf 8f6f 	isb	sy
 800a55c:	f3bf 8f4f 	dsb	sy
 800a560:	61fb      	str	r3, [r7, #28]
}
 800a562:	bf00      	nop
 800a564:	e7fe      	b.n	800a564 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800a566:	2350      	movs	r3, #80	; 0x50
 800a568:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800a56a:	697b      	ldr	r3, [r7, #20]
 800a56c:	2b50      	cmp	r3, #80	; 0x50
 800a56e:	d00a      	beq.n	800a586 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800a570:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a574:	f383 8811 	msr	BASEPRI, r3
 800a578:	f3bf 8f6f 	isb	sy
 800a57c:	f3bf 8f4f 	dsb	sy
 800a580:	61bb      	str	r3, [r7, #24]
}
 800a582:	bf00      	nop
 800a584:	e7fe      	b.n	800a584 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800a586:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800a588:	683b      	ldr	r3, [r7, #0]
 800a58a:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800a58c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a58e:	2b00      	cmp	r3, #0
 800a590:	d00d      	beq.n	800a5ae <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800a592:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a594:	2201      	movs	r2, #1
 800a596:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800a59a:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800a59e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a5a0:	9300      	str	r3, [sp, #0]
 800a5a2:	4613      	mov	r3, r2
 800a5a4:	687a      	ldr	r2, [r7, #4]
 800a5a6:	68b9      	ldr	r1, [r7, #8]
 800a5a8:	68f8      	ldr	r0, [r7, #12]
 800a5aa:	f000 f805 	bl	800a5b8 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800a5ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800a5b0:	4618      	mov	r0, r3
 800a5b2:	3730      	adds	r7, #48	; 0x30
 800a5b4:	46bd      	mov	sp, r7
 800a5b6:	bd80      	pop	{r7, pc}

0800a5b8 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800a5b8:	b580      	push	{r7, lr}
 800a5ba:	b084      	sub	sp, #16
 800a5bc:	af00      	add	r7, sp, #0
 800a5be:	60f8      	str	r0, [r7, #12]
 800a5c0:	60b9      	str	r1, [r7, #8]
 800a5c2:	607a      	str	r2, [r7, #4]
 800a5c4:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800a5c6:	68bb      	ldr	r3, [r7, #8]
 800a5c8:	2b00      	cmp	r3, #0
 800a5ca:	d103      	bne.n	800a5d4 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800a5cc:	69bb      	ldr	r3, [r7, #24]
 800a5ce:	69ba      	ldr	r2, [r7, #24]
 800a5d0:	601a      	str	r2, [r3, #0]
 800a5d2:	e002      	b.n	800a5da <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800a5d4:	69bb      	ldr	r3, [r7, #24]
 800a5d6:	687a      	ldr	r2, [r7, #4]
 800a5d8:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800a5da:	69bb      	ldr	r3, [r7, #24]
 800a5dc:	68fa      	ldr	r2, [r7, #12]
 800a5de:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800a5e0:	69bb      	ldr	r3, [r7, #24]
 800a5e2:	68ba      	ldr	r2, [r7, #8]
 800a5e4:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800a5e6:	2101      	movs	r1, #1
 800a5e8:	69b8      	ldr	r0, [r7, #24]
 800a5ea:	f7ff ff05 	bl	800a3f8 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800a5ee:	69bb      	ldr	r3, [r7, #24]
 800a5f0:	78fa      	ldrb	r2, [r7, #3]
 800a5f2:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800a5f6:	bf00      	nop
 800a5f8:	3710      	adds	r7, #16
 800a5fa:	46bd      	mov	sp, r7
 800a5fc:	bd80      	pop	{r7, pc}
	...

0800a600 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800a600:	b580      	push	{r7, lr}
 800a602:	b08e      	sub	sp, #56	; 0x38
 800a604:	af00      	add	r7, sp, #0
 800a606:	60f8      	str	r0, [r7, #12]
 800a608:	60b9      	str	r1, [r7, #8]
 800a60a:	607a      	str	r2, [r7, #4]
 800a60c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800a60e:	2300      	movs	r3, #0
 800a610:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800a612:	68fb      	ldr	r3, [r7, #12]
 800a614:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800a616:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a618:	2b00      	cmp	r3, #0
 800a61a:	d10a      	bne.n	800a632 <xQueueGenericSend+0x32>
	__asm volatile
 800a61c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a620:	f383 8811 	msr	BASEPRI, r3
 800a624:	f3bf 8f6f 	isb	sy
 800a628:	f3bf 8f4f 	dsb	sy
 800a62c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800a62e:	bf00      	nop
 800a630:	e7fe      	b.n	800a630 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a632:	68bb      	ldr	r3, [r7, #8]
 800a634:	2b00      	cmp	r3, #0
 800a636:	d103      	bne.n	800a640 <xQueueGenericSend+0x40>
 800a638:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a63a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a63c:	2b00      	cmp	r3, #0
 800a63e:	d101      	bne.n	800a644 <xQueueGenericSend+0x44>
 800a640:	2301      	movs	r3, #1
 800a642:	e000      	b.n	800a646 <xQueueGenericSend+0x46>
 800a644:	2300      	movs	r3, #0
 800a646:	2b00      	cmp	r3, #0
 800a648:	d10a      	bne.n	800a660 <xQueueGenericSend+0x60>
	__asm volatile
 800a64a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a64e:	f383 8811 	msr	BASEPRI, r3
 800a652:	f3bf 8f6f 	isb	sy
 800a656:	f3bf 8f4f 	dsb	sy
 800a65a:	627b      	str	r3, [r7, #36]	; 0x24
}
 800a65c:	bf00      	nop
 800a65e:	e7fe      	b.n	800a65e <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800a660:	683b      	ldr	r3, [r7, #0]
 800a662:	2b02      	cmp	r3, #2
 800a664:	d103      	bne.n	800a66e <xQueueGenericSend+0x6e>
 800a666:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a668:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a66a:	2b01      	cmp	r3, #1
 800a66c:	d101      	bne.n	800a672 <xQueueGenericSend+0x72>
 800a66e:	2301      	movs	r3, #1
 800a670:	e000      	b.n	800a674 <xQueueGenericSend+0x74>
 800a672:	2300      	movs	r3, #0
 800a674:	2b00      	cmp	r3, #0
 800a676:	d10a      	bne.n	800a68e <xQueueGenericSend+0x8e>
	__asm volatile
 800a678:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a67c:	f383 8811 	msr	BASEPRI, r3
 800a680:	f3bf 8f6f 	isb	sy
 800a684:	f3bf 8f4f 	dsb	sy
 800a688:	623b      	str	r3, [r7, #32]
}
 800a68a:	bf00      	nop
 800a68c:	e7fe      	b.n	800a68c <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800a68e:	f001 f9f5 	bl	800ba7c <xTaskGetSchedulerState>
 800a692:	4603      	mov	r3, r0
 800a694:	2b00      	cmp	r3, #0
 800a696:	d102      	bne.n	800a69e <xQueueGenericSend+0x9e>
 800a698:	687b      	ldr	r3, [r7, #4]
 800a69a:	2b00      	cmp	r3, #0
 800a69c:	d101      	bne.n	800a6a2 <xQueueGenericSend+0xa2>
 800a69e:	2301      	movs	r3, #1
 800a6a0:	e000      	b.n	800a6a4 <xQueueGenericSend+0xa4>
 800a6a2:	2300      	movs	r3, #0
 800a6a4:	2b00      	cmp	r3, #0
 800a6a6:	d10a      	bne.n	800a6be <xQueueGenericSend+0xbe>
	__asm volatile
 800a6a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a6ac:	f383 8811 	msr	BASEPRI, r3
 800a6b0:	f3bf 8f6f 	isb	sy
 800a6b4:	f3bf 8f4f 	dsb	sy
 800a6b8:	61fb      	str	r3, [r7, #28]
}
 800a6ba:	bf00      	nop
 800a6bc:	e7fe      	b.n	800a6bc <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800a6be:	f001 ff39 	bl	800c534 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800a6c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a6c4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a6c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a6c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a6ca:	429a      	cmp	r2, r3
 800a6cc:	d302      	bcc.n	800a6d4 <xQueueGenericSend+0xd4>
 800a6ce:	683b      	ldr	r3, [r7, #0]
 800a6d0:	2b02      	cmp	r3, #2
 800a6d2:	d129      	bne.n	800a728 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800a6d4:	683a      	ldr	r2, [r7, #0]
 800a6d6:	68b9      	ldr	r1, [r7, #8]
 800a6d8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a6da:	f000 fa0b 	bl	800aaf4 <prvCopyDataToQueue>
 800a6de:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a6e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a6e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a6e4:	2b00      	cmp	r3, #0
 800a6e6:	d010      	beq.n	800a70a <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a6e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a6ea:	3324      	adds	r3, #36	; 0x24
 800a6ec:	4618      	mov	r0, r3
 800a6ee:	f000 ffcf 	bl	800b690 <xTaskRemoveFromEventList>
 800a6f2:	4603      	mov	r3, r0
 800a6f4:	2b00      	cmp	r3, #0
 800a6f6:	d013      	beq.n	800a720 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800a6f8:	4b3f      	ldr	r3, [pc, #252]	; (800a7f8 <xQueueGenericSend+0x1f8>)
 800a6fa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a6fe:	601a      	str	r2, [r3, #0]
 800a700:	f3bf 8f4f 	dsb	sy
 800a704:	f3bf 8f6f 	isb	sy
 800a708:	e00a      	b.n	800a720 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800a70a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a70c:	2b00      	cmp	r3, #0
 800a70e:	d007      	beq.n	800a720 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800a710:	4b39      	ldr	r3, [pc, #228]	; (800a7f8 <xQueueGenericSend+0x1f8>)
 800a712:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a716:	601a      	str	r2, [r3, #0]
 800a718:	f3bf 8f4f 	dsb	sy
 800a71c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800a720:	f001 ff38 	bl	800c594 <vPortExitCritical>
				return pdPASS;
 800a724:	2301      	movs	r3, #1
 800a726:	e063      	b.n	800a7f0 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800a728:	687b      	ldr	r3, [r7, #4]
 800a72a:	2b00      	cmp	r3, #0
 800a72c:	d103      	bne.n	800a736 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800a72e:	f001 ff31 	bl	800c594 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800a732:	2300      	movs	r3, #0
 800a734:	e05c      	b.n	800a7f0 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800a736:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a738:	2b00      	cmp	r3, #0
 800a73a:	d106      	bne.n	800a74a <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800a73c:	f107 0314 	add.w	r3, r7, #20
 800a740:	4618      	mov	r0, r3
 800a742:	f001 f809 	bl	800b758 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800a746:	2301      	movs	r3, #1
 800a748:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800a74a:	f001 ff23 	bl	800c594 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800a74e:	f000 fd7b 	bl	800b248 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800a752:	f001 feef 	bl	800c534 <vPortEnterCritical>
 800a756:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a758:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a75c:	b25b      	sxtb	r3, r3
 800a75e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a762:	d103      	bne.n	800a76c <xQueueGenericSend+0x16c>
 800a764:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a766:	2200      	movs	r2, #0
 800a768:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a76c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a76e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a772:	b25b      	sxtb	r3, r3
 800a774:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a778:	d103      	bne.n	800a782 <xQueueGenericSend+0x182>
 800a77a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a77c:	2200      	movs	r2, #0
 800a77e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a782:	f001 ff07 	bl	800c594 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800a786:	1d3a      	adds	r2, r7, #4
 800a788:	f107 0314 	add.w	r3, r7, #20
 800a78c:	4611      	mov	r1, r2
 800a78e:	4618      	mov	r0, r3
 800a790:	f000 fff8 	bl	800b784 <xTaskCheckForTimeOut>
 800a794:	4603      	mov	r3, r0
 800a796:	2b00      	cmp	r3, #0
 800a798:	d124      	bne.n	800a7e4 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800a79a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a79c:	f000 faa2 	bl	800ace4 <prvIsQueueFull>
 800a7a0:	4603      	mov	r3, r0
 800a7a2:	2b00      	cmp	r3, #0
 800a7a4:	d018      	beq.n	800a7d8 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800a7a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a7a8:	3310      	adds	r3, #16
 800a7aa:	687a      	ldr	r2, [r7, #4]
 800a7ac:	4611      	mov	r1, r2
 800a7ae:	4618      	mov	r0, r3
 800a7b0:	f000 ff1e 	bl	800b5f0 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800a7b4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a7b6:	f000 fa2d 	bl	800ac14 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800a7ba:	f000 fd53 	bl	800b264 <xTaskResumeAll>
 800a7be:	4603      	mov	r3, r0
 800a7c0:	2b00      	cmp	r3, #0
 800a7c2:	f47f af7c 	bne.w	800a6be <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800a7c6:	4b0c      	ldr	r3, [pc, #48]	; (800a7f8 <xQueueGenericSend+0x1f8>)
 800a7c8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a7cc:	601a      	str	r2, [r3, #0]
 800a7ce:	f3bf 8f4f 	dsb	sy
 800a7d2:	f3bf 8f6f 	isb	sy
 800a7d6:	e772      	b.n	800a6be <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800a7d8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a7da:	f000 fa1b 	bl	800ac14 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800a7de:	f000 fd41 	bl	800b264 <xTaskResumeAll>
 800a7e2:	e76c      	b.n	800a6be <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800a7e4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a7e6:	f000 fa15 	bl	800ac14 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800a7ea:	f000 fd3b 	bl	800b264 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800a7ee:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800a7f0:	4618      	mov	r0, r3
 800a7f2:	3738      	adds	r7, #56	; 0x38
 800a7f4:	46bd      	mov	sp, r7
 800a7f6:	bd80      	pop	{r7, pc}
 800a7f8:	e000ed04 	.word	0xe000ed04

0800a7fc <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800a7fc:	b580      	push	{r7, lr}
 800a7fe:	b090      	sub	sp, #64	; 0x40
 800a800:	af00      	add	r7, sp, #0
 800a802:	60f8      	str	r0, [r7, #12]
 800a804:	60b9      	str	r1, [r7, #8]
 800a806:	607a      	str	r2, [r7, #4]
 800a808:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800a80a:	68fb      	ldr	r3, [r7, #12]
 800a80c:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800a80e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a810:	2b00      	cmp	r3, #0
 800a812:	d10a      	bne.n	800a82a <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800a814:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a818:	f383 8811 	msr	BASEPRI, r3
 800a81c:	f3bf 8f6f 	isb	sy
 800a820:	f3bf 8f4f 	dsb	sy
 800a824:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800a826:	bf00      	nop
 800a828:	e7fe      	b.n	800a828 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a82a:	68bb      	ldr	r3, [r7, #8]
 800a82c:	2b00      	cmp	r3, #0
 800a82e:	d103      	bne.n	800a838 <xQueueGenericSendFromISR+0x3c>
 800a830:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a832:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a834:	2b00      	cmp	r3, #0
 800a836:	d101      	bne.n	800a83c <xQueueGenericSendFromISR+0x40>
 800a838:	2301      	movs	r3, #1
 800a83a:	e000      	b.n	800a83e <xQueueGenericSendFromISR+0x42>
 800a83c:	2300      	movs	r3, #0
 800a83e:	2b00      	cmp	r3, #0
 800a840:	d10a      	bne.n	800a858 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800a842:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a846:	f383 8811 	msr	BASEPRI, r3
 800a84a:	f3bf 8f6f 	isb	sy
 800a84e:	f3bf 8f4f 	dsb	sy
 800a852:	627b      	str	r3, [r7, #36]	; 0x24
}
 800a854:	bf00      	nop
 800a856:	e7fe      	b.n	800a856 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800a858:	683b      	ldr	r3, [r7, #0]
 800a85a:	2b02      	cmp	r3, #2
 800a85c:	d103      	bne.n	800a866 <xQueueGenericSendFromISR+0x6a>
 800a85e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a860:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a862:	2b01      	cmp	r3, #1
 800a864:	d101      	bne.n	800a86a <xQueueGenericSendFromISR+0x6e>
 800a866:	2301      	movs	r3, #1
 800a868:	e000      	b.n	800a86c <xQueueGenericSendFromISR+0x70>
 800a86a:	2300      	movs	r3, #0
 800a86c:	2b00      	cmp	r3, #0
 800a86e:	d10a      	bne.n	800a886 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800a870:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a874:	f383 8811 	msr	BASEPRI, r3
 800a878:	f3bf 8f6f 	isb	sy
 800a87c:	f3bf 8f4f 	dsb	sy
 800a880:	623b      	str	r3, [r7, #32]
}
 800a882:	bf00      	nop
 800a884:	e7fe      	b.n	800a884 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800a886:	f001 ff37 	bl	800c6f8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800a88a:	f3ef 8211 	mrs	r2, BASEPRI
 800a88e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a892:	f383 8811 	msr	BASEPRI, r3
 800a896:	f3bf 8f6f 	isb	sy
 800a89a:	f3bf 8f4f 	dsb	sy
 800a89e:	61fa      	str	r2, [r7, #28]
 800a8a0:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800a8a2:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800a8a4:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800a8a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a8a8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a8aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a8ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a8ae:	429a      	cmp	r2, r3
 800a8b0:	d302      	bcc.n	800a8b8 <xQueueGenericSendFromISR+0xbc>
 800a8b2:	683b      	ldr	r3, [r7, #0]
 800a8b4:	2b02      	cmp	r3, #2
 800a8b6:	d12f      	bne.n	800a918 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800a8b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a8ba:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a8be:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a8c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a8c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a8c6:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800a8c8:	683a      	ldr	r2, [r7, #0]
 800a8ca:	68b9      	ldr	r1, [r7, #8]
 800a8cc:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800a8ce:	f000 f911 	bl	800aaf4 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800a8d2:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800a8d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a8da:	d112      	bne.n	800a902 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a8dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a8de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a8e0:	2b00      	cmp	r3, #0
 800a8e2:	d016      	beq.n	800a912 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a8e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a8e6:	3324      	adds	r3, #36	; 0x24
 800a8e8:	4618      	mov	r0, r3
 800a8ea:	f000 fed1 	bl	800b690 <xTaskRemoveFromEventList>
 800a8ee:	4603      	mov	r3, r0
 800a8f0:	2b00      	cmp	r3, #0
 800a8f2:	d00e      	beq.n	800a912 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800a8f4:	687b      	ldr	r3, [r7, #4]
 800a8f6:	2b00      	cmp	r3, #0
 800a8f8:	d00b      	beq.n	800a912 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800a8fa:	687b      	ldr	r3, [r7, #4]
 800a8fc:	2201      	movs	r2, #1
 800a8fe:	601a      	str	r2, [r3, #0]
 800a900:	e007      	b.n	800a912 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800a902:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800a906:	3301      	adds	r3, #1
 800a908:	b2db      	uxtb	r3, r3
 800a90a:	b25a      	sxtb	r2, r3
 800a90c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a90e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800a912:	2301      	movs	r3, #1
 800a914:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800a916:	e001      	b.n	800a91c <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800a918:	2300      	movs	r3, #0
 800a91a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a91c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a91e:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800a920:	697b      	ldr	r3, [r7, #20]
 800a922:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800a926:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800a928:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800a92a:	4618      	mov	r0, r3
 800a92c:	3740      	adds	r7, #64	; 0x40
 800a92e:	46bd      	mov	sp, r7
 800a930:	bd80      	pop	{r7, pc}
	...

0800a934 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800a934:	b580      	push	{r7, lr}
 800a936:	b08c      	sub	sp, #48	; 0x30
 800a938:	af00      	add	r7, sp, #0
 800a93a:	60f8      	str	r0, [r7, #12]
 800a93c:	60b9      	str	r1, [r7, #8]
 800a93e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800a940:	2300      	movs	r3, #0
 800a942:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800a944:	68fb      	ldr	r3, [r7, #12]
 800a946:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800a948:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a94a:	2b00      	cmp	r3, #0
 800a94c:	d10a      	bne.n	800a964 <xQueueReceive+0x30>
	__asm volatile
 800a94e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a952:	f383 8811 	msr	BASEPRI, r3
 800a956:	f3bf 8f6f 	isb	sy
 800a95a:	f3bf 8f4f 	dsb	sy
 800a95e:	623b      	str	r3, [r7, #32]
}
 800a960:	bf00      	nop
 800a962:	e7fe      	b.n	800a962 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a964:	68bb      	ldr	r3, [r7, #8]
 800a966:	2b00      	cmp	r3, #0
 800a968:	d103      	bne.n	800a972 <xQueueReceive+0x3e>
 800a96a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a96c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a96e:	2b00      	cmp	r3, #0
 800a970:	d101      	bne.n	800a976 <xQueueReceive+0x42>
 800a972:	2301      	movs	r3, #1
 800a974:	e000      	b.n	800a978 <xQueueReceive+0x44>
 800a976:	2300      	movs	r3, #0
 800a978:	2b00      	cmp	r3, #0
 800a97a:	d10a      	bne.n	800a992 <xQueueReceive+0x5e>
	__asm volatile
 800a97c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a980:	f383 8811 	msr	BASEPRI, r3
 800a984:	f3bf 8f6f 	isb	sy
 800a988:	f3bf 8f4f 	dsb	sy
 800a98c:	61fb      	str	r3, [r7, #28]
}
 800a98e:	bf00      	nop
 800a990:	e7fe      	b.n	800a990 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800a992:	f001 f873 	bl	800ba7c <xTaskGetSchedulerState>
 800a996:	4603      	mov	r3, r0
 800a998:	2b00      	cmp	r3, #0
 800a99a:	d102      	bne.n	800a9a2 <xQueueReceive+0x6e>
 800a99c:	687b      	ldr	r3, [r7, #4]
 800a99e:	2b00      	cmp	r3, #0
 800a9a0:	d101      	bne.n	800a9a6 <xQueueReceive+0x72>
 800a9a2:	2301      	movs	r3, #1
 800a9a4:	e000      	b.n	800a9a8 <xQueueReceive+0x74>
 800a9a6:	2300      	movs	r3, #0
 800a9a8:	2b00      	cmp	r3, #0
 800a9aa:	d10a      	bne.n	800a9c2 <xQueueReceive+0x8e>
	__asm volatile
 800a9ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a9b0:	f383 8811 	msr	BASEPRI, r3
 800a9b4:	f3bf 8f6f 	isb	sy
 800a9b8:	f3bf 8f4f 	dsb	sy
 800a9bc:	61bb      	str	r3, [r7, #24]
}
 800a9be:	bf00      	nop
 800a9c0:	e7fe      	b.n	800a9c0 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800a9c2:	f001 fdb7 	bl	800c534 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a9c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a9c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a9ca:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800a9cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a9ce:	2b00      	cmp	r3, #0
 800a9d0:	d01f      	beq.n	800aa12 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800a9d2:	68b9      	ldr	r1, [r7, #8]
 800a9d4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a9d6:	f000 f8f7 	bl	800abc8 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800a9da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a9dc:	1e5a      	subs	r2, r3, #1
 800a9de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a9e0:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a9e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a9e4:	691b      	ldr	r3, [r3, #16]
 800a9e6:	2b00      	cmp	r3, #0
 800a9e8:	d00f      	beq.n	800aa0a <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a9ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a9ec:	3310      	adds	r3, #16
 800a9ee:	4618      	mov	r0, r3
 800a9f0:	f000 fe4e 	bl	800b690 <xTaskRemoveFromEventList>
 800a9f4:	4603      	mov	r3, r0
 800a9f6:	2b00      	cmp	r3, #0
 800a9f8:	d007      	beq.n	800aa0a <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800a9fa:	4b3d      	ldr	r3, [pc, #244]	; (800aaf0 <xQueueReceive+0x1bc>)
 800a9fc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800aa00:	601a      	str	r2, [r3, #0]
 800aa02:	f3bf 8f4f 	dsb	sy
 800aa06:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800aa0a:	f001 fdc3 	bl	800c594 <vPortExitCritical>
				return pdPASS;
 800aa0e:	2301      	movs	r3, #1
 800aa10:	e069      	b.n	800aae6 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800aa12:	687b      	ldr	r3, [r7, #4]
 800aa14:	2b00      	cmp	r3, #0
 800aa16:	d103      	bne.n	800aa20 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800aa18:	f001 fdbc 	bl	800c594 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800aa1c:	2300      	movs	r3, #0
 800aa1e:	e062      	b.n	800aae6 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800aa20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aa22:	2b00      	cmp	r3, #0
 800aa24:	d106      	bne.n	800aa34 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800aa26:	f107 0310 	add.w	r3, r7, #16
 800aa2a:	4618      	mov	r0, r3
 800aa2c:	f000 fe94 	bl	800b758 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800aa30:	2301      	movs	r3, #1
 800aa32:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800aa34:	f001 fdae 	bl	800c594 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800aa38:	f000 fc06 	bl	800b248 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800aa3c:	f001 fd7a 	bl	800c534 <vPortEnterCritical>
 800aa40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aa42:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800aa46:	b25b      	sxtb	r3, r3
 800aa48:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aa4c:	d103      	bne.n	800aa56 <xQueueReceive+0x122>
 800aa4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aa50:	2200      	movs	r2, #0
 800aa52:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800aa56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aa58:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800aa5c:	b25b      	sxtb	r3, r3
 800aa5e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aa62:	d103      	bne.n	800aa6c <xQueueReceive+0x138>
 800aa64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aa66:	2200      	movs	r2, #0
 800aa68:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800aa6c:	f001 fd92 	bl	800c594 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800aa70:	1d3a      	adds	r2, r7, #4
 800aa72:	f107 0310 	add.w	r3, r7, #16
 800aa76:	4611      	mov	r1, r2
 800aa78:	4618      	mov	r0, r3
 800aa7a:	f000 fe83 	bl	800b784 <xTaskCheckForTimeOut>
 800aa7e:	4603      	mov	r3, r0
 800aa80:	2b00      	cmp	r3, #0
 800aa82:	d123      	bne.n	800aacc <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800aa84:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800aa86:	f000 f917 	bl	800acb8 <prvIsQueueEmpty>
 800aa8a:	4603      	mov	r3, r0
 800aa8c:	2b00      	cmp	r3, #0
 800aa8e:	d017      	beq.n	800aac0 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800aa90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aa92:	3324      	adds	r3, #36	; 0x24
 800aa94:	687a      	ldr	r2, [r7, #4]
 800aa96:	4611      	mov	r1, r2
 800aa98:	4618      	mov	r0, r3
 800aa9a:	f000 fda9 	bl	800b5f0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800aa9e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800aaa0:	f000 f8b8 	bl	800ac14 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800aaa4:	f000 fbde 	bl	800b264 <xTaskResumeAll>
 800aaa8:	4603      	mov	r3, r0
 800aaaa:	2b00      	cmp	r3, #0
 800aaac:	d189      	bne.n	800a9c2 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800aaae:	4b10      	ldr	r3, [pc, #64]	; (800aaf0 <xQueueReceive+0x1bc>)
 800aab0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800aab4:	601a      	str	r2, [r3, #0]
 800aab6:	f3bf 8f4f 	dsb	sy
 800aaba:	f3bf 8f6f 	isb	sy
 800aabe:	e780      	b.n	800a9c2 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800aac0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800aac2:	f000 f8a7 	bl	800ac14 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800aac6:	f000 fbcd 	bl	800b264 <xTaskResumeAll>
 800aaca:	e77a      	b.n	800a9c2 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800aacc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800aace:	f000 f8a1 	bl	800ac14 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800aad2:	f000 fbc7 	bl	800b264 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800aad6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800aad8:	f000 f8ee 	bl	800acb8 <prvIsQueueEmpty>
 800aadc:	4603      	mov	r3, r0
 800aade:	2b00      	cmp	r3, #0
 800aae0:	f43f af6f 	beq.w	800a9c2 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800aae4:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800aae6:	4618      	mov	r0, r3
 800aae8:	3730      	adds	r7, #48	; 0x30
 800aaea:	46bd      	mov	sp, r7
 800aaec:	bd80      	pop	{r7, pc}
 800aaee:	bf00      	nop
 800aaf0:	e000ed04 	.word	0xe000ed04

0800aaf4 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800aaf4:	b580      	push	{r7, lr}
 800aaf6:	b086      	sub	sp, #24
 800aaf8:	af00      	add	r7, sp, #0
 800aafa:	60f8      	str	r0, [r7, #12]
 800aafc:	60b9      	str	r1, [r7, #8]
 800aafe:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800ab00:	2300      	movs	r3, #0
 800ab02:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800ab04:	68fb      	ldr	r3, [r7, #12]
 800ab06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ab08:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800ab0a:	68fb      	ldr	r3, [r7, #12]
 800ab0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ab0e:	2b00      	cmp	r3, #0
 800ab10:	d10d      	bne.n	800ab2e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800ab12:	68fb      	ldr	r3, [r7, #12]
 800ab14:	681b      	ldr	r3, [r3, #0]
 800ab16:	2b00      	cmp	r3, #0
 800ab18:	d14d      	bne.n	800abb6 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800ab1a:	68fb      	ldr	r3, [r7, #12]
 800ab1c:	689b      	ldr	r3, [r3, #8]
 800ab1e:	4618      	mov	r0, r3
 800ab20:	f000 ffca 	bl	800bab8 <xTaskPriorityDisinherit>
 800ab24:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800ab26:	68fb      	ldr	r3, [r7, #12]
 800ab28:	2200      	movs	r2, #0
 800ab2a:	609a      	str	r2, [r3, #8]
 800ab2c:	e043      	b.n	800abb6 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800ab2e:	687b      	ldr	r3, [r7, #4]
 800ab30:	2b00      	cmp	r3, #0
 800ab32:	d119      	bne.n	800ab68 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800ab34:	68fb      	ldr	r3, [r7, #12]
 800ab36:	6858      	ldr	r0, [r3, #4]
 800ab38:	68fb      	ldr	r3, [r7, #12]
 800ab3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ab3c:	461a      	mov	r2, r3
 800ab3e:	68b9      	ldr	r1, [r7, #8]
 800ab40:	f002 fa3e 	bl	800cfc0 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800ab44:	68fb      	ldr	r3, [r7, #12]
 800ab46:	685a      	ldr	r2, [r3, #4]
 800ab48:	68fb      	ldr	r3, [r7, #12]
 800ab4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ab4c:	441a      	add	r2, r3
 800ab4e:	68fb      	ldr	r3, [r7, #12]
 800ab50:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800ab52:	68fb      	ldr	r3, [r7, #12]
 800ab54:	685a      	ldr	r2, [r3, #4]
 800ab56:	68fb      	ldr	r3, [r7, #12]
 800ab58:	689b      	ldr	r3, [r3, #8]
 800ab5a:	429a      	cmp	r2, r3
 800ab5c:	d32b      	bcc.n	800abb6 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800ab5e:	68fb      	ldr	r3, [r7, #12]
 800ab60:	681a      	ldr	r2, [r3, #0]
 800ab62:	68fb      	ldr	r3, [r7, #12]
 800ab64:	605a      	str	r2, [r3, #4]
 800ab66:	e026      	b.n	800abb6 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800ab68:	68fb      	ldr	r3, [r7, #12]
 800ab6a:	68d8      	ldr	r0, [r3, #12]
 800ab6c:	68fb      	ldr	r3, [r7, #12]
 800ab6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ab70:	461a      	mov	r2, r3
 800ab72:	68b9      	ldr	r1, [r7, #8]
 800ab74:	f002 fa24 	bl	800cfc0 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800ab78:	68fb      	ldr	r3, [r7, #12]
 800ab7a:	68da      	ldr	r2, [r3, #12]
 800ab7c:	68fb      	ldr	r3, [r7, #12]
 800ab7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ab80:	425b      	negs	r3, r3
 800ab82:	441a      	add	r2, r3
 800ab84:	68fb      	ldr	r3, [r7, #12]
 800ab86:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800ab88:	68fb      	ldr	r3, [r7, #12]
 800ab8a:	68da      	ldr	r2, [r3, #12]
 800ab8c:	68fb      	ldr	r3, [r7, #12]
 800ab8e:	681b      	ldr	r3, [r3, #0]
 800ab90:	429a      	cmp	r2, r3
 800ab92:	d207      	bcs.n	800aba4 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800ab94:	68fb      	ldr	r3, [r7, #12]
 800ab96:	689a      	ldr	r2, [r3, #8]
 800ab98:	68fb      	ldr	r3, [r7, #12]
 800ab9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ab9c:	425b      	negs	r3, r3
 800ab9e:	441a      	add	r2, r3
 800aba0:	68fb      	ldr	r3, [r7, #12]
 800aba2:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800aba4:	687b      	ldr	r3, [r7, #4]
 800aba6:	2b02      	cmp	r3, #2
 800aba8:	d105      	bne.n	800abb6 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800abaa:	693b      	ldr	r3, [r7, #16]
 800abac:	2b00      	cmp	r3, #0
 800abae:	d002      	beq.n	800abb6 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800abb0:	693b      	ldr	r3, [r7, #16]
 800abb2:	3b01      	subs	r3, #1
 800abb4:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800abb6:	693b      	ldr	r3, [r7, #16]
 800abb8:	1c5a      	adds	r2, r3, #1
 800abba:	68fb      	ldr	r3, [r7, #12]
 800abbc:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800abbe:	697b      	ldr	r3, [r7, #20]
}
 800abc0:	4618      	mov	r0, r3
 800abc2:	3718      	adds	r7, #24
 800abc4:	46bd      	mov	sp, r7
 800abc6:	bd80      	pop	{r7, pc}

0800abc8 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800abc8:	b580      	push	{r7, lr}
 800abca:	b082      	sub	sp, #8
 800abcc:	af00      	add	r7, sp, #0
 800abce:	6078      	str	r0, [r7, #4]
 800abd0:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800abd2:	687b      	ldr	r3, [r7, #4]
 800abd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800abd6:	2b00      	cmp	r3, #0
 800abd8:	d018      	beq.n	800ac0c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800abda:	687b      	ldr	r3, [r7, #4]
 800abdc:	68da      	ldr	r2, [r3, #12]
 800abde:	687b      	ldr	r3, [r7, #4]
 800abe0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800abe2:	441a      	add	r2, r3
 800abe4:	687b      	ldr	r3, [r7, #4]
 800abe6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800abe8:	687b      	ldr	r3, [r7, #4]
 800abea:	68da      	ldr	r2, [r3, #12]
 800abec:	687b      	ldr	r3, [r7, #4]
 800abee:	689b      	ldr	r3, [r3, #8]
 800abf0:	429a      	cmp	r2, r3
 800abf2:	d303      	bcc.n	800abfc <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800abf4:	687b      	ldr	r3, [r7, #4]
 800abf6:	681a      	ldr	r2, [r3, #0]
 800abf8:	687b      	ldr	r3, [r7, #4]
 800abfa:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800abfc:	687b      	ldr	r3, [r7, #4]
 800abfe:	68d9      	ldr	r1, [r3, #12]
 800ac00:	687b      	ldr	r3, [r7, #4]
 800ac02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ac04:	461a      	mov	r2, r3
 800ac06:	6838      	ldr	r0, [r7, #0]
 800ac08:	f002 f9da 	bl	800cfc0 <memcpy>
	}
}
 800ac0c:	bf00      	nop
 800ac0e:	3708      	adds	r7, #8
 800ac10:	46bd      	mov	sp, r7
 800ac12:	bd80      	pop	{r7, pc}

0800ac14 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800ac14:	b580      	push	{r7, lr}
 800ac16:	b084      	sub	sp, #16
 800ac18:	af00      	add	r7, sp, #0
 800ac1a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800ac1c:	f001 fc8a 	bl	800c534 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800ac20:	687b      	ldr	r3, [r7, #4]
 800ac22:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800ac26:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800ac28:	e011      	b.n	800ac4e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800ac2a:	687b      	ldr	r3, [r7, #4]
 800ac2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ac2e:	2b00      	cmp	r3, #0
 800ac30:	d012      	beq.n	800ac58 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800ac32:	687b      	ldr	r3, [r7, #4]
 800ac34:	3324      	adds	r3, #36	; 0x24
 800ac36:	4618      	mov	r0, r3
 800ac38:	f000 fd2a 	bl	800b690 <xTaskRemoveFromEventList>
 800ac3c:	4603      	mov	r3, r0
 800ac3e:	2b00      	cmp	r3, #0
 800ac40:	d001      	beq.n	800ac46 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800ac42:	f000 fe01 	bl	800b848 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800ac46:	7bfb      	ldrb	r3, [r7, #15]
 800ac48:	3b01      	subs	r3, #1
 800ac4a:	b2db      	uxtb	r3, r3
 800ac4c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800ac4e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ac52:	2b00      	cmp	r3, #0
 800ac54:	dce9      	bgt.n	800ac2a <prvUnlockQueue+0x16>
 800ac56:	e000      	b.n	800ac5a <prvUnlockQueue+0x46>
					break;
 800ac58:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800ac5a:	687b      	ldr	r3, [r7, #4]
 800ac5c:	22ff      	movs	r2, #255	; 0xff
 800ac5e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800ac62:	f001 fc97 	bl	800c594 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800ac66:	f001 fc65 	bl	800c534 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800ac6a:	687b      	ldr	r3, [r7, #4]
 800ac6c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800ac70:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800ac72:	e011      	b.n	800ac98 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800ac74:	687b      	ldr	r3, [r7, #4]
 800ac76:	691b      	ldr	r3, [r3, #16]
 800ac78:	2b00      	cmp	r3, #0
 800ac7a:	d012      	beq.n	800aca2 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800ac7c:	687b      	ldr	r3, [r7, #4]
 800ac7e:	3310      	adds	r3, #16
 800ac80:	4618      	mov	r0, r3
 800ac82:	f000 fd05 	bl	800b690 <xTaskRemoveFromEventList>
 800ac86:	4603      	mov	r3, r0
 800ac88:	2b00      	cmp	r3, #0
 800ac8a:	d001      	beq.n	800ac90 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800ac8c:	f000 fddc 	bl	800b848 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800ac90:	7bbb      	ldrb	r3, [r7, #14]
 800ac92:	3b01      	subs	r3, #1
 800ac94:	b2db      	uxtb	r3, r3
 800ac96:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800ac98:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800ac9c:	2b00      	cmp	r3, #0
 800ac9e:	dce9      	bgt.n	800ac74 <prvUnlockQueue+0x60>
 800aca0:	e000      	b.n	800aca4 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800aca2:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800aca4:	687b      	ldr	r3, [r7, #4]
 800aca6:	22ff      	movs	r2, #255	; 0xff
 800aca8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800acac:	f001 fc72 	bl	800c594 <vPortExitCritical>
}
 800acb0:	bf00      	nop
 800acb2:	3710      	adds	r7, #16
 800acb4:	46bd      	mov	sp, r7
 800acb6:	bd80      	pop	{r7, pc}

0800acb8 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800acb8:	b580      	push	{r7, lr}
 800acba:	b084      	sub	sp, #16
 800acbc:	af00      	add	r7, sp, #0
 800acbe:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800acc0:	f001 fc38 	bl	800c534 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800acc4:	687b      	ldr	r3, [r7, #4]
 800acc6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800acc8:	2b00      	cmp	r3, #0
 800acca:	d102      	bne.n	800acd2 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800accc:	2301      	movs	r3, #1
 800acce:	60fb      	str	r3, [r7, #12]
 800acd0:	e001      	b.n	800acd6 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800acd2:	2300      	movs	r3, #0
 800acd4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800acd6:	f001 fc5d 	bl	800c594 <vPortExitCritical>

	return xReturn;
 800acda:	68fb      	ldr	r3, [r7, #12]
}
 800acdc:	4618      	mov	r0, r3
 800acde:	3710      	adds	r7, #16
 800ace0:	46bd      	mov	sp, r7
 800ace2:	bd80      	pop	{r7, pc}

0800ace4 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800ace4:	b580      	push	{r7, lr}
 800ace6:	b084      	sub	sp, #16
 800ace8:	af00      	add	r7, sp, #0
 800acea:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800acec:	f001 fc22 	bl	800c534 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800acf0:	687b      	ldr	r3, [r7, #4]
 800acf2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800acf4:	687b      	ldr	r3, [r7, #4]
 800acf6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800acf8:	429a      	cmp	r2, r3
 800acfa:	d102      	bne.n	800ad02 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800acfc:	2301      	movs	r3, #1
 800acfe:	60fb      	str	r3, [r7, #12]
 800ad00:	e001      	b.n	800ad06 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800ad02:	2300      	movs	r3, #0
 800ad04:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800ad06:	f001 fc45 	bl	800c594 <vPortExitCritical>

	return xReturn;
 800ad0a:	68fb      	ldr	r3, [r7, #12]
}
 800ad0c:	4618      	mov	r0, r3
 800ad0e:	3710      	adds	r7, #16
 800ad10:	46bd      	mov	sp, r7
 800ad12:	bd80      	pop	{r7, pc}

0800ad14 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800ad14:	b480      	push	{r7}
 800ad16:	b085      	sub	sp, #20
 800ad18:	af00      	add	r7, sp, #0
 800ad1a:	6078      	str	r0, [r7, #4]
 800ad1c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800ad1e:	2300      	movs	r3, #0
 800ad20:	60fb      	str	r3, [r7, #12]
 800ad22:	e014      	b.n	800ad4e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800ad24:	4a0f      	ldr	r2, [pc, #60]	; (800ad64 <vQueueAddToRegistry+0x50>)
 800ad26:	68fb      	ldr	r3, [r7, #12]
 800ad28:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800ad2c:	2b00      	cmp	r3, #0
 800ad2e:	d10b      	bne.n	800ad48 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800ad30:	490c      	ldr	r1, [pc, #48]	; (800ad64 <vQueueAddToRegistry+0x50>)
 800ad32:	68fb      	ldr	r3, [r7, #12]
 800ad34:	683a      	ldr	r2, [r7, #0]
 800ad36:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800ad3a:	4a0a      	ldr	r2, [pc, #40]	; (800ad64 <vQueueAddToRegistry+0x50>)
 800ad3c:	68fb      	ldr	r3, [r7, #12]
 800ad3e:	00db      	lsls	r3, r3, #3
 800ad40:	4413      	add	r3, r2
 800ad42:	687a      	ldr	r2, [r7, #4]
 800ad44:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800ad46:	e006      	b.n	800ad56 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800ad48:	68fb      	ldr	r3, [r7, #12]
 800ad4a:	3301      	adds	r3, #1
 800ad4c:	60fb      	str	r3, [r7, #12]
 800ad4e:	68fb      	ldr	r3, [r7, #12]
 800ad50:	2b07      	cmp	r3, #7
 800ad52:	d9e7      	bls.n	800ad24 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800ad54:	bf00      	nop
 800ad56:	bf00      	nop
 800ad58:	3714      	adds	r7, #20
 800ad5a:	46bd      	mov	sp, r7
 800ad5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad60:	4770      	bx	lr
 800ad62:	bf00      	nop
 800ad64:	20005010 	.word	0x20005010

0800ad68 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800ad68:	b580      	push	{r7, lr}
 800ad6a:	b086      	sub	sp, #24
 800ad6c:	af00      	add	r7, sp, #0
 800ad6e:	60f8      	str	r0, [r7, #12]
 800ad70:	60b9      	str	r1, [r7, #8]
 800ad72:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800ad74:	68fb      	ldr	r3, [r7, #12]
 800ad76:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800ad78:	f001 fbdc 	bl	800c534 <vPortEnterCritical>
 800ad7c:	697b      	ldr	r3, [r7, #20]
 800ad7e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800ad82:	b25b      	sxtb	r3, r3
 800ad84:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ad88:	d103      	bne.n	800ad92 <vQueueWaitForMessageRestricted+0x2a>
 800ad8a:	697b      	ldr	r3, [r7, #20]
 800ad8c:	2200      	movs	r2, #0
 800ad8e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800ad92:	697b      	ldr	r3, [r7, #20]
 800ad94:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800ad98:	b25b      	sxtb	r3, r3
 800ad9a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ad9e:	d103      	bne.n	800ada8 <vQueueWaitForMessageRestricted+0x40>
 800ada0:	697b      	ldr	r3, [r7, #20]
 800ada2:	2200      	movs	r2, #0
 800ada4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800ada8:	f001 fbf4 	bl	800c594 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800adac:	697b      	ldr	r3, [r7, #20]
 800adae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800adb0:	2b00      	cmp	r3, #0
 800adb2:	d106      	bne.n	800adc2 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800adb4:	697b      	ldr	r3, [r7, #20]
 800adb6:	3324      	adds	r3, #36	; 0x24
 800adb8:	687a      	ldr	r2, [r7, #4]
 800adba:	68b9      	ldr	r1, [r7, #8]
 800adbc:	4618      	mov	r0, r3
 800adbe:	f000 fc3b 	bl	800b638 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800adc2:	6978      	ldr	r0, [r7, #20]
 800adc4:	f7ff ff26 	bl	800ac14 <prvUnlockQueue>
	}
 800adc8:	bf00      	nop
 800adca:	3718      	adds	r7, #24
 800adcc:	46bd      	mov	sp, r7
 800adce:	bd80      	pop	{r7, pc}

0800add0 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800add0:	b580      	push	{r7, lr}
 800add2:	b08e      	sub	sp, #56	; 0x38
 800add4:	af04      	add	r7, sp, #16
 800add6:	60f8      	str	r0, [r7, #12]
 800add8:	60b9      	str	r1, [r7, #8]
 800adda:	607a      	str	r2, [r7, #4]
 800addc:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800adde:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ade0:	2b00      	cmp	r3, #0
 800ade2:	d10a      	bne.n	800adfa <xTaskCreateStatic+0x2a>
	__asm volatile
 800ade4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ade8:	f383 8811 	msr	BASEPRI, r3
 800adec:	f3bf 8f6f 	isb	sy
 800adf0:	f3bf 8f4f 	dsb	sy
 800adf4:	623b      	str	r3, [r7, #32]
}
 800adf6:	bf00      	nop
 800adf8:	e7fe      	b.n	800adf8 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800adfa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800adfc:	2b00      	cmp	r3, #0
 800adfe:	d10a      	bne.n	800ae16 <xTaskCreateStatic+0x46>
	__asm volatile
 800ae00:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ae04:	f383 8811 	msr	BASEPRI, r3
 800ae08:	f3bf 8f6f 	isb	sy
 800ae0c:	f3bf 8f4f 	dsb	sy
 800ae10:	61fb      	str	r3, [r7, #28]
}
 800ae12:	bf00      	nop
 800ae14:	e7fe      	b.n	800ae14 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800ae16:	235c      	movs	r3, #92	; 0x5c
 800ae18:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800ae1a:	693b      	ldr	r3, [r7, #16]
 800ae1c:	2b5c      	cmp	r3, #92	; 0x5c
 800ae1e:	d00a      	beq.n	800ae36 <xTaskCreateStatic+0x66>
	__asm volatile
 800ae20:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ae24:	f383 8811 	msr	BASEPRI, r3
 800ae28:	f3bf 8f6f 	isb	sy
 800ae2c:	f3bf 8f4f 	dsb	sy
 800ae30:	61bb      	str	r3, [r7, #24]
}
 800ae32:	bf00      	nop
 800ae34:	e7fe      	b.n	800ae34 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800ae36:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800ae38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ae3a:	2b00      	cmp	r3, #0
 800ae3c:	d01e      	beq.n	800ae7c <xTaskCreateStatic+0xac>
 800ae3e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ae40:	2b00      	cmp	r3, #0
 800ae42:	d01b      	beq.n	800ae7c <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800ae44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ae46:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800ae48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae4a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800ae4c:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800ae4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae50:	2202      	movs	r2, #2
 800ae52:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800ae56:	2300      	movs	r3, #0
 800ae58:	9303      	str	r3, [sp, #12]
 800ae5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae5c:	9302      	str	r3, [sp, #8]
 800ae5e:	f107 0314 	add.w	r3, r7, #20
 800ae62:	9301      	str	r3, [sp, #4]
 800ae64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae66:	9300      	str	r3, [sp, #0]
 800ae68:	683b      	ldr	r3, [r7, #0]
 800ae6a:	687a      	ldr	r2, [r7, #4]
 800ae6c:	68b9      	ldr	r1, [r7, #8]
 800ae6e:	68f8      	ldr	r0, [r7, #12]
 800ae70:	f000 f850 	bl	800af14 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800ae74:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800ae76:	f000 f8dd 	bl	800b034 <prvAddNewTaskToReadyList>
 800ae7a:	e001      	b.n	800ae80 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800ae7c:	2300      	movs	r3, #0
 800ae7e:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800ae80:	697b      	ldr	r3, [r7, #20]
	}
 800ae82:	4618      	mov	r0, r3
 800ae84:	3728      	adds	r7, #40	; 0x28
 800ae86:	46bd      	mov	sp, r7
 800ae88:	bd80      	pop	{r7, pc}

0800ae8a <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800ae8a:	b580      	push	{r7, lr}
 800ae8c:	b08c      	sub	sp, #48	; 0x30
 800ae8e:	af04      	add	r7, sp, #16
 800ae90:	60f8      	str	r0, [r7, #12]
 800ae92:	60b9      	str	r1, [r7, #8]
 800ae94:	603b      	str	r3, [r7, #0]
 800ae96:	4613      	mov	r3, r2
 800ae98:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800ae9a:	88fb      	ldrh	r3, [r7, #6]
 800ae9c:	009b      	lsls	r3, r3, #2
 800ae9e:	4618      	mov	r0, r3
 800aea0:	f001 fc6a 	bl	800c778 <pvPortMalloc>
 800aea4:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800aea6:	697b      	ldr	r3, [r7, #20]
 800aea8:	2b00      	cmp	r3, #0
 800aeaa:	d00e      	beq.n	800aeca <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800aeac:	205c      	movs	r0, #92	; 0x5c
 800aeae:	f001 fc63 	bl	800c778 <pvPortMalloc>
 800aeb2:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800aeb4:	69fb      	ldr	r3, [r7, #28]
 800aeb6:	2b00      	cmp	r3, #0
 800aeb8:	d003      	beq.n	800aec2 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800aeba:	69fb      	ldr	r3, [r7, #28]
 800aebc:	697a      	ldr	r2, [r7, #20]
 800aebe:	631a      	str	r2, [r3, #48]	; 0x30
 800aec0:	e005      	b.n	800aece <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800aec2:	6978      	ldr	r0, [r7, #20]
 800aec4:	f001 fd24 	bl	800c910 <vPortFree>
 800aec8:	e001      	b.n	800aece <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800aeca:	2300      	movs	r3, #0
 800aecc:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800aece:	69fb      	ldr	r3, [r7, #28]
 800aed0:	2b00      	cmp	r3, #0
 800aed2:	d017      	beq.n	800af04 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800aed4:	69fb      	ldr	r3, [r7, #28]
 800aed6:	2200      	movs	r2, #0
 800aed8:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800aedc:	88fa      	ldrh	r2, [r7, #6]
 800aede:	2300      	movs	r3, #0
 800aee0:	9303      	str	r3, [sp, #12]
 800aee2:	69fb      	ldr	r3, [r7, #28]
 800aee4:	9302      	str	r3, [sp, #8]
 800aee6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aee8:	9301      	str	r3, [sp, #4]
 800aeea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aeec:	9300      	str	r3, [sp, #0]
 800aeee:	683b      	ldr	r3, [r7, #0]
 800aef0:	68b9      	ldr	r1, [r7, #8]
 800aef2:	68f8      	ldr	r0, [r7, #12]
 800aef4:	f000 f80e 	bl	800af14 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800aef8:	69f8      	ldr	r0, [r7, #28]
 800aefa:	f000 f89b 	bl	800b034 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800aefe:	2301      	movs	r3, #1
 800af00:	61bb      	str	r3, [r7, #24]
 800af02:	e002      	b.n	800af0a <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800af04:	f04f 33ff 	mov.w	r3, #4294967295
 800af08:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800af0a:	69bb      	ldr	r3, [r7, #24]
	}
 800af0c:	4618      	mov	r0, r3
 800af0e:	3720      	adds	r7, #32
 800af10:	46bd      	mov	sp, r7
 800af12:	bd80      	pop	{r7, pc}

0800af14 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800af14:	b580      	push	{r7, lr}
 800af16:	b088      	sub	sp, #32
 800af18:	af00      	add	r7, sp, #0
 800af1a:	60f8      	str	r0, [r7, #12]
 800af1c:	60b9      	str	r1, [r7, #8]
 800af1e:	607a      	str	r2, [r7, #4]
 800af20:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800af22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af24:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800af26:	687b      	ldr	r3, [r7, #4]
 800af28:	009b      	lsls	r3, r3, #2
 800af2a:	461a      	mov	r2, r3
 800af2c:	21a5      	movs	r1, #165	; 0xa5
 800af2e:	f002 f855 	bl	800cfdc <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800af32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af34:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800af36:	687b      	ldr	r3, [r7, #4]
 800af38:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800af3c:	3b01      	subs	r3, #1
 800af3e:	009b      	lsls	r3, r3, #2
 800af40:	4413      	add	r3, r2
 800af42:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800af44:	69bb      	ldr	r3, [r7, #24]
 800af46:	f023 0307 	bic.w	r3, r3, #7
 800af4a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800af4c:	69bb      	ldr	r3, [r7, #24]
 800af4e:	f003 0307 	and.w	r3, r3, #7
 800af52:	2b00      	cmp	r3, #0
 800af54:	d00a      	beq.n	800af6c <prvInitialiseNewTask+0x58>
	__asm volatile
 800af56:	f04f 0350 	mov.w	r3, #80	; 0x50
 800af5a:	f383 8811 	msr	BASEPRI, r3
 800af5e:	f3bf 8f6f 	isb	sy
 800af62:	f3bf 8f4f 	dsb	sy
 800af66:	617b      	str	r3, [r7, #20]
}
 800af68:	bf00      	nop
 800af6a:	e7fe      	b.n	800af6a <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800af6c:	68bb      	ldr	r3, [r7, #8]
 800af6e:	2b00      	cmp	r3, #0
 800af70:	d01f      	beq.n	800afb2 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800af72:	2300      	movs	r3, #0
 800af74:	61fb      	str	r3, [r7, #28]
 800af76:	e012      	b.n	800af9e <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800af78:	68ba      	ldr	r2, [r7, #8]
 800af7a:	69fb      	ldr	r3, [r7, #28]
 800af7c:	4413      	add	r3, r2
 800af7e:	7819      	ldrb	r1, [r3, #0]
 800af80:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800af82:	69fb      	ldr	r3, [r7, #28]
 800af84:	4413      	add	r3, r2
 800af86:	3334      	adds	r3, #52	; 0x34
 800af88:	460a      	mov	r2, r1
 800af8a:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800af8c:	68ba      	ldr	r2, [r7, #8]
 800af8e:	69fb      	ldr	r3, [r7, #28]
 800af90:	4413      	add	r3, r2
 800af92:	781b      	ldrb	r3, [r3, #0]
 800af94:	2b00      	cmp	r3, #0
 800af96:	d006      	beq.n	800afa6 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800af98:	69fb      	ldr	r3, [r7, #28]
 800af9a:	3301      	adds	r3, #1
 800af9c:	61fb      	str	r3, [r7, #28]
 800af9e:	69fb      	ldr	r3, [r7, #28]
 800afa0:	2b0f      	cmp	r3, #15
 800afa2:	d9e9      	bls.n	800af78 <prvInitialiseNewTask+0x64>
 800afa4:	e000      	b.n	800afa8 <prvInitialiseNewTask+0x94>
			{
				break;
 800afa6:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800afa8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800afaa:	2200      	movs	r2, #0
 800afac:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800afb0:	e003      	b.n	800afba <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800afb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800afb4:	2200      	movs	r2, #0
 800afb6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800afba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800afbc:	2b37      	cmp	r3, #55	; 0x37
 800afbe:	d901      	bls.n	800afc4 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800afc0:	2337      	movs	r3, #55	; 0x37
 800afc2:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800afc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800afc6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800afc8:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800afca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800afcc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800afce:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800afd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800afd2:	2200      	movs	r2, #0
 800afd4:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800afd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800afd8:	3304      	adds	r3, #4
 800afda:	4618      	mov	r0, r3
 800afdc:	f7ff f978 	bl	800a2d0 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800afe0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800afe2:	3318      	adds	r3, #24
 800afe4:	4618      	mov	r0, r3
 800afe6:	f7ff f973 	bl	800a2d0 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800afea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800afec:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800afee:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800aff0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aff2:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800aff6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aff8:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800affa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800affc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800affe:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800b000:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b002:	2200      	movs	r2, #0
 800b004:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800b006:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b008:	2200      	movs	r2, #0
 800b00a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800b00e:	683a      	ldr	r2, [r7, #0]
 800b010:	68f9      	ldr	r1, [r7, #12]
 800b012:	69b8      	ldr	r0, [r7, #24]
 800b014:	f001 f960 	bl	800c2d8 <pxPortInitialiseStack>
 800b018:	4602      	mov	r2, r0
 800b01a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b01c:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800b01e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b020:	2b00      	cmp	r3, #0
 800b022:	d002      	beq.n	800b02a <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800b024:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b026:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b028:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b02a:	bf00      	nop
 800b02c:	3720      	adds	r7, #32
 800b02e:	46bd      	mov	sp, r7
 800b030:	bd80      	pop	{r7, pc}
	...

0800b034 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800b034:	b580      	push	{r7, lr}
 800b036:	b082      	sub	sp, #8
 800b038:	af00      	add	r7, sp, #0
 800b03a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800b03c:	f001 fa7a 	bl	800c534 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800b040:	4b2d      	ldr	r3, [pc, #180]	; (800b0f8 <prvAddNewTaskToReadyList+0xc4>)
 800b042:	681b      	ldr	r3, [r3, #0]
 800b044:	3301      	adds	r3, #1
 800b046:	4a2c      	ldr	r2, [pc, #176]	; (800b0f8 <prvAddNewTaskToReadyList+0xc4>)
 800b048:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800b04a:	4b2c      	ldr	r3, [pc, #176]	; (800b0fc <prvAddNewTaskToReadyList+0xc8>)
 800b04c:	681b      	ldr	r3, [r3, #0]
 800b04e:	2b00      	cmp	r3, #0
 800b050:	d109      	bne.n	800b066 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800b052:	4a2a      	ldr	r2, [pc, #168]	; (800b0fc <prvAddNewTaskToReadyList+0xc8>)
 800b054:	687b      	ldr	r3, [r7, #4]
 800b056:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800b058:	4b27      	ldr	r3, [pc, #156]	; (800b0f8 <prvAddNewTaskToReadyList+0xc4>)
 800b05a:	681b      	ldr	r3, [r3, #0]
 800b05c:	2b01      	cmp	r3, #1
 800b05e:	d110      	bne.n	800b082 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800b060:	f000 fc16 	bl	800b890 <prvInitialiseTaskLists>
 800b064:	e00d      	b.n	800b082 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800b066:	4b26      	ldr	r3, [pc, #152]	; (800b100 <prvAddNewTaskToReadyList+0xcc>)
 800b068:	681b      	ldr	r3, [r3, #0]
 800b06a:	2b00      	cmp	r3, #0
 800b06c:	d109      	bne.n	800b082 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800b06e:	4b23      	ldr	r3, [pc, #140]	; (800b0fc <prvAddNewTaskToReadyList+0xc8>)
 800b070:	681b      	ldr	r3, [r3, #0]
 800b072:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b074:	687b      	ldr	r3, [r7, #4]
 800b076:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b078:	429a      	cmp	r2, r3
 800b07a:	d802      	bhi.n	800b082 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800b07c:	4a1f      	ldr	r2, [pc, #124]	; (800b0fc <prvAddNewTaskToReadyList+0xc8>)
 800b07e:	687b      	ldr	r3, [r7, #4]
 800b080:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800b082:	4b20      	ldr	r3, [pc, #128]	; (800b104 <prvAddNewTaskToReadyList+0xd0>)
 800b084:	681b      	ldr	r3, [r3, #0]
 800b086:	3301      	adds	r3, #1
 800b088:	4a1e      	ldr	r2, [pc, #120]	; (800b104 <prvAddNewTaskToReadyList+0xd0>)
 800b08a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800b08c:	4b1d      	ldr	r3, [pc, #116]	; (800b104 <prvAddNewTaskToReadyList+0xd0>)
 800b08e:	681a      	ldr	r2, [r3, #0]
 800b090:	687b      	ldr	r3, [r7, #4]
 800b092:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800b094:	687b      	ldr	r3, [r7, #4]
 800b096:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b098:	4b1b      	ldr	r3, [pc, #108]	; (800b108 <prvAddNewTaskToReadyList+0xd4>)
 800b09a:	681b      	ldr	r3, [r3, #0]
 800b09c:	429a      	cmp	r2, r3
 800b09e:	d903      	bls.n	800b0a8 <prvAddNewTaskToReadyList+0x74>
 800b0a0:	687b      	ldr	r3, [r7, #4]
 800b0a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b0a4:	4a18      	ldr	r2, [pc, #96]	; (800b108 <prvAddNewTaskToReadyList+0xd4>)
 800b0a6:	6013      	str	r3, [r2, #0]
 800b0a8:	687b      	ldr	r3, [r7, #4]
 800b0aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b0ac:	4613      	mov	r3, r2
 800b0ae:	009b      	lsls	r3, r3, #2
 800b0b0:	4413      	add	r3, r2
 800b0b2:	009b      	lsls	r3, r3, #2
 800b0b4:	4a15      	ldr	r2, [pc, #84]	; (800b10c <prvAddNewTaskToReadyList+0xd8>)
 800b0b6:	441a      	add	r2, r3
 800b0b8:	687b      	ldr	r3, [r7, #4]
 800b0ba:	3304      	adds	r3, #4
 800b0bc:	4619      	mov	r1, r3
 800b0be:	4610      	mov	r0, r2
 800b0c0:	f7ff f913 	bl	800a2ea <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800b0c4:	f001 fa66 	bl	800c594 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800b0c8:	4b0d      	ldr	r3, [pc, #52]	; (800b100 <prvAddNewTaskToReadyList+0xcc>)
 800b0ca:	681b      	ldr	r3, [r3, #0]
 800b0cc:	2b00      	cmp	r3, #0
 800b0ce:	d00e      	beq.n	800b0ee <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800b0d0:	4b0a      	ldr	r3, [pc, #40]	; (800b0fc <prvAddNewTaskToReadyList+0xc8>)
 800b0d2:	681b      	ldr	r3, [r3, #0]
 800b0d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b0d6:	687b      	ldr	r3, [r7, #4]
 800b0d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b0da:	429a      	cmp	r2, r3
 800b0dc:	d207      	bcs.n	800b0ee <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800b0de:	4b0c      	ldr	r3, [pc, #48]	; (800b110 <prvAddNewTaskToReadyList+0xdc>)
 800b0e0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b0e4:	601a      	str	r2, [r3, #0]
 800b0e6:	f3bf 8f4f 	dsb	sy
 800b0ea:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b0ee:	bf00      	nop
 800b0f0:	3708      	adds	r7, #8
 800b0f2:	46bd      	mov	sp, r7
 800b0f4:	bd80      	pop	{r7, pc}
 800b0f6:	bf00      	nop
 800b0f8:	20000c9c 	.word	0x20000c9c
 800b0fc:	200007c8 	.word	0x200007c8
 800b100:	20000ca8 	.word	0x20000ca8
 800b104:	20000cb8 	.word	0x20000cb8
 800b108:	20000ca4 	.word	0x20000ca4
 800b10c:	200007cc 	.word	0x200007cc
 800b110:	e000ed04 	.word	0xe000ed04

0800b114 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800b114:	b580      	push	{r7, lr}
 800b116:	b084      	sub	sp, #16
 800b118:	af00      	add	r7, sp, #0
 800b11a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800b11c:	2300      	movs	r3, #0
 800b11e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800b120:	687b      	ldr	r3, [r7, #4]
 800b122:	2b00      	cmp	r3, #0
 800b124:	d017      	beq.n	800b156 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800b126:	4b13      	ldr	r3, [pc, #76]	; (800b174 <vTaskDelay+0x60>)
 800b128:	681b      	ldr	r3, [r3, #0]
 800b12a:	2b00      	cmp	r3, #0
 800b12c:	d00a      	beq.n	800b144 <vTaskDelay+0x30>
	__asm volatile
 800b12e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b132:	f383 8811 	msr	BASEPRI, r3
 800b136:	f3bf 8f6f 	isb	sy
 800b13a:	f3bf 8f4f 	dsb	sy
 800b13e:	60bb      	str	r3, [r7, #8]
}
 800b140:	bf00      	nop
 800b142:	e7fe      	b.n	800b142 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800b144:	f000 f880 	bl	800b248 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800b148:	2100      	movs	r1, #0
 800b14a:	6878      	ldr	r0, [r7, #4]
 800b14c:	f000 fd22 	bl	800bb94 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800b150:	f000 f888 	bl	800b264 <xTaskResumeAll>
 800b154:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800b156:	68fb      	ldr	r3, [r7, #12]
 800b158:	2b00      	cmp	r3, #0
 800b15a:	d107      	bne.n	800b16c <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800b15c:	4b06      	ldr	r3, [pc, #24]	; (800b178 <vTaskDelay+0x64>)
 800b15e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b162:	601a      	str	r2, [r3, #0]
 800b164:	f3bf 8f4f 	dsb	sy
 800b168:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800b16c:	bf00      	nop
 800b16e:	3710      	adds	r7, #16
 800b170:	46bd      	mov	sp, r7
 800b172:	bd80      	pop	{r7, pc}
 800b174:	20000cc4 	.word	0x20000cc4
 800b178:	e000ed04 	.word	0xe000ed04

0800b17c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800b17c:	b580      	push	{r7, lr}
 800b17e:	b08a      	sub	sp, #40	; 0x28
 800b180:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800b182:	2300      	movs	r3, #0
 800b184:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800b186:	2300      	movs	r3, #0
 800b188:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800b18a:	463a      	mov	r2, r7
 800b18c:	1d39      	adds	r1, r7, #4
 800b18e:	f107 0308 	add.w	r3, r7, #8
 800b192:	4618      	mov	r0, r3
 800b194:	f7ff f848 	bl	800a228 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800b198:	6839      	ldr	r1, [r7, #0]
 800b19a:	687b      	ldr	r3, [r7, #4]
 800b19c:	68ba      	ldr	r2, [r7, #8]
 800b19e:	9202      	str	r2, [sp, #8]
 800b1a0:	9301      	str	r3, [sp, #4]
 800b1a2:	2300      	movs	r3, #0
 800b1a4:	9300      	str	r3, [sp, #0]
 800b1a6:	2300      	movs	r3, #0
 800b1a8:	460a      	mov	r2, r1
 800b1aa:	4921      	ldr	r1, [pc, #132]	; (800b230 <vTaskStartScheduler+0xb4>)
 800b1ac:	4821      	ldr	r0, [pc, #132]	; (800b234 <vTaskStartScheduler+0xb8>)
 800b1ae:	f7ff fe0f 	bl	800add0 <xTaskCreateStatic>
 800b1b2:	4603      	mov	r3, r0
 800b1b4:	4a20      	ldr	r2, [pc, #128]	; (800b238 <vTaskStartScheduler+0xbc>)
 800b1b6:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800b1b8:	4b1f      	ldr	r3, [pc, #124]	; (800b238 <vTaskStartScheduler+0xbc>)
 800b1ba:	681b      	ldr	r3, [r3, #0]
 800b1bc:	2b00      	cmp	r3, #0
 800b1be:	d002      	beq.n	800b1c6 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800b1c0:	2301      	movs	r3, #1
 800b1c2:	617b      	str	r3, [r7, #20]
 800b1c4:	e001      	b.n	800b1ca <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800b1c6:	2300      	movs	r3, #0
 800b1c8:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800b1ca:	697b      	ldr	r3, [r7, #20]
 800b1cc:	2b01      	cmp	r3, #1
 800b1ce:	d102      	bne.n	800b1d6 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800b1d0:	f000 fd34 	bl	800bc3c <xTimerCreateTimerTask>
 800b1d4:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800b1d6:	697b      	ldr	r3, [r7, #20]
 800b1d8:	2b01      	cmp	r3, #1
 800b1da:	d116      	bne.n	800b20a <vTaskStartScheduler+0x8e>
	__asm volatile
 800b1dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b1e0:	f383 8811 	msr	BASEPRI, r3
 800b1e4:	f3bf 8f6f 	isb	sy
 800b1e8:	f3bf 8f4f 	dsb	sy
 800b1ec:	613b      	str	r3, [r7, #16]
}
 800b1ee:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800b1f0:	4b12      	ldr	r3, [pc, #72]	; (800b23c <vTaskStartScheduler+0xc0>)
 800b1f2:	f04f 32ff 	mov.w	r2, #4294967295
 800b1f6:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800b1f8:	4b11      	ldr	r3, [pc, #68]	; (800b240 <vTaskStartScheduler+0xc4>)
 800b1fa:	2201      	movs	r2, #1
 800b1fc:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800b1fe:	4b11      	ldr	r3, [pc, #68]	; (800b244 <vTaskStartScheduler+0xc8>)
 800b200:	2200      	movs	r2, #0
 800b202:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800b204:	f001 f8f4 	bl	800c3f0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800b208:	e00e      	b.n	800b228 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800b20a:	697b      	ldr	r3, [r7, #20]
 800b20c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b210:	d10a      	bne.n	800b228 <vTaskStartScheduler+0xac>
	__asm volatile
 800b212:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b216:	f383 8811 	msr	BASEPRI, r3
 800b21a:	f3bf 8f6f 	isb	sy
 800b21e:	f3bf 8f4f 	dsb	sy
 800b222:	60fb      	str	r3, [r7, #12]
}
 800b224:	bf00      	nop
 800b226:	e7fe      	b.n	800b226 <vTaskStartScheduler+0xaa>
}
 800b228:	bf00      	nop
 800b22a:	3718      	adds	r7, #24
 800b22c:	46bd      	mov	sp, r7
 800b22e:	bd80      	pop	{r7, pc}
 800b230:	0800f514 	.word	0x0800f514
 800b234:	0800b861 	.word	0x0800b861
 800b238:	20000cc0 	.word	0x20000cc0
 800b23c:	20000cbc 	.word	0x20000cbc
 800b240:	20000ca8 	.word	0x20000ca8
 800b244:	20000ca0 	.word	0x20000ca0

0800b248 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800b248:	b480      	push	{r7}
 800b24a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800b24c:	4b04      	ldr	r3, [pc, #16]	; (800b260 <vTaskSuspendAll+0x18>)
 800b24e:	681b      	ldr	r3, [r3, #0]
 800b250:	3301      	adds	r3, #1
 800b252:	4a03      	ldr	r2, [pc, #12]	; (800b260 <vTaskSuspendAll+0x18>)
 800b254:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800b256:	bf00      	nop
 800b258:	46bd      	mov	sp, r7
 800b25a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b25e:	4770      	bx	lr
 800b260:	20000cc4 	.word	0x20000cc4

0800b264 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800b264:	b580      	push	{r7, lr}
 800b266:	b084      	sub	sp, #16
 800b268:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800b26a:	2300      	movs	r3, #0
 800b26c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800b26e:	2300      	movs	r3, #0
 800b270:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800b272:	4b42      	ldr	r3, [pc, #264]	; (800b37c <xTaskResumeAll+0x118>)
 800b274:	681b      	ldr	r3, [r3, #0]
 800b276:	2b00      	cmp	r3, #0
 800b278:	d10a      	bne.n	800b290 <xTaskResumeAll+0x2c>
	__asm volatile
 800b27a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b27e:	f383 8811 	msr	BASEPRI, r3
 800b282:	f3bf 8f6f 	isb	sy
 800b286:	f3bf 8f4f 	dsb	sy
 800b28a:	603b      	str	r3, [r7, #0]
}
 800b28c:	bf00      	nop
 800b28e:	e7fe      	b.n	800b28e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800b290:	f001 f950 	bl	800c534 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800b294:	4b39      	ldr	r3, [pc, #228]	; (800b37c <xTaskResumeAll+0x118>)
 800b296:	681b      	ldr	r3, [r3, #0]
 800b298:	3b01      	subs	r3, #1
 800b29a:	4a38      	ldr	r2, [pc, #224]	; (800b37c <xTaskResumeAll+0x118>)
 800b29c:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b29e:	4b37      	ldr	r3, [pc, #220]	; (800b37c <xTaskResumeAll+0x118>)
 800b2a0:	681b      	ldr	r3, [r3, #0]
 800b2a2:	2b00      	cmp	r3, #0
 800b2a4:	d162      	bne.n	800b36c <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800b2a6:	4b36      	ldr	r3, [pc, #216]	; (800b380 <xTaskResumeAll+0x11c>)
 800b2a8:	681b      	ldr	r3, [r3, #0]
 800b2aa:	2b00      	cmp	r3, #0
 800b2ac:	d05e      	beq.n	800b36c <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800b2ae:	e02f      	b.n	800b310 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b2b0:	4b34      	ldr	r3, [pc, #208]	; (800b384 <xTaskResumeAll+0x120>)
 800b2b2:	68db      	ldr	r3, [r3, #12]
 800b2b4:	68db      	ldr	r3, [r3, #12]
 800b2b6:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800b2b8:	68fb      	ldr	r3, [r7, #12]
 800b2ba:	3318      	adds	r3, #24
 800b2bc:	4618      	mov	r0, r3
 800b2be:	f7ff f871 	bl	800a3a4 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b2c2:	68fb      	ldr	r3, [r7, #12]
 800b2c4:	3304      	adds	r3, #4
 800b2c6:	4618      	mov	r0, r3
 800b2c8:	f7ff f86c 	bl	800a3a4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800b2cc:	68fb      	ldr	r3, [r7, #12]
 800b2ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b2d0:	4b2d      	ldr	r3, [pc, #180]	; (800b388 <xTaskResumeAll+0x124>)
 800b2d2:	681b      	ldr	r3, [r3, #0]
 800b2d4:	429a      	cmp	r2, r3
 800b2d6:	d903      	bls.n	800b2e0 <xTaskResumeAll+0x7c>
 800b2d8:	68fb      	ldr	r3, [r7, #12]
 800b2da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b2dc:	4a2a      	ldr	r2, [pc, #168]	; (800b388 <xTaskResumeAll+0x124>)
 800b2de:	6013      	str	r3, [r2, #0]
 800b2e0:	68fb      	ldr	r3, [r7, #12]
 800b2e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b2e4:	4613      	mov	r3, r2
 800b2e6:	009b      	lsls	r3, r3, #2
 800b2e8:	4413      	add	r3, r2
 800b2ea:	009b      	lsls	r3, r3, #2
 800b2ec:	4a27      	ldr	r2, [pc, #156]	; (800b38c <xTaskResumeAll+0x128>)
 800b2ee:	441a      	add	r2, r3
 800b2f0:	68fb      	ldr	r3, [r7, #12]
 800b2f2:	3304      	adds	r3, #4
 800b2f4:	4619      	mov	r1, r3
 800b2f6:	4610      	mov	r0, r2
 800b2f8:	f7fe fff7 	bl	800a2ea <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800b2fc:	68fb      	ldr	r3, [r7, #12]
 800b2fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b300:	4b23      	ldr	r3, [pc, #140]	; (800b390 <xTaskResumeAll+0x12c>)
 800b302:	681b      	ldr	r3, [r3, #0]
 800b304:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b306:	429a      	cmp	r2, r3
 800b308:	d302      	bcc.n	800b310 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800b30a:	4b22      	ldr	r3, [pc, #136]	; (800b394 <xTaskResumeAll+0x130>)
 800b30c:	2201      	movs	r2, #1
 800b30e:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800b310:	4b1c      	ldr	r3, [pc, #112]	; (800b384 <xTaskResumeAll+0x120>)
 800b312:	681b      	ldr	r3, [r3, #0]
 800b314:	2b00      	cmp	r3, #0
 800b316:	d1cb      	bne.n	800b2b0 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800b318:	68fb      	ldr	r3, [r7, #12]
 800b31a:	2b00      	cmp	r3, #0
 800b31c:	d001      	beq.n	800b322 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800b31e:	f000 fb8d 	bl	800ba3c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800b322:	4b1d      	ldr	r3, [pc, #116]	; (800b398 <xTaskResumeAll+0x134>)
 800b324:	681b      	ldr	r3, [r3, #0]
 800b326:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800b328:	687b      	ldr	r3, [r7, #4]
 800b32a:	2b00      	cmp	r3, #0
 800b32c:	d010      	beq.n	800b350 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800b32e:	f000 f847 	bl	800b3c0 <xTaskIncrementTick>
 800b332:	4603      	mov	r3, r0
 800b334:	2b00      	cmp	r3, #0
 800b336:	d002      	beq.n	800b33e <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800b338:	4b16      	ldr	r3, [pc, #88]	; (800b394 <xTaskResumeAll+0x130>)
 800b33a:	2201      	movs	r2, #1
 800b33c:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800b33e:	687b      	ldr	r3, [r7, #4]
 800b340:	3b01      	subs	r3, #1
 800b342:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800b344:	687b      	ldr	r3, [r7, #4]
 800b346:	2b00      	cmp	r3, #0
 800b348:	d1f1      	bne.n	800b32e <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800b34a:	4b13      	ldr	r3, [pc, #76]	; (800b398 <xTaskResumeAll+0x134>)
 800b34c:	2200      	movs	r2, #0
 800b34e:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800b350:	4b10      	ldr	r3, [pc, #64]	; (800b394 <xTaskResumeAll+0x130>)
 800b352:	681b      	ldr	r3, [r3, #0]
 800b354:	2b00      	cmp	r3, #0
 800b356:	d009      	beq.n	800b36c <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800b358:	2301      	movs	r3, #1
 800b35a:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800b35c:	4b0f      	ldr	r3, [pc, #60]	; (800b39c <xTaskResumeAll+0x138>)
 800b35e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b362:	601a      	str	r2, [r3, #0]
 800b364:	f3bf 8f4f 	dsb	sy
 800b368:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800b36c:	f001 f912 	bl	800c594 <vPortExitCritical>

	return xAlreadyYielded;
 800b370:	68bb      	ldr	r3, [r7, #8]
}
 800b372:	4618      	mov	r0, r3
 800b374:	3710      	adds	r7, #16
 800b376:	46bd      	mov	sp, r7
 800b378:	bd80      	pop	{r7, pc}
 800b37a:	bf00      	nop
 800b37c:	20000cc4 	.word	0x20000cc4
 800b380:	20000c9c 	.word	0x20000c9c
 800b384:	20000c5c 	.word	0x20000c5c
 800b388:	20000ca4 	.word	0x20000ca4
 800b38c:	200007cc 	.word	0x200007cc
 800b390:	200007c8 	.word	0x200007c8
 800b394:	20000cb0 	.word	0x20000cb0
 800b398:	20000cac 	.word	0x20000cac
 800b39c:	e000ed04 	.word	0xe000ed04

0800b3a0 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800b3a0:	b480      	push	{r7}
 800b3a2:	b083      	sub	sp, #12
 800b3a4:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800b3a6:	4b05      	ldr	r3, [pc, #20]	; (800b3bc <xTaskGetTickCount+0x1c>)
 800b3a8:	681b      	ldr	r3, [r3, #0]
 800b3aa:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800b3ac:	687b      	ldr	r3, [r7, #4]
}
 800b3ae:	4618      	mov	r0, r3
 800b3b0:	370c      	adds	r7, #12
 800b3b2:	46bd      	mov	sp, r7
 800b3b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3b8:	4770      	bx	lr
 800b3ba:	bf00      	nop
 800b3bc:	20000ca0 	.word	0x20000ca0

0800b3c0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800b3c0:	b580      	push	{r7, lr}
 800b3c2:	b086      	sub	sp, #24
 800b3c4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800b3c6:	2300      	movs	r3, #0
 800b3c8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b3ca:	4b4f      	ldr	r3, [pc, #316]	; (800b508 <xTaskIncrementTick+0x148>)
 800b3cc:	681b      	ldr	r3, [r3, #0]
 800b3ce:	2b00      	cmp	r3, #0
 800b3d0:	f040 808f 	bne.w	800b4f2 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800b3d4:	4b4d      	ldr	r3, [pc, #308]	; (800b50c <xTaskIncrementTick+0x14c>)
 800b3d6:	681b      	ldr	r3, [r3, #0]
 800b3d8:	3301      	adds	r3, #1
 800b3da:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800b3dc:	4a4b      	ldr	r2, [pc, #300]	; (800b50c <xTaskIncrementTick+0x14c>)
 800b3de:	693b      	ldr	r3, [r7, #16]
 800b3e0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800b3e2:	693b      	ldr	r3, [r7, #16]
 800b3e4:	2b00      	cmp	r3, #0
 800b3e6:	d120      	bne.n	800b42a <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800b3e8:	4b49      	ldr	r3, [pc, #292]	; (800b510 <xTaskIncrementTick+0x150>)
 800b3ea:	681b      	ldr	r3, [r3, #0]
 800b3ec:	681b      	ldr	r3, [r3, #0]
 800b3ee:	2b00      	cmp	r3, #0
 800b3f0:	d00a      	beq.n	800b408 <xTaskIncrementTick+0x48>
	__asm volatile
 800b3f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b3f6:	f383 8811 	msr	BASEPRI, r3
 800b3fa:	f3bf 8f6f 	isb	sy
 800b3fe:	f3bf 8f4f 	dsb	sy
 800b402:	603b      	str	r3, [r7, #0]
}
 800b404:	bf00      	nop
 800b406:	e7fe      	b.n	800b406 <xTaskIncrementTick+0x46>
 800b408:	4b41      	ldr	r3, [pc, #260]	; (800b510 <xTaskIncrementTick+0x150>)
 800b40a:	681b      	ldr	r3, [r3, #0]
 800b40c:	60fb      	str	r3, [r7, #12]
 800b40e:	4b41      	ldr	r3, [pc, #260]	; (800b514 <xTaskIncrementTick+0x154>)
 800b410:	681b      	ldr	r3, [r3, #0]
 800b412:	4a3f      	ldr	r2, [pc, #252]	; (800b510 <xTaskIncrementTick+0x150>)
 800b414:	6013      	str	r3, [r2, #0]
 800b416:	4a3f      	ldr	r2, [pc, #252]	; (800b514 <xTaskIncrementTick+0x154>)
 800b418:	68fb      	ldr	r3, [r7, #12]
 800b41a:	6013      	str	r3, [r2, #0]
 800b41c:	4b3e      	ldr	r3, [pc, #248]	; (800b518 <xTaskIncrementTick+0x158>)
 800b41e:	681b      	ldr	r3, [r3, #0]
 800b420:	3301      	adds	r3, #1
 800b422:	4a3d      	ldr	r2, [pc, #244]	; (800b518 <xTaskIncrementTick+0x158>)
 800b424:	6013      	str	r3, [r2, #0]
 800b426:	f000 fb09 	bl	800ba3c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800b42a:	4b3c      	ldr	r3, [pc, #240]	; (800b51c <xTaskIncrementTick+0x15c>)
 800b42c:	681b      	ldr	r3, [r3, #0]
 800b42e:	693a      	ldr	r2, [r7, #16]
 800b430:	429a      	cmp	r2, r3
 800b432:	d349      	bcc.n	800b4c8 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b434:	4b36      	ldr	r3, [pc, #216]	; (800b510 <xTaskIncrementTick+0x150>)
 800b436:	681b      	ldr	r3, [r3, #0]
 800b438:	681b      	ldr	r3, [r3, #0]
 800b43a:	2b00      	cmp	r3, #0
 800b43c:	d104      	bne.n	800b448 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b43e:	4b37      	ldr	r3, [pc, #220]	; (800b51c <xTaskIncrementTick+0x15c>)
 800b440:	f04f 32ff 	mov.w	r2, #4294967295
 800b444:	601a      	str	r2, [r3, #0]
					break;
 800b446:	e03f      	b.n	800b4c8 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b448:	4b31      	ldr	r3, [pc, #196]	; (800b510 <xTaskIncrementTick+0x150>)
 800b44a:	681b      	ldr	r3, [r3, #0]
 800b44c:	68db      	ldr	r3, [r3, #12]
 800b44e:	68db      	ldr	r3, [r3, #12]
 800b450:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800b452:	68bb      	ldr	r3, [r7, #8]
 800b454:	685b      	ldr	r3, [r3, #4]
 800b456:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800b458:	693a      	ldr	r2, [r7, #16]
 800b45a:	687b      	ldr	r3, [r7, #4]
 800b45c:	429a      	cmp	r2, r3
 800b45e:	d203      	bcs.n	800b468 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800b460:	4a2e      	ldr	r2, [pc, #184]	; (800b51c <xTaskIncrementTick+0x15c>)
 800b462:	687b      	ldr	r3, [r7, #4]
 800b464:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800b466:	e02f      	b.n	800b4c8 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b468:	68bb      	ldr	r3, [r7, #8]
 800b46a:	3304      	adds	r3, #4
 800b46c:	4618      	mov	r0, r3
 800b46e:	f7fe ff99 	bl	800a3a4 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800b472:	68bb      	ldr	r3, [r7, #8]
 800b474:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b476:	2b00      	cmp	r3, #0
 800b478:	d004      	beq.n	800b484 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800b47a:	68bb      	ldr	r3, [r7, #8]
 800b47c:	3318      	adds	r3, #24
 800b47e:	4618      	mov	r0, r3
 800b480:	f7fe ff90 	bl	800a3a4 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800b484:	68bb      	ldr	r3, [r7, #8]
 800b486:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b488:	4b25      	ldr	r3, [pc, #148]	; (800b520 <xTaskIncrementTick+0x160>)
 800b48a:	681b      	ldr	r3, [r3, #0]
 800b48c:	429a      	cmp	r2, r3
 800b48e:	d903      	bls.n	800b498 <xTaskIncrementTick+0xd8>
 800b490:	68bb      	ldr	r3, [r7, #8]
 800b492:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b494:	4a22      	ldr	r2, [pc, #136]	; (800b520 <xTaskIncrementTick+0x160>)
 800b496:	6013      	str	r3, [r2, #0]
 800b498:	68bb      	ldr	r3, [r7, #8]
 800b49a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b49c:	4613      	mov	r3, r2
 800b49e:	009b      	lsls	r3, r3, #2
 800b4a0:	4413      	add	r3, r2
 800b4a2:	009b      	lsls	r3, r3, #2
 800b4a4:	4a1f      	ldr	r2, [pc, #124]	; (800b524 <xTaskIncrementTick+0x164>)
 800b4a6:	441a      	add	r2, r3
 800b4a8:	68bb      	ldr	r3, [r7, #8]
 800b4aa:	3304      	adds	r3, #4
 800b4ac:	4619      	mov	r1, r3
 800b4ae:	4610      	mov	r0, r2
 800b4b0:	f7fe ff1b 	bl	800a2ea <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800b4b4:	68bb      	ldr	r3, [r7, #8]
 800b4b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b4b8:	4b1b      	ldr	r3, [pc, #108]	; (800b528 <xTaskIncrementTick+0x168>)
 800b4ba:	681b      	ldr	r3, [r3, #0]
 800b4bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b4be:	429a      	cmp	r2, r3
 800b4c0:	d3b8      	bcc.n	800b434 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800b4c2:	2301      	movs	r3, #1
 800b4c4:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b4c6:	e7b5      	b.n	800b434 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800b4c8:	4b17      	ldr	r3, [pc, #92]	; (800b528 <xTaskIncrementTick+0x168>)
 800b4ca:	681b      	ldr	r3, [r3, #0]
 800b4cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b4ce:	4915      	ldr	r1, [pc, #84]	; (800b524 <xTaskIncrementTick+0x164>)
 800b4d0:	4613      	mov	r3, r2
 800b4d2:	009b      	lsls	r3, r3, #2
 800b4d4:	4413      	add	r3, r2
 800b4d6:	009b      	lsls	r3, r3, #2
 800b4d8:	440b      	add	r3, r1
 800b4da:	681b      	ldr	r3, [r3, #0]
 800b4dc:	2b01      	cmp	r3, #1
 800b4de:	d901      	bls.n	800b4e4 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800b4e0:	2301      	movs	r3, #1
 800b4e2:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800b4e4:	4b11      	ldr	r3, [pc, #68]	; (800b52c <xTaskIncrementTick+0x16c>)
 800b4e6:	681b      	ldr	r3, [r3, #0]
 800b4e8:	2b00      	cmp	r3, #0
 800b4ea:	d007      	beq.n	800b4fc <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800b4ec:	2301      	movs	r3, #1
 800b4ee:	617b      	str	r3, [r7, #20]
 800b4f0:	e004      	b.n	800b4fc <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800b4f2:	4b0f      	ldr	r3, [pc, #60]	; (800b530 <xTaskIncrementTick+0x170>)
 800b4f4:	681b      	ldr	r3, [r3, #0]
 800b4f6:	3301      	adds	r3, #1
 800b4f8:	4a0d      	ldr	r2, [pc, #52]	; (800b530 <xTaskIncrementTick+0x170>)
 800b4fa:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800b4fc:	697b      	ldr	r3, [r7, #20]
}
 800b4fe:	4618      	mov	r0, r3
 800b500:	3718      	adds	r7, #24
 800b502:	46bd      	mov	sp, r7
 800b504:	bd80      	pop	{r7, pc}
 800b506:	bf00      	nop
 800b508:	20000cc4 	.word	0x20000cc4
 800b50c:	20000ca0 	.word	0x20000ca0
 800b510:	20000c54 	.word	0x20000c54
 800b514:	20000c58 	.word	0x20000c58
 800b518:	20000cb4 	.word	0x20000cb4
 800b51c:	20000cbc 	.word	0x20000cbc
 800b520:	20000ca4 	.word	0x20000ca4
 800b524:	200007cc 	.word	0x200007cc
 800b528:	200007c8 	.word	0x200007c8
 800b52c:	20000cb0 	.word	0x20000cb0
 800b530:	20000cac 	.word	0x20000cac

0800b534 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800b534:	b480      	push	{r7}
 800b536:	b085      	sub	sp, #20
 800b538:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800b53a:	4b28      	ldr	r3, [pc, #160]	; (800b5dc <vTaskSwitchContext+0xa8>)
 800b53c:	681b      	ldr	r3, [r3, #0]
 800b53e:	2b00      	cmp	r3, #0
 800b540:	d003      	beq.n	800b54a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800b542:	4b27      	ldr	r3, [pc, #156]	; (800b5e0 <vTaskSwitchContext+0xac>)
 800b544:	2201      	movs	r2, #1
 800b546:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800b548:	e041      	b.n	800b5ce <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 800b54a:	4b25      	ldr	r3, [pc, #148]	; (800b5e0 <vTaskSwitchContext+0xac>)
 800b54c:	2200      	movs	r2, #0
 800b54e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b550:	4b24      	ldr	r3, [pc, #144]	; (800b5e4 <vTaskSwitchContext+0xb0>)
 800b552:	681b      	ldr	r3, [r3, #0]
 800b554:	60fb      	str	r3, [r7, #12]
 800b556:	e010      	b.n	800b57a <vTaskSwitchContext+0x46>
 800b558:	68fb      	ldr	r3, [r7, #12]
 800b55a:	2b00      	cmp	r3, #0
 800b55c:	d10a      	bne.n	800b574 <vTaskSwitchContext+0x40>
	__asm volatile
 800b55e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b562:	f383 8811 	msr	BASEPRI, r3
 800b566:	f3bf 8f6f 	isb	sy
 800b56a:	f3bf 8f4f 	dsb	sy
 800b56e:	607b      	str	r3, [r7, #4]
}
 800b570:	bf00      	nop
 800b572:	e7fe      	b.n	800b572 <vTaskSwitchContext+0x3e>
 800b574:	68fb      	ldr	r3, [r7, #12]
 800b576:	3b01      	subs	r3, #1
 800b578:	60fb      	str	r3, [r7, #12]
 800b57a:	491b      	ldr	r1, [pc, #108]	; (800b5e8 <vTaskSwitchContext+0xb4>)
 800b57c:	68fa      	ldr	r2, [r7, #12]
 800b57e:	4613      	mov	r3, r2
 800b580:	009b      	lsls	r3, r3, #2
 800b582:	4413      	add	r3, r2
 800b584:	009b      	lsls	r3, r3, #2
 800b586:	440b      	add	r3, r1
 800b588:	681b      	ldr	r3, [r3, #0]
 800b58a:	2b00      	cmp	r3, #0
 800b58c:	d0e4      	beq.n	800b558 <vTaskSwitchContext+0x24>
 800b58e:	68fa      	ldr	r2, [r7, #12]
 800b590:	4613      	mov	r3, r2
 800b592:	009b      	lsls	r3, r3, #2
 800b594:	4413      	add	r3, r2
 800b596:	009b      	lsls	r3, r3, #2
 800b598:	4a13      	ldr	r2, [pc, #76]	; (800b5e8 <vTaskSwitchContext+0xb4>)
 800b59a:	4413      	add	r3, r2
 800b59c:	60bb      	str	r3, [r7, #8]
 800b59e:	68bb      	ldr	r3, [r7, #8]
 800b5a0:	685b      	ldr	r3, [r3, #4]
 800b5a2:	685a      	ldr	r2, [r3, #4]
 800b5a4:	68bb      	ldr	r3, [r7, #8]
 800b5a6:	605a      	str	r2, [r3, #4]
 800b5a8:	68bb      	ldr	r3, [r7, #8]
 800b5aa:	685a      	ldr	r2, [r3, #4]
 800b5ac:	68bb      	ldr	r3, [r7, #8]
 800b5ae:	3308      	adds	r3, #8
 800b5b0:	429a      	cmp	r2, r3
 800b5b2:	d104      	bne.n	800b5be <vTaskSwitchContext+0x8a>
 800b5b4:	68bb      	ldr	r3, [r7, #8]
 800b5b6:	685b      	ldr	r3, [r3, #4]
 800b5b8:	685a      	ldr	r2, [r3, #4]
 800b5ba:	68bb      	ldr	r3, [r7, #8]
 800b5bc:	605a      	str	r2, [r3, #4]
 800b5be:	68bb      	ldr	r3, [r7, #8]
 800b5c0:	685b      	ldr	r3, [r3, #4]
 800b5c2:	68db      	ldr	r3, [r3, #12]
 800b5c4:	4a09      	ldr	r2, [pc, #36]	; (800b5ec <vTaskSwitchContext+0xb8>)
 800b5c6:	6013      	str	r3, [r2, #0]
 800b5c8:	4a06      	ldr	r2, [pc, #24]	; (800b5e4 <vTaskSwitchContext+0xb0>)
 800b5ca:	68fb      	ldr	r3, [r7, #12]
 800b5cc:	6013      	str	r3, [r2, #0]
}
 800b5ce:	bf00      	nop
 800b5d0:	3714      	adds	r7, #20
 800b5d2:	46bd      	mov	sp, r7
 800b5d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5d8:	4770      	bx	lr
 800b5da:	bf00      	nop
 800b5dc:	20000cc4 	.word	0x20000cc4
 800b5e0:	20000cb0 	.word	0x20000cb0
 800b5e4:	20000ca4 	.word	0x20000ca4
 800b5e8:	200007cc 	.word	0x200007cc
 800b5ec:	200007c8 	.word	0x200007c8

0800b5f0 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800b5f0:	b580      	push	{r7, lr}
 800b5f2:	b084      	sub	sp, #16
 800b5f4:	af00      	add	r7, sp, #0
 800b5f6:	6078      	str	r0, [r7, #4]
 800b5f8:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800b5fa:	687b      	ldr	r3, [r7, #4]
 800b5fc:	2b00      	cmp	r3, #0
 800b5fe:	d10a      	bne.n	800b616 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800b600:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b604:	f383 8811 	msr	BASEPRI, r3
 800b608:	f3bf 8f6f 	isb	sy
 800b60c:	f3bf 8f4f 	dsb	sy
 800b610:	60fb      	str	r3, [r7, #12]
}
 800b612:	bf00      	nop
 800b614:	e7fe      	b.n	800b614 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800b616:	4b07      	ldr	r3, [pc, #28]	; (800b634 <vTaskPlaceOnEventList+0x44>)
 800b618:	681b      	ldr	r3, [r3, #0]
 800b61a:	3318      	adds	r3, #24
 800b61c:	4619      	mov	r1, r3
 800b61e:	6878      	ldr	r0, [r7, #4]
 800b620:	f7fe fe87 	bl	800a332 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800b624:	2101      	movs	r1, #1
 800b626:	6838      	ldr	r0, [r7, #0]
 800b628:	f000 fab4 	bl	800bb94 <prvAddCurrentTaskToDelayedList>
}
 800b62c:	bf00      	nop
 800b62e:	3710      	adds	r7, #16
 800b630:	46bd      	mov	sp, r7
 800b632:	bd80      	pop	{r7, pc}
 800b634:	200007c8 	.word	0x200007c8

0800b638 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800b638:	b580      	push	{r7, lr}
 800b63a:	b086      	sub	sp, #24
 800b63c:	af00      	add	r7, sp, #0
 800b63e:	60f8      	str	r0, [r7, #12]
 800b640:	60b9      	str	r1, [r7, #8]
 800b642:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800b644:	68fb      	ldr	r3, [r7, #12]
 800b646:	2b00      	cmp	r3, #0
 800b648:	d10a      	bne.n	800b660 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800b64a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b64e:	f383 8811 	msr	BASEPRI, r3
 800b652:	f3bf 8f6f 	isb	sy
 800b656:	f3bf 8f4f 	dsb	sy
 800b65a:	617b      	str	r3, [r7, #20]
}
 800b65c:	bf00      	nop
 800b65e:	e7fe      	b.n	800b65e <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800b660:	4b0a      	ldr	r3, [pc, #40]	; (800b68c <vTaskPlaceOnEventListRestricted+0x54>)
 800b662:	681b      	ldr	r3, [r3, #0]
 800b664:	3318      	adds	r3, #24
 800b666:	4619      	mov	r1, r3
 800b668:	68f8      	ldr	r0, [r7, #12]
 800b66a:	f7fe fe3e 	bl	800a2ea <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800b66e:	687b      	ldr	r3, [r7, #4]
 800b670:	2b00      	cmp	r3, #0
 800b672:	d002      	beq.n	800b67a <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800b674:	f04f 33ff 	mov.w	r3, #4294967295
 800b678:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800b67a:	6879      	ldr	r1, [r7, #4]
 800b67c:	68b8      	ldr	r0, [r7, #8]
 800b67e:	f000 fa89 	bl	800bb94 <prvAddCurrentTaskToDelayedList>
	}
 800b682:	bf00      	nop
 800b684:	3718      	adds	r7, #24
 800b686:	46bd      	mov	sp, r7
 800b688:	bd80      	pop	{r7, pc}
 800b68a:	bf00      	nop
 800b68c:	200007c8 	.word	0x200007c8

0800b690 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800b690:	b580      	push	{r7, lr}
 800b692:	b086      	sub	sp, #24
 800b694:	af00      	add	r7, sp, #0
 800b696:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b698:	687b      	ldr	r3, [r7, #4]
 800b69a:	68db      	ldr	r3, [r3, #12]
 800b69c:	68db      	ldr	r3, [r3, #12]
 800b69e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800b6a0:	693b      	ldr	r3, [r7, #16]
 800b6a2:	2b00      	cmp	r3, #0
 800b6a4:	d10a      	bne.n	800b6bc <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800b6a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b6aa:	f383 8811 	msr	BASEPRI, r3
 800b6ae:	f3bf 8f6f 	isb	sy
 800b6b2:	f3bf 8f4f 	dsb	sy
 800b6b6:	60fb      	str	r3, [r7, #12]
}
 800b6b8:	bf00      	nop
 800b6ba:	e7fe      	b.n	800b6ba <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800b6bc:	693b      	ldr	r3, [r7, #16]
 800b6be:	3318      	adds	r3, #24
 800b6c0:	4618      	mov	r0, r3
 800b6c2:	f7fe fe6f 	bl	800a3a4 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b6c6:	4b1e      	ldr	r3, [pc, #120]	; (800b740 <xTaskRemoveFromEventList+0xb0>)
 800b6c8:	681b      	ldr	r3, [r3, #0]
 800b6ca:	2b00      	cmp	r3, #0
 800b6cc:	d11d      	bne.n	800b70a <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800b6ce:	693b      	ldr	r3, [r7, #16]
 800b6d0:	3304      	adds	r3, #4
 800b6d2:	4618      	mov	r0, r3
 800b6d4:	f7fe fe66 	bl	800a3a4 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800b6d8:	693b      	ldr	r3, [r7, #16]
 800b6da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b6dc:	4b19      	ldr	r3, [pc, #100]	; (800b744 <xTaskRemoveFromEventList+0xb4>)
 800b6de:	681b      	ldr	r3, [r3, #0]
 800b6e0:	429a      	cmp	r2, r3
 800b6e2:	d903      	bls.n	800b6ec <xTaskRemoveFromEventList+0x5c>
 800b6e4:	693b      	ldr	r3, [r7, #16]
 800b6e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b6e8:	4a16      	ldr	r2, [pc, #88]	; (800b744 <xTaskRemoveFromEventList+0xb4>)
 800b6ea:	6013      	str	r3, [r2, #0]
 800b6ec:	693b      	ldr	r3, [r7, #16]
 800b6ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b6f0:	4613      	mov	r3, r2
 800b6f2:	009b      	lsls	r3, r3, #2
 800b6f4:	4413      	add	r3, r2
 800b6f6:	009b      	lsls	r3, r3, #2
 800b6f8:	4a13      	ldr	r2, [pc, #76]	; (800b748 <xTaskRemoveFromEventList+0xb8>)
 800b6fa:	441a      	add	r2, r3
 800b6fc:	693b      	ldr	r3, [r7, #16]
 800b6fe:	3304      	adds	r3, #4
 800b700:	4619      	mov	r1, r3
 800b702:	4610      	mov	r0, r2
 800b704:	f7fe fdf1 	bl	800a2ea <vListInsertEnd>
 800b708:	e005      	b.n	800b716 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800b70a:	693b      	ldr	r3, [r7, #16]
 800b70c:	3318      	adds	r3, #24
 800b70e:	4619      	mov	r1, r3
 800b710:	480e      	ldr	r0, [pc, #56]	; (800b74c <xTaskRemoveFromEventList+0xbc>)
 800b712:	f7fe fdea 	bl	800a2ea <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800b716:	693b      	ldr	r3, [r7, #16]
 800b718:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b71a:	4b0d      	ldr	r3, [pc, #52]	; (800b750 <xTaskRemoveFromEventList+0xc0>)
 800b71c:	681b      	ldr	r3, [r3, #0]
 800b71e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b720:	429a      	cmp	r2, r3
 800b722:	d905      	bls.n	800b730 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800b724:	2301      	movs	r3, #1
 800b726:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800b728:	4b0a      	ldr	r3, [pc, #40]	; (800b754 <xTaskRemoveFromEventList+0xc4>)
 800b72a:	2201      	movs	r2, #1
 800b72c:	601a      	str	r2, [r3, #0]
 800b72e:	e001      	b.n	800b734 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800b730:	2300      	movs	r3, #0
 800b732:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800b734:	697b      	ldr	r3, [r7, #20]
}
 800b736:	4618      	mov	r0, r3
 800b738:	3718      	adds	r7, #24
 800b73a:	46bd      	mov	sp, r7
 800b73c:	bd80      	pop	{r7, pc}
 800b73e:	bf00      	nop
 800b740:	20000cc4 	.word	0x20000cc4
 800b744:	20000ca4 	.word	0x20000ca4
 800b748:	200007cc 	.word	0x200007cc
 800b74c:	20000c5c 	.word	0x20000c5c
 800b750:	200007c8 	.word	0x200007c8
 800b754:	20000cb0 	.word	0x20000cb0

0800b758 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800b758:	b480      	push	{r7}
 800b75a:	b083      	sub	sp, #12
 800b75c:	af00      	add	r7, sp, #0
 800b75e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800b760:	4b06      	ldr	r3, [pc, #24]	; (800b77c <vTaskInternalSetTimeOutState+0x24>)
 800b762:	681a      	ldr	r2, [r3, #0]
 800b764:	687b      	ldr	r3, [r7, #4]
 800b766:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800b768:	4b05      	ldr	r3, [pc, #20]	; (800b780 <vTaskInternalSetTimeOutState+0x28>)
 800b76a:	681a      	ldr	r2, [r3, #0]
 800b76c:	687b      	ldr	r3, [r7, #4]
 800b76e:	605a      	str	r2, [r3, #4]
}
 800b770:	bf00      	nop
 800b772:	370c      	adds	r7, #12
 800b774:	46bd      	mov	sp, r7
 800b776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b77a:	4770      	bx	lr
 800b77c:	20000cb4 	.word	0x20000cb4
 800b780:	20000ca0 	.word	0x20000ca0

0800b784 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800b784:	b580      	push	{r7, lr}
 800b786:	b088      	sub	sp, #32
 800b788:	af00      	add	r7, sp, #0
 800b78a:	6078      	str	r0, [r7, #4]
 800b78c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800b78e:	687b      	ldr	r3, [r7, #4]
 800b790:	2b00      	cmp	r3, #0
 800b792:	d10a      	bne.n	800b7aa <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800b794:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b798:	f383 8811 	msr	BASEPRI, r3
 800b79c:	f3bf 8f6f 	isb	sy
 800b7a0:	f3bf 8f4f 	dsb	sy
 800b7a4:	613b      	str	r3, [r7, #16]
}
 800b7a6:	bf00      	nop
 800b7a8:	e7fe      	b.n	800b7a8 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800b7aa:	683b      	ldr	r3, [r7, #0]
 800b7ac:	2b00      	cmp	r3, #0
 800b7ae:	d10a      	bne.n	800b7c6 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800b7b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b7b4:	f383 8811 	msr	BASEPRI, r3
 800b7b8:	f3bf 8f6f 	isb	sy
 800b7bc:	f3bf 8f4f 	dsb	sy
 800b7c0:	60fb      	str	r3, [r7, #12]
}
 800b7c2:	bf00      	nop
 800b7c4:	e7fe      	b.n	800b7c4 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800b7c6:	f000 feb5 	bl	800c534 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800b7ca:	4b1d      	ldr	r3, [pc, #116]	; (800b840 <xTaskCheckForTimeOut+0xbc>)
 800b7cc:	681b      	ldr	r3, [r3, #0]
 800b7ce:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800b7d0:	687b      	ldr	r3, [r7, #4]
 800b7d2:	685b      	ldr	r3, [r3, #4]
 800b7d4:	69ba      	ldr	r2, [r7, #24]
 800b7d6:	1ad3      	subs	r3, r2, r3
 800b7d8:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800b7da:	683b      	ldr	r3, [r7, #0]
 800b7dc:	681b      	ldr	r3, [r3, #0]
 800b7de:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b7e2:	d102      	bne.n	800b7ea <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800b7e4:	2300      	movs	r3, #0
 800b7e6:	61fb      	str	r3, [r7, #28]
 800b7e8:	e023      	b.n	800b832 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800b7ea:	687b      	ldr	r3, [r7, #4]
 800b7ec:	681a      	ldr	r2, [r3, #0]
 800b7ee:	4b15      	ldr	r3, [pc, #84]	; (800b844 <xTaskCheckForTimeOut+0xc0>)
 800b7f0:	681b      	ldr	r3, [r3, #0]
 800b7f2:	429a      	cmp	r2, r3
 800b7f4:	d007      	beq.n	800b806 <xTaskCheckForTimeOut+0x82>
 800b7f6:	687b      	ldr	r3, [r7, #4]
 800b7f8:	685b      	ldr	r3, [r3, #4]
 800b7fa:	69ba      	ldr	r2, [r7, #24]
 800b7fc:	429a      	cmp	r2, r3
 800b7fe:	d302      	bcc.n	800b806 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800b800:	2301      	movs	r3, #1
 800b802:	61fb      	str	r3, [r7, #28]
 800b804:	e015      	b.n	800b832 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800b806:	683b      	ldr	r3, [r7, #0]
 800b808:	681b      	ldr	r3, [r3, #0]
 800b80a:	697a      	ldr	r2, [r7, #20]
 800b80c:	429a      	cmp	r2, r3
 800b80e:	d20b      	bcs.n	800b828 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800b810:	683b      	ldr	r3, [r7, #0]
 800b812:	681a      	ldr	r2, [r3, #0]
 800b814:	697b      	ldr	r3, [r7, #20]
 800b816:	1ad2      	subs	r2, r2, r3
 800b818:	683b      	ldr	r3, [r7, #0]
 800b81a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800b81c:	6878      	ldr	r0, [r7, #4]
 800b81e:	f7ff ff9b 	bl	800b758 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800b822:	2300      	movs	r3, #0
 800b824:	61fb      	str	r3, [r7, #28]
 800b826:	e004      	b.n	800b832 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800b828:	683b      	ldr	r3, [r7, #0]
 800b82a:	2200      	movs	r2, #0
 800b82c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800b82e:	2301      	movs	r3, #1
 800b830:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800b832:	f000 feaf 	bl	800c594 <vPortExitCritical>

	return xReturn;
 800b836:	69fb      	ldr	r3, [r7, #28]
}
 800b838:	4618      	mov	r0, r3
 800b83a:	3720      	adds	r7, #32
 800b83c:	46bd      	mov	sp, r7
 800b83e:	bd80      	pop	{r7, pc}
 800b840:	20000ca0 	.word	0x20000ca0
 800b844:	20000cb4 	.word	0x20000cb4

0800b848 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800b848:	b480      	push	{r7}
 800b84a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800b84c:	4b03      	ldr	r3, [pc, #12]	; (800b85c <vTaskMissedYield+0x14>)
 800b84e:	2201      	movs	r2, #1
 800b850:	601a      	str	r2, [r3, #0]
}
 800b852:	bf00      	nop
 800b854:	46bd      	mov	sp, r7
 800b856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b85a:	4770      	bx	lr
 800b85c:	20000cb0 	.word	0x20000cb0

0800b860 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800b860:	b580      	push	{r7, lr}
 800b862:	b082      	sub	sp, #8
 800b864:	af00      	add	r7, sp, #0
 800b866:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800b868:	f000 f852 	bl	800b910 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800b86c:	4b06      	ldr	r3, [pc, #24]	; (800b888 <prvIdleTask+0x28>)
 800b86e:	681b      	ldr	r3, [r3, #0]
 800b870:	2b01      	cmp	r3, #1
 800b872:	d9f9      	bls.n	800b868 <prvIdleTask+0x8>
			{
				taskYIELD();
 800b874:	4b05      	ldr	r3, [pc, #20]	; (800b88c <prvIdleTask+0x2c>)
 800b876:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b87a:	601a      	str	r2, [r3, #0]
 800b87c:	f3bf 8f4f 	dsb	sy
 800b880:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800b884:	e7f0      	b.n	800b868 <prvIdleTask+0x8>
 800b886:	bf00      	nop
 800b888:	200007cc 	.word	0x200007cc
 800b88c:	e000ed04 	.word	0xe000ed04

0800b890 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800b890:	b580      	push	{r7, lr}
 800b892:	b082      	sub	sp, #8
 800b894:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800b896:	2300      	movs	r3, #0
 800b898:	607b      	str	r3, [r7, #4]
 800b89a:	e00c      	b.n	800b8b6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800b89c:	687a      	ldr	r2, [r7, #4]
 800b89e:	4613      	mov	r3, r2
 800b8a0:	009b      	lsls	r3, r3, #2
 800b8a2:	4413      	add	r3, r2
 800b8a4:	009b      	lsls	r3, r3, #2
 800b8a6:	4a12      	ldr	r2, [pc, #72]	; (800b8f0 <prvInitialiseTaskLists+0x60>)
 800b8a8:	4413      	add	r3, r2
 800b8aa:	4618      	mov	r0, r3
 800b8ac:	f7fe fcf0 	bl	800a290 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800b8b0:	687b      	ldr	r3, [r7, #4]
 800b8b2:	3301      	adds	r3, #1
 800b8b4:	607b      	str	r3, [r7, #4]
 800b8b6:	687b      	ldr	r3, [r7, #4]
 800b8b8:	2b37      	cmp	r3, #55	; 0x37
 800b8ba:	d9ef      	bls.n	800b89c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800b8bc:	480d      	ldr	r0, [pc, #52]	; (800b8f4 <prvInitialiseTaskLists+0x64>)
 800b8be:	f7fe fce7 	bl	800a290 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800b8c2:	480d      	ldr	r0, [pc, #52]	; (800b8f8 <prvInitialiseTaskLists+0x68>)
 800b8c4:	f7fe fce4 	bl	800a290 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800b8c8:	480c      	ldr	r0, [pc, #48]	; (800b8fc <prvInitialiseTaskLists+0x6c>)
 800b8ca:	f7fe fce1 	bl	800a290 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800b8ce:	480c      	ldr	r0, [pc, #48]	; (800b900 <prvInitialiseTaskLists+0x70>)
 800b8d0:	f7fe fcde 	bl	800a290 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800b8d4:	480b      	ldr	r0, [pc, #44]	; (800b904 <prvInitialiseTaskLists+0x74>)
 800b8d6:	f7fe fcdb 	bl	800a290 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800b8da:	4b0b      	ldr	r3, [pc, #44]	; (800b908 <prvInitialiseTaskLists+0x78>)
 800b8dc:	4a05      	ldr	r2, [pc, #20]	; (800b8f4 <prvInitialiseTaskLists+0x64>)
 800b8de:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800b8e0:	4b0a      	ldr	r3, [pc, #40]	; (800b90c <prvInitialiseTaskLists+0x7c>)
 800b8e2:	4a05      	ldr	r2, [pc, #20]	; (800b8f8 <prvInitialiseTaskLists+0x68>)
 800b8e4:	601a      	str	r2, [r3, #0]
}
 800b8e6:	bf00      	nop
 800b8e8:	3708      	adds	r7, #8
 800b8ea:	46bd      	mov	sp, r7
 800b8ec:	bd80      	pop	{r7, pc}
 800b8ee:	bf00      	nop
 800b8f0:	200007cc 	.word	0x200007cc
 800b8f4:	20000c2c 	.word	0x20000c2c
 800b8f8:	20000c40 	.word	0x20000c40
 800b8fc:	20000c5c 	.word	0x20000c5c
 800b900:	20000c70 	.word	0x20000c70
 800b904:	20000c88 	.word	0x20000c88
 800b908:	20000c54 	.word	0x20000c54
 800b90c:	20000c58 	.word	0x20000c58

0800b910 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800b910:	b580      	push	{r7, lr}
 800b912:	b082      	sub	sp, #8
 800b914:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800b916:	e019      	b.n	800b94c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800b918:	f000 fe0c 	bl	800c534 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b91c:	4b10      	ldr	r3, [pc, #64]	; (800b960 <prvCheckTasksWaitingTermination+0x50>)
 800b91e:	68db      	ldr	r3, [r3, #12]
 800b920:	68db      	ldr	r3, [r3, #12]
 800b922:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b924:	687b      	ldr	r3, [r7, #4]
 800b926:	3304      	adds	r3, #4
 800b928:	4618      	mov	r0, r3
 800b92a:	f7fe fd3b 	bl	800a3a4 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800b92e:	4b0d      	ldr	r3, [pc, #52]	; (800b964 <prvCheckTasksWaitingTermination+0x54>)
 800b930:	681b      	ldr	r3, [r3, #0]
 800b932:	3b01      	subs	r3, #1
 800b934:	4a0b      	ldr	r2, [pc, #44]	; (800b964 <prvCheckTasksWaitingTermination+0x54>)
 800b936:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800b938:	4b0b      	ldr	r3, [pc, #44]	; (800b968 <prvCheckTasksWaitingTermination+0x58>)
 800b93a:	681b      	ldr	r3, [r3, #0]
 800b93c:	3b01      	subs	r3, #1
 800b93e:	4a0a      	ldr	r2, [pc, #40]	; (800b968 <prvCheckTasksWaitingTermination+0x58>)
 800b940:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800b942:	f000 fe27 	bl	800c594 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800b946:	6878      	ldr	r0, [r7, #4]
 800b948:	f000 f848 	bl	800b9dc <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800b94c:	4b06      	ldr	r3, [pc, #24]	; (800b968 <prvCheckTasksWaitingTermination+0x58>)
 800b94e:	681b      	ldr	r3, [r3, #0]
 800b950:	2b00      	cmp	r3, #0
 800b952:	d1e1      	bne.n	800b918 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800b954:	bf00      	nop
 800b956:	bf00      	nop
 800b958:	3708      	adds	r7, #8
 800b95a:	46bd      	mov	sp, r7
 800b95c:	bd80      	pop	{r7, pc}
 800b95e:	bf00      	nop
 800b960:	20000c70 	.word	0x20000c70
 800b964:	20000c9c 	.word	0x20000c9c
 800b968:	20000c84 	.word	0x20000c84

0800b96c <prvTaskCheckFreeStackSpace>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark2 == 1 ) )

	static configSTACK_DEPTH_TYPE prvTaskCheckFreeStackSpace( const uint8_t * pucStackByte )
	{
 800b96c:	b480      	push	{r7}
 800b96e:	b085      	sub	sp, #20
 800b970:	af00      	add	r7, sp, #0
 800b972:	6078      	str	r0, [r7, #4]
	uint32_t ulCount = 0U;
 800b974:	2300      	movs	r3, #0
 800b976:	60fb      	str	r3, [r7, #12]

		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 800b978:	e005      	b.n	800b986 <prvTaskCheckFreeStackSpace+0x1a>
		{
			pucStackByte -= portSTACK_GROWTH;
 800b97a:	687b      	ldr	r3, [r7, #4]
 800b97c:	3301      	adds	r3, #1
 800b97e:	607b      	str	r3, [r7, #4]
			ulCount++;
 800b980:	68fb      	ldr	r3, [r7, #12]
 800b982:	3301      	adds	r3, #1
 800b984:	60fb      	str	r3, [r7, #12]
		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 800b986:	687b      	ldr	r3, [r7, #4]
 800b988:	781b      	ldrb	r3, [r3, #0]
 800b98a:	2ba5      	cmp	r3, #165	; 0xa5
 800b98c:	d0f5      	beq.n	800b97a <prvTaskCheckFreeStackSpace+0xe>
		}

		ulCount /= ( uint32_t ) sizeof( StackType_t ); /*lint !e961 Casting is not redundant on smaller architectures. */
 800b98e:	68fb      	ldr	r3, [r7, #12]
 800b990:	089b      	lsrs	r3, r3, #2
 800b992:	60fb      	str	r3, [r7, #12]

		return ( configSTACK_DEPTH_TYPE ) ulCount;
 800b994:	68fb      	ldr	r3, [r7, #12]
 800b996:	b29b      	uxth	r3, r3
	}
 800b998:	4618      	mov	r0, r3
 800b99a:	3714      	adds	r7, #20
 800b99c:	46bd      	mov	sp, r7
 800b99e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9a2:	4770      	bx	lr

0800b9a4 <uxTaskGetStackHighWaterMark>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_uxTaskGetStackHighWaterMark == 1 )

	UBaseType_t uxTaskGetStackHighWaterMark( TaskHandle_t xTask )
	{
 800b9a4:	b580      	push	{r7, lr}
 800b9a6:	b086      	sub	sp, #24
 800b9a8:	af00      	add	r7, sp, #0
 800b9aa:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;
	uint8_t *pucEndOfStack;
	UBaseType_t uxReturn;

		pxTCB = prvGetTCBFromHandle( xTask );
 800b9ac:	687b      	ldr	r3, [r7, #4]
 800b9ae:	2b00      	cmp	r3, #0
 800b9b0:	d102      	bne.n	800b9b8 <uxTaskGetStackHighWaterMark+0x14>
 800b9b2:	4b09      	ldr	r3, [pc, #36]	; (800b9d8 <uxTaskGetStackHighWaterMark+0x34>)
 800b9b4:	681b      	ldr	r3, [r3, #0]
 800b9b6:	e000      	b.n	800b9ba <uxTaskGetStackHighWaterMark+0x16>
 800b9b8:	687b      	ldr	r3, [r7, #4]
 800b9ba:	617b      	str	r3, [r7, #20]

		#if portSTACK_GROWTH < 0
		{
			pucEndOfStack = ( uint8_t * ) pxTCB->pxStack;
 800b9bc:	697b      	ldr	r3, [r7, #20]
 800b9be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b9c0:	613b      	str	r3, [r7, #16]
		{
			pucEndOfStack = ( uint8_t * ) pxTCB->pxEndOfStack;
		}
		#endif

		uxReturn = ( UBaseType_t ) prvTaskCheckFreeStackSpace( pucEndOfStack );
 800b9c2:	6938      	ldr	r0, [r7, #16]
 800b9c4:	f7ff ffd2 	bl	800b96c <prvTaskCheckFreeStackSpace>
 800b9c8:	4603      	mov	r3, r0
 800b9ca:	60fb      	str	r3, [r7, #12]

		return uxReturn;
 800b9cc:	68fb      	ldr	r3, [r7, #12]
	}
 800b9ce:	4618      	mov	r0, r3
 800b9d0:	3718      	adds	r7, #24
 800b9d2:	46bd      	mov	sp, r7
 800b9d4:	bd80      	pop	{r7, pc}
 800b9d6:	bf00      	nop
 800b9d8:	200007c8 	.word	0x200007c8

0800b9dc <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800b9dc:	b580      	push	{r7, lr}
 800b9de:	b084      	sub	sp, #16
 800b9e0:	af00      	add	r7, sp, #0
 800b9e2:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800b9e4:	687b      	ldr	r3, [r7, #4]
 800b9e6:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800b9ea:	2b00      	cmp	r3, #0
 800b9ec:	d108      	bne.n	800ba00 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800b9ee:	687b      	ldr	r3, [r7, #4]
 800b9f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b9f2:	4618      	mov	r0, r3
 800b9f4:	f000 ff8c 	bl	800c910 <vPortFree>
				vPortFree( pxTCB );
 800b9f8:	6878      	ldr	r0, [r7, #4]
 800b9fa:	f000 ff89 	bl	800c910 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800b9fe:	e018      	b.n	800ba32 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800ba00:	687b      	ldr	r3, [r7, #4]
 800ba02:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800ba06:	2b01      	cmp	r3, #1
 800ba08:	d103      	bne.n	800ba12 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800ba0a:	6878      	ldr	r0, [r7, #4]
 800ba0c:	f000 ff80 	bl	800c910 <vPortFree>
	}
 800ba10:	e00f      	b.n	800ba32 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800ba12:	687b      	ldr	r3, [r7, #4]
 800ba14:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800ba18:	2b02      	cmp	r3, #2
 800ba1a:	d00a      	beq.n	800ba32 <prvDeleteTCB+0x56>
	__asm volatile
 800ba1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ba20:	f383 8811 	msr	BASEPRI, r3
 800ba24:	f3bf 8f6f 	isb	sy
 800ba28:	f3bf 8f4f 	dsb	sy
 800ba2c:	60fb      	str	r3, [r7, #12]
}
 800ba2e:	bf00      	nop
 800ba30:	e7fe      	b.n	800ba30 <prvDeleteTCB+0x54>
	}
 800ba32:	bf00      	nop
 800ba34:	3710      	adds	r7, #16
 800ba36:	46bd      	mov	sp, r7
 800ba38:	bd80      	pop	{r7, pc}
	...

0800ba3c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800ba3c:	b480      	push	{r7}
 800ba3e:	b083      	sub	sp, #12
 800ba40:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800ba42:	4b0c      	ldr	r3, [pc, #48]	; (800ba74 <prvResetNextTaskUnblockTime+0x38>)
 800ba44:	681b      	ldr	r3, [r3, #0]
 800ba46:	681b      	ldr	r3, [r3, #0]
 800ba48:	2b00      	cmp	r3, #0
 800ba4a:	d104      	bne.n	800ba56 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800ba4c:	4b0a      	ldr	r3, [pc, #40]	; (800ba78 <prvResetNextTaskUnblockTime+0x3c>)
 800ba4e:	f04f 32ff 	mov.w	r2, #4294967295
 800ba52:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800ba54:	e008      	b.n	800ba68 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ba56:	4b07      	ldr	r3, [pc, #28]	; (800ba74 <prvResetNextTaskUnblockTime+0x38>)
 800ba58:	681b      	ldr	r3, [r3, #0]
 800ba5a:	68db      	ldr	r3, [r3, #12]
 800ba5c:	68db      	ldr	r3, [r3, #12]
 800ba5e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800ba60:	687b      	ldr	r3, [r7, #4]
 800ba62:	685b      	ldr	r3, [r3, #4]
 800ba64:	4a04      	ldr	r2, [pc, #16]	; (800ba78 <prvResetNextTaskUnblockTime+0x3c>)
 800ba66:	6013      	str	r3, [r2, #0]
}
 800ba68:	bf00      	nop
 800ba6a:	370c      	adds	r7, #12
 800ba6c:	46bd      	mov	sp, r7
 800ba6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba72:	4770      	bx	lr
 800ba74:	20000c54 	.word	0x20000c54
 800ba78:	20000cbc 	.word	0x20000cbc

0800ba7c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800ba7c:	b480      	push	{r7}
 800ba7e:	b083      	sub	sp, #12
 800ba80:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800ba82:	4b0b      	ldr	r3, [pc, #44]	; (800bab0 <xTaskGetSchedulerState+0x34>)
 800ba84:	681b      	ldr	r3, [r3, #0]
 800ba86:	2b00      	cmp	r3, #0
 800ba88:	d102      	bne.n	800ba90 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800ba8a:	2301      	movs	r3, #1
 800ba8c:	607b      	str	r3, [r7, #4]
 800ba8e:	e008      	b.n	800baa2 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ba90:	4b08      	ldr	r3, [pc, #32]	; (800bab4 <xTaskGetSchedulerState+0x38>)
 800ba92:	681b      	ldr	r3, [r3, #0]
 800ba94:	2b00      	cmp	r3, #0
 800ba96:	d102      	bne.n	800ba9e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800ba98:	2302      	movs	r3, #2
 800ba9a:	607b      	str	r3, [r7, #4]
 800ba9c:	e001      	b.n	800baa2 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800ba9e:	2300      	movs	r3, #0
 800baa0:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800baa2:	687b      	ldr	r3, [r7, #4]
	}
 800baa4:	4618      	mov	r0, r3
 800baa6:	370c      	adds	r7, #12
 800baa8:	46bd      	mov	sp, r7
 800baaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800baae:	4770      	bx	lr
 800bab0:	20000ca8 	.word	0x20000ca8
 800bab4:	20000cc4 	.word	0x20000cc4

0800bab8 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800bab8:	b580      	push	{r7, lr}
 800baba:	b086      	sub	sp, #24
 800babc:	af00      	add	r7, sp, #0
 800babe:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800bac0:	687b      	ldr	r3, [r7, #4]
 800bac2:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800bac4:	2300      	movs	r3, #0
 800bac6:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800bac8:	687b      	ldr	r3, [r7, #4]
 800baca:	2b00      	cmp	r3, #0
 800bacc:	d056      	beq.n	800bb7c <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800bace:	4b2e      	ldr	r3, [pc, #184]	; (800bb88 <xTaskPriorityDisinherit+0xd0>)
 800bad0:	681b      	ldr	r3, [r3, #0]
 800bad2:	693a      	ldr	r2, [r7, #16]
 800bad4:	429a      	cmp	r2, r3
 800bad6:	d00a      	beq.n	800baee <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800bad8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800badc:	f383 8811 	msr	BASEPRI, r3
 800bae0:	f3bf 8f6f 	isb	sy
 800bae4:	f3bf 8f4f 	dsb	sy
 800bae8:	60fb      	str	r3, [r7, #12]
}
 800baea:	bf00      	nop
 800baec:	e7fe      	b.n	800baec <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800baee:	693b      	ldr	r3, [r7, #16]
 800baf0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800baf2:	2b00      	cmp	r3, #0
 800baf4:	d10a      	bne.n	800bb0c <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800baf6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bafa:	f383 8811 	msr	BASEPRI, r3
 800bafe:	f3bf 8f6f 	isb	sy
 800bb02:	f3bf 8f4f 	dsb	sy
 800bb06:	60bb      	str	r3, [r7, #8]
}
 800bb08:	bf00      	nop
 800bb0a:	e7fe      	b.n	800bb0a <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800bb0c:	693b      	ldr	r3, [r7, #16]
 800bb0e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bb10:	1e5a      	subs	r2, r3, #1
 800bb12:	693b      	ldr	r3, [r7, #16]
 800bb14:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800bb16:	693b      	ldr	r3, [r7, #16]
 800bb18:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bb1a:	693b      	ldr	r3, [r7, #16]
 800bb1c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bb1e:	429a      	cmp	r2, r3
 800bb20:	d02c      	beq.n	800bb7c <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800bb22:	693b      	ldr	r3, [r7, #16]
 800bb24:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bb26:	2b00      	cmp	r3, #0
 800bb28:	d128      	bne.n	800bb7c <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800bb2a:	693b      	ldr	r3, [r7, #16]
 800bb2c:	3304      	adds	r3, #4
 800bb2e:	4618      	mov	r0, r3
 800bb30:	f7fe fc38 	bl	800a3a4 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800bb34:	693b      	ldr	r3, [r7, #16]
 800bb36:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800bb38:	693b      	ldr	r3, [r7, #16]
 800bb3a:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800bb3c:	693b      	ldr	r3, [r7, #16]
 800bb3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bb40:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800bb44:	693b      	ldr	r3, [r7, #16]
 800bb46:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800bb48:	693b      	ldr	r3, [r7, #16]
 800bb4a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bb4c:	4b0f      	ldr	r3, [pc, #60]	; (800bb8c <xTaskPriorityDisinherit+0xd4>)
 800bb4e:	681b      	ldr	r3, [r3, #0]
 800bb50:	429a      	cmp	r2, r3
 800bb52:	d903      	bls.n	800bb5c <xTaskPriorityDisinherit+0xa4>
 800bb54:	693b      	ldr	r3, [r7, #16]
 800bb56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bb58:	4a0c      	ldr	r2, [pc, #48]	; (800bb8c <xTaskPriorityDisinherit+0xd4>)
 800bb5a:	6013      	str	r3, [r2, #0]
 800bb5c:	693b      	ldr	r3, [r7, #16]
 800bb5e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bb60:	4613      	mov	r3, r2
 800bb62:	009b      	lsls	r3, r3, #2
 800bb64:	4413      	add	r3, r2
 800bb66:	009b      	lsls	r3, r3, #2
 800bb68:	4a09      	ldr	r2, [pc, #36]	; (800bb90 <xTaskPriorityDisinherit+0xd8>)
 800bb6a:	441a      	add	r2, r3
 800bb6c:	693b      	ldr	r3, [r7, #16]
 800bb6e:	3304      	adds	r3, #4
 800bb70:	4619      	mov	r1, r3
 800bb72:	4610      	mov	r0, r2
 800bb74:	f7fe fbb9 	bl	800a2ea <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800bb78:	2301      	movs	r3, #1
 800bb7a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800bb7c:	697b      	ldr	r3, [r7, #20]
	}
 800bb7e:	4618      	mov	r0, r3
 800bb80:	3718      	adds	r7, #24
 800bb82:	46bd      	mov	sp, r7
 800bb84:	bd80      	pop	{r7, pc}
 800bb86:	bf00      	nop
 800bb88:	200007c8 	.word	0x200007c8
 800bb8c:	20000ca4 	.word	0x20000ca4
 800bb90:	200007cc 	.word	0x200007cc

0800bb94 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800bb94:	b580      	push	{r7, lr}
 800bb96:	b084      	sub	sp, #16
 800bb98:	af00      	add	r7, sp, #0
 800bb9a:	6078      	str	r0, [r7, #4]
 800bb9c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800bb9e:	4b21      	ldr	r3, [pc, #132]	; (800bc24 <prvAddCurrentTaskToDelayedList+0x90>)
 800bba0:	681b      	ldr	r3, [r3, #0]
 800bba2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800bba4:	4b20      	ldr	r3, [pc, #128]	; (800bc28 <prvAddCurrentTaskToDelayedList+0x94>)
 800bba6:	681b      	ldr	r3, [r3, #0]
 800bba8:	3304      	adds	r3, #4
 800bbaa:	4618      	mov	r0, r3
 800bbac:	f7fe fbfa 	bl	800a3a4 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800bbb0:	687b      	ldr	r3, [r7, #4]
 800bbb2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bbb6:	d10a      	bne.n	800bbce <prvAddCurrentTaskToDelayedList+0x3a>
 800bbb8:	683b      	ldr	r3, [r7, #0]
 800bbba:	2b00      	cmp	r3, #0
 800bbbc:	d007      	beq.n	800bbce <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800bbbe:	4b1a      	ldr	r3, [pc, #104]	; (800bc28 <prvAddCurrentTaskToDelayedList+0x94>)
 800bbc0:	681b      	ldr	r3, [r3, #0]
 800bbc2:	3304      	adds	r3, #4
 800bbc4:	4619      	mov	r1, r3
 800bbc6:	4819      	ldr	r0, [pc, #100]	; (800bc2c <prvAddCurrentTaskToDelayedList+0x98>)
 800bbc8:	f7fe fb8f 	bl	800a2ea <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800bbcc:	e026      	b.n	800bc1c <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800bbce:	68fa      	ldr	r2, [r7, #12]
 800bbd0:	687b      	ldr	r3, [r7, #4]
 800bbd2:	4413      	add	r3, r2
 800bbd4:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800bbd6:	4b14      	ldr	r3, [pc, #80]	; (800bc28 <prvAddCurrentTaskToDelayedList+0x94>)
 800bbd8:	681b      	ldr	r3, [r3, #0]
 800bbda:	68ba      	ldr	r2, [r7, #8]
 800bbdc:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800bbde:	68ba      	ldr	r2, [r7, #8]
 800bbe0:	68fb      	ldr	r3, [r7, #12]
 800bbe2:	429a      	cmp	r2, r3
 800bbe4:	d209      	bcs.n	800bbfa <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800bbe6:	4b12      	ldr	r3, [pc, #72]	; (800bc30 <prvAddCurrentTaskToDelayedList+0x9c>)
 800bbe8:	681a      	ldr	r2, [r3, #0]
 800bbea:	4b0f      	ldr	r3, [pc, #60]	; (800bc28 <prvAddCurrentTaskToDelayedList+0x94>)
 800bbec:	681b      	ldr	r3, [r3, #0]
 800bbee:	3304      	adds	r3, #4
 800bbf0:	4619      	mov	r1, r3
 800bbf2:	4610      	mov	r0, r2
 800bbf4:	f7fe fb9d 	bl	800a332 <vListInsert>
}
 800bbf8:	e010      	b.n	800bc1c <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800bbfa:	4b0e      	ldr	r3, [pc, #56]	; (800bc34 <prvAddCurrentTaskToDelayedList+0xa0>)
 800bbfc:	681a      	ldr	r2, [r3, #0]
 800bbfe:	4b0a      	ldr	r3, [pc, #40]	; (800bc28 <prvAddCurrentTaskToDelayedList+0x94>)
 800bc00:	681b      	ldr	r3, [r3, #0]
 800bc02:	3304      	adds	r3, #4
 800bc04:	4619      	mov	r1, r3
 800bc06:	4610      	mov	r0, r2
 800bc08:	f7fe fb93 	bl	800a332 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800bc0c:	4b0a      	ldr	r3, [pc, #40]	; (800bc38 <prvAddCurrentTaskToDelayedList+0xa4>)
 800bc0e:	681b      	ldr	r3, [r3, #0]
 800bc10:	68ba      	ldr	r2, [r7, #8]
 800bc12:	429a      	cmp	r2, r3
 800bc14:	d202      	bcs.n	800bc1c <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800bc16:	4a08      	ldr	r2, [pc, #32]	; (800bc38 <prvAddCurrentTaskToDelayedList+0xa4>)
 800bc18:	68bb      	ldr	r3, [r7, #8]
 800bc1a:	6013      	str	r3, [r2, #0]
}
 800bc1c:	bf00      	nop
 800bc1e:	3710      	adds	r7, #16
 800bc20:	46bd      	mov	sp, r7
 800bc22:	bd80      	pop	{r7, pc}
 800bc24:	20000ca0 	.word	0x20000ca0
 800bc28:	200007c8 	.word	0x200007c8
 800bc2c:	20000c88 	.word	0x20000c88
 800bc30:	20000c58 	.word	0x20000c58
 800bc34:	20000c54 	.word	0x20000c54
 800bc38:	20000cbc 	.word	0x20000cbc

0800bc3c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800bc3c:	b580      	push	{r7, lr}
 800bc3e:	b08a      	sub	sp, #40	; 0x28
 800bc40:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800bc42:	2300      	movs	r3, #0
 800bc44:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800bc46:	f000 fb07 	bl	800c258 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800bc4a:	4b1c      	ldr	r3, [pc, #112]	; (800bcbc <xTimerCreateTimerTask+0x80>)
 800bc4c:	681b      	ldr	r3, [r3, #0]
 800bc4e:	2b00      	cmp	r3, #0
 800bc50:	d021      	beq.n	800bc96 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800bc52:	2300      	movs	r3, #0
 800bc54:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800bc56:	2300      	movs	r3, #0
 800bc58:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800bc5a:	1d3a      	adds	r2, r7, #4
 800bc5c:	f107 0108 	add.w	r1, r7, #8
 800bc60:	f107 030c 	add.w	r3, r7, #12
 800bc64:	4618      	mov	r0, r3
 800bc66:	f7fe faf9 	bl	800a25c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800bc6a:	6879      	ldr	r1, [r7, #4]
 800bc6c:	68bb      	ldr	r3, [r7, #8]
 800bc6e:	68fa      	ldr	r2, [r7, #12]
 800bc70:	9202      	str	r2, [sp, #8]
 800bc72:	9301      	str	r3, [sp, #4]
 800bc74:	2302      	movs	r3, #2
 800bc76:	9300      	str	r3, [sp, #0]
 800bc78:	2300      	movs	r3, #0
 800bc7a:	460a      	mov	r2, r1
 800bc7c:	4910      	ldr	r1, [pc, #64]	; (800bcc0 <xTimerCreateTimerTask+0x84>)
 800bc7e:	4811      	ldr	r0, [pc, #68]	; (800bcc4 <xTimerCreateTimerTask+0x88>)
 800bc80:	f7ff f8a6 	bl	800add0 <xTaskCreateStatic>
 800bc84:	4603      	mov	r3, r0
 800bc86:	4a10      	ldr	r2, [pc, #64]	; (800bcc8 <xTimerCreateTimerTask+0x8c>)
 800bc88:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800bc8a:	4b0f      	ldr	r3, [pc, #60]	; (800bcc8 <xTimerCreateTimerTask+0x8c>)
 800bc8c:	681b      	ldr	r3, [r3, #0]
 800bc8e:	2b00      	cmp	r3, #0
 800bc90:	d001      	beq.n	800bc96 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800bc92:	2301      	movs	r3, #1
 800bc94:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800bc96:	697b      	ldr	r3, [r7, #20]
 800bc98:	2b00      	cmp	r3, #0
 800bc9a:	d10a      	bne.n	800bcb2 <xTimerCreateTimerTask+0x76>
	__asm volatile
 800bc9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bca0:	f383 8811 	msr	BASEPRI, r3
 800bca4:	f3bf 8f6f 	isb	sy
 800bca8:	f3bf 8f4f 	dsb	sy
 800bcac:	613b      	str	r3, [r7, #16]
}
 800bcae:	bf00      	nop
 800bcb0:	e7fe      	b.n	800bcb0 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800bcb2:	697b      	ldr	r3, [r7, #20]
}
 800bcb4:	4618      	mov	r0, r3
 800bcb6:	3718      	adds	r7, #24
 800bcb8:	46bd      	mov	sp, r7
 800bcba:	bd80      	pop	{r7, pc}
 800bcbc:	20000cf8 	.word	0x20000cf8
 800bcc0:	0800f51c 	.word	0x0800f51c
 800bcc4:	0800be01 	.word	0x0800be01
 800bcc8:	20000cfc 	.word	0x20000cfc

0800bccc <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800bccc:	b580      	push	{r7, lr}
 800bcce:	b08a      	sub	sp, #40	; 0x28
 800bcd0:	af00      	add	r7, sp, #0
 800bcd2:	60f8      	str	r0, [r7, #12]
 800bcd4:	60b9      	str	r1, [r7, #8]
 800bcd6:	607a      	str	r2, [r7, #4]
 800bcd8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800bcda:	2300      	movs	r3, #0
 800bcdc:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800bcde:	68fb      	ldr	r3, [r7, #12]
 800bce0:	2b00      	cmp	r3, #0
 800bce2:	d10a      	bne.n	800bcfa <xTimerGenericCommand+0x2e>
	__asm volatile
 800bce4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bce8:	f383 8811 	msr	BASEPRI, r3
 800bcec:	f3bf 8f6f 	isb	sy
 800bcf0:	f3bf 8f4f 	dsb	sy
 800bcf4:	623b      	str	r3, [r7, #32]
}
 800bcf6:	bf00      	nop
 800bcf8:	e7fe      	b.n	800bcf8 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800bcfa:	4b1a      	ldr	r3, [pc, #104]	; (800bd64 <xTimerGenericCommand+0x98>)
 800bcfc:	681b      	ldr	r3, [r3, #0]
 800bcfe:	2b00      	cmp	r3, #0
 800bd00:	d02a      	beq.n	800bd58 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800bd02:	68bb      	ldr	r3, [r7, #8]
 800bd04:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800bd06:	687b      	ldr	r3, [r7, #4]
 800bd08:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800bd0a:	68fb      	ldr	r3, [r7, #12]
 800bd0c:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800bd0e:	68bb      	ldr	r3, [r7, #8]
 800bd10:	2b05      	cmp	r3, #5
 800bd12:	dc18      	bgt.n	800bd46 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800bd14:	f7ff feb2 	bl	800ba7c <xTaskGetSchedulerState>
 800bd18:	4603      	mov	r3, r0
 800bd1a:	2b02      	cmp	r3, #2
 800bd1c:	d109      	bne.n	800bd32 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800bd1e:	4b11      	ldr	r3, [pc, #68]	; (800bd64 <xTimerGenericCommand+0x98>)
 800bd20:	6818      	ldr	r0, [r3, #0]
 800bd22:	f107 0110 	add.w	r1, r7, #16
 800bd26:	2300      	movs	r3, #0
 800bd28:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800bd2a:	f7fe fc69 	bl	800a600 <xQueueGenericSend>
 800bd2e:	6278      	str	r0, [r7, #36]	; 0x24
 800bd30:	e012      	b.n	800bd58 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800bd32:	4b0c      	ldr	r3, [pc, #48]	; (800bd64 <xTimerGenericCommand+0x98>)
 800bd34:	6818      	ldr	r0, [r3, #0]
 800bd36:	f107 0110 	add.w	r1, r7, #16
 800bd3a:	2300      	movs	r3, #0
 800bd3c:	2200      	movs	r2, #0
 800bd3e:	f7fe fc5f 	bl	800a600 <xQueueGenericSend>
 800bd42:	6278      	str	r0, [r7, #36]	; 0x24
 800bd44:	e008      	b.n	800bd58 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800bd46:	4b07      	ldr	r3, [pc, #28]	; (800bd64 <xTimerGenericCommand+0x98>)
 800bd48:	6818      	ldr	r0, [r3, #0]
 800bd4a:	f107 0110 	add.w	r1, r7, #16
 800bd4e:	2300      	movs	r3, #0
 800bd50:	683a      	ldr	r2, [r7, #0]
 800bd52:	f7fe fd53 	bl	800a7fc <xQueueGenericSendFromISR>
 800bd56:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800bd58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800bd5a:	4618      	mov	r0, r3
 800bd5c:	3728      	adds	r7, #40	; 0x28
 800bd5e:	46bd      	mov	sp, r7
 800bd60:	bd80      	pop	{r7, pc}
 800bd62:	bf00      	nop
 800bd64:	20000cf8 	.word	0x20000cf8

0800bd68 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800bd68:	b580      	push	{r7, lr}
 800bd6a:	b088      	sub	sp, #32
 800bd6c:	af02      	add	r7, sp, #8
 800bd6e:	6078      	str	r0, [r7, #4]
 800bd70:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bd72:	4b22      	ldr	r3, [pc, #136]	; (800bdfc <prvProcessExpiredTimer+0x94>)
 800bd74:	681b      	ldr	r3, [r3, #0]
 800bd76:	68db      	ldr	r3, [r3, #12]
 800bd78:	68db      	ldr	r3, [r3, #12]
 800bd7a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800bd7c:	697b      	ldr	r3, [r7, #20]
 800bd7e:	3304      	adds	r3, #4
 800bd80:	4618      	mov	r0, r3
 800bd82:	f7fe fb0f 	bl	800a3a4 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800bd86:	697b      	ldr	r3, [r7, #20]
 800bd88:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800bd8c:	f003 0304 	and.w	r3, r3, #4
 800bd90:	2b00      	cmp	r3, #0
 800bd92:	d022      	beq.n	800bdda <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800bd94:	697b      	ldr	r3, [r7, #20]
 800bd96:	699a      	ldr	r2, [r3, #24]
 800bd98:	687b      	ldr	r3, [r7, #4]
 800bd9a:	18d1      	adds	r1, r2, r3
 800bd9c:	687b      	ldr	r3, [r7, #4]
 800bd9e:	683a      	ldr	r2, [r7, #0]
 800bda0:	6978      	ldr	r0, [r7, #20]
 800bda2:	f000 f8d1 	bl	800bf48 <prvInsertTimerInActiveList>
 800bda6:	4603      	mov	r3, r0
 800bda8:	2b00      	cmp	r3, #0
 800bdaa:	d01f      	beq.n	800bdec <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800bdac:	2300      	movs	r3, #0
 800bdae:	9300      	str	r3, [sp, #0]
 800bdb0:	2300      	movs	r3, #0
 800bdb2:	687a      	ldr	r2, [r7, #4]
 800bdb4:	2100      	movs	r1, #0
 800bdb6:	6978      	ldr	r0, [r7, #20]
 800bdb8:	f7ff ff88 	bl	800bccc <xTimerGenericCommand>
 800bdbc:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800bdbe:	693b      	ldr	r3, [r7, #16]
 800bdc0:	2b00      	cmp	r3, #0
 800bdc2:	d113      	bne.n	800bdec <prvProcessExpiredTimer+0x84>
	__asm volatile
 800bdc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bdc8:	f383 8811 	msr	BASEPRI, r3
 800bdcc:	f3bf 8f6f 	isb	sy
 800bdd0:	f3bf 8f4f 	dsb	sy
 800bdd4:	60fb      	str	r3, [r7, #12]
}
 800bdd6:	bf00      	nop
 800bdd8:	e7fe      	b.n	800bdd8 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800bdda:	697b      	ldr	r3, [r7, #20]
 800bddc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800bde0:	f023 0301 	bic.w	r3, r3, #1
 800bde4:	b2da      	uxtb	r2, r3
 800bde6:	697b      	ldr	r3, [r7, #20]
 800bde8:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800bdec:	697b      	ldr	r3, [r7, #20]
 800bdee:	6a1b      	ldr	r3, [r3, #32]
 800bdf0:	6978      	ldr	r0, [r7, #20]
 800bdf2:	4798      	blx	r3
}
 800bdf4:	bf00      	nop
 800bdf6:	3718      	adds	r7, #24
 800bdf8:	46bd      	mov	sp, r7
 800bdfa:	bd80      	pop	{r7, pc}
 800bdfc:	20000cf0 	.word	0x20000cf0

0800be00 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800be00:	b580      	push	{r7, lr}
 800be02:	b084      	sub	sp, #16
 800be04:	af00      	add	r7, sp, #0
 800be06:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800be08:	f107 0308 	add.w	r3, r7, #8
 800be0c:	4618      	mov	r0, r3
 800be0e:	f000 f857 	bl	800bec0 <prvGetNextExpireTime>
 800be12:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800be14:	68bb      	ldr	r3, [r7, #8]
 800be16:	4619      	mov	r1, r3
 800be18:	68f8      	ldr	r0, [r7, #12]
 800be1a:	f000 f803 	bl	800be24 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800be1e:	f000 f8d5 	bl	800bfcc <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800be22:	e7f1      	b.n	800be08 <prvTimerTask+0x8>

0800be24 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800be24:	b580      	push	{r7, lr}
 800be26:	b084      	sub	sp, #16
 800be28:	af00      	add	r7, sp, #0
 800be2a:	6078      	str	r0, [r7, #4]
 800be2c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800be2e:	f7ff fa0b 	bl	800b248 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800be32:	f107 0308 	add.w	r3, r7, #8
 800be36:	4618      	mov	r0, r3
 800be38:	f000 f866 	bl	800bf08 <prvSampleTimeNow>
 800be3c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800be3e:	68bb      	ldr	r3, [r7, #8]
 800be40:	2b00      	cmp	r3, #0
 800be42:	d130      	bne.n	800bea6 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800be44:	683b      	ldr	r3, [r7, #0]
 800be46:	2b00      	cmp	r3, #0
 800be48:	d10a      	bne.n	800be60 <prvProcessTimerOrBlockTask+0x3c>
 800be4a:	687a      	ldr	r2, [r7, #4]
 800be4c:	68fb      	ldr	r3, [r7, #12]
 800be4e:	429a      	cmp	r2, r3
 800be50:	d806      	bhi.n	800be60 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800be52:	f7ff fa07 	bl	800b264 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800be56:	68f9      	ldr	r1, [r7, #12]
 800be58:	6878      	ldr	r0, [r7, #4]
 800be5a:	f7ff ff85 	bl	800bd68 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800be5e:	e024      	b.n	800beaa <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800be60:	683b      	ldr	r3, [r7, #0]
 800be62:	2b00      	cmp	r3, #0
 800be64:	d008      	beq.n	800be78 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800be66:	4b13      	ldr	r3, [pc, #76]	; (800beb4 <prvProcessTimerOrBlockTask+0x90>)
 800be68:	681b      	ldr	r3, [r3, #0]
 800be6a:	681b      	ldr	r3, [r3, #0]
 800be6c:	2b00      	cmp	r3, #0
 800be6e:	d101      	bne.n	800be74 <prvProcessTimerOrBlockTask+0x50>
 800be70:	2301      	movs	r3, #1
 800be72:	e000      	b.n	800be76 <prvProcessTimerOrBlockTask+0x52>
 800be74:	2300      	movs	r3, #0
 800be76:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800be78:	4b0f      	ldr	r3, [pc, #60]	; (800beb8 <prvProcessTimerOrBlockTask+0x94>)
 800be7a:	6818      	ldr	r0, [r3, #0]
 800be7c:	687a      	ldr	r2, [r7, #4]
 800be7e:	68fb      	ldr	r3, [r7, #12]
 800be80:	1ad3      	subs	r3, r2, r3
 800be82:	683a      	ldr	r2, [r7, #0]
 800be84:	4619      	mov	r1, r3
 800be86:	f7fe ff6f 	bl	800ad68 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800be8a:	f7ff f9eb 	bl	800b264 <xTaskResumeAll>
 800be8e:	4603      	mov	r3, r0
 800be90:	2b00      	cmp	r3, #0
 800be92:	d10a      	bne.n	800beaa <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800be94:	4b09      	ldr	r3, [pc, #36]	; (800bebc <prvProcessTimerOrBlockTask+0x98>)
 800be96:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800be9a:	601a      	str	r2, [r3, #0]
 800be9c:	f3bf 8f4f 	dsb	sy
 800bea0:	f3bf 8f6f 	isb	sy
}
 800bea4:	e001      	b.n	800beaa <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800bea6:	f7ff f9dd 	bl	800b264 <xTaskResumeAll>
}
 800beaa:	bf00      	nop
 800beac:	3710      	adds	r7, #16
 800beae:	46bd      	mov	sp, r7
 800beb0:	bd80      	pop	{r7, pc}
 800beb2:	bf00      	nop
 800beb4:	20000cf4 	.word	0x20000cf4
 800beb8:	20000cf8 	.word	0x20000cf8
 800bebc:	e000ed04 	.word	0xe000ed04

0800bec0 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800bec0:	b480      	push	{r7}
 800bec2:	b085      	sub	sp, #20
 800bec4:	af00      	add	r7, sp, #0
 800bec6:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800bec8:	4b0e      	ldr	r3, [pc, #56]	; (800bf04 <prvGetNextExpireTime+0x44>)
 800beca:	681b      	ldr	r3, [r3, #0]
 800becc:	681b      	ldr	r3, [r3, #0]
 800bece:	2b00      	cmp	r3, #0
 800bed0:	d101      	bne.n	800bed6 <prvGetNextExpireTime+0x16>
 800bed2:	2201      	movs	r2, #1
 800bed4:	e000      	b.n	800bed8 <prvGetNextExpireTime+0x18>
 800bed6:	2200      	movs	r2, #0
 800bed8:	687b      	ldr	r3, [r7, #4]
 800beda:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800bedc:	687b      	ldr	r3, [r7, #4]
 800bede:	681b      	ldr	r3, [r3, #0]
 800bee0:	2b00      	cmp	r3, #0
 800bee2:	d105      	bne.n	800bef0 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800bee4:	4b07      	ldr	r3, [pc, #28]	; (800bf04 <prvGetNextExpireTime+0x44>)
 800bee6:	681b      	ldr	r3, [r3, #0]
 800bee8:	68db      	ldr	r3, [r3, #12]
 800beea:	681b      	ldr	r3, [r3, #0]
 800beec:	60fb      	str	r3, [r7, #12]
 800beee:	e001      	b.n	800bef4 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800bef0:	2300      	movs	r3, #0
 800bef2:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800bef4:	68fb      	ldr	r3, [r7, #12]
}
 800bef6:	4618      	mov	r0, r3
 800bef8:	3714      	adds	r7, #20
 800befa:	46bd      	mov	sp, r7
 800befc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf00:	4770      	bx	lr
 800bf02:	bf00      	nop
 800bf04:	20000cf0 	.word	0x20000cf0

0800bf08 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800bf08:	b580      	push	{r7, lr}
 800bf0a:	b084      	sub	sp, #16
 800bf0c:	af00      	add	r7, sp, #0
 800bf0e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800bf10:	f7ff fa46 	bl	800b3a0 <xTaskGetTickCount>
 800bf14:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800bf16:	4b0b      	ldr	r3, [pc, #44]	; (800bf44 <prvSampleTimeNow+0x3c>)
 800bf18:	681b      	ldr	r3, [r3, #0]
 800bf1a:	68fa      	ldr	r2, [r7, #12]
 800bf1c:	429a      	cmp	r2, r3
 800bf1e:	d205      	bcs.n	800bf2c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800bf20:	f000 f936 	bl	800c190 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800bf24:	687b      	ldr	r3, [r7, #4]
 800bf26:	2201      	movs	r2, #1
 800bf28:	601a      	str	r2, [r3, #0]
 800bf2a:	e002      	b.n	800bf32 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800bf2c:	687b      	ldr	r3, [r7, #4]
 800bf2e:	2200      	movs	r2, #0
 800bf30:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800bf32:	4a04      	ldr	r2, [pc, #16]	; (800bf44 <prvSampleTimeNow+0x3c>)
 800bf34:	68fb      	ldr	r3, [r7, #12]
 800bf36:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800bf38:	68fb      	ldr	r3, [r7, #12]
}
 800bf3a:	4618      	mov	r0, r3
 800bf3c:	3710      	adds	r7, #16
 800bf3e:	46bd      	mov	sp, r7
 800bf40:	bd80      	pop	{r7, pc}
 800bf42:	bf00      	nop
 800bf44:	20000d00 	.word	0x20000d00

0800bf48 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800bf48:	b580      	push	{r7, lr}
 800bf4a:	b086      	sub	sp, #24
 800bf4c:	af00      	add	r7, sp, #0
 800bf4e:	60f8      	str	r0, [r7, #12]
 800bf50:	60b9      	str	r1, [r7, #8]
 800bf52:	607a      	str	r2, [r7, #4]
 800bf54:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800bf56:	2300      	movs	r3, #0
 800bf58:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800bf5a:	68fb      	ldr	r3, [r7, #12]
 800bf5c:	68ba      	ldr	r2, [r7, #8]
 800bf5e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800bf60:	68fb      	ldr	r3, [r7, #12]
 800bf62:	68fa      	ldr	r2, [r7, #12]
 800bf64:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800bf66:	68ba      	ldr	r2, [r7, #8]
 800bf68:	687b      	ldr	r3, [r7, #4]
 800bf6a:	429a      	cmp	r2, r3
 800bf6c:	d812      	bhi.n	800bf94 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800bf6e:	687a      	ldr	r2, [r7, #4]
 800bf70:	683b      	ldr	r3, [r7, #0]
 800bf72:	1ad2      	subs	r2, r2, r3
 800bf74:	68fb      	ldr	r3, [r7, #12]
 800bf76:	699b      	ldr	r3, [r3, #24]
 800bf78:	429a      	cmp	r2, r3
 800bf7a:	d302      	bcc.n	800bf82 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800bf7c:	2301      	movs	r3, #1
 800bf7e:	617b      	str	r3, [r7, #20]
 800bf80:	e01b      	b.n	800bfba <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800bf82:	4b10      	ldr	r3, [pc, #64]	; (800bfc4 <prvInsertTimerInActiveList+0x7c>)
 800bf84:	681a      	ldr	r2, [r3, #0]
 800bf86:	68fb      	ldr	r3, [r7, #12]
 800bf88:	3304      	adds	r3, #4
 800bf8a:	4619      	mov	r1, r3
 800bf8c:	4610      	mov	r0, r2
 800bf8e:	f7fe f9d0 	bl	800a332 <vListInsert>
 800bf92:	e012      	b.n	800bfba <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800bf94:	687a      	ldr	r2, [r7, #4]
 800bf96:	683b      	ldr	r3, [r7, #0]
 800bf98:	429a      	cmp	r2, r3
 800bf9a:	d206      	bcs.n	800bfaa <prvInsertTimerInActiveList+0x62>
 800bf9c:	68ba      	ldr	r2, [r7, #8]
 800bf9e:	683b      	ldr	r3, [r7, #0]
 800bfa0:	429a      	cmp	r2, r3
 800bfa2:	d302      	bcc.n	800bfaa <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800bfa4:	2301      	movs	r3, #1
 800bfa6:	617b      	str	r3, [r7, #20]
 800bfa8:	e007      	b.n	800bfba <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800bfaa:	4b07      	ldr	r3, [pc, #28]	; (800bfc8 <prvInsertTimerInActiveList+0x80>)
 800bfac:	681a      	ldr	r2, [r3, #0]
 800bfae:	68fb      	ldr	r3, [r7, #12]
 800bfb0:	3304      	adds	r3, #4
 800bfb2:	4619      	mov	r1, r3
 800bfb4:	4610      	mov	r0, r2
 800bfb6:	f7fe f9bc 	bl	800a332 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800bfba:	697b      	ldr	r3, [r7, #20]
}
 800bfbc:	4618      	mov	r0, r3
 800bfbe:	3718      	adds	r7, #24
 800bfc0:	46bd      	mov	sp, r7
 800bfc2:	bd80      	pop	{r7, pc}
 800bfc4:	20000cf4 	.word	0x20000cf4
 800bfc8:	20000cf0 	.word	0x20000cf0

0800bfcc <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800bfcc:	b580      	push	{r7, lr}
 800bfce:	b08e      	sub	sp, #56	; 0x38
 800bfd0:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800bfd2:	e0ca      	b.n	800c16a <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800bfd4:	687b      	ldr	r3, [r7, #4]
 800bfd6:	2b00      	cmp	r3, #0
 800bfd8:	da18      	bge.n	800c00c <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800bfda:	1d3b      	adds	r3, r7, #4
 800bfdc:	3304      	adds	r3, #4
 800bfde:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800bfe0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bfe2:	2b00      	cmp	r3, #0
 800bfe4:	d10a      	bne.n	800bffc <prvProcessReceivedCommands+0x30>
	__asm volatile
 800bfe6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bfea:	f383 8811 	msr	BASEPRI, r3
 800bfee:	f3bf 8f6f 	isb	sy
 800bff2:	f3bf 8f4f 	dsb	sy
 800bff6:	61fb      	str	r3, [r7, #28]
}
 800bff8:	bf00      	nop
 800bffa:	e7fe      	b.n	800bffa <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800bffc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bffe:	681b      	ldr	r3, [r3, #0]
 800c000:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c002:	6850      	ldr	r0, [r2, #4]
 800c004:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c006:	6892      	ldr	r2, [r2, #8]
 800c008:	4611      	mov	r1, r2
 800c00a:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800c00c:	687b      	ldr	r3, [r7, #4]
 800c00e:	2b00      	cmp	r3, #0
 800c010:	f2c0 80aa 	blt.w	800c168 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800c014:	68fb      	ldr	r3, [r7, #12]
 800c016:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800c018:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c01a:	695b      	ldr	r3, [r3, #20]
 800c01c:	2b00      	cmp	r3, #0
 800c01e:	d004      	beq.n	800c02a <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800c020:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c022:	3304      	adds	r3, #4
 800c024:	4618      	mov	r0, r3
 800c026:	f7fe f9bd 	bl	800a3a4 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800c02a:	463b      	mov	r3, r7
 800c02c:	4618      	mov	r0, r3
 800c02e:	f7ff ff6b 	bl	800bf08 <prvSampleTimeNow>
 800c032:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800c034:	687b      	ldr	r3, [r7, #4]
 800c036:	2b09      	cmp	r3, #9
 800c038:	f200 8097 	bhi.w	800c16a <prvProcessReceivedCommands+0x19e>
 800c03c:	a201      	add	r2, pc, #4	; (adr r2, 800c044 <prvProcessReceivedCommands+0x78>)
 800c03e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c042:	bf00      	nop
 800c044:	0800c06d 	.word	0x0800c06d
 800c048:	0800c06d 	.word	0x0800c06d
 800c04c:	0800c06d 	.word	0x0800c06d
 800c050:	0800c0e1 	.word	0x0800c0e1
 800c054:	0800c0f5 	.word	0x0800c0f5
 800c058:	0800c13f 	.word	0x0800c13f
 800c05c:	0800c06d 	.word	0x0800c06d
 800c060:	0800c06d 	.word	0x0800c06d
 800c064:	0800c0e1 	.word	0x0800c0e1
 800c068:	0800c0f5 	.word	0x0800c0f5
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800c06c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c06e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c072:	f043 0301 	orr.w	r3, r3, #1
 800c076:	b2da      	uxtb	r2, r3
 800c078:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c07a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800c07e:	68ba      	ldr	r2, [r7, #8]
 800c080:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c082:	699b      	ldr	r3, [r3, #24]
 800c084:	18d1      	adds	r1, r2, r3
 800c086:	68bb      	ldr	r3, [r7, #8]
 800c088:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c08a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c08c:	f7ff ff5c 	bl	800bf48 <prvInsertTimerInActiveList>
 800c090:	4603      	mov	r3, r0
 800c092:	2b00      	cmp	r3, #0
 800c094:	d069      	beq.n	800c16a <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800c096:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c098:	6a1b      	ldr	r3, [r3, #32]
 800c09a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c09c:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800c09e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c0a0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c0a4:	f003 0304 	and.w	r3, r3, #4
 800c0a8:	2b00      	cmp	r3, #0
 800c0aa:	d05e      	beq.n	800c16a <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800c0ac:	68ba      	ldr	r2, [r7, #8]
 800c0ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c0b0:	699b      	ldr	r3, [r3, #24]
 800c0b2:	441a      	add	r2, r3
 800c0b4:	2300      	movs	r3, #0
 800c0b6:	9300      	str	r3, [sp, #0]
 800c0b8:	2300      	movs	r3, #0
 800c0ba:	2100      	movs	r1, #0
 800c0bc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c0be:	f7ff fe05 	bl	800bccc <xTimerGenericCommand>
 800c0c2:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800c0c4:	6a3b      	ldr	r3, [r7, #32]
 800c0c6:	2b00      	cmp	r3, #0
 800c0c8:	d14f      	bne.n	800c16a <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800c0ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c0ce:	f383 8811 	msr	BASEPRI, r3
 800c0d2:	f3bf 8f6f 	isb	sy
 800c0d6:	f3bf 8f4f 	dsb	sy
 800c0da:	61bb      	str	r3, [r7, #24]
}
 800c0dc:	bf00      	nop
 800c0de:	e7fe      	b.n	800c0de <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800c0e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c0e2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c0e6:	f023 0301 	bic.w	r3, r3, #1
 800c0ea:	b2da      	uxtb	r2, r3
 800c0ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c0ee:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800c0f2:	e03a      	b.n	800c16a <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800c0f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c0f6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c0fa:	f043 0301 	orr.w	r3, r3, #1
 800c0fe:	b2da      	uxtb	r2, r3
 800c100:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c102:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800c106:	68ba      	ldr	r2, [r7, #8]
 800c108:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c10a:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800c10c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c10e:	699b      	ldr	r3, [r3, #24]
 800c110:	2b00      	cmp	r3, #0
 800c112:	d10a      	bne.n	800c12a <prvProcessReceivedCommands+0x15e>
	__asm volatile
 800c114:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c118:	f383 8811 	msr	BASEPRI, r3
 800c11c:	f3bf 8f6f 	isb	sy
 800c120:	f3bf 8f4f 	dsb	sy
 800c124:	617b      	str	r3, [r7, #20]
}
 800c126:	bf00      	nop
 800c128:	e7fe      	b.n	800c128 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800c12a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c12c:	699a      	ldr	r2, [r3, #24]
 800c12e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c130:	18d1      	adds	r1, r2, r3
 800c132:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c134:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c136:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c138:	f7ff ff06 	bl	800bf48 <prvInsertTimerInActiveList>
					break;
 800c13c:	e015      	b.n	800c16a <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800c13e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c140:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c144:	f003 0302 	and.w	r3, r3, #2
 800c148:	2b00      	cmp	r3, #0
 800c14a:	d103      	bne.n	800c154 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800c14c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c14e:	f000 fbdf 	bl	800c910 <vPortFree>
 800c152:	e00a      	b.n	800c16a <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800c154:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c156:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c15a:	f023 0301 	bic.w	r3, r3, #1
 800c15e:	b2da      	uxtb	r2, r3
 800c160:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c162:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800c166:	e000      	b.n	800c16a <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800c168:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800c16a:	4b08      	ldr	r3, [pc, #32]	; (800c18c <prvProcessReceivedCommands+0x1c0>)
 800c16c:	681b      	ldr	r3, [r3, #0]
 800c16e:	1d39      	adds	r1, r7, #4
 800c170:	2200      	movs	r2, #0
 800c172:	4618      	mov	r0, r3
 800c174:	f7fe fbde 	bl	800a934 <xQueueReceive>
 800c178:	4603      	mov	r3, r0
 800c17a:	2b00      	cmp	r3, #0
 800c17c:	f47f af2a 	bne.w	800bfd4 <prvProcessReceivedCommands+0x8>
	}
}
 800c180:	bf00      	nop
 800c182:	bf00      	nop
 800c184:	3730      	adds	r7, #48	; 0x30
 800c186:	46bd      	mov	sp, r7
 800c188:	bd80      	pop	{r7, pc}
 800c18a:	bf00      	nop
 800c18c:	20000cf8 	.word	0x20000cf8

0800c190 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800c190:	b580      	push	{r7, lr}
 800c192:	b088      	sub	sp, #32
 800c194:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800c196:	e048      	b.n	800c22a <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800c198:	4b2d      	ldr	r3, [pc, #180]	; (800c250 <prvSwitchTimerLists+0xc0>)
 800c19a:	681b      	ldr	r3, [r3, #0]
 800c19c:	68db      	ldr	r3, [r3, #12]
 800c19e:	681b      	ldr	r3, [r3, #0]
 800c1a0:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c1a2:	4b2b      	ldr	r3, [pc, #172]	; (800c250 <prvSwitchTimerLists+0xc0>)
 800c1a4:	681b      	ldr	r3, [r3, #0]
 800c1a6:	68db      	ldr	r3, [r3, #12]
 800c1a8:	68db      	ldr	r3, [r3, #12]
 800c1aa:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800c1ac:	68fb      	ldr	r3, [r7, #12]
 800c1ae:	3304      	adds	r3, #4
 800c1b0:	4618      	mov	r0, r3
 800c1b2:	f7fe f8f7 	bl	800a3a4 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800c1b6:	68fb      	ldr	r3, [r7, #12]
 800c1b8:	6a1b      	ldr	r3, [r3, #32]
 800c1ba:	68f8      	ldr	r0, [r7, #12]
 800c1bc:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800c1be:	68fb      	ldr	r3, [r7, #12]
 800c1c0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c1c4:	f003 0304 	and.w	r3, r3, #4
 800c1c8:	2b00      	cmp	r3, #0
 800c1ca:	d02e      	beq.n	800c22a <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800c1cc:	68fb      	ldr	r3, [r7, #12]
 800c1ce:	699b      	ldr	r3, [r3, #24]
 800c1d0:	693a      	ldr	r2, [r7, #16]
 800c1d2:	4413      	add	r3, r2
 800c1d4:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800c1d6:	68ba      	ldr	r2, [r7, #8]
 800c1d8:	693b      	ldr	r3, [r7, #16]
 800c1da:	429a      	cmp	r2, r3
 800c1dc:	d90e      	bls.n	800c1fc <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800c1de:	68fb      	ldr	r3, [r7, #12]
 800c1e0:	68ba      	ldr	r2, [r7, #8]
 800c1e2:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800c1e4:	68fb      	ldr	r3, [r7, #12]
 800c1e6:	68fa      	ldr	r2, [r7, #12]
 800c1e8:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800c1ea:	4b19      	ldr	r3, [pc, #100]	; (800c250 <prvSwitchTimerLists+0xc0>)
 800c1ec:	681a      	ldr	r2, [r3, #0]
 800c1ee:	68fb      	ldr	r3, [r7, #12]
 800c1f0:	3304      	adds	r3, #4
 800c1f2:	4619      	mov	r1, r3
 800c1f4:	4610      	mov	r0, r2
 800c1f6:	f7fe f89c 	bl	800a332 <vListInsert>
 800c1fa:	e016      	b.n	800c22a <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800c1fc:	2300      	movs	r3, #0
 800c1fe:	9300      	str	r3, [sp, #0]
 800c200:	2300      	movs	r3, #0
 800c202:	693a      	ldr	r2, [r7, #16]
 800c204:	2100      	movs	r1, #0
 800c206:	68f8      	ldr	r0, [r7, #12]
 800c208:	f7ff fd60 	bl	800bccc <xTimerGenericCommand>
 800c20c:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800c20e:	687b      	ldr	r3, [r7, #4]
 800c210:	2b00      	cmp	r3, #0
 800c212:	d10a      	bne.n	800c22a <prvSwitchTimerLists+0x9a>
	__asm volatile
 800c214:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c218:	f383 8811 	msr	BASEPRI, r3
 800c21c:	f3bf 8f6f 	isb	sy
 800c220:	f3bf 8f4f 	dsb	sy
 800c224:	603b      	str	r3, [r7, #0]
}
 800c226:	bf00      	nop
 800c228:	e7fe      	b.n	800c228 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800c22a:	4b09      	ldr	r3, [pc, #36]	; (800c250 <prvSwitchTimerLists+0xc0>)
 800c22c:	681b      	ldr	r3, [r3, #0]
 800c22e:	681b      	ldr	r3, [r3, #0]
 800c230:	2b00      	cmp	r3, #0
 800c232:	d1b1      	bne.n	800c198 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800c234:	4b06      	ldr	r3, [pc, #24]	; (800c250 <prvSwitchTimerLists+0xc0>)
 800c236:	681b      	ldr	r3, [r3, #0]
 800c238:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800c23a:	4b06      	ldr	r3, [pc, #24]	; (800c254 <prvSwitchTimerLists+0xc4>)
 800c23c:	681b      	ldr	r3, [r3, #0]
 800c23e:	4a04      	ldr	r2, [pc, #16]	; (800c250 <prvSwitchTimerLists+0xc0>)
 800c240:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800c242:	4a04      	ldr	r2, [pc, #16]	; (800c254 <prvSwitchTimerLists+0xc4>)
 800c244:	697b      	ldr	r3, [r7, #20]
 800c246:	6013      	str	r3, [r2, #0]
}
 800c248:	bf00      	nop
 800c24a:	3718      	adds	r7, #24
 800c24c:	46bd      	mov	sp, r7
 800c24e:	bd80      	pop	{r7, pc}
 800c250:	20000cf0 	.word	0x20000cf0
 800c254:	20000cf4 	.word	0x20000cf4

0800c258 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800c258:	b580      	push	{r7, lr}
 800c25a:	b082      	sub	sp, #8
 800c25c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800c25e:	f000 f969 	bl	800c534 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800c262:	4b15      	ldr	r3, [pc, #84]	; (800c2b8 <prvCheckForValidListAndQueue+0x60>)
 800c264:	681b      	ldr	r3, [r3, #0]
 800c266:	2b00      	cmp	r3, #0
 800c268:	d120      	bne.n	800c2ac <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800c26a:	4814      	ldr	r0, [pc, #80]	; (800c2bc <prvCheckForValidListAndQueue+0x64>)
 800c26c:	f7fe f810 	bl	800a290 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800c270:	4813      	ldr	r0, [pc, #76]	; (800c2c0 <prvCheckForValidListAndQueue+0x68>)
 800c272:	f7fe f80d 	bl	800a290 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800c276:	4b13      	ldr	r3, [pc, #76]	; (800c2c4 <prvCheckForValidListAndQueue+0x6c>)
 800c278:	4a10      	ldr	r2, [pc, #64]	; (800c2bc <prvCheckForValidListAndQueue+0x64>)
 800c27a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800c27c:	4b12      	ldr	r3, [pc, #72]	; (800c2c8 <prvCheckForValidListAndQueue+0x70>)
 800c27e:	4a10      	ldr	r2, [pc, #64]	; (800c2c0 <prvCheckForValidListAndQueue+0x68>)
 800c280:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800c282:	2300      	movs	r3, #0
 800c284:	9300      	str	r3, [sp, #0]
 800c286:	4b11      	ldr	r3, [pc, #68]	; (800c2cc <prvCheckForValidListAndQueue+0x74>)
 800c288:	4a11      	ldr	r2, [pc, #68]	; (800c2d0 <prvCheckForValidListAndQueue+0x78>)
 800c28a:	2110      	movs	r1, #16
 800c28c:	200a      	movs	r0, #10
 800c28e:	f7fe f91b 	bl	800a4c8 <xQueueGenericCreateStatic>
 800c292:	4603      	mov	r3, r0
 800c294:	4a08      	ldr	r2, [pc, #32]	; (800c2b8 <prvCheckForValidListAndQueue+0x60>)
 800c296:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800c298:	4b07      	ldr	r3, [pc, #28]	; (800c2b8 <prvCheckForValidListAndQueue+0x60>)
 800c29a:	681b      	ldr	r3, [r3, #0]
 800c29c:	2b00      	cmp	r3, #0
 800c29e:	d005      	beq.n	800c2ac <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800c2a0:	4b05      	ldr	r3, [pc, #20]	; (800c2b8 <prvCheckForValidListAndQueue+0x60>)
 800c2a2:	681b      	ldr	r3, [r3, #0]
 800c2a4:	490b      	ldr	r1, [pc, #44]	; (800c2d4 <prvCheckForValidListAndQueue+0x7c>)
 800c2a6:	4618      	mov	r0, r3
 800c2a8:	f7fe fd34 	bl	800ad14 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800c2ac:	f000 f972 	bl	800c594 <vPortExitCritical>
}
 800c2b0:	bf00      	nop
 800c2b2:	46bd      	mov	sp, r7
 800c2b4:	bd80      	pop	{r7, pc}
 800c2b6:	bf00      	nop
 800c2b8:	20000cf8 	.word	0x20000cf8
 800c2bc:	20000cc8 	.word	0x20000cc8
 800c2c0:	20000cdc 	.word	0x20000cdc
 800c2c4:	20000cf0 	.word	0x20000cf0
 800c2c8:	20000cf4 	.word	0x20000cf4
 800c2cc:	20000da4 	.word	0x20000da4
 800c2d0:	20000d04 	.word	0x20000d04
 800c2d4:	0800f524 	.word	0x0800f524

0800c2d8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800c2d8:	b480      	push	{r7}
 800c2da:	b085      	sub	sp, #20
 800c2dc:	af00      	add	r7, sp, #0
 800c2de:	60f8      	str	r0, [r7, #12]
 800c2e0:	60b9      	str	r1, [r7, #8]
 800c2e2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800c2e4:	68fb      	ldr	r3, [r7, #12]
 800c2e6:	3b04      	subs	r3, #4
 800c2e8:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800c2ea:	68fb      	ldr	r3, [r7, #12]
 800c2ec:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800c2f0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800c2f2:	68fb      	ldr	r3, [r7, #12]
 800c2f4:	3b04      	subs	r3, #4
 800c2f6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800c2f8:	68bb      	ldr	r3, [r7, #8]
 800c2fa:	f023 0201 	bic.w	r2, r3, #1
 800c2fe:	68fb      	ldr	r3, [r7, #12]
 800c300:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800c302:	68fb      	ldr	r3, [r7, #12]
 800c304:	3b04      	subs	r3, #4
 800c306:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800c308:	4a0c      	ldr	r2, [pc, #48]	; (800c33c <pxPortInitialiseStack+0x64>)
 800c30a:	68fb      	ldr	r3, [r7, #12]
 800c30c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800c30e:	68fb      	ldr	r3, [r7, #12]
 800c310:	3b14      	subs	r3, #20
 800c312:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800c314:	687a      	ldr	r2, [r7, #4]
 800c316:	68fb      	ldr	r3, [r7, #12]
 800c318:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800c31a:	68fb      	ldr	r3, [r7, #12]
 800c31c:	3b04      	subs	r3, #4
 800c31e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800c320:	68fb      	ldr	r3, [r7, #12]
 800c322:	f06f 0202 	mvn.w	r2, #2
 800c326:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800c328:	68fb      	ldr	r3, [r7, #12]
 800c32a:	3b20      	subs	r3, #32
 800c32c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800c32e:	68fb      	ldr	r3, [r7, #12]
}
 800c330:	4618      	mov	r0, r3
 800c332:	3714      	adds	r7, #20
 800c334:	46bd      	mov	sp, r7
 800c336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c33a:	4770      	bx	lr
 800c33c:	0800c341 	.word	0x0800c341

0800c340 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800c340:	b480      	push	{r7}
 800c342:	b085      	sub	sp, #20
 800c344:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800c346:	2300      	movs	r3, #0
 800c348:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800c34a:	4b12      	ldr	r3, [pc, #72]	; (800c394 <prvTaskExitError+0x54>)
 800c34c:	681b      	ldr	r3, [r3, #0]
 800c34e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c352:	d00a      	beq.n	800c36a <prvTaskExitError+0x2a>
	__asm volatile
 800c354:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c358:	f383 8811 	msr	BASEPRI, r3
 800c35c:	f3bf 8f6f 	isb	sy
 800c360:	f3bf 8f4f 	dsb	sy
 800c364:	60fb      	str	r3, [r7, #12]
}
 800c366:	bf00      	nop
 800c368:	e7fe      	b.n	800c368 <prvTaskExitError+0x28>
	__asm volatile
 800c36a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c36e:	f383 8811 	msr	BASEPRI, r3
 800c372:	f3bf 8f6f 	isb	sy
 800c376:	f3bf 8f4f 	dsb	sy
 800c37a:	60bb      	str	r3, [r7, #8]
}
 800c37c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800c37e:	bf00      	nop
 800c380:	687b      	ldr	r3, [r7, #4]
 800c382:	2b00      	cmp	r3, #0
 800c384:	d0fc      	beq.n	800c380 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800c386:	bf00      	nop
 800c388:	bf00      	nop
 800c38a:	3714      	adds	r7, #20
 800c38c:	46bd      	mov	sp, r7
 800c38e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c392:	4770      	bx	lr
 800c394:	2000000c 	.word	0x2000000c
	...

0800c3a0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800c3a0:	4b07      	ldr	r3, [pc, #28]	; (800c3c0 <pxCurrentTCBConst2>)
 800c3a2:	6819      	ldr	r1, [r3, #0]
 800c3a4:	6808      	ldr	r0, [r1, #0]
 800c3a6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c3aa:	f380 8809 	msr	PSP, r0
 800c3ae:	f3bf 8f6f 	isb	sy
 800c3b2:	f04f 0000 	mov.w	r0, #0
 800c3b6:	f380 8811 	msr	BASEPRI, r0
 800c3ba:	4770      	bx	lr
 800c3bc:	f3af 8000 	nop.w

0800c3c0 <pxCurrentTCBConst2>:
 800c3c0:	200007c8 	.word	0x200007c8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800c3c4:	bf00      	nop
 800c3c6:	bf00      	nop

0800c3c8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800c3c8:	4808      	ldr	r0, [pc, #32]	; (800c3ec <prvPortStartFirstTask+0x24>)
 800c3ca:	6800      	ldr	r0, [r0, #0]
 800c3cc:	6800      	ldr	r0, [r0, #0]
 800c3ce:	f380 8808 	msr	MSP, r0
 800c3d2:	f04f 0000 	mov.w	r0, #0
 800c3d6:	f380 8814 	msr	CONTROL, r0
 800c3da:	b662      	cpsie	i
 800c3dc:	b661      	cpsie	f
 800c3de:	f3bf 8f4f 	dsb	sy
 800c3e2:	f3bf 8f6f 	isb	sy
 800c3e6:	df00      	svc	0
 800c3e8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800c3ea:	bf00      	nop
 800c3ec:	e000ed08 	.word	0xe000ed08

0800c3f0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800c3f0:	b580      	push	{r7, lr}
 800c3f2:	b086      	sub	sp, #24
 800c3f4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800c3f6:	4b46      	ldr	r3, [pc, #280]	; (800c510 <xPortStartScheduler+0x120>)
 800c3f8:	681b      	ldr	r3, [r3, #0]
 800c3fa:	4a46      	ldr	r2, [pc, #280]	; (800c514 <xPortStartScheduler+0x124>)
 800c3fc:	4293      	cmp	r3, r2
 800c3fe:	d10a      	bne.n	800c416 <xPortStartScheduler+0x26>
	__asm volatile
 800c400:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c404:	f383 8811 	msr	BASEPRI, r3
 800c408:	f3bf 8f6f 	isb	sy
 800c40c:	f3bf 8f4f 	dsb	sy
 800c410:	613b      	str	r3, [r7, #16]
}
 800c412:	bf00      	nop
 800c414:	e7fe      	b.n	800c414 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800c416:	4b3e      	ldr	r3, [pc, #248]	; (800c510 <xPortStartScheduler+0x120>)
 800c418:	681b      	ldr	r3, [r3, #0]
 800c41a:	4a3f      	ldr	r2, [pc, #252]	; (800c518 <xPortStartScheduler+0x128>)
 800c41c:	4293      	cmp	r3, r2
 800c41e:	d10a      	bne.n	800c436 <xPortStartScheduler+0x46>
	__asm volatile
 800c420:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c424:	f383 8811 	msr	BASEPRI, r3
 800c428:	f3bf 8f6f 	isb	sy
 800c42c:	f3bf 8f4f 	dsb	sy
 800c430:	60fb      	str	r3, [r7, #12]
}
 800c432:	bf00      	nop
 800c434:	e7fe      	b.n	800c434 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800c436:	4b39      	ldr	r3, [pc, #228]	; (800c51c <xPortStartScheduler+0x12c>)
 800c438:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800c43a:	697b      	ldr	r3, [r7, #20]
 800c43c:	781b      	ldrb	r3, [r3, #0]
 800c43e:	b2db      	uxtb	r3, r3
 800c440:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800c442:	697b      	ldr	r3, [r7, #20]
 800c444:	22ff      	movs	r2, #255	; 0xff
 800c446:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800c448:	697b      	ldr	r3, [r7, #20]
 800c44a:	781b      	ldrb	r3, [r3, #0]
 800c44c:	b2db      	uxtb	r3, r3
 800c44e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800c450:	78fb      	ldrb	r3, [r7, #3]
 800c452:	b2db      	uxtb	r3, r3
 800c454:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800c458:	b2da      	uxtb	r2, r3
 800c45a:	4b31      	ldr	r3, [pc, #196]	; (800c520 <xPortStartScheduler+0x130>)
 800c45c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800c45e:	4b31      	ldr	r3, [pc, #196]	; (800c524 <xPortStartScheduler+0x134>)
 800c460:	2207      	movs	r2, #7
 800c462:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800c464:	e009      	b.n	800c47a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800c466:	4b2f      	ldr	r3, [pc, #188]	; (800c524 <xPortStartScheduler+0x134>)
 800c468:	681b      	ldr	r3, [r3, #0]
 800c46a:	3b01      	subs	r3, #1
 800c46c:	4a2d      	ldr	r2, [pc, #180]	; (800c524 <xPortStartScheduler+0x134>)
 800c46e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800c470:	78fb      	ldrb	r3, [r7, #3]
 800c472:	b2db      	uxtb	r3, r3
 800c474:	005b      	lsls	r3, r3, #1
 800c476:	b2db      	uxtb	r3, r3
 800c478:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800c47a:	78fb      	ldrb	r3, [r7, #3]
 800c47c:	b2db      	uxtb	r3, r3
 800c47e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c482:	2b80      	cmp	r3, #128	; 0x80
 800c484:	d0ef      	beq.n	800c466 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800c486:	4b27      	ldr	r3, [pc, #156]	; (800c524 <xPortStartScheduler+0x134>)
 800c488:	681b      	ldr	r3, [r3, #0]
 800c48a:	f1c3 0307 	rsb	r3, r3, #7
 800c48e:	2b04      	cmp	r3, #4
 800c490:	d00a      	beq.n	800c4a8 <xPortStartScheduler+0xb8>
	__asm volatile
 800c492:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c496:	f383 8811 	msr	BASEPRI, r3
 800c49a:	f3bf 8f6f 	isb	sy
 800c49e:	f3bf 8f4f 	dsb	sy
 800c4a2:	60bb      	str	r3, [r7, #8]
}
 800c4a4:	bf00      	nop
 800c4a6:	e7fe      	b.n	800c4a6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800c4a8:	4b1e      	ldr	r3, [pc, #120]	; (800c524 <xPortStartScheduler+0x134>)
 800c4aa:	681b      	ldr	r3, [r3, #0]
 800c4ac:	021b      	lsls	r3, r3, #8
 800c4ae:	4a1d      	ldr	r2, [pc, #116]	; (800c524 <xPortStartScheduler+0x134>)
 800c4b0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800c4b2:	4b1c      	ldr	r3, [pc, #112]	; (800c524 <xPortStartScheduler+0x134>)
 800c4b4:	681b      	ldr	r3, [r3, #0]
 800c4b6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800c4ba:	4a1a      	ldr	r2, [pc, #104]	; (800c524 <xPortStartScheduler+0x134>)
 800c4bc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800c4be:	687b      	ldr	r3, [r7, #4]
 800c4c0:	b2da      	uxtb	r2, r3
 800c4c2:	697b      	ldr	r3, [r7, #20]
 800c4c4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800c4c6:	4b18      	ldr	r3, [pc, #96]	; (800c528 <xPortStartScheduler+0x138>)
 800c4c8:	681b      	ldr	r3, [r3, #0]
 800c4ca:	4a17      	ldr	r2, [pc, #92]	; (800c528 <xPortStartScheduler+0x138>)
 800c4cc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800c4d0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800c4d2:	4b15      	ldr	r3, [pc, #84]	; (800c528 <xPortStartScheduler+0x138>)
 800c4d4:	681b      	ldr	r3, [r3, #0]
 800c4d6:	4a14      	ldr	r2, [pc, #80]	; (800c528 <xPortStartScheduler+0x138>)
 800c4d8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800c4dc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800c4de:	f000 f8dd 	bl	800c69c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800c4e2:	4b12      	ldr	r3, [pc, #72]	; (800c52c <xPortStartScheduler+0x13c>)
 800c4e4:	2200      	movs	r2, #0
 800c4e6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800c4e8:	f000 f8fc 	bl	800c6e4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800c4ec:	4b10      	ldr	r3, [pc, #64]	; (800c530 <xPortStartScheduler+0x140>)
 800c4ee:	681b      	ldr	r3, [r3, #0]
 800c4f0:	4a0f      	ldr	r2, [pc, #60]	; (800c530 <xPortStartScheduler+0x140>)
 800c4f2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800c4f6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800c4f8:	f7ff ff66 	bl	800c3c8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800c4fc:	f7ff f81a 	bl	800b534 <vTaskSwitchContext>
	prvTaskExitError();
 800c500:	f7ff ff1e 	bl	800c340 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800c504:	2300      	movs	r3, #0
}
 800c506:	4618      	mov	r0, r3
 800c508:	3718      	adds	r7, #24
 800c50a:	46bd      	mov	sp, r7
 800c50c:	bd80      	pop	{r7, pc}
 800c50e:	bf00      	nop
 800c510:	e000ed00 	.word	0xe000ed00
 800c514:	410fc271 	.word	0x410fc271
 800c518:	410fc270 	.word	0x410fc270
 800c51c:	e000e400 	.word	0xe000e400
 800c520:	20000df4 	.word	0x20000df4
 800c524:	20000df8 	.word	0x20000df8
 800c528:	e000ed20 	.word	0xe000ed20
 800c52c:	2000000c 	.word	0x2000000c
 800c530:	e000ef34 	.word	0xe000ef34

0800c534 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800c534:	b480      	push	{r7}
 800c536:	b083      	sub	sp, #12
 800c538:	af00      	add	r7, sp, #0
	__asm volatile
 800c53a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c53e:	f383 8811 	msr	BASEPRI, r3
 800c542:	f3bf 8f6f 	isb	sy
 800c546:	f3bf 8f4f 	dsb	sy
 800c54a:	607b      	str	r3, [r7, #4]
}
 800c54c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800c54e:	4b0f      	ldr	r3, [pc, #60]	; (800c58c <vPortEnterCritical+0x58>)
 800c550:	681b      	ldr	r3, [r3, #0]
 800c552:	3301      	adds	r3, #1
 800c554:	4a0d      	ldr	r2, [pc, #52]	; (800c58c <vPortEnterCritical+0x58>)
 800c556:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800c558:	4b0c      	ldr	r3, [pc, #48]	; (800c58c <vPortEnterCritical+0x58>)
 800c55a:	681b      	ldr	r3, [r3, #0]
 800c55c:	2b01      	cmp	r3, #1
 800c55e:	d10f      	bne.n	800c580 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800c560:	4b0b      	ldr	r3, [pc, #44]	; (800c590 <vPortEnterCritical+0x5c>)
 800c562:	681b      	ldr	r3, [r3, #0]
 800c564:	b2db      	uxtb	r3, r3
 800c566:	2b00      	cmp	r3, #0
 800c568:	d00a      	beq.n	800c580 <vPortEnterCritical+0x4c>
	__asm volatile
 800c56a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c56e:	f383 8811 	msr	BASEPRI, r3
 800c572:	f3bf 8f6f 	isb	sy
 800c576:	f3bf 8f4f 	dsb	sy
 800c57a:	603b      	str	r3, [r7, #0]
}
 800c57c:	bf00      	nop
 800c57e:	e7fe      	b.n	800c57e <vPortEnterCritical+0x4a>
	}
}
 800c580:	bf00      	nop
 800c582:	370c      	adds	r7, #12
 800c584:	46bd      	mov	sp, r7
 800c586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c58a:	4770      	bx	lr
 800c58c:	2000000c 	.word	0x2000000c
 800c590:	e000ed04 	.word	0xe000ed04

0800c594 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800c594:	b480      	push	{r7}
 800c596:	b083      	sub	sp, #12
 800c598:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800c59a:	4b12      	ldr	r3, [pc, #72]	; (800c5e4 <vPortExitCritical+0x50>)
 800c59c:	681b      	ldr	r3, [r3, #0]
 800c59e:	2b00      	cmp	r3, #0
 800c5a0:	d10a      	bne.n	800c5b8 <vPortExitCritical+0x24>
	__asm volatile
 800c5a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c5a6:	f383 8811 	msr	BASEPRI, r3
 800c5aa:	f3bf 8f6f 	isb	sy
 800c5ae:	f3bf 8f4f 	dsb	sy
 800c5b2:	607b      	str	r3, [r7, #4]
}
 800c5b4:	bf00      	nop
 800c5b6:	e7fe      	b.n	800c5b6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800c5b8:	4b0a      	ldr	r3, [pc, #40]	; (800c5e4 <vPortExitCritical+0x50>)
 800c5ba:	681b      	ldr	r3, [r3, #0]
 800c5bc:	3b01      	subs	r3, #1
 800c5be:	4a09      	ldr	r2, [pc, #36]	; (800c5e4 <vPortExitCritical+0x50>)
 800c5c0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800c5c2:	4b08      	ldr	r3, [pc, #32]	; (800c5e4 <vPortExitCritical+0x50>)
 800c5c4:	681b      	ldr	r3, [r3, #0]
 800c5c6:	2b00      	cmp	r3, #0
 800c5c8:	d105      	bne.n	800c5d6 <vPortExitCritical+0x42>
 800c5ca:	2300      	movs	r3, #0
 800c5cc:	603b      	str	r3, [r7, #0]
	__asm volatile
 800c5ce:	683b      	ldr	r3, [r7, #0]
 800c5d0:	f383 8811 	msr	BASEPRI, r3
}
 800c5d4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800c5d6:	bf00      	nop
 800c5d8:	370c      	adds	r7, #12
 800c5da:	46bd      	mov	sp, r7
 800c5dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5e0:	4770      	bx	lr
 800c5e2:	bf00      	nop
 800c5e4:	2000000c 	.word	0x2000000c
	...

0800c5f0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800c5f0:	f3ef 8009 	mrs	r0, PSP
 800c5f4:	f3bf 8f6f 	isb	sy
 800c5f8:	4b15      	ldr	r3, [pc, #84]	; (800c650 <pxCurrentTCBConst>)
 800c5fa:	681a      	ldr	r2, [r3, #0]
 800c5fc:	f01e 0f10 	tst.w	lr, #16
 800c600:	bf08      	it	eq
 800c602:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800c606:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c60a:	6010      	str	r0, [r2, #0]
 800c60c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800c610:	f04f 0050 	mov.w	r0, #80	; 0x50
 800c614:	f380 8811 	msr	BASEPRI, r0
 800c618:	f3bf 8f4f 	dsb	sy
 800c61c:	f3bf 8f6f 	isb	sy
 800c620:	f7fe ff88 	bl	800b534 <vTaskSwitchContext>
 800c624:	f04f 0000 	mov.w	r0, #0
 800c628:	f380 8811 	msr	BASEPRI, r0
 800c62c:	bc09      	pop	{r0, r3}
 800c62e:	6819      	ldr	r1, [r3, #0]
 800c630:	6808      	ldr	r0, [r1, #0]
 800c632:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c636:	f01e 0f10 	tst.w	lr, #16
 800c63a:	bf08      	it	eq
 800c63c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800c640:	f380 8809 	msr	PSP, r0
 800c644:	f3bf 8f6f 	isb	sy
 800c648:	4770      	bx	lr
 800c64a:	bf00      	nop
 800c64c:	f3af 8000 	nop.w

0800c650 <pxCurrentTCBConst>:
 800c650:	200007c8 	.word	0x200007c8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800c654:	bf00      	nop
 800c656:	bf00      	nop

0800c658 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800c658:	b580      	push	{r7, lr}
 800c65a:	b082      	sub	sp, #8
 800c65c:	af00      	add	r7, sp, #0
	__asm volatile
 800c65e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c662:	f383 8811 	msr	BASEPRI, r3
 800c666:	f3bf 8f6f 	isb	sy
 800c66a:	f3bf 8f4f 	dsb	sy
 800c66e:	607b      	str	r3, [r7, #4]
}
 800c670:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800c672:	f7fe fea5 	bl	800b3c0 <xTaskIncrementTick>
 800c676:	4603      	mov	r3, r0
 800c678:	2b00      	cmp	r3, #0
 800c67a:	d003      	beq.n	800c684 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800c67c:	4b06      	ldr	r3, [pc, #24]	; (800c698 <xPortSysTickHandler+0x40>)
 800c67e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c682:	601a      	str	r2, [r3, #0]
 800c684:	2300      	movs	r3, #0
 800c686:	603b      	str	r3, [r7, #0]
	__asm volatile
 800c688:	683b      	ldr	r3, [r7, #0]
 800c68a:	f383 8811 	msr	BASEPRI, r3
}
 800c68e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800c690:	bf00      	nop
 800c692:	3708      	adds	r7, #8
 800c694:	46bd      	mov	sp, r7
 800c696:	bd80      	pop	{r7, pc}
 800c698:	e000ed04 	.word	0xe000ed04

0800c69c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800c69c:	b480      	push	{r7}
 800c69e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800c6a0:	4b0b      	ldr	r3, [pc, #44]	; (800c6d0 <vPortSetupTimerInterrupt+0x34>)
 800c6a2:	2200      	movs	r2, #0
 800c6a4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800c6a6:	4b0b      	ldr	r3, [pc, #44]	; (800c6d4 <vPortSetupTimerInterrupt+0x38>)
 800c6a8:	2200      	movs	r2, #0
 800c6aa:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800c6ac:	4b0a      	ldr	r3, [pc, #40]	; (800c6d8 <vPortSetupTimerInterrupt+0x3c>)
 800c6ae:	681b      	ldr	r3, [r3, #0]
 800c6b0:	4a0a      	ldr	r2, [pc, #40]	; (800c6dc <vPortSetupTimerInterrupt+0x40>)
 800c6b2:	fba2 2303 	umull	r2, r3, r2, r3
 800c6b6:	099b      	lsrs	r3, r3, #6
 800c6b8:	4a09      	ldr	r2, [pc, #36]	; (800c6e0 <vPortSetupTimerInterrupt+0x44>)
 800c6ba:	3b01      	subs	r3, #1
 800c6bc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800c6be:	4b04      	ldr	r3, [pc, #16]	; (800c6d0 <vPortSetupTimerInterrupt+0x34>)
 800c6c0:	2207      	movs	r2, #7
 800c6c2:	601a      	str	r2, [r3, #0]
}
 800c6c4:	bf00      	nop
 800c6c6:	46bd      	mov	sp, r7
 800c6c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6cc:	4770      	bx	lr
 800c6ce:	bf00      	nop
 800c6d0:	e000e010 	.word	0xe000e010
 800c6d4:	e000e018 	.word	0xe000e018
 800c6d8:	20000000 	.word	0x20000000
 800c6dc:	10624dd3 	.word	0x10624dd3
 800c6e0:	e000e014 	.word	0xe000e014

0800c6e4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800c6e4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800c6f4 <vPortEnableVFP+0x10>
 800c6e8:	6801      	ldr	r1, [r0, #0]
 800c6ea:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800c6ee:	6001      	str	r1, [r0, #0]
 800c6f0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800c6f2:	bf00      	nop
 800c6f4:	e000ed88 	.word	0xe000ed88

0800c6f8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800c6f8:	b480      	push	{r7}
 800c6fa:	b085      	sub	sp, #20
 800c6fc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800c6fe:	f3ef 8305 	mrs	r3, IPSR
 800c702:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800c704:	68fb      	ldr	r3, [r7, #12]
 800c706:	2b0f      	cmp	r3, #15
 800c708:	d914      	bls.n	800c734 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800c70a:	4a17      	ldr	r2, [pc, #92]	; (800c768 <vPortValidateInterruptPriority+0x70>)
 800c70c:	68fb      	ldr	r3, [r7, #12]
 800c70e:	4413      	add	r3, r2
 800c710:	781b      	ldrb	r3, [r3, #0]
 800c712:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800c714:	4b15      	ldr	r3, [pc, #84]	; (800c76c <vPortValidateInterruptPriority+0x74>)
 800c716:	781b      	ldrb	r3, [r3, #0]
 800c718:	7afa      	ldrb	r2, [r7, #11]
 800c71a:	429a      	cmp	r2, r3
 800c71c:	d20a      	bcs.n	800c734 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800c71e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c722:	f383 8811 	msr	BASEPRI, r3
 800c726:	f3bf 8f6f 	isb	sy
 800c72a:	f3bf 8f4f 	dsb	sy
 800c72e:	607b      	str	r3, [r7, #4]
}
 800c730:	bf00      	nop
 800c732:	e7fe      	b.n	800c732 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800c734:	4b0e      	ldr	r3, [pc, #56]	; (800c770 <vPortValidateInterruptPriority+0x78>)
 800c736:	681b      	ldr	r3, [r3, #0]
 800c738:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800c73c:	4b0d      	ldr	r3, [pc, #52]	; (800c774 <vPortValidateInterruptPriority+0x7c>)
 800c73e:	681b      	ldr	r3, [r3, #0]
 800c740:	429a      	cmp	r2, r3
 800c742:	d90a      	bls.n	800c75a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800c744:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c748:	f383 8811 	msr	BASEPRI, r3
 800c74c:	f3bf 8f6f 	isb	sy
 800c750:	f3bf 8f4f 	dsb	sy
 800c754:	603b      	str	r3, [r7, #0]
}
 800c756:	bf00      	nop
 800c758:	e7fe      	b.n	800c758 <vPortValidateInterruptPriority+0x60>
	}
 800c75a:	bf00      	nop
 800c75c:	3714      	adds	r7, #20
 800c75e:	46bd      	mov	sp, r7
 800c760:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c764:	4770      	bx	lr
 800c766:	bf00      	nop
 800c768:	e000e3f0 	.word	0xe000e3f0
 800c76c:	20000df4 	.word	0x20000df4
 800c770:	e000ed0c 	.word	0xe000ed0c
 800c774:	20000df8 	.word	0x20000df8

0800c778 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800c778:	b580      	push	{r7, lr}
 800c77a:	b08a      	sub	sp, #40	; 0x28
 800c77c:	af00      	add	r7, sp, #0
 800c77e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800c780:	2300      	movs	r3, #0
 800c782:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800c784:	f7fe fd60 	bl	800b248 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800c788:	4b5b      	ldr	r3, [pc, #364]	; (800c8f8 <pvPortMalloc+0x180>)
 800c78a:	681b      	ldr	r3, [r3, #0]
 800c78c:	2b00      	cmp	r3, #0
 800c78e:	d101      	bne.n	800c794 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800c790:	f000 f920 	bl	800c9d4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800c794:	4b59      	ldr	r3, [pc, #356]	; (800c8fc <pvPortMalloc+0x184>)
 800c796:	681a      	ldr	r2, [r3, #0]
 800c798:	687b      	ldr	r3, [r7, #4]
 800c79a:	4013      	ands	r3, r2
 800c79c:	2b00      	cmp	r3, #0
 800c79e:	f040 8093 	bne.w	800c8c8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800c7a2:	687b      	ldr	r3, [r7, #4]
 800c7a4:	2b00      	cmp	r3, #0
 800c7a6:	d01d      	beq.n	800c7e4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800c7a8:	2208      	movs	r2, #8
 800c7aa:	687b      	ldr	r3, [r7, #4]
 800c7ac:	4413      	add	r3, r2
 800c7ae:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800c7b0:	687b      	ldr	r3, [r7, #4]
 800c7b2:	f003 0307 	and.w	r3, r3, #7
 800c7b6:	2b00      	cmp	r3, #0
 800c7b8:	d014      	beq.n	800c7e4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800c7ba:	687b      	ldr	r3, [r7, #4]
 800c7bc:	f023 0307 	bic.w	r3, r3, #7
 800c7c0:	3308      	adds	r3, #8
 800c7c2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800c7c4:	687b      	ldr	r3, [r7, #4]
 800c7c6:	f003 0307 	and.w	r3, r3, #7
 800c7ca:	2b00      	cmp	r3, #0
 800c7cc:	d00a      	beq.n	800c7e4 <pvPortMalloc+0x6c>
	__asm volatile
 800c7ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c7d2:	f383 8811 	msr	BASEPRI, r3
 800c7d6:	f3bf 8f6f 	isb	sy
 800c7da:	f3bf 8f4f 	dsb	sy
 800c7de:	617b      	str	r3, [r7, #20]
}
 800c7e0:	bf00      	nop
 800c7e2:	e7fe      	b.n	800c7e2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800c7e4:	687b      	ldr	r3, [r7, #4]
 800c7e6:	2b00      	cmp	r3, #0
 800c7e8:	d06e      	beq.n	800c8c8 <pvPortMalloc+0x150>
 800c7ea:	4b45      	ldr	r3, [pc, #276]	; (800c900 <pvPortMalloc+0x188>)
 800c7ec:	681b      	ldr	r3, [r3, #0]
 800c7ee:	687a      	ldr	r2, [r7, #4]
 800c7f0:	429a      	cmp	r2, r3
 800c7f2:	d869      	bhi.n	800c8c8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800c7f4:	4b43      	ldr	r3, [pc, #268]	; (800c904 <pvPortMalloc+0x18c>)
 800c7f6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800c7f8:	4b42      	ldr	r3, [pc, #264]	; (800c904 <pvPortMalloc+0x18c>)
 800c7fa:	681b      	ldr	r3, [r3, #0]
 800c7fc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800c7fe:	e004      	b.n	800c80a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800c800:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c802:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800c804:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c806:	681b      	ldr	r3, [r3, #0]
 800c808:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800c80a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c80c:	685b      	ldr	r3, [r3, #4]
 800c80e:	687a      	ldr	r2, [r7, #4]
 800c810:	429a      	cmp	r2, r3
 800c812:	d903      	bls.n	800c81c <pvPortMalloc+0xa4>
 800c814:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c816:	681b      	ldr	r3, [r3, #0]
 800c818:	2b00      	cmp	r3, #0
 800c81a:	d1f1      	bne.n	800c800 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800c81c:	4b36      	ldr	r3, [pc, #216]	; (800c8f8 <pvPortMalloc+0x180>)
 800c81e:	681b      	ldr	r3, [r3, #0]
 800c820:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c822:	429a      	cmp	r2, r3
 800c824:	d050      	beq.n	800c8c8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800c826:	6a3b      	ldr	r3, [r7, #32]
 800c828:	681b      	ldr	r3, [r3, #0]
 800c82a:	2208      	movs	r2, #8
 800c82c:	4413      	add	r3, r2
 800c82e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800c830:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c832:	681a      	ldr	r2, [r3, #0]
 800c834:	6a3b      	ldr	r3, [r7, #32]
 800c836:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800c838:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c83a:	685a      	ldr	r2, [r3, #4]
 800c83c:	687b      	ldr	r3, [r7, #4]
 800c83e:	1ad2      	subs	r2, r2, r3
 800c840:	2308      	movs	r3, #8
 800c842:	005b      	lsls	r3, r3, #1
 800c844:	429a      	cmp	r2, r3
 800c846:	d91f      	bls.n	800c888 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800c848:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c84a:	687b      	ldr	r3, [r7, #4]
 800c84c:	4413      	add	r3, r2
 800c84e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800c850:	69bb      	ldr	r3, [r7, #24]
 800c852:	f003 0307 	and.w	r3, r3, #7
 800c856:	2b00      	cmp	r3, #0
 800c858:	d00a      	beq.n	800c870 <pvPortMalloc+0xf8>
	__asm volatile
 800c85a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c85e:	f383 8811 	msr	BASEPRI, r3
 800c862:	f3bf 8f6f 	isb	sy
 800c866:	f3bf 8f4f 	dsb	sy
 800c86a:	613b      	str	r3, [r7, #16]
}
 800c86c:	bf00      	nop
 800c86e:	e7fe      	b.n	800c86e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800c870:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c872:	685a      	ldr	r2, [r3, #4]
 800c874:	687b      	ldr	r3, [r7, #4]
 800c876:	1ad2      	subs	r2, r2, r3
 800c878:	69bb      	ldr	r3, [r7, #24]
 800c87a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800c87c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c87e:	687a      	ldr	r2, [r7, #4]
 800c880:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800c882:	69b8      	ldr	r0, [r7, #24]
 800c884:	f000 f908 	bl	800ca98 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800c888:	4b1d      	ldr	r3, [pc, #116]	; (800c900 <pvPortMalloc+0x188>)
 800c88a:	681a      	ldr	r2, [r3, #0]
 800c88c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c88e:	685b      	ldr	r3, [r3, #4]
 800c890:	1ad3      	subs	r3, r2, r3
 800c892:	4a1b      	ldr	r2, [pc, #108]	; (800c900 <pvPortMalloc+0x188>)
 800c894:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800c896:	4b1a      	ldr	r3, [pc, #104]	; (800c900 <pvPortMalloc+0x188>)
 800c898:	681a      	ldr	r2, [r3, #0]
 800c89a:	4b1b      	ldr	r3, [pc, #108]	; (800c908 <pvPortMalloc+0x190>)
 800c89c:	681b      	ldr	r3, [r3, #0]
 800c89e:	429a      	cmp	r2, r3
 800c8a0:	d203      	bcs.n	800c8aa <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800c8a2:	4b17      	ldr	r3, [pc, #92]	; (800c900 <pvPortMalloc+0x188>)
 800c8a4:	681b      	ldr	r3, [r3, #0]
 800c8a6:	4a18      	ldr	r2, [pc, #96]	; (800c908 <pvPortMalloc+0x190>)
 800c8a8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800c8aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c8ac:	685a      	ldr	r2, [r3, #4]
 800c8ae:	4b13      	ldr	r3, [pc, #76]	; (800c8fc <pvPortMalloc+0x184>)
 800c8b0:	681b      	ldr	r3, [r3, #0]
 800c8b2:	431a      	orrs	r2, r3
 800c8b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c8b6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800c8b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c8ba:	2200      	movs	r2, #0
 800c8bc:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800c8be:	4b13      	ldr	r3, [pc, #76]	; (800c90c <pvPortMalloc+0x194>)
 800c8c0:	681b      	ldr	r3, [r3, #0]
 800c8c2:	3301      	adds	r3, #1
 800c8c4:	4a11      	ldr	r2, [pc, #68]	; (800c90c <pvPortMalloc+0x194>)
 800c8c6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800c8c8:	f7fe fccc 	bl	800b264 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800c8cc:	69fb      	ldr	r3, [r7, #28]
 800c8ce:	f003 0307 	and.w	r3, r3, #7
 800c8d2:	2b00      	cmp	r3, #0
 800c8d4:	d00a      	beq.n	800c8ec <pvPortMalloc+0x174>
	__asm volatile
 800c8d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c8da:	f383 8811 	msr	BASEPRI, r3
 800c8de:	f3bf 8f6f 	isb	sy
 800c8e2:	f3bf 8f4f 	dsb	sy
 800c8e6:	60fb      	str	r3, [r7, #12]
}
 800c8e8:	bf00      	nop
 800c8ea:	e7fe      	b.n	800c8ea <pvPortMalloc+0x172>
	return pvReturn;
 800c8ec:	69fb      	ldr	r3, [r7, #28]
}
 800c8ee:	4618      	mov	r0, r3
 800c8f0:	3728      	adds	r7, #40	; 0x28
 800c8f2:	46bd      	mov	sp, r7
 800c8f4:	bd80      	pop	{r7, pc}
 800c8f6:	bf00      	nop
 800c8f8:	20004a04 	.word	0x20004a04
 800c8fc:	20004a18 	.word	0x20004a18
 800c900:	20004a08 	.word	0x20004a08
 800c904:	200049fc 	.word	0x200049fc
 800c908:	20004a0c 	.word	0x20004a0c
 800c90c:	20004a10 	.word	0x20004a10

0800c910 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800c910:	b580      	push	{r7, lr}
 800c912:	b086      	sub	sp, #24
 800c914:	af00      	add	r7, sp, #0
 800c916:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800c918:	687b      	ldr	r3, [r7, #4]
 800c91a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800c91c:	687b      	ldr	r3, [r7, #4]
 800c91e:	2b00      	cmp	r3, #0
 800c920:	d04d      	beq.n	800c9be <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800c922:	2308      	movs	r3, #8
 800c924:	425b      	negs	r3, r3
 800c926:	697a      	ldr	r2, [r7, #20]
 800c928:	4413      	add	r3, r2
 800c92a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800c92c:	697b      	ldr	r3, [r7, #20]
 800c92e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800c930:	693b      	ldr	r3, [r7, #16]
 800c932:	685a      	ldr	r2, [r3, #4]
 800c934:	4b24      	ldr	r3, [pc, #144]	; (800c9c8 <vPortFree+0xb8>)
 800c936:	681b      	ldr	r3, [r3, #0]
 800c938:	4013      	ands	r3, r2
 800c93a:	2b00      	cmp	r3, #0
 800c93c:	d10a      	bne.n	800c954 <vPortFree+0x44>
	__asm volatile
 800c93e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c942:	f383 8811 	msr	BASEPRI, r3
 800c946:	f3bf 8f6f 	isb	sy
 800c94a:	f3bf 8f4f 	dsb	sy
 800c94e:	60fb      	str	r3, [r7, #12]
}
 800c950:	bf00      	nop
 800c952:	e7fe      	b.n	800c952 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800c954:	693b      	ldr	r3, [r7, #16]
 800c956:	681b      	ldr	r3, [r3, #0]
 800c958:	2b00      	cmp	r3, #0
 800c95a:	d00a      	beq.n	800c972 <vPortFree+0x62>
	__asm volatile
 800c95c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c960:	f383 8811 	msr	BASEPRI, r3
 800c964:	f3bf 8f6f 	isb	sy
 800c968:	f3bf 8f4f 	dsb	sy
 800c96c:	60bb      	str	r3, [r7, #8]
}
 800c96e:	bf00      	nop
 800c970:	e7fe      	b.n	800c970 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800c972:	693b      	ldr	r3, [r7, #16]
 800c974:	685a      	ldr	r2, [r3, #4]
 800c976:	4b14      	ldr	r3, [pc, #80]	; (800c9c8 <vPortFree+0xb8>)
 800c978:	681b      	ldr	r3, [r3, #0]
 800c97a:	4013      	ands	r3, r2
 800c97c:	2b00      	cmp	r3, #0
 800c97e:	d01e      	beq.n	800c9be <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800c980:	693b      	ldr	r3, [r7, #16]
 800c982:	681b      	ldr	r3, [r3, #0]
 800c984:	2b00      	cmp	r3, #0
 800c986:	d11a      	bne.n	800c9be <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800c988:	693b      	ldr	r3, [r7, #16]
 800c98a:	685a      	ldr	r2, [r3, #4]
 800c98c:	4b0e      	ldr	r3, [pc, #56]	; (800c9c8 <vPortFree+0xb8>)
 800c98e:	681b      	ldr	r3, [r3, #0]
 800c990:	43db      	mvns	r3, r3
 800c992:	401a      	ands	r2, r3
 800c994:	693b      	ldr	r3, [r7, #16]
 800c996:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800c998:	f7fe fc56 	bl	800b248 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800c99c:	693b      	ldr	r3, [r7, #16]
 800c99e:	685a      	ldr	r2, [r3, #4]
 800c9a0:	4b0a      	ldr	r3, [pc, #40]	; (800c9cc <vPortFree+0xbc>)
 800c9a2:	681b      	ldr	r3, [r3, #0]
 800c9a4:	4413      	add	r3, r2
 800c9a6:	4a09      	ldr	r2, [pc, #36]	; (800c9cc <vPortFree+0xbc>)
 800c9a8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800c9aa:	6938      	ldr	r0, [r7, #16]
 800c9ac:	f000 f874 	bl	800ca98 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800c9b0:	4b07      	ldr	r3, [pc, #28]	; (800c9d0 <vPortFree+0xc0>)
 800c9b2:	681b      	ldr	r3, [r3, #0]
 800c9b4:	3301      	adds	r3, #1
 800c9b6:	4a06      	ldr	r2, [pc, #24]	; (800c9d0 <vPortFree+0xc0>)
 800c9b8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800c9ba:	f7fe fc53 	bl	800b264 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800c9be:	bf00      	nop
 800c9c0:	3718      	adds	r7, #24
 800c9c2:	46bd      	mov	sp, r7
 800c9c4:	bd80      	pop	{r7, pc}
 800c9c6:	bf00      	nop
 800c9c8:	20004a18 	.word	0x20004a18
 800c9cc:	20004a08 	.word	0x20004a08
 800c9d0:	20004a14 	.word	0x20004a14

0800c9d4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800c9d4:	b480      	push	{r7}
 800c9d6:	b085      	sub	sp, #20
 800c9d8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800c9da:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800c9de:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800c9e0:	4b27      	ldr	r3, [pc, #156]	; (800ca80 <prvHeapInit+0xac>)
 800c9e2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800c9e4:	68fb      	ldr	r3, [r7, #12]
 800c9e6:	f003 0307 	and.w	r3, r3, #7
 800c9ea:	2b00      	cmp	r3, #0
 800c9ec:	d00c      	beq.n	800ca08 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800c9ee:	68fb      	ldr	r3, [r7, #12]
 800c9f0:	3307      	adds	r3, #7
 800c9f2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800c9f4:	68fb      	ldr	r3, [r7, #12]
 800c9f6:	f023 0307 	bic.w	r3, r3, #7
 800c9fa:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800c9fc:	68ba      	ldr	r2, [r7, #8]
 800c9fe:	68fb      	ldr	r3, [r7, #12]
 800ca00:	1ad3      	subs	r3, r2, r3
 800ca02:	4a1f      	ldr	r2, [pc, #124]	; (800ca80 <prvHeapInit+0xac>)
 800ca04:	4413      	add	r3, r2
 800ca06:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800ca08:	68fb      	ldr	r3, [r7, #12]
 800ca0a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800ca0c:	4a1d      	ldr	r2, [pc, #116]	; (800ca84 <prvHeapInit+0xb0>)
 800ca0e:	687b      	ldr	r3, [r7, #4]
 800ca10:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800ca12:	4b1c      	ldr	r3, [pc, #112]	; (800ca84 <prvHeapInit+0xb0>)
 800ca14:	2200      	movs	r2, #0
 800ca16:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800ca18:	687b      	ldr	r3, [r7, #4]
 800ca1a:	68ba      	ldr	r2, [r7, #8]
 800ca1c:	4413      	add	r3, r2
 800ca1e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800ca20:	2208      	movs	r2, #8
 800ca22:	68fb      	ldr	r3, [r7, #12]
 800ca24:	1a9b      	subs	r3, r3, r2
 800ca26:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800ca28:	68fb      	ldr	r3, [r7, #12]
 800ca2a:	f023 0307 	bic.w	r3, r3, #7
 800ca2e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800ca30:	68fb      	ldr	r3, [r7, #12]
 800ca32:	4a15      	ldr	r2, [pc, #84]	; (800ca88 <prvHeapInit+0xb4>)
 800ca34:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800ca36:	4b14      	ldr	r3, [pc, #80]	; (800ca88 <prvHeapInit+0xb4>)
 800ca38:	681b      	ldr	r3, [r3, #0]
 800ca3a:	2200      	movs	r2, #0
 800ca3c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800ca3e:	4b12      	ldr	r3, [pc, #72]	; (800ca88 <prvHeapInit+0xb4>)
 800ca40:	681b      	ldr	r3, [r3, #0]
 800ca42:	2200      	movs	r2, #0
 800ca44:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800ca46:	687b      	ldr	r3, [r7, #4]
 800ca48:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800ca4a:	683b      	ldr	r3, [r7, #0]
 800ca4c:	68fa      	ldr	r2, [r7, #12]
 800ca4e:	1ad2      	subs	r2, r2, r3
 800ca50:	683b      	ldr	r3, [r7, #0]
 800ca52:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800ca54:	4b0c      	ldr	r3, [pc, #48]	; (800ca88 <prvHeapInit+0xb4>)
 800ca56:	681a      	ldr	r2, [r3, #0]
 800ca58:	683b      	ldr	r3, [r7, #0]
 800ca5a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800ca5c:	683b      	ldr	r3, [r7, #0]
 800ca5e:	685b      	ldr	r3, [r3, #4]
 800ca60:	4a0a      	ldr	r2, [pc, #40]	; (800ca8c <prvHeapInit+0xb8>)
 800ca62:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800ca64:	683b      	ldr	r3, [r7, #0]
 800ca66:	685b      	ldr	r3, [r3, #4]
 800ca68:	4a09      	ldr	r2, [pc, #36]	; (800ca90 <prvHeapInit+0xbc>)
 800ca6a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800ca6c:	4b09      	ldr	r3, [pc, #36]	; (800ca94 <prvHeapInit+0xc0>)
 800ca6e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800ca72:	601a      	str	r2, [r3, #0]
}
 800ca74:	bf00      	nop
 800ca76:	3714      	adds	r7, #20
 800ca78:	46bd      	mov	sp, r7
 800ca7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca7e:	4770      	bx	lr
 800ca80:	20000dfc 	.word	0x20000dfc
 800ca84:	200049fc 	.word	0x200049fc
 800ca88:	20004a04 	.word	0x20004a04
 800ca8c:	20004a0c 	.word	0x20004a0c
 800ca90:	20004a08 	.word	0x20004a08
 800ca94:	20004a18 	.word	0x20004a18

0800ca98 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800ca98:	b480      	push	{r7}
 800ca9a:	b085      	sub	sp, #20
 800ca9c:	af00      	add	r7, sp, #0
 800ca9e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800caa0:	4b28      	ldr	r3, [pc, #160]	; (800cb44 <prvInsertBlockIntoFreeList+0xac>)
 800caa2:	60fb      	str	r3, [r7, #12]
 800caa4:	e002      	b.n	800caac <prvInsertBlockIntoFreeList+0x14>
 800caa6:	68fb      	ldr	r3, [r7, #12]
 800caa8:	681b      	ldr	r3, [r3, #0]
 800caaa:	60fb      	str	r3, [r7, #12]
 800caac:	68fb      	ldr	r3, [r7, #12]
 800caae:	681b      	ldr	r3, [r3, #0]
 800cab0:	687a      	ldr	r2, [r7, #4]
 800cab2:	429a      	cmp	r2, r3
 800cab4:	d8f7      	bhi.n	800caa6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800cab6:	68fb      	ldr	r3, [r7, #12]
 800cab8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800caba:	68fb      	ldr	r3, [r7, #12]
 800cabc:	685b      	ldr	r3, [r3, #4]
 800cabe:	68ba      	ldr	r2, [r7, #8]
 800cac0:	4413      	add	r3, r2
 800cac2:	687a      	ldr	r2, [r7, #4]
 800cac4:	429a      	cmp	r2, r3
 800cac6:	d108      	bne.n	800cada <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800cac8:	68fb      	ldr	r3, [r7, #12]
 800caca:	685a      	ldr	r2, [r3, #4]
 800cacc:	687b      	ldr	r3, [r7, #4]
 800cace:	685b      	ldr	r3, [r3, #4]
 800cad0:	441a      	add	r2, r3
 800cad2:	68fb      	ldr	r3, [r7, #12]
 800cad4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800cad6:	68fb      	ldr	r3, [r7, #12]
 800cad8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800cada:	687b      	ldr	r3, [r7, #4]
 800cadc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800cade:	687b      	ldr	r3, [r7, #4]
 800cae0:	685b      	ldr	r3, [r3, #4]
 800cae2:	68ba      	ldr	r2, [r7, #8]
 800cae4:	441a      	add	r2, r3
 800cae6:	68fb      	ldr	r3, [r7, #12]
 800cae8:	681b      	ldr	r3, [r3, #0]
 800caea:	429a      	cmp	r2, r3
 800caec:	d118      	bne.n	800cb20 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800caee:	68fb      	ldr	r3, [r7, #12]
 800caf0:	681a      	ldr	r2, [r3, #0]
 800caf2:	4b15      	ldr	r3, [pc, #84]	; (800cb48 <prvInsertBlockIntoFreeList+0xb0>)
 800caf4:	681b      	ldr	r3, [r3, #0]
 800caf6:	429a      	cmp	r2, r3
 800caf8:	d00d      	beq.n	800cb16 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800cafa:	687b      	ldr	r3, [r7, #4]
 800cafc:	685a      	ldr	r2, [r3, #4]
 800cafe:	68fb      	ldr	r3, [r7, #12]
 800cb00:	681b      	ldr	r3, [r3, #0]
 800cb02:	685b      	ldr	r3, [r3, #4]
 800cb04:	441a      	add	r2, r3
 800cb06:	687b      	ldr	r3, [r7, #4]
 800cb08:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800cb0a:	68fb      	ldr	r3, [r7, #12]
 800cb0c:	681b      	ldr	r3, [r3, #0]
 800cb0e:	681a      	ldr	r2, [r3, #0]
 800cb10:	687b      	ldr	r3, [r7, #4]
 800cb12:	601a      	str	r2, [r3, #0]
 800cb14:	e008      	b.n	800cb28 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800cb16:	4b0c      	ldr	r3, [pc, #48]	; (800cb48 <prvInsertBlockIntoFreeList+0xb0>)
 800cb18:	681a      	ldr	r2, [r3, #0]
 800cb1a:	687b      	ldr	r3, [r7, #4]
 800cb1c:	601a      	str	r2, [r3, #0]
 800cb1e:	e003      	b.n	800cb28 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800cb20:	68fb      	ldr	r3, [r7, #12]
 800cb22:	681a      	ldr	r2, [r3, #0]
 800cb24:	687b      	ldr	r3, [r7, #4]
 800cb26:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800cb28:	68fa      	ldr	r2, [r7, #12]
 800cb2a:	687b      	ldr	r3, [r7, #4]
 800cb2c:	429a      	cmp	r2, r3
 800cb2e:	d002      	beq.n	800cb36 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800cb30:	68fb      	ldr	r3, [r7, #12]
 800cb32:	687a      	ldr	r2, [r7, #4]
 800cb34:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800cb36:	bf00      	nop
 800cb38:	3714      	adds	r7, #20
 800cb3a:	46bd      	mov	sp, r7
 800cb3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb40:	4770      	bx	lr
 800cb42:	bf00      	nop
 800cb44:	200049fc 	.word	0x200049fc
 800cb48:	20004a04 	.word	0x20004a04

0800cb4c <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800cb4c:	b580      	push	{r7, lr}
 800cb4e:	b082      	sub	sp, #8
 800cb50:	af00      	add	r7, sp, #0
 800cb52:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800cb54:	687b      	ldr	r3, [r7, #4]
 800cb56:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 800cb5a:	687b      	ldr	r3, [r7, #4]
 800cb5c:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800cb60:	4619      	mov	r1, r3
 800cb62:	4610      	mov	r0, r2
 800cb64:	f7fc f9db 	bl	8008f1e <USBD_LL_SetupStage>
}
 800cb68:	bf00      	nop
 800cb6a:	3708      	adds	r7, #8
 800cb6c:	46bd      	mov	sp, r7
 800cb6e:	bd80      	pop	{r7, pc}

0800cb70 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800cb70:	b580      	push	{r7, lr}
 800cb72:	b082      	sub	sp, #8
 800cb74:	af00      	add	r7, sp, #0
 800cb76:	6078      	str	r0, [r7, #4]
 800cb78:	460b      	mov	r3, r1
 800cb7a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800cb7c:	687b      	ldr	r3, [r7, #4]
 800cb7e:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 800cb82:	78fa      	ldrb	r2, [r7, #3]
 800cb84:	6879      	ldr	r1, [r7, #4]
 800cb86:	4613      	mov	r3, r2
 800cb88:	00db      	lsls	r3, r3, #3
 800cb8a:	1a9b      	subs	r3, r3, r2
 800cb8c:	009b      	lsls	r3, r3, #2
 800cb8e:	440b      	add	r3, r1
 800cb90:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800cb94:	681a      	ldr	r2, [r3, #0]
 800cb96:	78fb      	ldrb	r3, [r7, #3]
 800cb98:	4619      	mov	r1, r3
 800cb9a:	f7fc fa15 	bl	8008fc8 <USBD_LL_DataOutStage>
}
 800cb9e:	bf00      	nop
 800cba0:	3708      	adds	r7, #8
 800cba2:	46bd      	mov	sp, r7
 800cba4:	bd80      	pop	{r7, pc}

0800cba6 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800cba6:	b580      	push	{r7, lr}
 800cba8:	b082      	sub	sp, #8
 800cbaa:	af00      	add	r7, sp, #0
 800cbac:	6078      	str	r0, [r7, #4]
 800cbae:	460b      	mov	r3, r1
 800cbb0:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800cbb2:	687b      	ldr	r3, [r7, #4]
 800cbb4:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 800cbb8:	78fa      	ldrb	r2, [r7, #3]
 800cbba:	6879      	ldr	r1, [r7, #4]
 800cbbc:	4613      	mov	r3, r2
 800cbbe:	00db      	lsls	r3, r3, #3
 800cbc0:	1a9b      	subs	r3, r3, r2
 800cbc2:	009b      	lsls	r3, r3, #2
 800cbc4:	440b      	add	r3, r1
 800cbc6:	3348      	adds	r3, #72	; 0x48
 800cbc8:	681a      	ldr	r2, [r3, #0]
 800cbca:	78fb      	ldrb	r3, [r7, #3]
 800cbcc:	4619      	mov	r1, r3
 800cbce:	f7fc fa5e 	bl	800908e <USBD_LL_DataInStage>
}
 800cbd2:	bf00      	nop
 800cbd4:	3708      	adds	r7, #8
 800cbd6:	46bd      	mov	sp, r7
 800cbd8:	bd80      	pop	{r7, pc}

0800cbda <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800cbda:	b580      	push	{r7, lr}
 800cbdc:	b082      	sub	sp, #8
 800cbde:	af00      	add	r7, sp, #0
 800cbe0:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800cbe2:	687b      	ldr	r3, [r7, #4]
 800cbe4:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800cbe8:	4618      	mov	r0, r3
 800cbea:	f7fc fb72 	bl	80092d2 <USBD_LL_SOF>
}
 800cbee:	bf00      	nop
 800cbf0:	3708      	adds	r7, #8
 800cbf2:	46bd      	mov	sp, r7
 800cbf4:	bd80      	pop	{r7, pc}

0800cbf6 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800cbf6:	b580      	push	{r7, lr}
 800cbf8:	b084      	sub	sp, #16
 800cbfa:	af00      	add	r7, sp, #0
 800cbfc:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800cbfe:	2301      	movs	r3, #1
 800cc00:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800cc02:	687b      	ldr	r3, [r7, #4]
 800cc04:	68db      	ldr	r3, [r3, #12]
 800cc06:	2b00      	cmp	r3, #0
 800cc08:	d102      	bne.n	800cc10 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 800cc0a:	2300      	movs	r3, #0
 800cc0c:	73fb      	strb	r3, [r7, #15]
 800cc0e:	e008      	b.n	800cc22 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 800cc10:	687b      	ldr	r3, [r7, #4]
 800cc12:	68db      	ldr	r3, [r3, #12]
 800cc14:	2b02      	cmp	r3, #2
 800cc16:	d102      	bne.n	800cc1e <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 800cc18:	2301      	movs	r3, #1
 800cc1a:	73fb      	strb	r3, [r7, #15]
 800cc1c:	e001      	b.n	800cc22 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 800cc1e:	f7f5 fab9 	bl	8002194 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800cc22:	687b      	ldr	r3, [r7, #4]
 800cc24:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800cc28:	7bfa      	ldrb	r2, [r7, #15]
 800cc2a:	4611      	mov	r1, r2
 800cc2c:	4618      	mov	r0, r3
 800cc2e:	f7fc fb12 	bl	8009256 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800cc32:	687b      	ldr	r3, [r7, #4]
 800cc34:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800cc38:	4618      	mov	r0, r3
 800cc3a:	f7fc fabe 	bl	80091ba <USBD_LL_Reset>
}
 800cc3e:	bf00      	nop
 800cc40:	3710      	adds	r7, #16
 800cc42:	46bd      	mov	sp, r7
 800cc44:	bd80      	pop	{r7, pc}
	...

0800cc48 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800cc48:	b580      	push	{r7, lr}
 800cc4a:	b082      	sub	sp, #8
 800cc4c:	af00      	add	r7, sp, #0
 800cc4e:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800cc50:	687b      	ldr	r3, [r7, #4]
 800cc52:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800cc56:	4618      	mov	r0, r3
 800cc58:	f7fc fb0d 	bl	8009276 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800cc5c:	687b      	ldr	r3, [r7, #4]
 800cc5e:	681b      	ldr	r3, [r3, #0]
 800cc60:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800cc64:	681b      	ldr	r3, [r3, #0]
 800cc66:	687a      	ldr	r2, [r7, #4]
 800cc68:	6812      	ldr	r2, [r2, #0]
 800cc6a:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800cc6e:	f043 0301 	orr.w	r3, r3, #1
 800cc72:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800cc74:	687b      	ldr	r3, [r7, #4]
 800cc76:	6a1b      	ldr	r3, [r3, #32]
 800cc78:	2b00      	cmp	r3, #0
 800cc7a:	d005      	beq.n	800cc88 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800cc7c:	4b04      	ldr	r3, [pc, #16]	; (800cc90 <HAL_PCD_SuspendCallback+0x48>)
 800cc7e:	691b      	ldr	r3, [r3, #16]
 800cc80:	4a03      	ldr	r2, [pc, #12]	; (800cc90 <HAL_PCD_SuspendCallback+0x48>)
 800cc82:	f043 0306 	orr.w	r3, r3, #6
 800cc86:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800cc88:	bf00      	nop
 800cc8a:	3708      	adds	r7, #8
 800cc8c:	46bd      	mov	sp, r7
 800cc8e:	bd80      	pop	{r7, pc}
 800cc90:	e000ed00 	.word	0xe000ed00

0800cc94 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800cc94:	b580      	push	{r7, lr}
 800cc96:	b082      	sub	sp, #8
 800cc98:	af00      	add	r7, sp, #0
 800cc9a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800cc9c:	687b      	ldr	r3, [r7, #4]
 800cc9e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800cca2:	4618      	mov	r0, r3
 800cca4:	f7fc fafd 	bl	80092a2 <USBD_LL_Resume>
}
 800cca8:	bf00      	nop
 800ccaa:	3708      	adds	r7, #8
 800ccac:	46bd      	mov	sp, r7
 800ccae:	bd80      	pop	{r7, pc}

0800ccb0 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ccb0:	b580      	push	{r7, lr}
 800ccb2:	b082      	sub	sp, #8
 800ccb4:	af00      	add	r7, sp, #0
 800ccb6:	6078      	str	r0, [r7, #4]
 800ccb8:	460b      	mov	r3, r1
 800ccba:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800ccbc:	687b      	ldr	r3, [r7, #4]
 800ccbe:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800ccc2:	78fa      	ldrb	r2, [r7, #3]
 800ccc4:	4611      	mov	r1, r2
 800ccc6:	4618      	mov	r0, r3
 800ccc8:	f7fc fb4b 	bl	8009362 <USBD_LL_IsoOUTIncomplete>
}
 800cccc:	bf00      	nop
 800ccce:	3708      	adds	r7, #8
 800ccd0:	46bd      	mov	sp, r7
 800ccd2:	bd80      	pop	{r7, pc}

0800ccd4 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ccd4:	b580      	push	{r7, lr}
 800ccd6:	b082      	sub	sp, #8
 800ccd8:	af00      	add	r7, sp, #0
 800ccda:	6078      	str	r0, [r7, #4]
 800ccdc:	460b      	mov	r3, r1
 800ccde:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800cce0:	687b      	ldr	r3, [r7, #4]
 800cce2:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800cce6:	78fa      	ldrb	r2, [r7, #3]
 800cce8:	4611      	mov	r1, r2
 800ccea:	4618      	mov	r0, r3
 800ccec:	f7fc fb13 	bl	8009316 <USBD_LL_IsoINIncomplete>
}
 800ccf0:	bf00      	nop
 800ccf2:	3708      	adds	r7, #8
 800ccf4:	46bd      	mov	sp, r7
 800ccf6:	bd80      	pop	{r7, pc}

0800ccf8 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ccf8:	b580      	push	{r7, lr}
 800ccfa:	b082      	sub	sp, #8
 800ccfc:	af00      	add	r7, sp, #0
 800ccfe:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800cd00:	687b      	ldr	r3, [r7, #4]
 800cd02:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800cd06:	4618      	mov	r0, r3
 800cd08:	f7fc fb51 	bl	80093ae <USBD_LL_DevConnected>
}
 800cd0c:	bf00      	nop
 800cd0e:	3708      	adds	r7, #8
 800cd10:	46bd      	mov	sp, r7
 800cd12:	bd80      	pop	{r7, pc}

0800cd14 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800cd14:	b580      	push	{r7, lr}
 800cd16:	b082      	sub	sp, #8
 800cd18:	af00      	add	r7, sp, #0
 800cd1a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800cd1c:	687b      	ldr	r3, [r7, #4]
 800cd1e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800cd22:	4618      	mov	r0, r3
 800cd24:	f7fc fb4e 	bl	80093c4 <USBD_LL_DevDisconnected>
}
 800cd28:	bf00      	nop
 800cd2a:	3708      	adds	r7, #8
 800cd2c:	46bd      	mov	sp, r7
 800cd2e:	bd80      	pop	{r7, pc}

0800cd30 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800cd30:	b580      	push	{r7, lr}
 800cd32:	b084      	sub	sp, #16
 800cd34:	af00      	add	r7, sp, #0
 800cd36:	6078      	str	r0, [r7, #4]
 800cd38:	4608      	mov	r0, r1
 800cd3a:	4611      	mov	r1, r2
 800cd3c:	461a      	mov	r2, r3
 800cd3e:	4603      	mov	r3, r0
 800cd40:	70fb      	strb	r3, [r7, #3]
 800cd42:	460b      	mov	r3, r1
 800cd44:	70bb      	strb	r3, [r7, #2]
 800cd46:	4613      	mov	r3, r2
 800cd48:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cd4a:	2300      	movs	r3, #0
 800cd4c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800cd4e:	2300      	movs	r3, #0
 800cd50:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800cd52:	687b      	ldr	r3, [r7, #4]
 800cd54:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800cd58:	78bb      	ldrb	r3, [r7, #2]
 800cd5a:	883a      	ldrh	r2, [r7, #0]
 800cd5c:	78f9      	ldrb	r1, [r7, #3]
 800cd5e:	f7f8 f8cb 	bl	8004ef8 <HAL_PCD_EP_Open>
 800cd62:	4603      	mov	r3, r0
 800cd64:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800cd66:	7bfb      	ldrb	r3, [r7, #15]
 800cd68:	4618      	mov	r0, r3
 800cd6a:	f000 f8d3 	bl	800cf14 <USBD_Get_USB_Status>
 800cd6e:	4603      	mov	r3, r0
 800cd70:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800cd72:	7bbb      	ldrb	r3, [r7, #14]
}
 800cd74:	4618      	mov	r0, r3
 800cd76:	3710      	adds	r7, #16
 800cd78:	46bd      	mov	sp, r7
 800cd7a:	bd80      	pop	{r7, pc}

0800cd7c <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800cd7c:	b580      	push	{r7, lr}
 800cd7e:	b084      	sub	sp, #16
 800cd80:	af00      	add	r7, sp, #0
 800cd82:	6078      	str	r0, [r7, #4]
 800cd84:	460b      	mov	r3, r1
 800cd86:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cd88:	2300      	movs	r3, #0
 800cd8a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800cd8c:	2300      	movs	r3, #0
 800cd8e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800cd90:	687b      	ldr	r3, [r7, #4]
 800cd92:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800cd96:	78fa      	ldrb	r2, [r7, #3]
 800cd98:	4611      	mov	r1, r2
 800cd9a:	4618      	mov	r0, r3
 800cd9c:	f7f8 f9a9 	bl	80050f2 <HAL_PCD_EP_SetStall>
 800cda0:	4603      	mov	r3, r0
 800cda2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800cda4:	7bfb      	ldrb	r3, [r7, #15]
 800cda6:	4618      	mov	r0, r3
 800cda8:	f000 f8b4 	bl	800cf14 <USBD_Get_USB_Status>
 800cdac:	4603      	mov	r3, r0
 800cdae:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800cdb0:	7bbb      	ldrb	r3, [r7, #14]
}
 800cdb2:	4618      	mov	r0, r3
 800cdb4:	3710      	adds	r7, #16
 800cdb6:	46bd      	mov	sp, r7
 800cdb8:	bd80      	pop	{r7, pc}

0800cdba <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800cdba:	b580      	push	{r7, lr}
 800cdbc:	b084      	sub	sp, #16
 800cdbe:	af00      	add	r7, sp, #0
 800cdc0:	6078      	str	r0, [r7, #4]
 800cdc2:	460b      	mov	r3, r1
 800cdc4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cdc6:	2300      	movs	r3, #0
 800cdc8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800cdca:	2300      	movs	r3, #0
 800cdcc:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800cdce:	687b      	ldr	r3, [r7, #4]
 800cdd0:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800cdd4:	78fa      	ldrb	r2, [r7, #3]
 800cdd6:	4611      	mov	r1, r2
 800cdd8:	4618      	mov	r0, r3
 800cdda:	f7f8 f9ee 	bl	80051ba <HAL_PCD_EP_ClrStall>
 800cdde:	4603      	mov	r3, r0
 800cde0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800cde2:	7bfb      	ldrb	r3, [r7, #15]
 800cde4:	4618      	mov	r0, r3
 800cde6:	f000 f895 	bl	800cf14 <USBD_Get_USB_Status>
 800cdea:	4603      	mov	r3, r0
 800cdec:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800cdee:	7bbb      	ldrb	r3, [r7, #14]
}
 800cdf0:	4618      	mov	r0, r3
 800cdf2:	3710      	adds	r7, #16
 800cdf4:	46bd      	mov	sp, r7
 800cdf6:	bd80      	pop	{r7, pc}

0800cdf8 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800cdf8:	b480      	push	{r7}
 800cdfa:	b085      	sub	sp, #20
 800cdfc:	af00      	add	r7, sp, #0
 800cdfe:	6078      	str	r0, [r7, #4]
 800ce00:	460b      	mov	r3, r1
 800ce02:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800ce04:	687b      	ldr	r3, [r7, #4]
 800ce06:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800ce0a:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800ce0c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800ce10:	2b00      	cmp	r3, #0
 800ce12:	da0b      	bge.n	800ce2c <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800ce14:	78fb      	ldrb	r3, [r7, #3]
 800ce16:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800ce1a:	68f9      	ldr	r1, [r7, #12]
 800ce1c:	4613      	mov	r3, r2
 800ce1e:	00db      	lsls	r3, r3, #3
 800ce20:	1a9b      	subs	r3, r3, r2
 800ce22:	009b      	lsls	r3, r3, #2
 800ce24:	440b      	add	r3, r1
 800ce26:	333e      	adds	r3, #62	; 0x3e
 800ce28:	781b      	ldrb	r3, [r3, #0]
 800ce2a:	e00b      	b.n	800ce44 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800ce2c:	78fb      	ldrb	r3, [r7, #3]
 800ce2e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800ce32:	68f9      	ldr	r1, [r7, #12]
 800ce34:	4613      	mov	r3, r2
 800ce36:	00db      	lsls	r3, r3, #3
 800ce38:	1a9b      	subs	r3, r3, r2
 800ce3a:	009b      	lsls	r3, r3, #2
 800ce3c:	440b      	add	r3, r1
 800ce3e:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800ce42:	781b      	ldrb	r3, [r3, #0]
  }
}
 800ce44:	4618      	mov	r0, r3
 800ce46:	3714      	adds	r7, #20
 800ce48:	46bd      	mov	sp, r7
 800ce4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce4e:	4770      	bx	lr

0800ce50 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800ce50:	b580      	push	{r7, lr}
 800ce52:	b084      	sub	sp, #16
 800ce54:	af00      	add	r7, sp, #0
 800ce56:	6078      	str	r0, [r7, #4]
 800ce58:	460b      	mov	r3, r1
 800ce5a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ce5c:	2300      	movs	r3, #0
 800ce5e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ce60:	2300      	movs	r3, #0
 800ce62:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800ce64:	687b      	ldr	r3, [r7, #4]
 800ce66:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800ce6a:	78fa      	ldrb	r2, [r7, #3]
 800ce6c:	4611      	mov	r1, r2
 800ce6e:	4618      	mov	r0, r3
 800ce70:	f7f8 f81d 	bl	8004eae <HAL_PCD_SetAddress>
 800ce74:	4603      	mov	r3, r0
 800ce76:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ce78:	7bfb      	ldrb	r3, [r7, #15]
 800ce7a:	4618      	mov	r0, r3
 800ce7c:	f000 f84a 	bl	800cf14 <USBD_Get_USB_Status>
 800ce80:	4603      	mov	r3, r0
 800ce82:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ce84:	7bbb      	ldrb	r3, [r7, #14]
}
 800ce86:	4618      	mov	r0, r3
 800ce88:	3710      	adds	r7, #16
 800ce8a:	46bd      	mov	sp, r7
 800ce8c:	bd80      	pop	{r7, pc}

0800ce8e <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800ce8e:	b580      	push	{r7, lr}
 800ce90:	b086      	sub	sp, #24
 800ce92:	af00      	add	r7, sp, #0
 800ce94:	60f8      	str	r0, [r7, #12]
 800ce96:	607a      	str	r2, [r7, #4]
 800ce98:	603b      	str	r3, [r7, #0]
 800ce9a:	460b      	mov	r3, r1
 800ce9c:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ce9e:	2300      	movs	r3, #0
 800cea0:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800cea2:	2300      	movs	r3, #0
 800cea4:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800cea6:	68fb      	ldr	r3, [r7, #12]
 800cea8:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800ceac:	7af9      	ldrb	r1, [r7, #11]
 800ceae:	683b      	ldr	r3, [r7, #0]
 800ceb0:	687a      	ldr	r2, [r7, #4]
 800ceb2:	f7f8 f8d4 	bl	800505e <HAL_PCD_EP_Transmit>
 800ceb6:	4603      	mov	r3, r0
 800ceb8:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ceba:	7dfb      	ldrb	r3, [r7, #23]
 800cebc:	4618      	mov	r0, r3
 800cebe:	f000 f829 	bl	800cf14 <USBD_Get_USB_Status>
 800cec2:	4603      	mov	r3, r0
 800cec4:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800cec6:	7dbb      	ldrb	r3, [r7, #22]
}
 800cec8:	4618      	mov	r0, r3
 800ceca:	3718      	adds	r7, #24
 800cecc:	46bd      	mov	sp, r7
 800cece:	bd80      	pop	{r7, pc}

0800ced0 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800ced0:	b580      	push	{r7, lr}
 800ced2:	b086      	sub	sp, #24
 800ced4:	af00      	add	r7, sp, #0
 800ced6:	60f8      	str	r0, [r7, #12]
 800ced8:	607a      	str	r2, [r7, #4]
 800ceda:	603b      	str	r3, [r7, #0]
 800cedc:	460b      	mov	r3, r1
 800cede:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cee0:	2300      	movs	r3, #0
 800cee2:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800cee4:	2300      	movs	r3, #0
 800cee6:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800cee8:	68fb      	ldr	r3, [r7, #12]
 800ceea:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800ceee:	7af9      	ldrb	r1, [r7, #11]
 800cef0:	683b      	ldr	r3, [r7, #0]
 800cef2:	687a      	ldr	r2, [r7, #4]
 800cef4:	f7f8 f868 	bl	8004fc8 <HAL_PCD_EP_Receive>
 800cef8:	4603      	mov	r3, r0
 800cefa:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800cefc:	7dfb      	ldrb	r3, [r7, #23]
 800cefe:	4618      	mov	r0, r3
 800cf00:	f000 f808 	bl	800cf14 <USBD_Get_USB_Status>
 800cf04:	4603      	mov	r3, r0
 800cf06:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800cf08:	7dbb      	ldrb	r3, [r7, #22]
}
 800cf0a:	4618      	mov	r0, r3
 800cf0c:	3718      	adds	r7, #24
 800cf0e:	46bd      	mov	sp, r7
 800cf10:	bd80      	pop	{r7, pc}
	...

0800cf14 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800cf14:	b480      	push	{r7}
 800cf16:	b085      	sub	sp, #20
 800cf18:	af00      	add	r7, sp, #0
 800cf1a:	4603      	mov	r3, r0
 800cf1c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800cf1e:	2300      	movs	r3, #0
 800cf20:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800cf22:	79fb      	ldrb	r3, [r7, #7]
 800cf24:	2b03      	cmp	r3, #3
 800cf26:	d817      	bhi.n	800cf58 <USBD_Get_USB_Status+0x44>
 800cf28:	a201      	add	r2, pc, #4	; (adr r2, 800cf30 <USBD_Get_USB_Status+0x1c>)
 800cf2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cf2e:	bf00      	nop
 800cf30:	0800cf41 	.word	0x0800cf41
 800cf34:	0800cf47 	.word	0x0800cf47
 800cf38:	0800cf4d 	.word	0x0800cf4d
 800cf3c:	0800cf53 	.word	0x0800cf53
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800cf40:	2300      	movs	r3, #0
 800cf42:	73fb      	strb	r3, [r7, #15]
    break;
 800cf44:	e00b      	b.n	800cf5e <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800cf46:	2303      	movs	r3, #3
 800cf48:	73fb      	strb	r3, [r7, #15]
    break;
 800cf4a:	e008      	b.n	800cf5e <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800cf4c:	2301      	movs	r3, #1
 800cf4e:	73fb      	strb	r3, [r7, #15]
    break;
 800cf50:	e005      	b.n	800cf5e <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800cf52:	2303      	movs	r3, #3
 800cf54:	73fb      	strb	r3, [r7, #15]
    break;
 800cf56:	e002      	b.n	800cf5e <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800cf58:	2303      	movs	r3, #3
 800cf5a:	73fb      	strb	r3, [r7, #15]
    break;
 800cf5c:	bf00      	nop
  }
  return usb_status;
 800cf5e:	7bfb      	ldrb	r3, [r7, #15]
}
 800cf60:	4618      	mov	r0, r3
 800cf62:	3714      	adds	r7, #20
 800cf64:	46bd      	mov	sp, r7
 800cf66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf6a:	4770      	bx	lr

0800cf6c <__errno>:
 800cf6c:	4b01      	ldr	r3, [pc, #4]	; (800cf74 <__errno+0x8>)
 800cf6e:	6818      	ldr	r0, [r3, #0]
 800cf70:	4770      	bx	lr
 800cf72:	bf00      	nop
 800cf74:	20000010 	.word	0x20000010

0800cf78 <__libc_init_array>:
 800cf78:	b570      	push	{r4, r5, r6, lr}
 800cf7a:	4d0d      	ldr	r5, [pc, #52]	; (800cfb0 <__libc_init_array+0x38>)
 800cf7c:	4c0d      	ldr	r4, [pc, #52]	; (800cfb4 <__libc_init_array+0x3c>)
 800cf7e:	1b64      	subs	r4, r4, r5
 800cf80:	10a4      	asrs	r4, r4, #2
 800cf82:	2600      	movs	r6, #0
 800cf84:	42a6      	cmp	r6, r4
 800cf86:	d109      	bne.n	800cf9c <__libc_init_array+0x24>
 800cf88:	4d0b      	ldr	r5, [pc, #44]	; (800cfb8 <__libc_init_array+0x40>)
 800cf8a:	4c0c      	ldr	r4, [pc, #48]	; (800cfbc <__libc_init_array+0x44>)
 800cf8c:	f002 faaa 	bl	800f4e4 <_init>
 800cf90:	1b64      	subs	r4, r4, r5
 800cf92:	10a4      	asrs	r4, r4, #2
 800cf94:	2600      	movs	r6, #0
 800cf96:	42a6      	cmp	r6, r4
 800cf98:	d105      	bne.n	800cfa6 <__libc_init_array+0x2e>
 800cf9a:	bd70      	pop	{r4, r5, r6, pc}
 800cf9c:	f855 3b04 	ldr.w	r3, [r5], #4
 800cfa0:	4798      	blx	r3
 800cfa2:	3601      	adds	r6, #1
 800cfa4:	e7ee      	b.n	800cf84 <__libc_init_array+0xc>
 800cfa6:	f855 3b04 	ldr.w	r3, [r5], #4
 800cfaa:	4798      	blx	r3
 800cfac:	3601      	adds	r6, #1
 800cfae:	e7f2      	b.n	800cf96 <__libc_init_array+0x1e>
 800cfb0:	0800f7d0 	.word	0x0800f7d0
 800cfb4:	0800f7d0 	.word	0x0800f7d0
 800cfb8:	0800f7d0 	.word	0x0800f7d0
 800cfbc:	0800f7d4 	.word	0x0800f7d4

0800cfc0 <memcpy>:
 800cfc0:	440a      	add	r2, r1
 800cfc2:	4291      	cmp	r1, r2
 800cfc4:	f100 33ff 	add.w	r3, r0, #4294967295
 800cfc8:	d100      	bne.n	800cfcc <memcpy+0xc>
 800cfca:	4770      	bx	lr
 800cfcc:	b510      	push	{r4, lr}
 800cfce:	f811 4b01 	ldrb.w	r4, [r1], #1
 800cfd2:	f803 4f01 	strb.w	r4, [r3, #1]!
 800cfd6:	4291      	cmp	r1, r2
 800cfd8:	d1f9      	bne.n	800cfce <memcpy+0xe>
 800cfda:	bd10      	pop	{r4, pc}

0800cfdc <memset>:
 800cfdc:	4402      	add	r2, r0
 800cfde:	4603      	mov	r3, r0
 800cfe0:	4293      	cmp	r3, r2
 800cfe2:	d100      	bne.n	800cfe6 <memset+0xa>
 800cfe4:	4770      	bx	lr
 800cfe6:	f803 1b01 	strb.w	r1, [r3], #1
 800cfea:	e7f9      	b.n	800cfe0 <memset+0x4>
 800cfec:	0000      	movs	r0, r0
	...

0800cff0 <cos>:
 800cff0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800cff2:	ec53 2b10 	vmov	r2, r3, d0
 800cff6:	4824      	ldr	r0, [pc, #144]	; (800d088 <cos+0x98>)
 800cff8:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800cffc:	4281      	cmp	r1, r0
 800cffe:	dc06      	bgt.n	800d00e <cos+0x1e>
 800d000:	ed9f 1b1f 	vldr	d1, [pc, #124]	; 800d080 <cos+0x90>
 800d004:	f001 fbf8 	bl	800e7f8 <__kernel_cos>
 800d008:	ec51 0b10 	vmov	r0, r1, d0
 800d00c:	e007      	b.n	800d01e <cos+0x2e>
 800d00e:	481f      	ldr	r0, [pc, #124]	; (800d08c <cos+0x9c>)
 800d010:	4281      	cmp	r1, r0
 800d012:	dd09      	ble.n	800d028 <cos+0x38>
 800d014:	ee10 0a10 	vmov	r0, s0
 800d018:	4619      	mov	r1, r3
 800d01a:	f7f3 f8dd 	bl	80001d8 <__aeabi_dsub>
 800d01e:	ec41 0b10 	vmov	d0, r0, r1
 800d022:	b005      	add	sp, #20
 800d024:	f85d fb04 	ldr.w	pc, [sp], #4
 800d028:	4668      	mov	r0, sp
 800d02a:	f001 f925 	bl	800e278 <__ieee754_rem_pio2>
 800d02e:	f000 0003 	and.w	r0, r0, #3
 800d032:	2801      	cmp	r0, #1
 800d034:	d007      	beq.n	800d046 <cos+0x56>
 800d036:	2802      	cmp	r0, #2
 800d038:	d012      	beq.n	800d060 <cos+0x70>
 800d03a:	b9c0      	cbnz	r0, 800d06e <cos+0x7e>
 800d03c:	ed9d 1b02 	vldr	d1, [sp, #8]
 800d040:	ed9d 0b00 	vldr	d0, [sp]
 800d044:	e7de      	b.n	800d004 <cos+0x14>
 800d046:	ed9d 1b02 	vldr	d1, [sp, #8]
 800d04a:	ed9d 0b00 	vldr	d0, [sp]
 800d04e:	f001 ffdb 	bl	800f008 <__kernel_sin>
 800d052:	ec53 2b10 	vmov	r2, r3, d0
 800d056:	ee10 0a10 	vmov	r0, s0
 800d05a:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800d05e:	e7de      	b.n	800d01e <cos+0x2e>
 800d060:	ed9d 1b02 	vldr	d1, [sp, #8]
 800d064:	ed9d 0b00 	vldr	d0, [sp]
 800d068:	f001 fbc6 	bl	800e7f8 <__kernel_cos>
 800d06c:	e7f1      	b.n	800d052 <cos+0x62>
 800d06e:	ed9d 1b02 	vldr	d1, [sp, #8]
 800d072:	ed9d 0b00 	vldr	d0, [sp]
 800d076:	2001      	movs	r0, #1
 800d078:	f001 ffc6 	bl	800f008 <__kernel_sin>
 800d07c:	e7c4      	b.n	800d008 <cos+0x18>
 800d07e:	bf00      	nop
	...
 800d088:	3fe921fb 	.word	0x3fe921fb
 800d08c:	7fefffff 	.word	0x7fefffff

0800d090 <sin>:
 800d090:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800d092:	ec53 2b10 	vmov	r2, r3, d0
 800d096:	4826      	ldr	r0, [pc, #152]	; (800d130 <sin+0xa0>)
 800d098:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800d09c:	4281      	cmp	r1, r0
 800d09e:	dc07      	bgt.n	800d0b0 <sin+0x20>
 800d0a0:	ed9f 1b21 	vldr	d1, [pc, #132]	; 800d128 <sin+0x98>
 800d0a4:	2000      	movs	r0, #0
 800d0a6:	f001 ffaf 	bl	800f008 <__kernel_sin>
 800d0aa:	ec51 0b10 	vmov	r0, r1, d0
 800d0ae:	e007      	b.n	800d0c0 <sin+0x30>
 800d0b0:	4820      	ldr	r0, [pc, #128]	; (800d134 <sin+0xa4>)
 800d0b2:	4281      	cmp	r1, r0
 800d0b4:	dd09      	ble.n	800d0ca <sin+0x3a>
 800d0b6:	ee10 0a10 	vmov	r0, s0
 800d0ba:	4619      	mov	r1, r3
 800d0bc:	f7f3 f88c 	bl	80001d8 <__aeabi_dsub>
 800d0c0:	ec41 0b10 	vmov	d0, r0, r1
 800d0c4:	b005      	add	sp, #20
 800d0c6:	f85d fb04 	ldr.w	pc, [sp], #4
 800d0ca:	4668      	mov	r0, sp
 800d0cc:	f001 f8d4 	bl	800e278 <__ieee754_rem_pio2>
 800d0d0:	f000 0003 	and.w	r0, r0, #3
 800d0d4:	2801      	cmp	r0, #1
 800d0d6:	d008      	beq.n	800d0ea <sin+0x5a>
 800d0d8:	2802      	cmp	r0, #2
 800d0da:	d00d      	beq.n	800d0f8 <sin+0x68>
 800d0dc:	b9d0      	cbnz	r0, 800d114 <sin+0x84>
 800d0de:	ed9d 1b02 	vldr	d1, [sp, #8]
 800d0e2:	ed9d 0b00 	vldr	d0, [sp]
 800d0e6:	2001      	movs	r0, #1
 800d0e8:	e7dd      	b.n	800d0a6 <sin+0x16>
 800d0ea:	ed9d 1b02 	vldr	d1, [sp, #8]
 800d0ee:	ed9d 0b00 	vldr	d0, [sp]
 800d0f2:	f001 fb81 	bl	800e7f8 <__kernel_cos>
 800d0f6:	e7d8      	b.n	800d0aa <sin+0x1a>
 800d0f8:	ed9d 1b02 	vldr	d1, [sp, #8]
 800d0fc:	ed9d 0b00 	vldr	d0, [sp]
 800d100:	2001      	movs	r0, #1
 800d102:	f001 ff81 	bl	800f008 <__kernel_sin>
 800d106:	ec53 2b10 	vmov	r2, r3, d0
 800d10a:	ee10 0a10 	vmov	r0, s0
 800d10e:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800d112:	e7d5      	b.n	800d0c0 <sin+0x30>
 800d114:	ed9d 1b02 	vldr	d1, [sp, #8]
 800d118:	ed9d 0b00 	vldr	d0, [sp]
 800d11c:	f001 fb6c 	bl	800e7f8 <__kernel_cos>
 800d120:	e7f1      	b.n	800d106 <sin+0x76>
 800d122:	bf00      	nop
 800d124:	f3af 8000 	nop.w
	...
 800d130:	3fe921fb 	.word	0x3fe921fb
 800d134:	7fefffff 	.word	0x7fefffff

0800d138 <acos>:
 800d138:	b538      	push	{r3, r4, r5, lr}
 800d13a:	ed2d 8b02 	vpush	{d8}
 800d13e:	ec55 4b10 	vmov	r4, r5, d0
 800d142:	f000 f915 	bl	800d370 <__ieee754_acos>
 800d146:	4b16      	ldr	r3, [pc, #88]	; (800d1a0 <acos+0x68>)
 800d148:	eeb0 8a40 	vmov.f32	s16, s0
 800d14c:	eef0 8a60 	vmov.f32	s17, s1
 800d150:	f993 3000 	ldrsb.w	r3, [r3]
 800d154:	3301      	adds	r3, #1
 800d156:	d01c      	beq.n	800d192 <acos+0x5a>
 800d158:	4622      	mov	r2, r4
 800d15a:	462b      	mov	r3, r5
 800d15c:	4620      	mov	r0, r4
 800d15e:	4629      	mov	r1, r5
 800d160:	f7f3 fc8c 	bl	8000a7c <__aeabi_dcmpun>
 800d164:	b9a8      	cbnz	r0, 800d192 <acos+0x5a>
 800d166:	ec45 4b10 	vmov	d0, r4, r5
 800d16a:	f002 f80b 	bl	800f184 <fabs>
 800d16e:	4b0d      	ldr	r3, [pc, #52]	; (800d1a4 <acos+0x6c>)
 800d170:	ec51 0b10 	vmov	r0, r1, d0
 800d174:	2200      	movs	r2, #0
 800d176:	f7f3 fc77 	bl	8000a68 <__aeabi_dcmpgt>
 800d17a:	b150      	cbz	r0, 800d192 <acos+0x5a>
 800d17c:	f7ff fef6 	bl	800cf6c <__errno>
 800d180:	ecbd 8b02 	vpop	{d8}
 800d184:	2321      	movs	r3, #33	; 0x21
 800d186:	6003      	str	r3, [r0, #0]
 800d188:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d18c:	4806      	ldr	r0, [pc, #24]	; (800d1a8 <acos+0x70>)
 800d18e:	f002 b88f 	b.w	800f2b0 <nan>
 800d192:	eeb0 0a48 	vmov.f32	s0, s16
 800d196:	eef0 0a68 	vmov.f32	s1, s17
 800d19a:	ecbd 8b02 	vpop	{d8}
 800d19e:	bd38      	pop	{r3, r4, r5, pc}
 800d1a0:	20000074 	.word	0x20000074
 800d1a4:	3ff00000 	.word	0x3ff00000
 800d1a8:	0800f5a8 	.word	0x0800f5a8

0800d1ac <pow>:
 800d1ac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d1b0:	ec59 8b10 	vmov	r8, r9, d0
 800d1b4:	ec57 6b11 	vmov	r6, r7, d1
 800d1b8:	f000 fb3a 	bl	800d830 <__ieee754_pow>
 800d1bc:	4b4e      	ldr	r3, [pc, #312]	; (800d2f8 <pow+0x14c>)
 800d1be:	f993 3000 	ldrsb.w	r3, [r3]
 800d1c2:	3301      	adds	r3, #1
 800d1c4:	ec55 4b10 	vmov	r4, r5, d0
 800d1c8:	d015      	beq.n	800d1f6 <pow+0x4a>
 800d1ca:	4632      	mov	r2, r6
 800d1cc:	463b      	mov	r3, r7
 800d1ce:	4630      	mov	r0, r6
 800d1d0:	4639      	mov	r1, r7
 800d1d2:	f7f3 fc53 	bl	8000a7c <__aeabi_dcmpun>
 800d1d6:	b970      	cbnz	r0, 800d1f6 <pow+0x4a>
 800d1d8:	4642      	mov	r2, r8
 800d1da:	464b      	mov	r3, r9
 800d1dc:	4640      	mov	r0, r8
 800d1de:	4649      	mov	r1, r9
 800d1e0:	f7f3 fc4c 	bl	8000a7c <__aeabi_dcmpun>
 800d1e4:	2200      	movs	r2, #0
 800d1e6:	2300      	movs	r3, #0
 800d1e8:	b148      	cbz	r0, 800d1fe <pow+0x52>
 800d1ea:	4630      	mov	r0, r6
 800d1ec:	4639      	mov	r1, r7
 800d1ee:	f7f3 fc13 	bl	8000a18 <__aeabi_dcmpeq>
 800d1f2:	2800      	cmp	r0, #0
 800d1f4:	d17d      	bne.n	800d2f2 <pow+0x146>
 800d1f6:	ec45 4b10 	vmov	d0, r4, r5
 800d1fa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d1fe:	4640      	mov	r0, r8
 800d200:	4649      	mov	r1, r9
 800d202:	f7f3 fc09 	bl	8000a18 <__aeabi_dcmpeq>
 800d206:	b1e0      	cbz	r0, 800d242 <pow+0x96>
 800d208:	2200      	movs	r2, #0
 800d20a:	2300      	movs	r3, #0
 800d20c:	4630      	mov	r0, r6
 800d20e:	4639      	mov	r1, r7
 800d210:	f7f3 fc02 	bl	8000a18 <__aeabi_dcmpeq>
 800d214:	2800      	cmp	r0, #0
 800d216:	d16c      	bne.n	800d2f2 <pow+0x146>
 800d218:	ec47 6b10 	vmov	d0, r6, r7
 800d21c:	f001 ffbb 	bl	800f196 <finite>
 800d220:	2800      	cmp	r0, #0
 800d222:	d0e8      	beq.n	800d1f6 <pow+0x4a>
 800d224:	2200      	movs	r2, #0
 800d226:	2300      	movs	r3, #0
 800d228:	4630      	mov	r0, r6
 800d22a:	4639      	mov	r1, r7
 800d22c:	f7f3 fbfe 	bl	8000a2c <__aeabi_dcmplt>
 800d230:	2800      	cmp	r0, #0
 800d232:	d0e0      	beq.n	800d1f6 <pow+0x4a>
 800d234:	f7ff fe9a 	bl	800cf6c <__errno>
 800d238:	2321      	movs	r3, #33	; 0x21
 800d23a:	6003      	str	r3, [r0, #0]
 800d23c:	2400      	movs	r4, #0
 800d23e:	4d2f      	ldr	r5, [pc, #188]	; (800d2fc <pow+0x150>)
 800d240:	e7d9      	b.n	800d1f6 <pow+0x4a>
 800d242:	ec45 4b10 	vmov	d0, r4, r5
 800d246:	f001 ffa6 	bl	800f196 <finite>
 800d24a:	bbb8      	cbnz	r0, 800d2bc <pow+0x110>
 800d24c:	ec49 8b10 	vmov	d0, r8, r9
 800d250:	f001 ffa1 	bl	800f196 <finite>
 800d254:	b390      	cbz	r0, 800d2bc <pow+0x110>
 800d256:	ec47 6b10 	vmov	d0, r6, r7
 800d25a:	f001 ff9c 	bl	800f196 <finite>
 800d25e:	b368      	cbz	r0, 800d2bc <pow+0x110>
 800d260:	4622      	mov	r2, r4
 800d262:	462b      	mov	r3, r5
 800d264:	4620      	mov	r0, r4
 800d266:	4629      	mov	r1, r5
 800d268:	f7f3 fc08 	bl	8000a7c <__aeabi_dcmpun>
 800d26c:	b160      	cbz	r0, 800d288 <pow+0xdc>
 800d26e:	f7ff fe7d 	bl	800cf6c <__errno>
 800d272:	2321      	movs	r3, #33	; 0x21
 800d274:	6003      	str	r3, [r0, #0]
 800d276:	2200      	movs	r2, #0
 800d278:	2300      	movs	r3, #0
 800d27a:	4610      	mov	r0, r2
 800d27c:	4619      	mov	r1, r3
 800d27e:	f7f3 fa8d 	bl	800079c <__aeabi_ddiv>
 800d282:	4604      	mov	r4, r0
 800d284:	460d      	mov	r5, r1
 800d286:	e7b6      	b.n	800d1f6 <pow+0x4a>
 800d288:	f7ff fe70 	bl	800cf6c <__errno>
 800d28c:	2322      	movs	r3, #34	; 0x22
 800d28e:	6003      	str	r3, [r0, #0]
 800d290:	2200      	movs	r2, #0
 800d292:	2300      	movs	r3, #0
 800d294:	4640      	mov	r0, r8
 800d296:	4649      	mov	r1, r9
 800d298:	f7f3 fbc8 	bl	8000a2c <__aeabi_dcmplt>
 800d29c:	2400      	movs	r4, #0
 800d29e:	b158      	cbz	r0, 800d2b8 <pow+0x10c>
 800d2a0:	ec47 6b10 	vmov	d0, r6, r7
 800d2a4:	f002 f80c 	bl	800f2c0 <rint>
 800d2a8:	4632      	mov	r2, r6
 800d2aa:	ec51 0b10 	vmov	r0, r1, d0
 800d2ae:	463b      	mov	r3, r7
 800d2b0:	f7f3 fbb2 	bl	8000a18 <__aeabi_dcmpeq>
 800d2b4:	2800      	cmp	r0, #0
 800d2b6:	d0c2      	beq.n	800d23e <pow+0x92>
 800d2b8:	4d11      	ldr	r5, [pc, #68]	; (800d300 <pow+0x154>)
 800d2ba:	e79c      	b.n	800d1f6 <pow+0x4a>
 800d2bc:	2200      	movs	r2, #0
 800d2be:	2300      	movs	r3, #0
 800d2c0:	4620      	mov	r0, r4
 800d2c2:	4629      	mov	r1, r5
 800d2c4:	f7f3 fba8 	bl	8000a18 <__aeabi_dcmpeq>
 800d2c8:	2800      	cmp	r0, #0
 800d2ca:	d094      	beq.n	800d1f6 <pow+0x4a>
 800d2cc:	ec49 8b10 	vmov	d0, r8, r9
 800d2d0:	f001 ff61 	bl	800f196 <finite>
 800d2d4:	2800      	cmp	r0, #0
 800d2d6:	d08e      	beq.n	800d1f6 <pow+0x4a>
 800d2d8:	ec47 6b10 	vmov	d0, r6, r7
 800d2dc:	f001 ff5b 	bl	800f196 <finite>
 800d2e0:	2800      	cmp	r0, #0
 800d2e2:	d088      	beq.n	800d1f6 <pow+0x4a>
 800d2e4:	f7ff fe42 	bl	800cf6c <__errno>
 800d2e8:	2322      	movs	r3, #34	; 0x22
 800d2ea:	6003      	str	r3, [r0, #0]
 800d2ec:	2400      	movs	r4, #0
 800d2ee:	2500      	movs	r5, #0
 800d2f0:	e781      	b.n	800d1f6 <pow+0x4a>
 800d2f2:	4d04      	ldr	r5, [pc, #16]	; (800d304 <pow+0x158>)
 800d2f4:	2400      	movs	r4, #0
 800d2f6:	e77e      	b.n	800d1f6 <pow+0x4a>
 800d2f8:	20000074 	.word	0x20000074
 800d2fc:	fff00000 	.word	0xfff00000
 800d300:	7ff00000 	.word	0x7ff00000
 800d304:	3ff00000 	.word	0x3ff00000

0800d308 <sqrt>:
 800d308:	b538      	push	{r3, r4, r5, lr}
 800d30a:	ed2d 8b02 	vpush	{d8}
 800d30e:	ec55 4b10 	vmov	r4, r5, d0
 800d312:	f001 f9bb 	bl	800e68c <__ieee754_sqrt>
 800d316:	4b15      	ldr	r3, [pc, #84]	; (800d36c <sqrt+0x64>)
 800d318:	eeb0 8a40 	vmov.f32	s16, s0
 800d31c:	eef0 8a60 	vmov.f32	s17, s1
 800d320:	f993 3000 	ldrsb.w	r3, [r3]
 800d324:	3301      	adds	r3, #1
 800d326:	d019      	beq.n	800d35c <sqrt+0x54>
 800d328:	4622      	mov	r2, r4
 800d32a:	462b      	mov	r3, r5
 800d32c:	4620      	mov	r0, r4
 800d32e:	4629      	mov	r1, r5
 800d330:	f7f3 fba4 	bl	8000a7c <__aeabi_dcmpun>
 800d334:	b990      	cbnz	r0, 800d35c <sqrt+0x54>
 800d336:	2200      	movs	r2, #0
 800d338:	2300      	movs	r3, #0
 800d33a:	4620      	mov	r0, r4
 800d33c:	4629      	mov	r1, r5
 800d33e:	f7f3 fb75 	bl	8000a2c <__aeabi_dcmplt>
 800d342:	b158      	cbz	r0, 800d35c <sqrt+0x54>
 800d344:	f7ff fe12 	bl	800cf6c <__errno>
 800d348:	2321      	movs	r3, #33	; 0x21
 800d34a:	6003      	str	r3, [r0, #0]
 800d34c:	2200      	movs	r2, #0
 800d34e:	2300      	movs	r3, #0
 800d350:	4610      	mov	r0, r2
 800d352:	4619      	mov	r1, r3
 800d354:	f7f3 fa22 	bl	800079c <__aeabi_ddiv>
 800d358:	ec41 0b18 	vmov	d8, r0, r1
 800d35c:	eeb0 0a48 	vmov.f32	s0, s16
 800d360:	eef0 0a68 	vmov.f32	s1, s17
 800d364:	ecbd 8b02 	vpop	{d8}
 800d368:	bd38      	pop	{r3, r4, r5, pc}
 800d36a:	bf00      	nop
 800d36c:	20000074 	.word	0x20000074

0800d370 <__ieee754_acos>:
 800d370:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d374:	ec55 4b10 	vmov	r4, r5, d0
 800d378:	49b7      	ldr	r1, [pc, #732]	; (800d658 <__ieee754_acos+0x2e8>)
 800d37a:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800d37e:	428b      	cmp	r3, r1
 800d380:	dd1b      	ble.n	800d3ba <__ieee754_acos+0x4a>
 800d382:	f103 4340 	add.w	r3, r3, #3221225472	; 0xc0000000
 800d386:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 800d38a:	4323      	orrs	r3, r4
 800d38c:	d106      	bne.n	800d39c <__ieee754_acos+0x2c>
 800d38e:	2d00      	cmp	r5, #0
 800d390:	f300 8211 	bgt.w	800d7b6 <__ieee754_acos+0x446>
 800d394:	ed9f 0b96 	vldr	d0, [pc, #600]	; 800d5f0 <__ieee754_acos+0x280>
 800d398:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d39c:	ee10 2a10 	vmov	r2, s0
 800d3a0:	462b      	mov	r3, r5
 800d3a2:	ee10 0a10 	vmov	r0, s0
 800d3a6:	4629      	mov	r1, r5
 800d3a8:	f7f2 ff16 	bl	80001d8 <__aeabi_dsub>
 800d3ac:	4602      	mov	r2, r0
 800d3ae:	460b      	mov	r3, r1
 800d3b0:	f7f3 f9f4 	bl	800079c <__aeabi_ddiv>
 800d3b4:	ec41 0b10 	vmov	d0, r0, r1
 800d3b8:	e7ee      	b.n	800d398 <__ieee754_acos+0x28>
 800d3ba:	49a8      	ldr	r1, [pc, #672]	; (800d65c <__ieee754_acos+0x2ec>)
 800d3bc:	428b      	cmp	r3, r1
 800d3be:	f300 8087 	bgt.w	800d4d0 <__ieee754_acos+0x160>
 800d3c2:	4aa7      	ldr	r2, [pc, #668]	; (800d660 <__ieee754_acos+0x2f0>)
 800d3c4:	4293      	cmp	r3, r2
 800d3c6:	f340 81f9 	ble.w	800d7bc <__ieee754_acos+0x44c>
 800d3ca:	ee10 2a10 	vmov	r2, s0
 800d3ce:	ee10 0a10 	vmov	r0, s0
 800d3d2:	462b      	mov	r3, r5
 800d3d4:	4629      	mov	r1, r5
 800d3d6:	f7f3 f8b7 	bl	8000548 <__aeabi_dmul>
 800d3da:	a387      	add	r3, pc, #540	; (adr r3, 800d5f8 <__ieee754_acos+0x288>)
 800d3dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d3e0:	4606      	mov	r6, r0
 800d3e2:	460f      	mov	r7, r1
 800d3e4:	f7f3 f8b0 	bl	8000548 <__aeabi_dmul>
 800d3e8:	a385      	add	r3, pc, #532	; (adr r3, 800d600 <__ieee754_acos+0x290>)
 800d3ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d3ee:	f7f2 fef5 	bl	80001dc <__adddf3>
 800d3f2:	4632      	mov	r2, r6
 800d3f4:	463b      	mov	r3, r7
 800d3f6:	f7f3 f8a7 	bl	8000548 <__aeabi_dmul>
 800d3fa:	a383      	add	r3, pc, #524	; (adr r3, 800d608 <__ieee754_acos+0x298>)
 800d3fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d400:	f7f2 feea 	bl	80001d8 <__aeabi_dsub>
 800d404:	4632      	mov	r2, r6
 800d406:	463b      	mov	r3, r7
 800d408:	f7f3 f89e 	bl	8000548 <__aeabi_dmul>
 800d40c:	a380      	add	r3, pc, #512	; (adr r3, 800d610 <__ieee754_acos+0x2a0>)
 800d40e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d412:	f7f2 fee3 	bl	80001dc <__adddf3>
 800d416:	4632      	mov	r2, r6
 800d418:	463b      	mov	r3, r7
 800d41a:	f7f3 f895 	bl	8000548 <__aeabi_dmul>
 800d41e:	a37e      	add	r3, pc, #504	; (adr r3, 800d618 <__ieee754_acos+0x2a8>)
 800d420:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d424:	f7f2 fed8 	bl	80001d8 <__aeabi_dsub>
 800d428:	4632      	mov	r2, r6
 800d42a:	463b      	mov	r3, r7
 800d42c:	f7f3 f88c 	bl	8000548 <__aeabi_dmul>
 800d430:	a37b      	add	r3, pc, #492	; (adr r3, 800d620 <__ieee754_acos+0x2b0>)
 800d432:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d436:	f7f2 fed1 	bl	80001dc <__adddf3>
 800d43a:	4632      	mov	r2, r6
 800d43c:	463b      	mov	r3, r7
 800d43e:	f7f3 f883 	bl	8000548 <__aeabi_dmul>
 800d442:	a379      	add	r3, pc, #484	; (adr r3, 800d628 <__ieee754_acos+0x2b8>)
 800d444:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d448:	4680      	mov	r8, r0
 800d44a:	4689      	mov	r9, r1
 800d44c:	4630      	mov	r0, r6
 800d44e:	4639      	mov	r1, r7
 800d450:	f7f3 f87a 	bl	8000548 <__aeabi_dmul>
 800d454:	a376      	add	r3, pc, #472	; (adr r3, 800d630 <__ieee754_acos+0x2c0>)
 800d456:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d45a:	f7f2 febd 	bl	80001d8 <__aeabi_dsub>
 800d45e:	4632      	mov	r2, r6
 800d460:	463b      	mov	r3, r7
 800d462:	f7f3 f871 	bl	8000548 <__aeabi_dmul>
 800d466:	a374      	add	r3, pc, #464	; (adr r3, 800d638 <__ieee754_acos+0x2c8>)
 800d468:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d46c:	f7f2 feb6 	bl	80001dc <__adddf3>
 800d470:	4632      	mov	r2, r6
 800d472:	463b      	mov	r3, r7
 800d474:	f7f3 f868 	bl	8000548 <__aeabi_dmul>
 800d478:	a371      	add	r3, pc, #452	; (adr r3, 800d640 <__ieee754_acos+0x2d0>)
 800d47a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d47e:	f7f2 feab 	bl	80001d8 <__aeabi_dsub>
 800d482:	4632      	mov	r2, r6
 800d484:	463b      	mov	r3, r7
 800d486:	f7f3 f85f 	bl	8000548 <__aeabi_dmul>
 800d48a:	4b76      	ldr	r3, [pc, #472]	; (800d664 <__ieee754_acos+0x2f4>)
 800d48c:	2200      	movs	r2, #0
 800d48e:	f7f2 fea5 	bl	80001dc <__adddf3>
 800d492:	4602      	mov	r2, r0
 800d494:	460b      	mov	r3, r1
 800d496:	4640      	mov	r0, r8
 800d498:	4649      	mov	r1, r9
 800d49a:	f7f3 f97f 	bl	800079c <__aeabi_ddiv>
 800d49e:	4622      	mov	r2, r4
 800d4a0:	462b      	mov	r3, r5
 800d4a2:	f7f3 f851 	bl	8000548 <__aeabi_dmul>
 800d4a6:	4602      	mov	r2, r0
 800d4a8:	460b      	mov	r3, r1
 800d4aa:	a167      	add	r1, pc, #412	; (adr r1, 800d648 <__ieee754_acos+0x2d8>)
 800d4ac:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d4b0:	f7f2 fe92 	bl	80001d8 <__aeabi_dsub>
 800d4b4:	4602      	mov	r2, r0
 800d4b6:	460b      	mov	r3, r1
 800d4b8:	4620      	mov	r0, r4
 800d4ba:	4629      	mov	r1, r5
 800d4bc:	f7f2 fe8c 	bl	80001d8 <__aeabi_dsub>
 800d4c0:	4602      	mov	r2, r0
 800d4c2:	460b      	mov	r3, r1
 800d4c4:	a162      	add	r1, pc, #392	; (adr r1, 800d650 <__ieee754_acos+0x2e0>)
 800d4c6:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d4ca:	f7f2 fe85 	bl	80001d8 <__aeabi_dsub>
 800d4ce:	e771      	b.n	800d3b4 <__ieee754_acos+0x44>
 800d4d0:	2d00      	cmp	r5, #0
 800d4d2:	f280 80cb 	bge.w	800d66c <__ieee754_acos+0x2fc>
 800d4d6:	ee10 0a10 	vmov	r0, s0
 800d4da:	4b62      	ldr	r3, [pc, #392]	; (800d664 <__ieee754_acos+0x2f4>)
 800d4dc:	2200      	movs	r2, #0
 800d4de:	4629      	mov	r1, r5
 800d4e0:	f7f2 fe7c 	bl	80001dc <__adddf3>
 800d4e4:	4b60      	ldr	r3, [pc, #384]	; (800d668 <__ieee754_acos+0x2f8>)
 800d4e6:	2200      	movs	r2, #0
 800d4e8:	f7f3 f82e 	bl	8000548 <__aeabi_dmul>
 800d4ec:	a342      	add	r3, pc, #264	; (adr r3, 800d5f8 <__ieee754_acos+0x288>)
 800d4ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d4f2:	4604      	mov	r4, r0
 800d4f4:	460d      	mov	r5, r1
 800d4f6:	f7f3 f827 	bl	8000548 <__aeabi_dmul>
 800d4fa:	a341      	add	r3, pc, #260	; (adr r3, 800d600 <__ieee754_acos+0x290>)
 800d4fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d500:	f7f2 fe6c 	bl	80001dc <__adddf3>
 800d504:	4622      	mov	r2, r4
 800d506:	462b      	mov	r3, r5
 800d508:	f7f3 f81e 	bl	8000548 <__aeabi_dmul>
 800d50c:	a33e      	add	r3, pc, #248	; (adr r3, 800d608 <__ieee754_acos+0x298>)
 800d50e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d512:	f7f2 fe61 	bl	80001d8 <__aeabi_dsub>
 800d516:	4622      	mov	r2, r4
 800d518:	462b      	mov	r3, r5
 800d51a:	f7f3 f815 	bl	8000548 <__aeabi_dmul>
 800d51e:	a33c      	add	r3, pc, #240	; (adr r3, 800d610 <__ieee754_acos+0x2a0>)
 800d520:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d524:	f7f2 fe5a 	bl	80001dc <__adddf3>
 800d528:	4622      	mov	r2, r4
 800d52a:	462b      	mov	r3, r5
 800d52c:	f7f3 f80c 	bl	8000548 <__aeabi_dmul>
 800d530:	a339      	add	r3, pc, #228	; (adr r3, 800d618 <__ieee754_acos+0x2a8>)
 800d532:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d536:	f7f2 fe4f 	bl	80001d8 <__aeabi_dsub>
 800d53a:	4622      	mov	r2, r4
 800d53c:	462b      	mov	r3, r5
 800d53e:	f7f3 f803 	bl	8000548 <__aeabi_dmul>
 800d542:	a337      	add	r3, pc, #220	; (adr r3, 800d620 <__ieee754_acos+0x2b0>)
 800d544:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d548:	f7f2 fe48 	bl	80001dc <__adddf3>
 800d54c:	4622      	mov	r2, r4
 800d54e:	462b      	mov	r3, r5
 800d550:	f7f2 fffa 	bl	8000548 <__aeabi_dmul>
 800d554:	ec45 4b10 	vmov	d0, r4, r5
 800d558:	4680      	mov	r8, r0
 800d55a:	4689      	mov	r9, r1
 800d55c:	f001 f896 	bl	800e68c <__ieee754_sqrt>
 800d560:	a331      	add	r3, pc, #196	; (adr r3, 800d628 <__ieee754_acos+0x2b8>)
 800d562:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d566:	4620      	mov	r0, r4
 800d568:	4629      	mov	r1, r5
 800d56a:	ec57 6b10 	vmov	r6, r7, d0
 800d56e:	f7f2 ffeb 	bl	8000548 <__aeabi_dmul>
 800d572:	a32f      	add	r3, pc, #188	; (adr r3, 800d630 <__ieee754_acos+0x2c0>)
 800d574:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d578:	f7f2 fe2e 	bl	80001d8 <__aeabi_dsub>
 800d57c:	4622      	mov	r2, r4
 800d57e:	462b      	mov	r3, r5
 800d580:	f7f2 ffe2 	bl	8000548 <__aeabi_dmul>
 800d584:	a32c      	add	r3, pc, #176	; (adr r3, 800d638 <__ieee754_acos+0x2c8>)
 800d586:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d58a:	f7f2 fe27 	bl	80001dc <__adddf3>
 800d58e:	4622      	mov	r2, r4
 800d590:	462b      	mov	r3, r5
 800d592:	f7f2 ffd9 	bl	8000548 <__aeabi_dmul>
 800d596:	a32a      	add	r3, pc, #168	; (adr r3, 800d640 <__ieee754_acos+0x2d0>)
 800d598:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d59c:	f7f2 fe1c 	bl	80001d8 <__aeabi_dsub>
 800d5a0:	4622      	mov	r2, r4
 800d5a2:	462b      	mov	r3, r5
 800d5a4:	f7f2 ffd0 	bl	8000548 <__aeabi_dmul>
 800d5a8:	4b2e      	ldr	r3, [pc, #184]	; (800d664 <__ieee754_acos+0x2f4>)
 800d5aa:	2200      	movs	r2, #0
 800d5ac:	f7f2 fe16 	bl	80001dc <__adddf3>
 800d5b0:	4602      	mov	r2, r0
 800d5b2:	460b      	mov	r3, r1
 800d5b4:	4640      	mov	r0, r8
 800d5b6:	4649      	mov	r1, r9
 800d5b8:	f7f3 f8f0 	bl	800079c <__aeabi_ddiv>
 800d5bc:	4632      	mov	r2, r6
 800d5be:	463b      	mov	r3, r7
 800d5c0:	f7f2 ffc2 	bl	8000548 <__aeabi_dmul>
 800d5c4:	a320      	add	r3, pc, #128	; (adr r3, 800d648 <__ieee754_acos+0x2d8>)
 800d5c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d5ca:	f7f2 fe05 	bl	80001d8 <__aeabi_dsub>
 800d5ce:	4632      	mov	r2, r6
 800d5d0:	463b      	mov	r3, r7
 800d5d2:	f7f2 fe03 	bl	80001dc <__adddf3>
 800d5d6:	4602      	mov	r2, r0
 800d5d8:	460b      	mov	r3, r1
 800d5da:	f7f2 fdff 	bl	80001dc <__adddf3>
 800d5de:	4602      	mov	r2, r0
 800d5e0:	460b      	mov	r3, r1
 800d5e2:	a103      	add	r1, pc, #12	; (adr r1, 800d5f0 <__ieee754_acos+0x280>)
 800d5e4:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d5e8:	e76f      	b.n	800d4ca <__ieee754_acos+0x15a>
 800d5ea:	bf00      	nop
 800d5ec:	f3af 8000 	nop.w
 800d5f0:	54442d18 	.word	0x54442d18
 800d5f4:	400921fb 	.word	0x400921fb
 800d5f8:	0dfdf709 	.word	0x0dfdf709
 800d5fc:	3f023de1 	.word	0x3f023de1
 800d600:	7501b288 	.word	0x7501b288
 800d604:	3f49efe0 	.word	0x3f49efe0
 800d608:	b5688f3b 	.word	0xb5688f3b
 800d60c:	3fa48228 	.word	0x3fa48228
 800d610:	0e884455 	.word	0x0e884455
 800d614:	3fc9c155 	.word	0x3fc9c155
 800d618:	03eb6f7d 	.word	0x03eb6f7d
 800d61c:	3fd4d612 	.word	0x3fd4d612
 800d620:	55555555 	.word	0x55555555
 800d624:	3fc55555 	.word	0x3fc55555
 800d628:	b12e9282 	.word	0xb12e9282
 800d62c:	3fb3b8c5 	.word	0x3fb3b8c5
 800d630:	1b8d0159 	.word	0x1b8d0159
 800d634:	3fe6066c 	.word	0x3fe6066c
 800d638:	9c598ac8 	.word	0x9c598ac8
 800d63c:	40002ae5 	.word	0x40002ae5
 800d640:	1c8a2d4b 	.word	0x1c8a2d4b
 800d644:	40033a27 	.word	0x40033a27
 800d648:	33145c07 	.word	0x33145c07
 800d64c:	3c91a626 	.word	0x3c91a626
 800d650:	54442d18 	.word	0x54442d18
 800d654:	3ff921fb 	.word	0x3ff921fb
 800d658:	3fefffff 	.word	0x3fefffff
 800d65c:	3fdfffff 	.word	0x3fdfffff
 800d660:	3c600000 	.word	0x3c600000
 800d664:	3ff00000 	.word	0x3ff00000
 800d668:	3fe00000 	.word	0x3fe00000
 800d66c:	ee10 2a10 	vmov	r2, s0
 800d670:	462b      	mov	r3, r5
 800d672:	496d      	ldr	r1, [pc, #436]	; (800d828 <__ieee754_acos+0x4b8>)
 800d674:	2000      	movs	r0, #0
 800d676:	f7f2 fdaf 	bl	80001d8 <__aeabi_dsub>
 800d67a:	4b6c      	ldr	r3, [pc, #432]	; (800d82c <__ieee754_acos+0x4bc>)
 800d67c:	2200      	movs	r2, #0
 800d67e:	f7f2 ff63 	bl	8000548 <__aeabi_dmul>
 800d682:	4604      	mov	r4, r0
 800d684:	460d      	mov	r5, r1
 800d686:	ec45 4b10 	vmov	d0, r4, r5
 800d68a:	f000 ffff 	bl	800e68c <__ieee754_sqrt>
 800d68e:	a34e      	add	r3, pc, #312	; (adr r3, 800d7c8 <__ieee754_acos+0x458>)
 800d690:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d694:	4620      	mov	r0, r4
 800d696:	4629      	mov	r1, r5
 800d698:	ec59 8b10 	vmov	r8, r9, d0
 800d69c:	f7f2 ff54 	bl	8000548 <__aeabi_dmul>
 800d6a0:	a34b      	add	r3, pc, #300	; (adr r3, 800d7d0 <__ieee754_acos+0x460>)
 800d6a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d6a6:	f7f2 fd99 	bl	80001dc <__adddf3>
 800d6aa:	4622      	mov	r2, r4
 800d6ac:	462b      	mov	r3, r5
 800d6ae:	f7f2 ff4b 	bl	8000548 <__aeabi_dmul>
 800d6b2:	a349      	add	r3, pc, #292	; (adr r3, 800d7d8 <__ieee754_acos+0x468>)
 800d6b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d6b8:	f7f2 fd8e 	bl	80001d8 <__aeabi_dsub>
 800d6bc:	4622      	mov	r2, r4
 800d6be:	462b      	mov	r3, r5
 800d6c0:	f7f2 ff42 	bl	8000548 <__aeabi_dmul>
 800d6c4:	a346      	add	r3, pc, #280	; (adr r3, 800d7e0 <__ieee754_acos+0x470>)
 800d6c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d6ca:	f7f2 fd87 	bl	80001dc <__adddf3>
 800d6ce:	4622      	mov	r2, r4
 800d6d0:	462b      	mov	r3, r5
 800d6d2:	f7f2 ff39 	bl	8000548 <__aeabi_dmul>
 800d6d6:	a344      	add	r3, pc, #272	; (adr r3, 800d7e8 <__ieee754_acos+0x478>)
 800d6d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d6dc:	f7f2 fd7c 	bl	80001d8 <__aeabi_dsub>
 800d6e0:	4622      	mov	r2, r4
 800d6e2:	462b      	mov	r3, r5
 800d6e4:	f7f2 ff30 	bl	8000548 <__aeabi_dmul>
 800d6e8:	a341      	add	r3, pc, #260	; (adr r3, 800d7f0 <__ieee754_acos+0x480>)
 800d6ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d6ee:	f7f2 fd75 	bl	80001dc <__adddf3>
 800d6f2:	4622      	mov	r2, r4
 800d6f4:	462b      	mov	r3, r5
 800d6f6:	f7f2 ff27 	bl	8000548 <__aeabi_dmul>
 800d6fa:	a33f      	add	r3, pc, #252	; (adr r3, 800d7f8 <__ieee754_acos+0x488>)
 800d6fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d700:	4682      	mov	sl, r0
 800d702:	468b      	mov	fp, r1
 800d704:	4620      	mov	r0, r4
 800d706:	4629      	mov	r1, r5
 800d708:	f7f2 ff1e 	bl	8000548 <__aeabi_dmul>
 800d70c:	a33c      	add	r3, pc, #240	; (adr r3, 800d800 <__ieee754_acos+0x490>)
 800d70e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d712:	f7f2 fd61 	bl	80001d8 <__aeabi_dsub>
 800d716:	4622      	mov	r2, r4
 800d718:	462b      	mov	r3, r5
 800d71a:	f7f2 ff15 	bl	8000548 <__aeabi_dmul>
 800d71e:	a33a      	add	r3, pc, #232	; (adr r3, 800d808 <__ieee754_acos+0x498>)
 800d720:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d724:	f7f2 fd5a 	bl	80001dc <__adddf3>
 800d728:	4622      	mov	r2, r4
 800d72a:	462b      	mov	r3, r5
 800d72c:	f7f2 ff0c 	bl	8000548 <__aeabi_dmul>
 800d730:	a337      	add	r3, pc, #220	; (adr r3, 800d810 <__ieee754_acos+0x4a0>)
 800d732:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d736:	f7f2 fd4f 	bl	80001d8 <__aeabi_dsub>
 800d73a:	4622      	mov	r2, r4
 800d73c:	462b      	mov	r3, r5
 800d73e:	f7f2 ff03 	bl	8000548 <__aeabi_dmul>
 800d742:	4b39      	ldr	r3, [pc, #228]	; (800d828 <__ieee754_acos+0x4b8>)
 800d744:	2200      	movs	r2, #0
 800d746:	f7f2 fd49 	bl	80001dc <__adddf3>
 800d74a:	4602      	mov	r2, r0
 800d74c:	460b      	mov	r3, r1
 800d74e:	4650      	mov	r0, sl
 800d750:	4659      	mov	r1, fp
 800d752:	f7f3 f823 	bl	800079c <__aeabi_ddiv>
 800d756:	4642      	mov	r2, r8
 800d758:	464b      	mov	r3, r9
 800d75a:	f7f2 fef5 	bl	8000548 <__aeabi_dmul>
 800d75e:	2600      	movs	r6, #0
 800d760:	4682      	mov	sl, r0
 800d762:	468b      	mov	fp, r1
 800d764:	4632      	mov	r2, r6
 800d766:	464b      	mov	r3, r9
 800d768:	4630      	mov	r0, r6
 800d76a:	4649      	mov	r1, r9
 800d76c:	f7f2 feec 	bl	8000548 <__aeabi_dmul>
 800d770:	4602      	mov	r2, r0
 800d772:	460b      	mov	r3, r1
 800d774:	4620      	mov	r0, r4
 800d776:	4629      	mov	r1, r5
 800d778:	f7f2 fd2e 	bl	80001d8 <__aeabi_dsub>
 800d77c:	4632      	mov	r2, r6
 800d77e:	4604      	mov	r4, r0
 800d780:	460d      	mov	r5, r1
 800d782:	464b      	mov	r3, r9
 800d784:	4640      	mov	r0, r8
 800d786:	4649      	mov	r1, r9
 800d788:	f7f2 fd28 	bl	80001dc <__adddf3>
 800d78c:	4602      	mov	r2, r0
 800d78e:	460b      	mov	r3, r1
 800d790:	4620      	mov	r0, r4
 800d792:	4629      	mov	r1, r5
 800d794:	f7f3 f802 	bl	800079c <__aeabi_ddiv>
 800d798:	4602      	mov	r2, r0
 800d79a:	460b      	mov	r3, r1
 800d79c:	4650      	mov	r0, sl
 800d79e:	4659      	mov	r1, fp
 800d7a0:	f7f2 fd1c 	bl	80001dc <__adddf3>
 800d7a4:	4632      	mov	r2, r6
 800d7a6:	464b      	mov	r3, r9
 800d7a8:	f7f2 fd18 	bl	80001dc <__adddf3>
 800d7ac:	4602      	mov	r2, r0
 800d7ae:	460b      	mov	r3, r1
 800d7b0:	f7f2 fd14 	bl	80001dc <__adddf3>
 800d7b4:	e5fe      	b.n	800d3b4 <__ieee754_acos+0x44>
 800d7b6:	ed9f 0b18 	vldr	d0, [pc, #96]	; 800d818 <__ieee754_acos+0x4a8>
 800d7ba:	e5ed      	b.n	800d398 <__ieee754_acos+0x28>
 800d7bc:	ed9f 0b18 	vldr	d0, [pc, #96]	; 800d820 <__ieee754_acos+0x4b0>
 800d7c0:	e5ea      	b.n	800d398 <__ieee754_acos+0x28>
 800d7c2:	bf00      	nop
 800d7c4:	f3af 8000 	nop.w
 800d7c8:	0dfdf709 	.word	0x0dfdf709
 800d7cc:	3f023de1 	.word	0x3f023de1
 800d7d0:	7501b288 	.word	0x7501b288
 800d7d4:	3f49efe0 	.word	0x3f49efe0
 800d7d8:	b5688f3b 	.word	0xb5688f3b
 800d7dc:	3fa48228 	.word	0x3fa48228
 800d7e0:	0e884455 	.word	0x0e884455
 800d7e4:	3fc9c155 	.word	0x3fc9c155
 800d7e8:	03eb6f7d 	.word	0x03eb6f7d
 800d7ec:	3fd4d612 	.word	0x3fd4d612
 800d7f0:	55555555 	.word	0x55555555
 800d7f4:	3fc55555 	.word	0x3fc55555
 800d7f8:	b12e9282 	.word	0xb12e9282
 800d7fc:	3fb3b8c5 	.word	0x3fb3b8c5
 800d800:	1b8d0159 	.word	0x1b8d0159
 800d804:	3fe6066c 	.word	0x3fe6066c
 800d808:	9c598ac8 	.word	0x9c598ac8
 800d80c:	40002ae5 	.word	0x40002ae5
 800d810:	1c8a2d4b 	.word	0x1c8a2d4b
 800d814:	40033a27 	.word	0x40033a27
	...
 800d820:	54442d18 	.word	0x54442d18
 800d824:	3ff921fb 	.word	0x3ff921fb
 800d828:	3ff00000 	.word	0x3ff00000
 800d82c:	3fe00000 	.word	0x3fe00000

0800d830 <__ieee754_pow>:
 800d830:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d834:	ed2d 8b06 	vpush	{d8-d10}
 800d838:	b08d      	sub	sp, #52	; 0x34
 800d83a:	ed8d 1b02 	vstr	d1, [sp, #8]
 800d83e:	e9dd 0702 	ldrd	r0, r7, [sp, #8]
 800d842:	f027 4600 	bic.w	r6, r7, #2147483648	; 0x80000000
 800d846:	ea56 0100 	orrs.w	r1, r6, r0
 800d84a:	ec53 2b10 	vmov	r2, r3, d0
 800d84e:	f000 84d1 	beq.w	800e1f4 <__ieee754_pow+0x9c4>
 800d852:	497f      	ldr	r1, [pc, #508]	; (800da50 <__ieee754_pow+0x220>)
 800d854:	f023 4400 	bic.w	r4, r3, #2147483648	; 0x80000000
 800d858:	428c      	cmp	r4, r1
 800d85a:	ee10 8a10 	vmov	r8, s0
 800d85e:	4699      	mov	r9, r3
 800d860:	dc09      	bgt.n	800d876 <__ieee754_pow+0x46>
 800d862:	d103      	bne.n	800d86c <__ieee754_pow+0x3c>
 800d864:	b97a      	cbnz	r2, 800d886 <__ieee754_pow+0x56>
 800d866:	42a6      	cmp	r6, r4
 800d868:	dd02      	ble.n	800d870 <__ieee754_pow+0x40>
 800d86a:	e00c      	b.n	800d886 <__ieee754_pow+0x56>
 800d86c:	428e      	cmp	r6, r1
 800d86e:	dc02      	bgt.n	800d876 <__ieee754_pow+0x46>
 800d870:	428e      	cmp	r6, r1
 800d872:	d110      	bne.n	800d896 <__ieee754_pow+0x66>
 800d874:	b178      	cbz	r0, 800d896 <__ieee754_pow+0x66>
 800d876:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 800d87a:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800d87e:	ea54 0308 	orrs.w	r3, r4, r8
 800d882:	f000 84b7 	beq.w	800e1f4 <__ieee754_pow+0x9c4>
 800d886:	4873      	ldr	r0, [pc, #460]	; (800da54 <__ieee754_pow+0x224>)
 800d888:	b00d      	add	sp, #52	; 0x34
 800d88a:	ecbd 8b06 	vpop	{d8-d10}
 800d88e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d892:	f001 bd0d 	b.w	800f2b0 <nan>
 800d896:	f1b9 0f00 	cmp.w	r9, #0
 800d89a:	da36      	bge.n	800d90a <__ieee754_pow+0xda>
 800d89c:	496e      	ldr	r1, [pc, #440]	; (800da58 <__ieee754_pow+0x228>)
 800d89e:	428e      	cmp	r6, r1
 800d8a0:	dc51      	bgt.n	800d946 <__ieee754_pow+0x116>
 800d8a2:	f1a1 7154 	sub.w	r1, r1, #55574528	; 0x3500000
 800d8a6:	428e      	cmp	r6, r1
 800d8a8:	f340 84af 	ble.w	800e20a <__ieee754_pow+0x9da>
 800d8ac:	1531      	asrs	r1, r6, #20
 800d8ae:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 800d8b2:	2914      	cmp	r1, #20
 800d8b4:	dd0f      	ble.n	800d8d6 <__ieee754_pow+0xa6>
 800d8b6:	f1c1 0134 	rsb	r1, r1, #52	; 0x34
 800d8ba:	fa20 fc01 	lsr.w	ip, r0, r1
 800d8be:	fa0c f101 	lsl.w	r1, ip, r1
 800d8c2:	4281      	cmp	r1, r0
 800d8c4:	f040 84a1 	bne.w	800e20a <__ieee754_pow+0x9da>
 800d8c8:	f00c 0c01 	and.w	ip, ip, #1
 800d8cc:	f1cc 0102 	rsb	r1, ip, #2
 800d8d0:	9100      	str	r1, [sp, #0]
 800d8d2:	b180      	cbz	r0, 800d8f6 <__ieee754_pow+0xc6>
 800d8d4:	e059      	b.n	800d98a <__ieee754_pow+0x15a>
 800d8d6:	2800      	cmp	r0, #0
 800d8d8:	d155      	bne.n	800d986 <__ieee754_pow+0x156>
 800d8da:	f1c1 0114 	rsb	r1, r1, #20
 800d8de:	fa46 fc01 	asr.w	ip, r6, r1
 800d8e2:	fa0c f101 	lsl.w	r1, ip, r1
 800d8e6:	42b1      	cmp	r1, r6
 800d8e8:	f040 848c 	bne.w	800e204 <__ieee754_pow+0x9d4>
 800d8ec:	f00c 0c01 	and.w	ip, ip, #1
 800d8f0:	f1cc 0102 	rsb	r1, ip, #2
 800d8f4:	9100      	str	r1, [sp, #0]
 800d8f6:	4959      	ldr	r1, [pc, #356]	; (800da5c <__ieee754_pow+0x22c>)
 800d8f8:	428e      	cmp	r6, r1
 800d8fa:	d12d      	bne.n	800d958 <__ieee754_pow+0x128>
 800d8fc:	2f00      	cmp	r7, #0
 800d8fe:	da79      	bge.n	800d9f4 <__ieee754_pow+0x1c4>
 800d900:	4956      	ldr	r1, [pc, #344]	; (800da5c <__ieee754_pow+0x22c>)
 800d902:	2000      	movs	r0, #0
 800d904:	f7f2 ff4a 	bl	800079c <__aeabi_ddiv>
 800d908:	e016      	b.n	800d938 <__ieee754_pow+0x108>
 800d90a:	2100      	movs	r1, #0
 800d90c:	9100      	str	r1, [sp, #0]
 800d90e:	2800      	cmp	r0, #0
 800d910:	d13b      	bne.n	800d98a <__ieee754_pow+0x15a>
 800d912:	494f      	ldr	r1, [pc, #316]	; (800da50 <__ieee754_pow+0x220>)
 800d914:	428e      	cmp	r6, r1
 800d916:	d1ee      	bne.n	800d8f6 <__ieee754_pow+0xc6>
 800d918:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 800d91c:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 800d920:	ea53 0308 	orrs.w	r3, r3, r8
 800d924:	f000 8466 	beq.w	800e1f4 <__ieee754_pow+0x9c4>
 800d928:	4b4d      	ldr	r3, [pc, #308]	; (800da60 <__ieee754_pow+0x230>)
 800d92a:	429c      	cmp	r4, r3
 800d92c:	dd0d      	ble.n	800d94a <__ieee754_pow+0x11a>
 800d92e:	2f00      	cmp	r7, #0
 800d930:	f280 8464 	bge.w	800e1fc <__ieee754_pow+0x9cc>
 800d934:	2000      	movs	r0, #0
 800d936:	2100      	movs	r1, #0
 800d938:	ec41 0b10 	vmov	d0, r0, r1
 800d93c:	b00d      	add	sp, #52	; 0x34
 800d93e:	ecbd 8b06 	vpop	{d8-d10}
 800d942:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d946:	2102      	movs	r1, #2
 800d948:	e7e0      	b.n	800d90c <__ieee754_pow+0xdc>
 800d94a:	2f00      	cmp	r7, #0
 800d94c:	daf2      	bge.n	800d934 <__ieee754_pow+0x104>
 800d94e:	e9dd 0302 	ldrd	r0, r3, [sp, #8]
 800d952:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800d956:	e7ef      	b.n	800d938 <__ieee754_pow+0x108>
 800d958:	f1b7 4f80 	cmp.w	r7, #1073741824	; 0x40000000
 800d95c:	d104      	bne.n	800d968 <__ieee754_pow+0x138>
 800d95e:	4610      	mov	r0, r2
 800d960:	4619      	mov	r1, r3
 800d962:	f7f2 fdf1 	bl	8000548 <__aeabi_dmul>
 800d966:	e7e7      	b.n	800d938 <__ieee754_pow+0x108>
 800d968:	493e      	ldr	r1, [pc, #248]	; (800da64 <__ieee754_pow+0x234>)
 800d96a:	428f      	cmp	r7, r1
 800d96c:	d10d      	bne.n	800d98a <__ieee754_pow+0x15a>
 800d96e:	f1b9 0f00 	cmp.w	r9, #0
 800d972:	db0a      	blt.n	800d98a <__ieee754_pow+0x15a>
 800d974:	ec43 2b10 	vmov	d0, r2, r3
 800d978:	b00d      	add	sp, #52	; 0x34
 800d97a:	ecbd 8b06 	vpop	{d8-d10}
 800d97e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d982:	f000 be83 	b.w	800e68c <__ieee754_sqrt>
 800d986:	2100      	movs	r1, #0
 800d988:	9100      	str	r1, [sp, #0]
 800d98a:	ec43 2b10 	vmov	d0, r2, r3
 800d98e:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800d992:	f001 fbf7 	bl	800f184 <fabs>
 800d996:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800d99a:	ec51 0b10 	vmov	r0, r1, d0
 800d99e:	f1b8 0f00 	cmp.w	r8, #0
 800d9a2:	d12a      	bne.n	800d9fa <__ieee754_pow+0x1ca>
 800d9a4:	b12c      	cbz	r4, 800d9b2 <__ieee754_pow+0x182>
 800d9a6:	f8df c0b4 	ldr.w	ip, [pc, #180]	; 800da5c <__ieee754_pow+0x22c>
 800d9aa:	f029 4e40 	bic.w	lr, r9, #3221225472	; 0xc0000000
 800d9ae:	45e6      	cmp	lr, ip
 800d9b0:	d123      	bne.n	800d9fa <__ieee754_pow+0x1ca>
 800d9b2:	2f00      	cmp	r7, #0
 800d9b4:	da05      	bge.n	800d9c2 <__ieee754_pow+0x192>
 800d9b6:	4602      	mov	r2, r0
 800d9b8:	460b      	mov	r3, r1
 800d9ba:	2000      	movs	r0, #0
 800d9bc:	4927      	ldr	r1, [pc, #156]	; (800da5c <__ieee754_pow+0x22c>)
 800d9be:	f7f2 feed 	bl	800079c <__aeabi_ddiv>
 800d9c2:	f1b9 0f00 	cmp.w	r9, #0
 800d9c6:	dab7      	bge.n	800d938 <__ieee754_pow+0x108>
 800d9c8:	9b00      	ldr	r3, [sp, #0]
 800d9ca:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 800d9ce:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800d9d2:	4323      	orrs	r3, r4
 800d9d4:	d108      	bne.n	800d9e8 <__ieee754_pow+0x1b8>
 800d9d6:	4602      	mov	r2, r0
 800d9d8:	460b      	mov	r3, r1
 800d9da:	4610      	mov	r0, r2
 800d9dc:	4619      	mov	r1, r3
 800d9de:	f7f2 fbfb 	bl	80001d8 <__aeabi_dsub>
 800d9e2:	4602      	mov	r2, r0
 800d9e4:	460b      	mov	r3, r1
 800d9e6:	e78d      	b.n	800d904 <__ieee754_pow+0xd4>
 800d9e8:	9b00      	ldr	r3, [sp, #0]
 800d9ea:	2b01      	cmp	r3, #1
 800d9ec:	d1a4      	bne.n	800d938 <__ieee754_pow+0x108>
 800d9ee:	4602      	mov	r2, r0
 800d9f0:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800d9f4:	4610      	mov	r0, r2
 800d9f6:	4619      	mov	r1, r3
 800d9f8:	e79e      	b.n	800d938 <__ieee754_pow+0x108>
 800d9fa:	ea4f 7cd9 	mov.w	ip, r9, lsr #31
 800d9fe:	f10c 35ff 	add.w	r5, ip, #4294967295
 800da02:	950a      	str	r5, [sp, #40]	; 0x28
 800da04:	9d00      	ldr	r5, [sp, #0]
 800da06:	46ac      	mov	ip, r5
 800da08:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 800da0a:	ea5c 0505 	orrs.w	r5, ip, r5
 800da0e:	d0e4      	beq.n	800d9da <__ieee754_pow+0x1aa>
 800da10:	4b15      	ldr	r3, [pc, #84]	; (800da68 <__ieee754_pow+0x238>)
 800da12:	429e      	cmp	r6, r3
 800da14:	f340 80fc 	ble.w	800dc10 <__ieee754_pow+0x3e0>
 800da18:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 800da1c:	429e      	cmp	r6, r3
 800da1e:	4b10      	ldr	r3, [pc, #64]	; (800da60 <__ieee754_pow+0x230>)
 800da20:	dd07      	ble.n	800da32 <__ieee754_pow+0x202>
 800da22:	429c      	cmp	r4, r3
 800da24:	dc0a      	bgt.n	800da3c <__ieee754_pow+0x20c>
 800da26:	2f00      	cmp	r7, #0
 800da28:	da84      	bge.n	800d934 <__ieee754_pow+0x104>
 800da2a:	a307      	add	r3, pc, #28	; (adr r3, 800da48 <__ieee754_pow+0x218>)
 800da2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800da30:	e795      	b.n	800d95e <__ieee754_pow+0x12e>
 800da32:	429c      	cmp	r4, r3
 800da34:	dbf7      	blt.n	800da26 <__ieee754_pow+0x1f6>
 800da36:	4b09      	ldr	r3, [pc, #36]	; (800da5c <__ieee754_pow+0x22c>)
 800da38:	429c      	cmp	r4, r3
 800da3a:	dd17      	ble.n	800da6c <__ieee754_pow+0x23c>
 800da3c:	2f00      	cmp	r7, #0
 800da3e:	dcf4      	bgt.n	800da2a <__ieee754_pow+0x1fa>
 800da40:	e778      	b.n	800d934 <__ieee754_pow+0x104>
 800da42:	bf00      	nop
 800da44:	f3af 8000 	nop.w
 800da48:	8800759c 	.word	0x8800759c
 800da4c:	7e37e43c 	.word	0x7e37e43c
 800da50:	7ff00000 	.word	0x7ff00000
 800da54:	0800f5a8 	.word	0x0800f5a8
 800da58:	433fffff 	.word	0x433fffff
 800da5c:	3ff00000 	.word	0x3ff00000
 800da60:	3fefffff 	.word	0x3fefffff
 800da64:	3fe00000 	.word	0x3fe00000
 800da68:	41e00000 	.word	0x41e00000
 800da6c:	4b64      	ldr	r3, [pc, #400]	; (800dc00 <__ieee754_pow+0x3d0>)
 800da6e:	2200      	movs	r2, #0
 800da70:	f7f2 fbb2 	bl	80001d8 <__aeabi_dsub>
 800da74:	a356      	add	r3, pc, #344	; (adr r3, 800dbd0 <__ieee754_pow+0x3a0>)
 800da76:	e9d3 2300 	ldrd	r2, r3, [r3]
 800da7a:	4604      	mov	r4, r0
 800da7c:	460d      	mov	r5, r1
 800da7e:	f7f2 fd63 	bl	8000548 <__aeabi_dmul>
 800da82:	a355      	add	r3, pc, #340	; (adr r3, 800dbd8 <__ieee754_pow+0x3a8>)
 800da84:	e9d3 2300 	ldrd	r2, r3, [r3]
 800da88:	4606      	mov	r6, r0
 800da8a:	460f      	mov	r7, r1
 800da8c:	4620      	mov	r0, r4
 800da8e:	4629      	mov	r1, r5
 800da90:	f7f2 fd5a 	bl	8000548 <__aeabi_dmul>
 800da94:	4b5b      	ldr	r3, [pc, #364]	; (800dc04 <__ieee754_pow+0x3d4>)
 800da96:	4682      	mov	sl, r0
 800da98:	468b      	mov	fp, r1
 800da9a:	2200      	movs	r2, #0
 800da9c:	4620      	mov	r0, r4
 800da9e:	4629      	mov	r1, r5
 800daa0:	f7f2 fd52 	bl	8000548 <__aeabi_dmul>
 800daa4:	4602      	mov	r2, r0
 800daa6:	460b      	mov	r3, r1
 800daa8:	a14d      	add	r1, pc, #308	; (adr r1, 800dbe0 <__ieee754_pow+0x3b0>)
 800daaa:	e9d1 0100 	ldrd	r0, r1, [r1]
 800daae:	f7f2 fb93 	bl	80001d8 <__aeabi_dsub>
 800dab2:	4622      	mov	r2, r4
 800dab4:	462b      	mov	r3, r5
 800dab6:	f7f2 fd47 	bl	8000548 <__aeabi_dmul>
 800daba:	4602      	mov	r2, r0
 800dabc:	460b      	mov	r3, r1
 800dabe:	2000      	movs	r0, #0
 800dac0:	4951      	ldr	r1, [pc, #324]	; (800dc08 <__ieee754_pow+0x3d8>)
 800dac2:	f7f2 fb89 	bl	80001d8 <__aeabi_dsub>
 800dac6:	4622      	mov	r2, r4
 800dac8:	4680      	mov	r8, r0
 800daca:	4689      	mov	r9, r1
 800dacc:	462b      	mov	r3, r5
 800dace:	4620      	mov	r0, r4
 800dad0:	4629      	mov	r1, r5
 800dad2:	f7f2 fd39 	bl	8000548 <__aeabi_dmul>
 800dad6:	4602      	mov	r2, r0
 800dad8:	460b      	mov	r3, r1
 800dada:	4640      	mov	r0, r8
 800dadc:	4649      	mov	r1, r9
 800dade:	f7f2 fd33 	bl	8000548 <__aeabi_dmul>
 800dae2:	a341      	add	r3, pc, #260	; (adr r3, 800dbe8 <__ieee754_pow+0x3b8>)
 800dae4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dae8:	f7f2 fd2e 	bl	8000548 <__aeabi_dmul>
 800daec:	4602      	mov	r2, r0
 800daee:	460b      	mov	r3, r1
 800daf0:	4650      	mov	r0, sl
 800daf2:	4659      	mov	r1, fp
 800daf4:	f7f2 fb70 	bl	80001d8 <__aeabi_dsub>
 800daf8:	4602      	mov	r2, r0
 800dafa:	460b      	mov	r3, r1
 800dafc:	4680      	mov	r8, r0
 800dafe:	4689      	mov	r9, r1
 800db00:	4630      	mov	r0, r6
 800db02:	4639      	mov	r1, r7
 800db04:	f7f2 fb6a 	bl	80001dc <__adddf3>
 800db08:	2400      	movs	r4, #0
 800db0a:	4632      	mov	r2, r6
 800db0c:	463b      	mov	r3, r7
 800db0e:	4620      	mov	r0, r4
 800db10:	460d      	mov	r5, r1
 800db12:	f7f2 fb61 	bl	80001d8 <__aeabi_dsub>
 800db16:	4602      	mov	r2, r0
 800db18:	460b      	mov	r3, r1
 800db1a:	4640      	mov	r0, r8
 800db1c:	4649      	mov	r1, r9
 800db1e:	f7f2 fb5b 	bl	80001d8 <__aeabi_dsub>
 800db22:	9b00      	ldr	r3, [sp, #0]
 800db24:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800db26:	3b01      	subs	r3, #1
 800db28:	4313      	orrs	r3, r2
 800db2a:	4682      	mov	sl, r0
 800db2c:	468b      	mov	fp, r1
 800db2e:	f040 81f1 	bne.w	800df14 <__ieee754_pow+0x6e4>
 800db32:	ed9f 7b2f 	vldr	d7, [pc, #188]	; 800dbf0 <__ieee754_pow+0x3c0>
 800db36:	eeb0 8a47 	vmov.f32	s16, s14
 800db3a:	eef0 8a67 	vmov.f32	s17, s15
 800db3e:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800db42:	2600      	movs	r6, #0
 800db44:	4632      	mov	r2, r6
 800db46:	463b      	mov	r3, r7
 800db48:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800db4c:	f7f2 fb44 	bl	80001d8 <__aeabi_dsub>
 800db50:	4622      	mov	r2, r4
 800db52:	462b      	mov	r3, r5
 800db54:	f7f2 fcf8 	bl	8000548 <__aeabi_dmul>
 800db58:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800db5c:	4680      	mov	r8, r0
 800db5e:	4689      	mov	r9, r1
 800db60:	4650      	mov	r0, sl
 800db62:	4659      	mov	r1, fp
 800db64:	f7f2 fcf0 	bl	8000548 <__aeabi_dmul>
 800db68:	4602      	mov	r2, r0
 800db6a:	460b      	mov	r3, r1
 800db6c:	4640      	mov	r0, r8
 800db6e:	4649      	mov	r1, r9
 800db70:	f7f2 fb34 	bl	80001dc <__adddf3>
 800db74:	4632      	mov	r2, r6
 800db76:	463b      	mov	r3, r7
 800db78:	4680      	mov	r8, r0
 800db7a:	4689      	mov	r9, r1
 800db7c:	4620      	mov	r0, r4
 800db7e:	4629      	mov	r1, r5
 800db80:	f7f2 fce2 	bl	8000548 <__aeabi_dmul>
 800db84:	460b      	mov	r3, r1
 800db86:	4604      	mov	r4, r0
 800db88:	460d      	mov	r5, r1
 800db8a:	4602      	mov	r2, r0
 800db8c:	4649      	mov	r1, r9
 800db8e:	4640      	mov	r0, r8
 800db90:	f7f2 fb24 	bl	80001dc <__adddf3>
 800db94:	4b1d      	ldr	r3, [pc, #116]	; (800dc0c <__ieee754_pow+0x3dc>)
 800db96:	4299      	cmp	r1, r3
 800db98:	ec45 4b19 	vmov	d9, r4, r5
 800db9c:	4606      	mov	r6, r0
 800db9e:	460f      	mov	r7, r1
 800dba0:	468b      	mov	fp, r1
 800dba2:	f340 82fe 	ble.w	800e1a2 <__ieee754_pow+0x972>
 800dba6:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 800dbaa:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 800dbae:	4303      	orrs	r3, r0
 800dbb0:	f000 81f0 	beq.w	800df94 <__ieee754_pow+0x764>
 800dbb4:	a310      	add	r3, pc, #64	; (adr r3, 800dbf8 <__ieee754_pow+0x3c8>)
 800dbb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dbba:	ec51 0b18 	vmov	r0, r1, d8
 800dbbe:	f7f2 fcc3 	bl	8000548 <__aeabi_dmul>
 800dbc2:	a30d      	add	r3, pc, #52	; (adr r3, 800dbf8 <__ieee754_pow+0x3c8>)
 800dbc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dbc8:	e6cb      	b.n	800d962 <__ieee754_pow+0x132>
 800dbca:	bf00      	nop
 800dbcc:	f3af 8000 	nop.w
 800dbd0:	60000000 	.word	0x60000000
 800dbd4:	3ff71547 	.word	0x3ff71547
 800dbd8:	f85ddf44 	.word	0xf85ddf44
 800dbdc:	3e54ae0b 	.word	0x3e54ae0b
 800dbe0:	55555555 	.word	0x55555555
 800dbe4:	3fd55555 	.word	0x3fd55555
 800dbe8:	652b82fe 	.word	0x652b82fe
 800dbec:	3ff71547 	.word	0x3ff71547
 800dbf0:	00000000 	.word	0x00000000
 800dbf4:	bff00000 	.word	0xbff00000
 800dbf8:	8800759c 	.word	0x8800759c
 800dbfc:	7e37e43c 	.word	0x7e37e43c
 800dc00:	3ff00000 	.word	0x3ff00000
 800dc04:	3fd00000 	.word	0x3fd00000
 800dc08:	3fe00000 	.word	0x3fe00000
 800dc0c:	408fffff 	.word	0x408fffff
 800dc10:	4bd7      	ldr	r3, [pc, #860]	; (800df70 <__ieee754_pow+0x740>)
 800dc12:	ea03 0309 	and.w	r3, r3, r9
 800dc16:	2200      	movs	r2, #0
 800dc18:	b92b      	cbnz	r3, 800dc26 <__ieee754_pow+0x3f6>
 800dc1a:	4bd6      	ldr	r3, [pc, #856]	; (800df74 <__ieee754_pow+0x744>)
 800dc1c:	f7f2 fc94 	bl	8000548 <__aeabi_dmul>
 800dc20:	f06f 0234 	mvn.w	r2, #52	; 0x34
 800dc24:	460c      	mov	r4, r1
 800dc26:	1523      	asrs	r3, r4, #20
 800dc28:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800dc2c:	4413      	add	r3, r2
 800dc2e:	9309      	str	r3, [sp, #36]	; 0x24
 800dc30:	4bd1      	ldr	r3, [pc, #836]	; (800df78 <__ieee754_pow+0x748>)
 800dc32:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800dc36:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 800dc3a:	429c      	cmp	r4, r3
 800dc3c:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800dc40:	dd08      	ble.n	800dc54 <__ieee754_pow+0x424>
 800dc42:	4bce      	ldr	r3, [pc, #824]	; (800df7c <__ieee754_pow+0x74c>)
 800dc44:	429c      	cmp	r4, r3
 800dc46:	f340 8163 	ble.w	800df10 <__ieee754_pow+0x6e0>
 800dc4a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800dc4c:	3301      	adds	r3, #1
 800dc4e:	9309      	str	r3, [sp, #36]	; 0x24
 800dc50:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 800dc54:	2400      	movs	r4, #0
 800dc56:	00e3      	lsls	r3, r4, #3
 800dc58:	930b      	str	r3, [sp, #44]	; 0x2c
 800dc5a:	4bc9      	ldr	r3, [pc, #804]	; (800df80 <__ieee754_pow+0x750>)
 800dc5c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800dc60:	ed93 7b00 	vldr	d7, [r3]
 800dc64:	4629      	mov	r1, r5
 800dc66:	ec53 2b17 	vmov	r2, r3, d7
 800dc6a:	eeb0 8a47 	vmov.f32	s16, s14
 800dc6e:	eef0 8a67 	vmov.f32	s17, s15
 800dc72:	4682      	mov	sl, r0
 800dc74:	f7f2 fab0 	bl	80001d8 <__aeabi_dsub>
 800dc78:	4652      	mov	r2, sl
 800dc7a:	4606      	mov	r6, r0
 800dc7c:	460f      	mov	r7, r1
 800dc7e:	462b      	mov	r3, r5
 800dc80:	ec51 0b18 	vmov	r0, r1, d8
 800dc84:	f7f2 faaa 	bl	80001dc <__adddf3>
 800dc88:	4602      	mov	r2, r0
 800dc8a:	460b      	mov	r3, r1
 800dc8c:	2000      	movs	r0, #0
 800dc8e:	49bd      	ldr	r1, [pc, #756]	; (800df84 <__ieee754_pow+0x754>)
 800dc90:	f7f2 fd84 	bl	800079c <__aeabi_ddiv>
 800dc94:	ec41 0b19 	vmov	d9, r0, r1
 800dc98:	4602      	mov	r2, r0
 800dc9a:	460b      	mov	r3, r1
 800dc9c:	4630      	mov	r0, r6
 800dc9e:	4639      	mov	r1, r7
 800dca0:	f7f2 fc52 	bl	8000548 <__aeabi_dmul>
 800dca4:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800dca8:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800dcac:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800dcb0:	2300      	movs	r3, #0
 800dcb2:	9304      	str	r3, [sp, #16]
 800dcb4:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 800dcb8:	46ab      	mov	fp, r5
 800dcba:	106d      	asrs	r5, r5, #1
 800dcbc:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 800dcc0:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 800dcc4:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 800dcc8:	2200      	movs	r2, #0
 800dcca:	4640      	mov	r0, r8
 800dccc:	4649      	mov	r1, r9
 800dcce:	4614      	mov	r4, r2
 800dcd0:	461d      	mov	r5, r3
 800dcd2:	f7f2 fc39 	bl	8000548 <__aeabi_dmul>
 800dcd6:	4602      	mov	r2, r0
 800dcd8:	460b      	mov	r3, r1
 800dcda:	4630      	mov	r0, r6
 800dcdc:	4639      	mov	r1, r7
 800dcde:	f7f2 fa7b 	bl	80001d8 <__aeabi_dsub>
 800dce2:	ec53 2b18 	vmov	r2, r3, d8
 800dce6:	4606      	mov	r6, r0
 800dce8:	460f      	mov	r7, r1
 800dcea:	4620      	mov	r0, r4
 800dcec:	4629      	mov	r1, r5
 800dcee:	f7f2 fa73 	bl	80001d8 <__aeabi_dsub>
 800dcf2:	4602      	mov	r2, r0
 800dcf4:	460b      	mov	r3, r1
 800dcf6:	4650      	mov	r0, sl
 800dcf8:	4659      	mov	r1, fp
 800dcfa:	f7f2 fa6d 	bl	80001d8 <__aeabi_dsub>
 800dcfe:	4642      	mov	r2, r8
 800dd00:	464b      	mov	r3, r9
 800dd02:	f7f2 fc21 	bl	8000548 <__aeabi_dmul>
 800dd06:	4602      	mov	r2, r0
 800dd08:	460b      	mov	r3, r1
 800dd0a:	4630      	mov	r0, r6
 800dd0c:	4639      	mov	r1, r7
 800dd0e:	f7f2 fa63 	bl	80001d8 <__aeabi_dsub>
 800dd12:	ec53 2b19 	vmov	r2, r3, d9
 800dd16:	f7f2 fc17 	bl	8000548 <__aeabi_dmul>
 800dd1a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800dd1e:	ec41 0b18 	vmov	d8, r0, r1
 800dd22:	4610      	mov	r0, r2
 800dd24:	4619      	mov	r1, r3
 800dd26:	f7f2 fc0f 	bl	8000548 <__aeabi_dmul>
 800dd2a:	a37d      	add	r3, pc, #500	; (adr r3, 800df20 <__ieee754_pow+0x6f0>)
 800dd2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dd30:	4604      	mov	r4, r0
 800dd32:	460d      	mov	r5, r1
 800dd34:	f7f2 fc08 	bl	8000548 <__aeabi_dmul>
 800dd38:	a37b      	add	r3, pc, #492	; (adr r3, 800df28 <__ieee754_pow+0x6f8>)
 800dd3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dd3e:	f7f2 fa4d 	bl	80001dc <__adddf3>
 800dd42:	4622      	mov	r2, r4
 800dd44:	462b      	mov	r3, r5
 800dd46:	f7f2 fbff 	bl	8000548 <__aeabi_dmul>
 800dd4a:	a379      	add	r3, pc, #484	; (adr r3, 800df30 <__ieee754_pow+0x700>)
 800dd4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dd50:	f7f2 fa44 	bl	80001dc <__adddf3>
 800dd54:	4622      	mov	r2, r4
 800dd56:	462b      	mov	r3, r5
 800dd58:	f7f2 fbf6 	bl	8000548 <__aeabi_dmul>
 800dd5c:	a376      	add	r3, pc, #472	; (adr r3, 800df38 <__ieee754_pow+0x708>)
 800dd5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dd62:	f7f2 fa3b 	bl	80001dc <__adddf3>
 800dd66:	4622      	mov	r2, r4
 800dd68:	462b      	mov	r3, r5
 800dd6a:	f7f2 fbed 	bl	8000548 <__aeabi_dmul>
 800dd6e:	a374      	add	r3, pc, #464	; (adr r3, 800df40 <__ieee754_pow+0x710>)
 800dd70:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dd74:	f7f2 fa32 	bl	80001dc <__adddf3>
 800dd78:	4622      	mov	r2, r4
 800dd7a:	462b      	mov	r3, r5
 800dd7c:	f7f2 fbe4 	bl	8000548 <__aeabi_dmul>
 800dd80:	a371      	add	r3, pc, #452	; (adr r3, 800df48 <__ieee754_pow+0x718>)
 800dd82:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dd86:	f7f2 fa29 	bl	80001dc <__adddf3>
 800dd8a:	4622      	mov	r2, r4
 800dd8c:	4606      	mov	r6, r0
 800dd8e:	460f      	mov	r7, r1
 800dd90:	462b      	mov	r3, r5
 800dd92:	4620      	mov	r0, r4
 800dd94:	4629      	mov	r1, r5
 800dd96:	f7f2 fbd7 	bl	8000548 <__aeabi_dmul>
 800dd9a:	4602      	mov	r2, r0
 800dd9c:	460b      	mov	r3, r1
 800dd9e:	4630      	mov	r0, r6
 800dda0:	4639      	mov	r1, r7
 800dda2:	f7f2 fbd1 	bl	8000548 <__aeabi_dmul>
 800dda6:	4642      	mov	r2, r8
 800dda8:	4604      	mov	r4, r0
 800ddaa:	460d      	mov	r5, r1
 800ddac:	464b      	mov	r3, r9
 800ddae:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800ddb2:	f7f2 fa13 	bl	80001dc <__adddf3>
 800ddb6:	ec53 2b18 	vmov	r2, r3, d8
 800ddba:	f7f2 fbc5 	bl	8000548 <__aeabi_dmul>
 800ddbe:	4622      	mov	r2, r4
 800ddc0:	462b      	mov	r3, r5
 800ddc2:	f7f2 fa0b 	bl	80001dc <__adddf3>
 800ddc6:	4642      	mov	r2, r8
 800ddc8:	4682      	mov	sl, r0
 800ddca:	468b      	mov	fp, r1
 800ddcc:	464b      	mov	r3, r9
 800ddce:	4640      	mov	r0, r8
 800ddd0:	4649      	mov	r1, r9
 800ddd2:	f7f2 fbb9 	bl	8000548 <__aeabi_dmul>
 800ddd6:	4b6c      	ldr	r3, [pc, #432]	; (800df88 <__ieee754_pow+0x758>)
 800ddd8:	2200      	movs	r2, #0
 800ddda:	4606      	mov	r6, r0
 800dddc:	460f      	mov	r7, r1
 800ddde:	f7f2 f9fd 	bl	80001dc <__adddf3>
 800dde2:	4652      	mov	r2, sl
 800dde4:	465b      	mov	r3, fp
 800dde6:	f7f2 f9f9 	bl	80001dc <__adddf3>
 800ddea:	9c04      	ldr	r4, [sp, #16]
 800ddec:	460d      	mov	r5, r1
 800ddee:	4622      	mov	r2, r4
 800ddf0:	460b      	mov	r3, r1
 800ddf2:	4640      	mov	r0, r8
 800ddf4:	4649      	mov	r1, r9
 800ddf6:	f7f2 fba7 	bl	8000548 <__aeabi_dmul>
 800ddfa:	4b63      	ldr	r3, [pc, #396]	; (800df88 <__ieee754_pow+0x758>)
 800ddfc:	4680      	mov	r8, r0
 800ddfe:	4689      	mov	r9, r1
 800de00:	2200      	movs	r2, #0
 800de02:	4620      	mov	r0, r4
 800de04:	4629      	mov	r1, r5
 800de06:	f7f2 f9e7 	bl	80001d8 <__aeabi_dsub>
 800de0a:	4632      	mov	r2, r6
 800de0c:	463b      	mov	r3, r7
 800de0e:	f7f2 f9e3 	bl	80001d8 <__aeabi_dsub>
 800de12:	4602      	mov	r2, r0
 800de14:	460b      	mov	r3, r1
 800de16:	4650      	mov	r0, sl
 800de18:	4659      	mov	r1, fp
 800de1a:	f7f2 f9dd 	bl	80001d8 <__aeabi_dsub>
 800de1e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800de22:	f7f2 fb91 	bl	8000548 <__aeabi_dmul>
 800de26:	4622      	mov	r2, r4
 800de28:	4606      	mov	r6, r0
 800de2a:	460f      	mov	r7, r1
 800de2c:	462b      	mov	r3, r5
 800de2e:	ec51 0b18 	vmov	r0, r1, d8
 800de32:	f7f2 fb89 	bl	8000548 <__aeabi_dmul>
 800de36:	4602      	mov	r2, r0
 800de38:	460b      	mov	r3, r1
 800de3a:	4630      	mov	r0, r6
 800de3c:	4639      	mov	r1, r7
 800de3e:	f7f2 f9cd 	bl	80001dc <__adddf3>
 800de42:	4606      	mov	r6, r0
 800de44:	460f      	mov	r7, r1
 800de46:	4602      	mov	r2, r0
 800de48:	460b      	mov	r3, r1
 800de4a:	4640      	mov	r0, r8
 800de4c:	4649      	mov	r1, r9
 800de4e:	f7f2 f9c5 	bl	80001dc <__adddf3>
 800de52:	9c04      	ldr	r4, [sp, #16]
 800de54:	a33e      	add	r3, pc, #248	; (adr r3, 800df50 <__ieee754_pow+0x720>)
 800de56:	e9d3 2300 	ldrd	r2, r3, [r3]
 800de5a:	4620      	mov	r0, r4
 800de5c:	460d      	mov	r5, r1
 800de5e:	f7f2 fb73 	bl	8000548 <__aeabi_dmul>
 800de62:	4642      	mov	r2, r8
 800de64:	ec41 0b18 	vmov	d8, r0, r1
 800de68:	464b      	mov	r3, r9
 800de6a:	4620      	mov	r0, r4
 800de6c:	4629      	mov	r1, r5
 800de6e:	f7f2 f9b3 	bl	80001d8 <__aeabi_dsub>
 800de72:	4602      	mov	r2, r0
 800de74:	460b      	mov	r3, r1
 800de76:	4630      	mov	r0, r6
 800de78:	4639      	mov	r1, r7
 800de7a:	f7f2 f9ad 	bl	80001d8 <__aeabi_dsub>
 800de7e:	a336      	add	r3, pc, #216	; (adr r3, 800df58 <__ieee754_pow+0x728>)
 800de80:	e9d3 2300 	ldrd	r2, r3, [r3]
 800de84:	f7f2 fb60 	bl	8000548 <__aeabi_dmul>
 800de88:	a335      	add	r3, pc, #212	; (adr r3, 800df60 <__ieee754_pow+0x730>)
 800de8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800de8e:	4606      	mov	r6, r0
 800de90:	460f      	mov	r7, r1
 800de92:	4620      	mov	r0, r4
 800de94:	4629      	mov	r1, r5
 800de96:	f7f2 fb57 	bl	8000548 <__aeabi_dmul>
 800de9a:	4602      	mov	r2, r0
 800de9c:	460b      	mov	r3, r1
 800de9e:	4630      	mov	r0, r6
 800dea0:	4639      	mov	r1, r7
 800dea2:	f7f2 f99b 	bl	80001dc <__adddf3>
 800dea6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800dea8:	4b38      	ldr	r3, [pc, #224]	; (800df8c <__ieee754_pow+0x75c>)
 800deaa:	4413      	add	r3, r2
 800deac:	e9d3 2300 	ldrd	r2, r3, [r3]
 800deb0:	f7f2 f994 	bl	80001dc <__adddf3>
 800deb4:	4682      	mov	sl, r0
 800deb6:	9809      	ldr	r0, [sp, #36]	; 0x24
 800deb8:	468b      	mov	fp, r1
 800deba:	f7f2 fadb 	bl	8000474 <__aeabi_i2d>
 800debe:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800dec0:	4b33      	ldr	r3, [pc, #204]	; (800df90 <__ieee754_pow+0x760>)
 800dec2:	4413      	add	r3, r2
 800dec4:	e9d3 8900 	ldrd	r8, r9, [r3]
 800dec8:	4606      	mov	r6, r0
 800deca:	460f      	mov	r7, r1
 800decc:	4652      	mov	r2, sl
 800dece:	465b      	mov	r3, fp
 800ded0:	ec51 0b18 	vmov	r0, r1, d8
 800ded4:	f7f2 f982 	bl	80001dc <__adddf3>
 800ded8:	4642      	mov	r2, r8
 800deda:	464b      	mov	r3, r9
 800dedc:	f7f2 f97e 	bl	80001dc <__adddf3>
 800dee0:	4632      	mov	r2, r6
 800dee2:	463b      	mov	r3, r7
 800dee4:	f7f2 f97a 	bl	80001dc <__adddf3>
 800dee8:	9c04      	ldr	r4, [sp, #16]
 800deea:	4632      	mov	r2, r6
 800deec:	463b      	mov	r3, r7
 800deee:	4620      	mov	r0, r4
 800def0:	460d      	mov	r5, r1
 800def2:	f7f2 f971 	bl	80001d8 <__aeabi_dsub>
 800def6:	4642      	mov	r2, r8
 800def8:	464b      	mov	r3, r9
 800defa:	f7f2 f96d 	bl	80001d8 <__aeabi_dsub>
 800defe:	ec53 2b18 	vmov	r2, r3, d8
 800df02:	f7f2 f969 	bl	80001d8 <__aeabi_dsub>
 800df06:	4602      	mov	r2, r0
 800df08:	460b      	mov	r3, r1
 800df0a:	4650      	mov	r0, sl
 800df0c:	4659      	mov	r1, fp
 800df0e:	e606      	b.n	800db1e <__ieee754_pow+0x2ee>
 800df10:	2401      	movs	r4, #1
 800df12:	e6a0      	b.n	800dc56 <__ieee754_pow+0x426>
 800df14:	ed9f 7b14 	vldr	d7, [pc, #80]	; 800df68 <__ieee754_pow+0x738>
 800df18:	e60d      	b.n	800db36 <__ieee754_pow+0x306>
 800df1a:	bf00      	nop
 800df1c:	f3af 8000 	nop.w
 800df20:	4a454eef 	.word	0x4a454eef
 800df24:	3fca7e28 	.word	0x3fca7e28
 800df28:	93c9db65 	.word	0x93c9db65
 800df2c:	3fcd864a 	.word	0x3fcd864a
 800df30:	a91d4101 	.word	0xa91d4101
 800df34:	3fd17460 	.word	0x3fd17460
 800df38:	518f264d 	.word	0x518f264d
 800df3c:	3fd55555 	.word	0x3fd55555
 800df40:	db6fabff 	.word	0xdb6fabff
 800df44:	3fdb6db6 	.word	0x3fdb6db6
 800df48:	33333303 	.word	0x33333303
 800df4c:	3fe33333 	.word	0x3fe33333
 800df50:	e0000000 	.word	0xe0000000
 800df54:	3feec709 	.word	0x3feec709
 800df58:	dc3a03fd 	.word	0xdc3a03fd
 800df5c:	3feec709 	.word	0x3feec709
 800df60:	145b01f5 	.word	0x145b01f5
 800df64:	be3e2fe0 	.word	0xbe3e2fe0
 800df68:	00000000 	.word	0x00000000
 800df6c:	3ff00000 	.word	0x3ff00000
 800df70:	7ff00000 	.word	0x7ff00000
 800df74:	43400000 	.word	0x43400000
 800df78:	0003988e 	.word	0x0003988e
 800df7c:	000bb679 	.word	0x000bb679
 800df80:	0800f5b0 	.word	0x0800f5b0
 800df84:	3ff00000 	.word	0x3ff00000
 800df88:	40080000 	.word	0x40080000
 800df8c:	0800f5d0 	.word	0x0800f5d0
 800df90:	0800f5c0 	.word	0x0800f5c0
 800df94:	a3b5      	add	r3, pc, #724	; (adr r3, 800e26c <__ieee754_pow+0xa3c>)
 800df96:	e9d3 2300 	ldrd	r2, r3, [r3]
 800df9a:	4640      	mov	r0, r8
 800df9c:	4649      	mov	r1, r9
 800df9e:	f7f2 f91d 	bl	80001dc <__adddf3>
 800dfa2:	4622      	mov	r2, r4
 800dfa4:	ec41 0b1a 	vmov	d10, r0, r1
 800dfa8:	462b      	mov	r3, r5
 800dfaa:	4630      	mov	r0, r6
 800dfac:	4639      	mov	r1, r7
 800dfae:	f7f2 f913 	bl	80001d8 <__aeabi_dsub>
 800dfb2:	4602      	mov	r2, r0
 800dfb4:	460b      	mov	r3, r1
 800dfb6:	ec51 0b1a 	vmov	r0, r1, d10
 800dfba:	f7f2 fd55 	bl	8000a68 <__aeabi_dcmpgt>
 800dfbe:	2800      	cmp	r0, #0
 800dfc0:	f47f adf8 	bne.w	800dbb4 <__ieee754_pow+0x384>
 800dfc4:	4aa4      	ldr	r2, [pc, #656]	; (800e258 <__ieee754_pow+0xa28>)
 800dfc6:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800dfca:	4293      	cmp	r3, r2
 800dfcc:	f340 810b 	ble.w	800e1e6 <__ieee754_pow+0x9b6>
 800dfd0:	151b      	asrs	r3, r3, #20
 800dfd2:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 800dfd6:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 800dfda:	fa4a f303 	asr.w	r3, sl, r3
 800dfde:	445b      	add	r3, fp
 800dfe0:	f3c3 520a 	ubfx	r2, r3, #20, #11
 800dfe4:	4e9d      	ldr	r6, [pc, #628]	; (800e25c <__ieee754_pow+0xa2c>)
 800dfe6:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 800dfea:	4116      	asrs	r6, r2
 800dfec:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 800dff0:	2000      	movs	r0, #0
 800dff2:	ea23 0106 	bic.w	r1, r3, r6
 800dff6:	f1c2 0214 	rsb	r2, r2, #20
 800dffa:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 800dffe:	fa4a fa02 	asr.w	sl, sl, r2
 800e002:	f1bb 0f00 	cmp.w	fp, #0
 800e006:	4602      	mov	r2, r0
 800e008:	460b      	mov	r3, r1
 800e00a:	4620      	mov	r0, r4
 800e00c:	4629      	mov	r1, r5
 800e00e:	bfb8      	it	lt
 800e010:	f1ca 0a00 	rsblt	sl, sl, #0
 800e014:	f7f2 f8e0 	bl	80001d8 <__aeabi_dsub>
 800e018:	ec41 0b19 	vmov	d9, r0, r1
 800e01c:	4642      	mov	r2, r8
 800e01e:	464b      	mov	r3, r9
 800e020:	ec51 0b19 	vmov	r0, r1, d9
 800e024:	f7f2 f8da 	bl	80001dc <__adddf3>
 800e028:	2400      	movs	r4, #0
 800e02a:	a379      	add	r3, pc, #484	; (adr r3, 800e210 <__ieee754_pow+0x9e0>)
 800e02c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e030:	4620      	mov	r0, r4
 800e032:	460d      	mov	r5, r1
 800e034:	f7f2 fa88 	bl	8000548 <__aeabi_dmul>
 800e038:	ec53 2b19 	vmov	r2, r3, d9
 800e03c:	4606      	mov	r6, r0
 800e03e:	460f      	mov	r7, r1
 800e040:	4620      	mov	r0, r4
 800e042:	4629      	mov	r1, r5
 800e044:	f7f2 f8c8 	bl	80001d8 <__aeabi_dsub>
 800e048:	4602      	mov	r2, r0
 800e04a:	460b      	mov	r3, r1
 800e04c:	4640      	mov	r0, r8
 800e04e:	4649      	mov	r1, r9
 800e050:	f7f2 f8c2 	bl	80001d8 <__aeabi_dsub>
 800e054:	a370      	add	r3, pc, #448	; (adr r3, 800e218 <__ieee754_pow+0x9e8>)
 800e056:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e05a:	f7f2 fa75 	bl	8000548 <__aeabi_dmul>
 800e05e:	a370      	add	r3, pc, #448	; (adr r3, 800e220 <__ieee754_pow+0x9f0>)
 800e060:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e064:	4680      	mov	r8, r0
 800e066:	4689      	mov	r9, r1
 800e068:	4620      	mov	r0, r4
 800e06a:	4629      	mov	r1, r5
 800e06c:	f7f2 fa6c 	bl	8000548 <__aeabi_dmul>
 800e070:	4602      	mov	r2, r0
 800e072:	460b      	mov	r3, r1
 800e074:	4640      	mov	r0, r8
 800e076:	4649      	mov	r1, r9
 800e078:	f7f2 f8b0 	bl	80001dc <__adddf3>
 800e07c:	4604      	mov	r4, r0
 800e07e:	460d      	mov	r5, r1
 800e080:	4602      	mov	r2, r0
 800e082:	460b      	mov	r3, r1
 800e084:	4630      	mov	r0, r6
 800e086:	4639      	mov	r1, r7
 800e088:	f7f2 f8a8 	bl	80001dc <__adddf3>
 800e08c:	4632      	mov	r2, r6
 800e08e:	463b      	mov	r3, r7
 800e090:	4680      	mov	r8, r0
 800e092:	4689      	mov	r9, r1
 800e094:	f7f2 f8a0 	bl	80001d8 <__aeabi_dsub>
 800e098:	4602      	mov	r2, r0
 800e09a:	460b      	mov	r3, r1
 800e09c:	4620      	mov	r0, r4
 800e09e:	4629      	mov	r1, r5
 800e0a0:	f7f2 f89a 	bl	80001d8 <__aeabi_dsub>
 800e0a4:	4642      	mov	r2, r8
 800e0a6:	4606      	mov	r6, r0
 800e0a8:	460f      	mov	r7, r1
 800e0aa:	464b      	mov	r3, r9
 800e0ac:	4640      	mov	r0, r8
 800e0ae:	4649      	mov	r1, r9
 800e0b0:	f7f2 fa4a 	bl	8000548 <__aeabi_dmul>
 800e0b4:	a35c      	add	r3, pc, #368	; (adr r3, 800e228 <__ieee754_pow+0x9f8>)
 800e0b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e0ba:	4604      	mov	r4, r0
 800e0bc:	460d      	mov	r5, r1
 800e0be:	f7f2 fa43 	bl	8000548 <__aeabi_dmul>
 800e0c2:	a35b      	add	r3, pc, #364	; (adr r3, 800e230 <__ieee754_pow+0xa00>)
 800e0c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e0c8:	f7f2 f886 	bl	80001d8 <__aeabi_dsub>
 800e0cc:	4622      	mov	r2, r4
 800e0ce:	462b      	mov	r3, r5
 800e0d0:	f7f2 fa3a 	bl	8000548 <__aeabi_dmul>
 800e0d4:	a358      	add	r3, pc, #352	; (adr r3, 800e238 <__ieee754_pow+0xa08>)
 800e0d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e0da:	f7f2 f87f 	bl	80001dc <__adddf3>
 800e0de:	4622      	mov	r2, r4
 800e0e0:	462b      	mov	r3, r5
 800e0e2:	f7f2 fa31 	bl	8000548 <__aeabi_dmul>
 800e0e6:	a356      	add	r3, pc, #344	; (adr r3, 800e240 <__ieee754_pow+0xa10>)
 800e0e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e0ec:	f7f2 f874 	bl	80001d8 <__aeabi_dsub>
 800e0f0:	4622      	mov	r2, r4
 800e0f2:	462b      	mov	r3, r5
 800e0f4:	f7f2 fa28 	bl	8000548 <__aeabi_dmul>
 800e0f8:	a353      	add	r3, pc, #332	; (adr r3, 800e248 <__ieee754_pow+0xa18>)
 800e0fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e0fe:	f7f2 f86d 	bl	80001dc <__adddf3>
 800e102:	4622      	mov	r2, r4
 800e104:	462b      	mov	r3, r5
 800e106:	f7f2 fa1f 	bl	8000548 <__aeabi_dmul>
 800e10a:	4602      	mov	r2, r0
 800e10c:	460b      	mov	r3, r1
 800e10e:	4640      	mov	r0, r8
 800e110:	4649      	mov	r1, r9
 800e112:	f7f2 f861 	bl	80001d8 <__aeabi_dsub>
 800e116:	4604      	mov	r4, r0
 800e118:	460d      	mov	r5, r1
 800e11a:	4602      	mov	r2, r0
 800e11c:	460b      	mov	r3, r1
 800e11e:	4640      	mov	r0, r8
 800e120:	4649      	mov	r1, r9
 800e122:	f7f2 fa11 	bl	8000548 <__aeabi_dmul>
 800e126:	2200      	movs	r2, #0
 800e128:	ec41 0b19 	vmov	d9, r0, r1
 800e12c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800e130:	4620      	mov	r0, r4
 800e132:	4629      	mov	r1, r5
 800e134:	f7f2 f850 	bl	80001d8 <__aeabi_dsub>
 800e138:	4602      	mov	r2, r0
 800e13a:	460b      	mov	r3, r1
 800e13c:	ec51 0b19 	vmov	r0, r1, d9
 800e140:	f7f2 fb2c 	bl	800079c <__aeabi_ddiv>
 800e144:	4632      	mov	r2, r6
 800e146:	4604      	mov	r4, r0
 800e148:	460d      	mov	r5, r1
 800e14a:	463b      	mov	r3, r7
 800e14c:	4640      	mov	r0, r8
 800e14e:	4649      	mov	r1, r9
 800e150:	f7f2 f9fa 	bl	8000548 <__aeabi_dmul>
 800e154:	4632      	mov	r2, r6
 800e156:	463b      	mov	r3, r7
 800e158:	f7f2 f840 	bl	80001dc <__adddf3>
 800e15c:	4602      	mov	r2, r0
 800e15e:	460b      	mov	r3, r1
 800e160:	4620      	mov	r0, r4
 800e162:	4629      	mov	r1, r5
 800e164:	f7f2 f838 	bl	80001d8 <__aeabi_dsub>
 800e168:	4642      	mov	r2, r8
 800e16a:	464b      	mov	r3, r9
 800e16c:	f7f2 f834 	bl	80001d8 <__aeabi_dsub>
 800e170:	460b      	mov	r3, r1
 800e172:	4602      	mov	r2, r0
 800e174:	493a      	ldr	r1, [pc, #232]	; (800e260 <__ieee754_pow+0xa30>)
 800e176:	2000      	movs	r0, #0
 800e178:	f7f2 f82e 	bl	80001d8 <__aeabi_dsub>
 800e17c:	e9cd 0100 	strd	r0, r1, [sp]
 800e180:	9b01      	ldr	r3, [sp, #4]
 800e182:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 800e186:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800e18a:	da2f      	bge.n	800e1ec <__ieee754_pow+0x9bc>
 800e18c:	4650      	mov	r0, sl
 800e18e:	ed9d 0b00 	vldr	d0, [sp]
 800e192:	f001 f921 	bl	800f3d8 <scalbn>
 800e196:	ec51 0b10 	vmov	r0, r1, d0
 800e19a:	ec53 2b18 	vmov	r2, r3, d8
 800e19e:	f7ff bbe0 	b.w	800d962 <__ieee754_pow+0x132>
 800e1a2:	4b30      	ldr	r3, [pc, #192]	; (800e264 <__ieee754_pow+0xa34>)
 800e1a4:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 800e1a8:	429e      	cmp	r6, r3
 800e1aa:	f77f af0b 	ble.w	800dfc4 <__ieee754_pow+0x794>
 800e1ae:	4b2e      	ldr	r3, [pc, #184]	; (800e268 <__ieee754_pow+0xa38>)
 800e1b0:	440b      	add	r3, r1
 800e1b2:	4303      	orrs	r3, r0
 800e1b4:	d00b      	beq.n	800e1ce <__ieee754_pow+0x99e>
 800e1b6:	a326      	add	r3, pc, #152	; (adr r3, 800e250 <__ieee754_pow+0xa20>)
 800e1b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e1bc:	ec51 0b18 	vmov	r0, r1, d8
 800e1c0:	f7f2 f9c2 	bl	8000548 <__aeabi_dmul>
 800e1c4:	a322      	add	r3, pc, #136	; (adr r3, 800e250 <__ieee754_pow+0xa20>)
 800e1c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e1ca:	f7ff bbca 	b.w	800d962 <__ieee754_pow+0x132>
 800e1ce:	4622      	mov	r2, r4
 800e1d0:	462b      	mov	r3, r5
 800e1d2:	f7f2 f801 	bl	80001d8 <__aeabi_dsub>
 800e1d6:	4642      	mov	r2, r8
 800e1d8:	464b      	mov	r3, r9
 800e1da:	f7f2 fc3b 	bl	8000a54 <__aeabi_dcmpge>
 800e1de:	2800      	cmp	r0, #0
 800e1e0:	f43f aef0 	beq.w	800dfc4 <__ieee754_pow+0x794>
 800e1e4:	e7e7      	b.n	800e1b6 <__ieee754_pow+0x986>
 800e1e6:	f04f 0a00 	mov.w	sl, #0
 800e1ea:	e717      	b.n	800e01c <__ieee754_pow+0x7ec>
 800e1ec:	e9dd 0100 	ldrd	r0, r1, [sp]
 800e1f0:	4619      	mov	r1, r3
 800e1f2:	e7d2      	b.n	800e19a <__ieee754_pow+0x96a>
 800e1f4:	491a      	ldr	r1, [pc, #104]	; (800e260 <__ieee754_pow+0xa30>)
 800e1f6:	2000      	movs	r0, #0
 800e1f8:	f7ff bb9e 	b.w	800d938 <__ieee754_pow+0x108>
 800e1fc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e200:	f7ff bb9a 	b.w	800d938 <__ieee754_pow+0x108>
 800e204:	9000      	str	r0, [sp, #0]
 800e206:	f7ff bb76 	b.w	800d8f6 <__ieee754_pow+0xc6>
 800e20a:	2100      	movs	r1, #0
 800e20c:	f7ff bb60 	b.w	800d8d0 <__ieee754_pow+0xa0>
 800e210:	00000000 	.word	0x00000000
 800e214:	3fe62e43 	.word	0x3fe62e43
 800e218:	fefa39ef 	.word	0xfefa39ef
 800e21c:	3fe62e42 	.word	0x3fe62e42
 800e220:	0ca86c39 	.word	0x0ca86c39
 800e224:	be205c61 	.word	0xbe205c61
 800e228:	72bea4d0 	.word	0x72bea4d0
 800e22c:	3e663769 	.word	0x3e663769
 800e230:	c5d26bf1 	.word	0xc5d26bf1
 800e234:	3ebbbd41 	.word	0x3ebbbd41
 800e238:	af25de2c 	.word	0xaf25de2c
 800e23c:	3f11566a 	.word	0x3f11566a
 800e240:	16bebd93 	.word	0x16bebd93
 800e244:	3f66c16c 	.word	0x3f66c16c
 800e248:	5555553e 	.word	0x5555553e
 800e24c:	3fc55555 	.word	0x3fc55555
 800e250:	c2f8f359 	.word	0xc2f8f359
 800e254:	01a56e1f 	.word	0x01a56e1f
 800e258:	3fe00000 	.word	0x3fe00000
 800e25c:	000fffff 	.word	0x000fffff
 800e260:	3ff00000 	.word	0x3ff00000
 800e264:	4090cbff 	.word	0x4090cbff
 800e268:	3f6f3400 	.word	0x3f6f3400
 800e26c:	652b82fe 	.word	0x652b82fe
 800e270:	3c971547 	.word	0x3c971547
 800e274:	00000000 	.word	0x00000000

0800e278 <__ieee754_rem_pio2>:
 800e278:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e27c:	ed2d 8b02 	vpush	{d8}
 800e280:	ec55 4b10 	vmov	r4, r5, d0
 800e284:	4bca      	ldr	r3, [pc, #808]	; (800e5b0 <__ieee754_rem_pio2+0x338>)
 800e286:	b08b      	sub	sp, #44	; 0x2c
 800e288:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 800e28c:	4598      	cmp	r8, r3
 800e28e:	4682      	mov	sl, r0
 800e290:	9502      	str	r5, [sp, #8]
 800e292:	dc08      	bgt.n	800e2a6 <__ieee754_rem_pio2+0x2e>
 800e294:	2200      	movs	r2, #0
 800e296:	2300      	movs	r3, #0
 800e298:	ed80 0b00 	vstr	d0, [r0]
 800e29c:	e9c0 2302 	strd	r2, r3, [r0, #8]
 800e2a0:	f04f 0b00 	mov.w	fp, #0
 800e2a4:	e028      	b.n	800e2f8 <__ieee754_rem_pio2+0x80>
 800e2a6:	4bc3      	ldr	r3, [pc, #780]	; (800e5b4 <__ieee754_rem_pio2+0x33c>)
 800e2a8:	4598      	cmp	r8, r3
 800e2aa:	dc78      	bgt.n	800e39e <__ieee754_rem_pio2+0x126>
 800e2ac:	9b02      	ldr	r3, [sp, #8]
 800e2ae:	4ec2      	ldr	r6, [pc, #776]	; (800e5b8 <__ieee754_rem_pio2+0x340>)
 800e2b0:	2b00      	cmp	r3, #0
 800e2b2:	ee10 0a10 	vmov	r0, s0
 800e2b6:	a3b0      	add	r3, pc, #704	; (adr r3, 800e578 <__ieee754_rem_pio2+0x300>)
 800e2b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e2bc:	4629      	mov	r1, r5
 800e2be:	dd39      	ble.n	800e334 <__ieee754_rem_pio2+0xbc>
 800e2c0:	f7f1 ff8a 	bl	80001d8 <__aeabi_dsub>
 800e2c4:	45b0      	cmp	r8, r6
 800e2c6:	4604      	mov	r4, r0
 800e2c8:	460d      	mov	r5, r1
 800e2ca:	d01b      	beq.n	800e304 <__ieee754_rem_pio2+0x8c>
 800e2cc:	a3ac      	add	r3, pc, #688	; (adr r3, 800e580 <__ieee754_rem_pio2+0x308>)
 800e2ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e2d2:	f7f1 ff81 	bl	80001d8 <__aeabi_dsub>
 800e2d6:	4602      	mov	r2, r0
 800e2d8:	460b      	mov	r3, r1
 800e2da:	e9ca 2300 	strd	r2, r3, [sl]
 800e2de:	4620      	mov	r0, r4
 800e2e0:	4629      	mov	r1, r5
 800e2e2:	f7f1 ff79 	bl	80001d8 <__aeabi_dsub>
 800e2e6:	a3a6      	add	r3, pc, #664	; (adr r3, 800e580 <__ieee754_rem_pio2+0x308>)
 800e2e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e2ec:	f7f1 ff74 	bl	80001d8 <__aeabi_dsub>
 800e2f0:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800e2f4:	f04f 0b01 	mov.w	fp, #1
 800e2f8:	4658      	mov	r0, fp
 800e2fa:	b00b      	add	sp, #44	; 0x2c
 800e2fc:	ecbd 8b02 	vpop	{d8}
 800e300:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e304:	a3a0      	add	r3, pc, #640	; (adr r3, 800e588 <__ieee754_rem_pio2+0x310>)
 800e306:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e30a:	f7f1 ff65 	bl	80001d8 <__aeabi_dsub>
 800e30e:	a3a0      	add	r3, pc, #640	; (adr r3, 800e590 <__ieee754_rem_pio2+0x318>)
 800e310:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e314:	4604      	mov	r4, r0
 800e316:	460d      	mov	r5, r1
 800e318:	f7f1 ff5e 	bl	80001d8 <__aeabi_dsub>
 800e31c:	4602      	mov	r2, r0
 800e31e:	460b      	mov	r3, r1
 800e320:	e9ca 2300 	strd	r2, r3, [sl]
 800e324:	4620      	mov	r0, r4
 800e326:	4629      	mov	r1, r5
 800e328:	f7f1 ff56 	bl	80001d8 <__aeabi_dsub>
 800e32c:	a398      	add	r3, pc, #608	; (adr r3, 800e590 <__ieee754_rem_pio2+0x318>)
 800e32e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e332:	e7db      	b.n	800e2ec <__ieee754_rem_pio2+0x74>
 800e334:	f7f1 ff52 	bl	80001dc <__adddf3>
 800e338:	45b0      	cmp	r8, r6
 800e33a:	4604      	mov	r4, r0
 800e33c:	460d      	mov	r5, r1
 800e33e:	d016      	beq.n	800e36e <__ieee754_rem_pio2+0xf6>
 800e340:	a38f      	add	r3, pc, #572	; (adr r3, 800e580 <__ieee754_rem_pio2+0x308>)
 800e342:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e346:	f7f1 ff49 	bl	80001dc <__adddf3>
 800e34a:	4602      	mov	r2, r0
 800e34c:	460b      	mov	r3, r1
 800e34e:	e9ca 2300 	strd	r2, r3, [sl]
 800e352:	4620      	mov	r0, r4
 800e354:	4629      	mov	r1, r5
 800e356:	f7f1 ff3f 	bl	80001d8 <__aeabi_dsub>
 800e35a:	a389      	add	r3, pc, #548	; (adr r3, 800e580 <__ieee754_rem_pio2+0x308>)
 800e35c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e360:	f7f1 ff3c 	bl	80001dc <__adddf3>
 800e364:	f04f 3bff 	mov.w	fp, #4294967295
 800e368:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800e36c:	e7c4      	b.n	800e2f8 <__ieee754_rem_pio2+0x80>
 800e36e:	a386      	add	r3, pc, #536	; (adr r3, 800e588 <__ieee754_rem_pio2+0x310>)
 800e370:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e374:	f7f1 ff32 	bl	80001dc <__adddf3>
 800e378:	a385      	add	r3, pc, #532	; (adr r3, 800e590 <__ieee754_rem_pio2+0x318>)
 800e37a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e37e:	4604      	mov	r4, r0
 800e380:	460d      	mov	r5, r1
 800e382:	f7f1 ff2b 	bl	80001dc <__adddf3>
 800e386:	4602      	mov	r2, r0
 800e388:	460b      	mov	r3, r1
 800e38a:	e9ca 2300 	strd	r2, r3, [sl]
 800e38e:	4620      	mov	r0, r4
 800e390:	4629      	mov	r1, r5
 800e392:	f7f1 ff21 	bl	80001d8 <__aeabi_dsub>
 800e396:	a37e      	add	r3, pc, #504	; (adr r3, 800e590 <__ieee754_rem_pio2+0x318>)
 800e398:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e39c:	e7e0      	b.n	800e360 <__ieee754_rem_pio2+0xe8>
 800e39e:	4b87      	ldr	r3, [pc, #540]	; (800e5bc <__ieee754_rem_pio2+0x344>)
 800e3a0:	4598      	cmp	r8, r3
 800e3a2:	f300 80d9 	bgt.w	800e558 <__ieee754_rem_pio2+0x2e0>
 800e3a6:	f000 feed 	bl	800f184 <fabs>
 800e3aa:	ec55 4b10 	vmov	r4, r5, d0
 800e3ae:	ee10 0a10 	vmov	r0, s0
 800e3b2:	a379      	add	r3, pc, #484	; (adr r3, 800e598 <__ieee754_rem_pio2+0x320>)
 800e3b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e3b8:	4629      	mov	r1, r5
 800e3ba:	f7f2 f8c5 	bl	8000548 <__aeabi_dmul>
 800e3be:	4b80      	ldr	r3, [pc, #512]	; (800e5c0 <__ieee754_rem_pio2+0x348>)
 800e3c0:	2200      	movs	r2, #0
 800e3c2:	f7f1 ff0b 	bl	80001dc <__adddf3>
 800e3c6:	f7f2 fb6f 	bl	8000aa8 <__aeabi_d2iz>
 800e3ca:	4683      	mov	fp, r0
 800e3cc:	f7f2 f852 	bl	8000474 <__aeabi_i2d>
 800e3d0:	4602      	mov	r2, r0
 800e3d2:	460b      	mov	r3, r1
 800e3d4:	ec43 2b18 	vmov	d8, r2, r3
 800e3d8:	a367      	add	r3, pc, #412	; (adr r3, 800e578 <__ieee754_rem_pio2+0x300>)
 800e3da:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e3de:	f7f2 f8b3 	bl	8000548 <__aeabi_dmul>
 800e3e2:	4602      	mov	r2, r0
 800e3e4:	460b      	mov	r3, r1
 800e3e6:	4620      	mov	r0, r4
 800e3e8:	4629      	mov	r1, r5
 800e3ea:	f7f1 fef5 	bl	80001d8 <__aeabi_dsub>
 800e3ee:	a364      	add	r3, pc, #400	; (adr r3, 800e580 <__ieee754_rem_pio2+0x308>)
 800e3f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e3f4:	4606      	mov	r6, r0
 800e3f6:	460f      	mov	r7, r1
 800e3f8:	ec51 0b18 	vmov	r0, r1, d8
 800e3fc:	f7f2 f8a4 	bl	8000548 <__aeabi_dmul>
 800e400:	f1bb 0f1f 	cmp.w	fp, #31
 800e404:	4604      	mov	r4, r0
 800e406:	460d      	mov	r5, r1
 800e408:	dc0d      	bgt.n	800e426 <__ieee754_rem_pio2+0x1ae>
 800e40a:	4b6e      	ldr	r3, [pc, #440]	; (800e5c4 <__ieee754_rem_pio2+0x34c>)
 800e40c:	f10b 32ff 	add.w	r2, fp, #4294967295
 800e410:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e414:	4543      	cmp	r3, r8
 800e416:	d006      	beq.n	800e426 <__ieee754_rem_pio2+0x1ae>
 800e418:	4622      	mov	r2, r4
 800e41a:	462b      	mov	r3, r5
 800e41c:	4630      	mov	r0, r6
 800e41e:	4639      	mov	r1, r7
 800e420:	f7f1 feda 	bl	80001d8 <__aeabi_dsub>
 800e424:	e00f      	b.n	800e446 <__ieee754_rem_pio2+0x1ce>
 800e426:	462b      	mov	r3, r5
 800e428:	4622      	mov	r2, r4
 800e42a:	4630      	mov	r0, r6
 800e42c:	4639      	mov	r1, r7
 800e42e:	f7f1 fed3 	bl	80001d8 <__aeabi_dsub>
 800e432:	ea4f 5328 	mov.w	r3, r8, asr #20
 800e436:	9303      	str	r3, [sp, #12]
 800e438:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800e43c:	ebc3 5818 	rsb	r8, r3, r8, lsr #20
 800e440:	f1b8 0f10 	cmp.w	r8, #16
 800e444:	dc02      	bgt.n	800e44c <__ieee754_rem_pio2+0x1d4>
 800e446:	e9ca 0100 	strd	r0, r1, [sl]
 800e44a:	e039      	b.n	800e4c0 <__ieee754_rem_pio2+0x248>
 800e44c:	a34e      	add	r3, pc, #312	; (adr r3, 800e588 <__ieee754_rem_pio2+0x310>)
 800e44e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e452:	ec51 0b18 	vmov	r0, r1, d8
 800e456:	f7f2 f877 	bl	8000548 <__aeabi_dmul>
 800e45a:	4604      	mov	r4, r0
 800e45c:	460d      	mov	r5, r1
 800e45e:	4602      	mov	r2, r0
 800e460:	460b      	mov	r3, r1
 800e462:	4630      	mov	r0, r6
 800e464:	4639      	mov	r1, r7
 800e466:	f7f1 feb7 	bl	80001d8 <__aeabi_dsub>
 800e46a:	4602      	mov	r2, r0
 800e46c:	460b      	mov	r3, r1
 800e46e:	4680      	mov	r8, r0
 800e470:	4689      	mov	r9, r1
 800e472:	4630      	mov	r0, r6
 800e474:	4639      	mov	r1, r7
 800e476:	f7f1 feaf 	bl	80001d8 <__aeabi_dsub>
 800e47a:	4622      	mov	r2, r4
 800e47c:	462b      	mov	r3, r5
 800e47e:	f7f1 feab 	bl	80001d8 <__aeabi_dsub>
 800e482:	a343      	add	r3, pc, #268	; (adr r3, 800e590 <__ieee754_rem_pio2+0x318>)
 800e484:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e488:	4604      	mov	r4, r0
 800e48a:	460d      	mov	r5, r1
 800e48c:	ec51 0b18 	vmov	r0, r1, d8
 800e490:	f7f2 f85a 	bl	8000548 <__aeabi_dmul>
 800e494:	4622      	mov	r2, r4
 800e496:	462b      	mov	r3, r5
 800e498:	f7f1 fe9e 	bl	80001d8 <__aeabi_dsub>
 800e49c:	4602      	mov	r2, r0
 800e49e:	460b      	mov	r3, r1
 800e4a0:	4604      	mov	r4, r0
 800e4a2:	460d      	mov	r5, r1
 800e4a4:	4640      	mov	r0, r8
 800e4a6:	4649      	mov	r1, r9
 800e4a8:	f7f1 fe96 	bl	80001d8 <__aeabi_dsub>
 800e4ac:	9a03      	ldr	r2, [sp, #12]
 800e4ae:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800e4b2:	1ad3      	subs	r3, r2, r3
 800e4b4:	2b31      	cmp	r3, #49	; 0x31
 800e4b6:	dc24      	bgt.n	800e502 <__ieee754_rem_pio2+0x28a>
 800e4b8:	e9ca 0100 	strd	r0, r1, [sl]
 800e4bc:	4646      	mov	r6, r8
 800e4be:	464f      	mov	r7, r9
 800e4c0:	e9da 8900 	ldrd	r8, r9, [sl]
 800e4c4:	4630      	mov	r0, r6
 800e4c6:	4642      	mov	r2, r8
 800e4c8:	464b      	mov	r3, r9
 800e4ca:	4639      	mov	r1, r7
 800e4cc:	f7f1 fe84 	bl	80001d8 <__aeabi_dsub>
 800e4d0:	462b      	mov	r3, r5
 800e4d2:	4622      	mov	r2, r4
 800e4d4:	f7f1 fe80 	bl	80001d8 <__aeabi_dsub>
 800e4d8:	9b02      	ldr	r3, [sp, #8]
 800e4da:	2b00      	cmp	r3, #0
 800e4dc:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800e4e0:	f6bf af0a 	bge.w	800e2f8 <__ieee754_rem_pio2+0x80>
 800e4e4:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800e4e8:	f8ca 3004 	str.w	r3, [sl, #4]
 800e4ec:	f8ca 8000 	str.w	r8, [sl]
 800e4f0:	f8ca 0008 	str.w	r0, [sl, #8]
 800e4f4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800e4f8:	f8ca 300c 	str.w	r3, [sl, #12]
 800e4fc:	f1cb 0b00 	rsb	fp, fp, #0
 800e500:	e6fa      	b.n	800e2f8 <__ieee754_rem_pio2+0x80>
 800e502:	a327      	add	r3, pc, #156	; (adr r3, 800e5a0 <__ieee754_rem_pio2+0x328>)
 800e504:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e508:	ec51 0b18 	vmov	r0, r1, d8
 800e50c:	f7f2 f81c 	bl	8000548 <__aeabi_dmul>
 800e510:	4604      	mov	r4, r0
 800e512:	460d      	mov	r5, r1
 800e514:	4602      	mov	r2, r0
 800e516:	460b      	mov	r3, r1
 800e518:	4640      	mov	r0, r8
 800e51a:	4649      	mov	r1, r9
 800e51c:	f7f1 fe5c 	bl	80001d8 <__aeabi_dsub>
 800e520:	4602      	mov	r2, r0
 800e522:	460b      	mov	r3, r1
 800e524:	4606      	mov	r6, r0
 800e526:	460f      	mov	r7, r1
 800e528:	4640      	mov	r0, r8
 800e52a:	4649      	mov	r1, r9
 800e52c:	f7f1 fe54 	bl	80001d8 <__aeabi_dsub>
 800e530:	4622      	mov	r2, r4
 800e532:	462b      	mov	r3, r5
 800e534:	f7f1 fe50 	bl	80001d8 <__aeabi_dsub>
 800e538:	a31b      	add	r3, pc, #108	; (adr r3, 800e5a8 <__ieee754_rem_pio2+0x330>)
 800e53a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e53e:	4604      	mov	r4, r0
 800e540:	460d      	mov	r5, r1
 800e542:	ec51 0b18 	vmov	r0, r1, d8
 800e546:	f7f1 ffff 	bl	8000548 <__aeabi_dmul>
 800e54a:	4622      	mov	r2, r4
 800e54c:	462b      	mov	r3, r5
 800e54e:	f7f1 fe43 	bl	80001d8 <__aeabi_dsub>
 800e552:	4604      	mov	r4, r0
 800e554:	460d      	mov	r5, r1
 800e556:	e75f      	b.n	800e418 <__ieee754_rem_pio2+0x1a0>
 800e558:	4b1b      	ldr	r3, [pc, #108]	; (800e5c8 <__ieee754_rem_pio2+0x350>)
 800e55a:	4598      	cmp	r8, r3
 800e55c:	dd36      	ble.n	800e5cc <__ieee754_rem_pio2+0x354>
 800e55e:	ee10 2a10 	vmov	r2, s0
 800e562:	462b      	mov	r3, r5
 800e564:	4620      	mov	r0, r4
 800e566:	4629      	mov	r1, r5
 800e568:	f7f1 fe36 	bl	80001d8 <__aeabi_dsub>
 800e56c:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800e570:	e9ca 0100 	strd	r0, r1, [sl]
 800e574:	e694      	b.n	800e2a0 <__ieee754_rem_pio2+0x28>
 800e576:	bf00      	nop
 800e578:	54400000 	.word	0x54400000
 800e57c:	3ff921fb 	.word	0x3ff921fb
 800e580:	1a626331 	.word	0x1a626331
 800e584:	3dd0b461 	.word	0x3dd0b461
 800e588:	1a600000 	.word	0x1a600000
 800e58c:	3dd0b461 	.word	0x3dd0b461
 800e590:	2e037073 	.word	0x2e037073
 800e594:	3ba3198a 	.word	0x3ba3198a
 800e598:	6dc9c883 	.word	0x6dc9c883
 800e59c:	3fe45f30 	.word	0x3fe45f30
 800e5a0:	2e000000 	.word	0x2e000000
 800e5a4:	3ba3198a 	.word	0x3ba3198a
 800e5a8:	252049c1 	.word	0x252049c1
 800e5ac:	397b839a 	.word	0x397b839a
 800e5b0:	3fe921fb 	.word	0x3fe921fb
 800e5b4:	4002d97b 	.word	0x4002d97b
 800e5b8:	3ff921fb 	.word	0x3ff921fb
 800e5bc:	413921fb 	.word	0x413921fb
 800e5c0:	3fe00000 	.word	0x3fe00000
 800e5c4:	0800f5e0 	.word	0x0800f5e0
 800e5c8:	7fefffff 	.word	0x7fefffff
 800e5cc:	ea4f 5428 	mov.w	r4, r8, asr #20
 800e5d0:	f2a4 4416 	subw	r4, r4, #1046	; 0x416
 800e5d4:	ee10 0a10 	vmov	r0, s0
 800e5d8:	eba8 5104 	sub.w	r1, r8, r4, lsl #20
 800e5dc:	ee10 6a10 	vmov	r6, s0
 800e5e0:	460f      	mov	r7, r1
 800e5e2:	f7f2 fa61 	bl	8000aa8 <__aeabi_d2iz>
 800e5e6:	f7f1 ff45 	bl	8000474 <__aeabi_i2d>
 800e5ea:	4602      	mov	r2, r0
 800e5ec:	460b      	mov	r3, r1
 800e5ee:	4630      	mov	r0, r6
 800e5f0:	4639      	mov	r1, r7
 800e5f2:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800e5f6:	f7f1 fdef 	bl	80001d8 <__aeabi_dsub>
 800e5fa:	4b22      	ldr	r3, [pc, #136]	; (800e684 <__ieee754_rem_pio2+0x40c>)
 800e5fc:	2200      	movs	r2, #0
 800e5fe:	f7f1 ffa3 	bl	8000548 <__aeabi_dmul>
 800e602:	460f      	mov	r7, r1
 800e604:	4606      	mov	r6, r0
 800e606:	f7f2 fa4f 	bl	8000aa8 <__aeabi_d2iz>
 800e60a:	f7f1 ff33 	bl	8000474 <__aeabi_i2d>
 800e60e:	4602      	mov	r2, r0
 800e610:	460b      	mov	r3, r1
 800e612:	4630      	mov	r0, r6
 800e614:	4639      	mov	r1, r7
 800e616:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800e61a:	f7f1 fddd 	bl	80001d8 <__aeabi_dsub>
 800e61e:	4b19      	ldr	r3, [pc, #100]	; (800e684 <__ieee754_rem_pio2+0x40c>)
 800e620:	2200      	movs	r2, #0
 800e622:	f7f1 ff91 	bl	8000548 <__aeabi_dmul>
 800e626:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800e62a:	ad04      	add	r5, sp, #16
 800e62c:	f04f 0803 	mov.w	r8, #3
 800e630:	46a9      	mov	r9, r5
 800e632:	2600      	movs	r6, #0
 800e634:	2700      	movs	r7, #0
 800e636:	4632      	mov	r2, r6
 800e638:	463b      	mov	r3, r7
 800e63a:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
 800e63e:	46c3      	mov	fp, r8
 800e640:	3d08      	subs	r5, #8
 800e642:	f108 38ff 	add.w	r8, r8, #4294967295
 800e646:	f7f2 f9e7 	bl	8000a18 <__aeabi_dcmpeq>
 800e64a:	2800      	cmp	r0, #0
 800e64c:	d1f3      	bne.n	800e636 <__ieee754_rem_pio2+0x3be>
 800e64e:	4b0e      	ldr	r3, [pc, #56]	; (800e688 <__ieee754_rem_pio2+0x410>)
 800e650:	9301      	str	r3, [sp, #4]
 800e652:	2302      	movs	r3, #2
 800e654:	9300      	str	r3, [sp, #0]
 800e656:	4622      	mov	r2, r4
 800e658:	465b      	mov	r3, fp
 800e65a:	4651      	mov	r1, sl
 800e65c:	4648      	mov	r0, r9
 800e65e:	f000 f993 	bl	800e988 <__kernel_rem_pio2>
 800e662:	9b02      	ldr	r3, [sp, #8]
 800e664:	2b00      	cmp	r3, #0
 800e666:	4683      	mov	fp, r0
 800e668:	f6bf ae46 	bge.w	800e2f8 <__ieee754_rem_pio2+0x80>
 800e66c:	f8da 3004 	ldr.w	r3, [sl, #4]
 800e670:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800e674:	f8ca 3004 	str.w	r3, [sl, #4]
 800e678:	f8da 300c 	ldr.w	r3, [sl, #12]
 800e67c:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800e680:	e73a      	b.n	800e4f8 <__ieee754_rem_pio2+0x280>
 800e682:	bf00      	nop
 800e684:	41700000 	.word	0x41700000
 800e688:	0800f660 	.word	0x0800f660

0800e68c <__ieee754_sqrt>:
 800e68c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e690:	ec55 4b10 	vmov	r4, r5, d0
 800e694:	4e56      	ldr	r6, [pc, #344]	; (800e7f0 <__ieee754_sqrt+0x164>)
 800e696:	43ae      	bics	r6, r5
 800e698:	ee10 0a10 	vmov	r0, s0
 800e69c:	ee10 3a10 	vmov	r3, s0
 800e6a0:	4629      	mov	r1, r5
 800e6a2:	462a      	mov	r2, r5
 800e6a4:	d110      	bne.n	800e6c8 <__ieee754_sqrt+0x3c>
 800e6a6:	ee10 2a10 	vmov	r2, s0
 800e6aa:	462b      	mov	r3, r5
 800e6ac:	f7f1 ff4c 	bl	8000548 <__aeabi_dmul>
 800e6b0:	4602      	mov	r2, r0
 800e6b2:	460b      	mov	r3, r1
 800e6b4:	4620      	mov	r0, r4
 800e6b6:	4629      	mov	r1, r5
 800e6b8:	f7f1 fd90 	bl	80001dc <__adddf3>
 800e6bc:	4604      	mov	r4, r0
 800e6be:	460d      	mov	r5, r1
 800e6c0:	ec45 4b10 	vmov	d0, r4, r5
 800e6c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e6c8:	2d00      	cmp	r5, #0
 800e6ca:	dc10      	bgt.n	800e6ee <__ieee754_sqrt+0x62>
 800e6cc:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800e6d0:	4330      	orrs	r0, r6
 800e6d2:	d0f5      	beq.n	800e6c0 <__ieee754_sqrt+0x34>
 800e6d4:	b15d      	cbz	r5, 800e6ee <__ieee754_sqrt+0x62>
 800e6d6:	ee10 2a10 	vmov	r2, s0
 800e6da:	462b      	mov	r3, r5
 800e6dc:	ee10 0a10 	vmov	r0, s0
 800e6e0:	f7f1 fd7a 	bl	80001d8 <__aeabi_dsub>
 800e6e4:	4602      	mov	r2, r0
 800e6e6:	460b      	mov	r3, r1
 800e6e8:	f7f2 f858 	bl	800079c <__aeabi_ddiv>
 800e6ec:	e7e6      	b.n	800e6bc <__ieee754_sqrt+0x30>
 800e6ee:	1509      	asrs	r1, r1, #20
 800e6f0:	d076      	beq.n	800e7e0 <__ieee754_sqrt+0x154>
 800e6f2:	f3c2 0213 	ubfx	r2, r2, #0, #20
 800e6f6:	07ce      	lsls	r6, r1, #31
 800e6f8:	f442 1080 	orr.w	r0, r2, #1048576	; 0x100000
 800e6fc:	bf5e      	ittt	pl
 800e6fe:	0fda      	lsrpl	r2, r3, #31
 800e700:	005b      	lslpl	r3, r3, #1
 800e702:	eb02 0040 	addpl.w	r0, r2, r0, lsl #1
 800e706:	0fda      	lsrs	r2, r3, #31
 800e708:	f2a1 35ff 	subw	r5, r1, #1023	; 0x3ff
 800e70c:	eb02 0240 	add.w	r2, r2, r0, lsl #1
 800e710:	2000      	movs	r0, #0
 800e712:	106d      	asrs	r5, r5, #1
 800e714:	005b      	lsls	r3, r3, #1
 800e716:	f04f 0e16 	mov.w	lr, #22
 800e71a:	4684      	mov	ip, r0
 800e71c:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800e720:	eb0c 0401 	add.w	r4, ip, r1
 800e724:	4294      	cmp	r4, r2
 800e726:	bfde      	ittt	le
 800e728:	1b12      	suble	r2, r2, r4
 800e72a:	eb04 0c01 	addle.w	ip, r4, r1
 800e72e:	1840      	addle	r0, r0, r1
 800e730:	0052      	lsls	r2, r2, #1
 800e732:	f1be 0e01 	subs.w	lr, lr, #1
 800e736:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 800e73a:	ea4f 0151 	mov.w	r1, r1, lsr #1
 800e73e:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800e742:	d1ed      	bne.n	800e720 <__ieee754_sqrt+0x94>
 800e744:	4671      	mov	r1, lr
 800e746:	2720      	movs	r7, #32
 800e748:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 800e74c:	4562      	cmp	r2, ip
 800e74e:	eb04 060e 	add.w	r6, r4, lr
 800e752:	dc02      	bgt.n	800e75a <__ieee754_sqrt+0xce>
 800e754:	d113      	bne.n	800e77e <__ieee754_sqrt+0xf2>
 800e756:	429e      	cmp	r6, r3
 800e758:	d811      	bhi.n	800e77e <__ieee754_sqrt+0xf2>
 800e75a:	2e00      	cmp	r6, #0
 800e75c:	eb06 0e04 	add.w	lr, r6, r4
 800e760:	da43      	bge.n	800e7ea <__ieee754_sqrt+0x15e>
 800e762:	f1be 0f00 	cmp.w	lr, #0
 800e766:	db40      	blt.n	800e7ea <__ieee754_sqrt+0x15e>
 800e768:	f10c 0801 	add.w	r8, ip, #1
 800e76c:	eba2 020c 	sub.w	r2, r2, ip
 800e770:	429e      	cmp	r6, r3
 800e772:	bf88      	it	hi
 800e774:	f102 32ff 	addhi.w	r2, r2, #4294967295
 800e778:	1b9b      	subs	r3, r3, r6
 800e77a:	4421      	add	r1, r4
 800e77c:	46c4      	mov	ip, r8
 800e77e:	0052      	lsls	r2, r2, #1
 800e780:	3f01      	subs	r7, #1
 800e782:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 800e786:	ea4f 0454 	mov.w	r4, r4, lsr #1
 800e78a:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800e78e:	d1dd      	bne.n	800e74c <__ieee754_sqrt+0xc0>
 800e790:	4313      	orrs	r3, r2
 800e792:	d006      	beq.n	800e7a2 <__ieee754_sqrt+0x116>
 800e794:	1c4c      	adds	r4, r1, #1
 800e796:	bf13      	iteet	ne
 800e798:	3101      	addne	r1, #1
 800e79a:	3001      	addeq	r0, #1
 800e79c:	4639      	moveq	r1, r7
 800e79e:	f021 0101 	bicne.w	r1, r1, #1
 800e7a2:	1043      	asrs	r3, r0, #1
 800e7a4:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 800e7a8:	0849      	lsrs	r1, r1, #1
 800e7aa:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 800e7ae:	07c2      	lsls	r2, r0, #31
 800e7b0:	bf48      	it	mi
 800e7b2:	f041 4100 	orrmi.w	r1, r1, #2147483648	; 0x80000000
 800e7b6:	eb03 5705 	add.w	r7, r3, r5, lsl #20
 800e7ba:	460c      	mov	r4, r1
 800e7bc:	463d      	mov	r5, r7
 800e7be:	e77f      	b.n	800e6c0 <__ieee754_sqrt+0x34>
 800e7c0:	0ada      	lsrs	r2, r3, #11
 800e7c2:	3815      	subs	r0, #21
 800e7c4:	055b      	lsls	r3, r3, #21
 800e7c6:	2a00      	cmp	r2, #0
 800e7c8:	d0fa      	beq.n	800e7c0 <__ieee754_sqrt+0x134>
 800e7ca:	02d7      	lsls	r7, r2, #11
 800e7cc:	d50a      	bpl.n	800e7e4 <__ieee754_sqrt+0x158>
 800e7ce:	f1c1 0420 	rsb	r4, r1, #32
 800e7d2:	fa23 f404 	lsr.w	r4, r3, r4
 800e7d6:	1e4d      	subs	r5, r1, #1
 800e7d8:	408b      	lsls	r3, r1
 800e7da:	4322      	orrs	r2, r4
 800e7dc:	1b41      	subs	r1, r0, r5
 800e7de:	e788      	b.n	800e6f2 <__ieee754_sqrt+0x66>
 800e7e0:	4608      	mov	r0, r1
 800e7e2:	e7f0      	b.n	800e7c6 <__ieee754_sqrt+0x13a>
 800e7e4:	0052      	lsls	r2, r2, #1
 800e7e6:	3101      	adds	r1, #1
 800e7e8:	e7ef      	b.n	800e7ca <__ieee754_sqrt+0x13e>
 800e7ea:	46e0      	mov	r8, ip
 800e7ec:	e7be      	b.n	800e76c <__ieee754_sqrt+0xe0>
 800e7ee:	bf00      	nop
 800e7f0:	7ff00000 	.word	0x7ff00000
 800e7f4:	00000000 	.word	0x00000000

0800e7f8 <__kernel_cos>:
 800e7f8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e7fc:	ec57 6b10 	vmov	r6, r7, d0
 800e800:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 800e804:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 800e808:	ed8d 1b00 	vstr	d1, [sp]
 800e80c:	da07      	bge.n	800e81e <__kernel_cos+0x26>
 800e80e:	ee10 0a10 	vmov	r0, s0
 800e812:	4639      	mov	r1, r7
 800e814:	f7f2 f948 	bl	8000aa8 <__aeabi_d2iz>
 800e818:	2800      	cmp	r0, #0
 800e81a:	f000 8088 	beq.w	800e92e <__kernel_cos+0x136>
 800e81e:	4632      	mov	r2, r6
 800e820:	463b      	mov	r3, r7
 800e822:	4630      	mov	r0, r6
 800e824:	4639      	mov	r1, r7
 800e826:	f7f1 fe8f 	bl	8000548 <__aeabi_dmul>
 800e82a:	4b51      	ldr	r3, [pc, #324]	; (800e970 <__kernel_cos+0x178>)
 800e82c:	2200      	movs	r2, #0
 800e82e:	4604      	mov	r4, r0
 800e830:	460d      	mov	r5, r1
 800e832:	f7f1 fe89 	bl	8000548 <__aeabi_dmul>
 800e836:	a340      	add	r3, pc, #256	; (adr r3, 800e938 <__kernel_cos+0x140>)
 800e838:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e83c:	4682      	mov	sl, r0
 800e83e:	468b      	mov	fp, r1
 800e840:	4620      	mov	r0, r4
 800e842:	4629      	mov	r1, r5
 800e844:	f7f1 fe80 	bl	8000548 <__aeabi_dmul>
 800e848:	a33d      	add	r3, pc, #244	; (adr r3, 800e940 <__kernel_cos+0x148>)
 800e84a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e84e:	f7f1 fcc5 	bl	80001dc <__adddf3>
 800e852:	4622      	mov	r2, r4
 800e854:	462b      	mov	r3, r5
 800e856:	f7f1 fe77 	bl	8000548 <__aeabi_dmul>
 800e85a:	a33b      	add	r3, pc, #236	; (adr r3, 800e948 <__kernel_cos+0x150>)
 800e85c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e860:	f7f1 fcba 	bl	80001d8 <__aeabi_dsub>
 800e864:	4622      	mov	r2, r4
 800e866:	462b      	mov	r3, r5
 800e868:	f7f1 fe6e 	bl	8000548 <__aeabi_dmul>
 800e86c:	a338      	add	r3, pc, #224	; (adr r3, 800e950 <__kernel_cos+0x158>)
 800e86e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e872:	f7f1 fcb3 	bl	80001dc <__adddf3>
 800e876:	4622      	mov	r2, r4
 800e878:	462b      	mov	r3, r5
 800e87a:	f7f1 fe65 	bl	8000548 <__aeabi_dmul>
 800e87e:	a336      	add	r3, pc, #216	; (adr r3, 800e958 <__kernel_cos+0x160>)
 800e880:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e884:	f7f1 fca8 	bl	80001d8 <__aeabi_dsub>
 800e888:	4622      	mov	r2, r4
 800e88a:	462b      	mov	r3, r5
 800e88c:	f7f1 fe5c 	bl	8000548 <__aeabi_dmul>
 800e890:	a333      	add	r3, pc, #204	; (adr r3, 800e960 <__kernel_cos+0x168>)
 800e892:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e896:	f7f1 fca1 	bl	80001dc <__adddf3>
 800e89a:	4622      	mov	r2, r4
 800e89c:	462b      	mov	r3, r5
 800e89e:	f7f1 fe53 	bl	8000548 <__aeabi_dmul>
 800e8a2:	4622      	mov	r2, r4
 800e8a4:	462b      	mov	r3, r5
 800e8a6:	f7f1 fe4f 	bl	8000548 <__aeabi_dmul>
 800e8aa:	e9dd 2300 	ldrd	r2, r3, [sp]
 800e8ae:	4604      	mov	r4, r0
 800e8b0:	460d      	mov	r5, r1
 800e8b2:	4630      	mov	r0, r6
 800e8b4:	4639      	mov	r1, r7
 800e8b6:	f7f1 fe47 	bl	8000548 <__aeabi_dmul>
 800e8ba:	460b      	mov	r3, r1
 800e8bc:	4602      	mov	r2, r0
 800e8be:	4629      	mov	r1, r5
 800e8c0:	4620      	mov	r0, r4
 800e8c2:	f7f1 fc89 	bl	80001d8 <__aeabi_dsub>
 800e8c6:	4b2b      	ldr	r3, [pc, #172]	; (800e974 <__kernel_cos+0x17c>)
 800e8c8:	4598      	cmp	r8, r3
 800e8ca:	4606      	mov	r6, r0
 800e8cc:	460f      	mov	r7, r1
 800e8ce:	dc10      	bgt.n	800e8f2 <__kernel_cos+0xfa>
 800e8d0:	4602      	mov	r2, r0
 800e8d2:	460b      	mov	r3, r1
 800e8d4:	4650      	mov	r0, sl
 800e8d6:	4659      	mov	r1, fp
 800e8d8:	f7f1 fc7e 	bl	80001d8 <__aeabi_dsub>
 800e8dc:	460b      	mov	r3, r1
 800e8de:	4926      	ldr	r1, [pc, #152]	; (800e978 <__kernel_cos+0x180>)
 800e8e0:	4602      	mov	r2, r0
 800e8e2:	2000      	movs	r0, #0
 800e8e4:	f7f1 fc78 	bl	80001d8 <__aeabi_dsub>
 800e8e8:	ec41 0b10 	vmov	d0, r0, r1
 800e8ec:	b003      	add	sp, #12
 800e8ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e8f2:	4b22      	ldr	r3, [pc, #136]	; (800e97c <__kernel_cos+0x184>)
 800e8f4:	4920      	ldr	r1, [pc, #128]	; (800e978 <__kernel_cos+0x180>)
 800e8f6:	4598      	cmp	r8, r3
 800e8f8:	bfcc      	ite	gt
 800e8fa:	4d21      	ldrgt	r5, [pc, #132]	; (800e980 <__kernel_cos+0x188>)
 800e8fc:	f5a8 1500 	suble.w	r5, r8, #2097152	; 0x200000
 800e900:	2400      	movs	r4, #0
 800e902:	4622      	mov	r2, r4
 800e904:	462b      	mov	r3, r5
 800e906:	2000      	movs	r0, #0
 800e908:	f7f1 fc66 	bl	80001d8 <__aeabi_dsub>
 800e90c:	4622      	mov	r2, r4
 800e90e:	4680      	mov	r8, r0
 800e910:	4689      	mov	r9, r1
 800e912:	462b      	mov	r3, r5
 800e914:	4650      	mov	r0, sl
 800e916:	4659      	mov	r1, fp
 800e918:	f7f1 fc5e 	bl	80001d8 <__aeabi_dsub>
 800e91c:	4632      	mov	r2, r6
 800e91e:	463b      	mov	r3, r7
 800e920:	f7f1 fc5a 	bl	80001d8 <__aeabi_dsub>
 800e924:	4602      	mov	r2, r0
 800e926:	460b      	mov	r3, r1
 800e928:	4640      	mov	r0, r8
 800e92a:	4649      	mov	r1, r9
 800e92c:	e7da      	b.n	800e8e4 <__kernel_cos+0xec>
 800e92e:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 800e968 <__kernel_cos+0x170>
 800e932:	e7db      	b.n	800e8ec <__kernel_cos+0xf4>
 800e934:	f3af 8000 	nop.w
 800e938:	be8838d4 	.word	0xbe8838d4
 800e93c:	bda8fae9 	.word	0xbda8fae9
 800e940:	bdb4b1c4 	.word	0xbdb4b1c4
 800e944:	3e21ee9e 	.word	0x3e21ee9e
 800e948:	809c52ad 	.word	0x809c52ad
 800e94c:	3e927e4f 	.word	0x3e927e4f
 800e950:	19cb1590 	.word	0x19cb1590
 800e954:	3efa01a0 	.word	0x3efa01a0
 800e958:	16c15177 	.word	0x16c15177
 800e95c:	3f56c16c 	.word	0x3f56c16c
 800e960:	5555554c 	.word	0x5555554c
 800e964:	3fa55555 	.word	0x3fa55555
 800e968:	00000000 	.word	0x00000000
 800e96c:	3ff00000 	.word	0x3ff00000
 800e970:	3fe00000 	.word	0x3fe00000
 800e974:	3fd33332 	.word	0x3fd33332
 800e978:	3ff00000 	.word	0x3ff00000
 800e97c:	3fe90000 	.word	0x3fe90000
 800e980:	3fd20000 	.word	0x3fd20000
 800e984:	00000000 	.word	0x00000000

0800e988 <__kernel_rem_pio2>:
 800e988:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e98c:	ed2d 8b02 	vpush	{d8}
 800e990:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
 800e994:	f112 0f14 	cmn.w	r2, #20
 800e998:	9308      	str	r3, [sp, #32]
 800e99a:	9101      	str	r1, [sp, #4]
 800e99c:	4bc6      	ldr	r3, [pc, #792]	; (800ecb8 <__kernel_rem_pio2+0x330>)
 800e99e:	99a4      	ldr	r1, [sp, #656]	; 0x290
 800e9a0:	9009      	str	r0, [sp, #36]	; 0x24
 800e9a2:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800e9a6:	9304      	str	r3, [sp, #16]
 800e9a8:	9b08      	ldr	r3, [sp, #32]
 800e9aa:	f103 33ff 	add.w	r3, r3, #4294967295
 800e9ae:	bfa8      	it	ge
 800e9b0:	1ed4      	subge	r4, r2, #3
 800e9b2:	9306      	str	r3, [sp, #24]
 800e9b4:	bfb2      	itee	lt
 800e9b6:	2400      	movlt	r4, #0
 800e9b8:	2318      	movge	r3, #24
 800e9ba:	fb94 f4f3 	sdivge	r4, r4, r3
 800e9be:	f06f 0317 	mvn.w	r3, #23
 800e9c2:	fb04 3303 	mla	r3, r4, r3, r3
 800e9c6:	eb03 0a02 	add.w	sl, r3, r2
 800e9ca:	9b04      	ldr	r3, [sp, #16]
 800e9cc:	9a06      	ldr	r2, [sp, #24]
 800e9ce:	ed9f 8bb6 	vldr	d8, [pc, #728]	; 800eca8 <__kernel_rem_pio2+0x320>
 800e9d2:	eb03 0802 	add.w	r8, r3, r2
 800e9d6:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 800e9d8:	1aa7      	subs	r7, r4, r2
 800e9da:	ae20      	add	r6, sp, #128	; 0x80
 800e9dc:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 800e9e0:	2500      	movs	r5, #0
 800e9e2:	4545      	cmp	r5, r8
 800e9e4:	dd18      	ble.n	800ea18 <__kernel_rem_pio2+0x90>
 800e9e6:	9b08      	ldr	r3, [sp, #32]
 800e9e8:	f8dd 8018 	ldr.w	r8, [sp, #24]
 800e9ec:	aa20      	add	r2, sp, #128	; 0x80
 800e9ee:	ed9f 8bae 	vldr	d8, [pc, #696]	; 800eca8 <__kernel_rem_pio2+0x320>
 800e9f2:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 800e9f6:	f1c3 0301 	rsb	r3, r3, #1
 800e9fa:	f50d 7be0 	add.w	fp, sp, #448	; 0x1c0
 800e9fe:	9307      	str	r3, [sp, #28]
 800ea00:	9b07      	ldr	r3, [sp, #28]
 800ea02:	9a04      	ldr	r2, [sp, #16]
 800ea04:	4443      	add	r3, r8
 800ea06:	429a      	cmp	r2, r3
 800ea08:	db2f      	blt.n	800ea6a <__kernel_rem_pio2+0xe2>
 800ea0a:	ed8d 8b02 	vstr	d8, [sp, #8]
 800ea0e:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 800ea12:	462f      	mov	r7, r5
 800ea14:	2600      	movs	r6, #0
 800ea16:	e01b      	b.n	800ea50 <__kernel_rem_pio2+0xc8>
 800ea18:	42ef      	cmn	r7, r5
 800ea1a:	d407      	bmi.n	800ea2c <__kernel_rem_pio2+0xa4>
 800ea1c:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 800ea20:	f7f1 fd28 	bl	8000474 <__aeabi_i2d>
 800ea24:	e8e6 0102 	strd	r0, r1, [r6], #8
 800ea28:	3501      	adds	r5, #1
 800ea2a:	e7da      	b.n	800e9e2 <__kernel_rem_pio2+0x5a>
 800ea2c:	ec51 0b18 	vmov	r0, r1, d8
 800ea30:	e7f8      	b.n	800ea24 <__kernel_rem_pio2+0x9c>
 800ea32:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ea36:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 800ea3a:	f7f1 fd85 	bl	8000548 <__aeabi_dmul>
 800ea3e:	4602      	mov	r2, r0
 800ea40:	460b      	mov	r3, r1
 800ea42:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ea46:	f7f1 fbc9 	bl	80001dc <__adddf3>
 800ea4a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ea4e:	3601      	adds	r6, #1
 800ea50:	9b06      	ldr	r3, [sp, #24]
 800ea52:	429e      	cmp	r6, r3
 800ea54:	f1a7 0708 	sub.w	r7, r7, #8
 800ea58:	ddeb      	ble.n	800ea32 <__kernel_rem_pio2+0xaa>
 800ea5a:	ed9d 7b02 	vldr	d7, [sp, #8]
 800ea5e:	3508      	adds	r5, #8
 800ea60:	ecab 7b02 	vstmia	fp!, {d7}
 800ea64:	f108 0801 	add.w	r8, r8, #1
 800ea68:	e7ca      	b.n	800ea00 <__kernel_rem_pio2+0x78>
 800ea6a:	9b04      	ldr	r3, [sp, #16]
 800ea6c:	aa0c      	add	r2, sp, #48	; 0x30
 800ea6e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800ea72:	930b      	str	r3, [sp, #44]	; 0x2c
 800ea74:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 800ea76:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800ea7a:	9c04      	ldr	r4, [sp, #16]
 800ea7c:	930a      	str	r3, [sp, #40]	; 0x28
 800ea7e:	ab98      	add	r3, sp, #608	; 0x260
 800ea80:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800ea84:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 800ea88:	f10d 0b30 	add.w	fp, sp, #48	; 0x30
 800ea8c:	f8cd b008 	str.w	fp, [sp, #8]
 800ea90:	4625      	mov	r5, r4
 800ea92:	2d00      	cmp	r5, #0
 800ea94:	dc78      	bgt.n	800eb88 <__kernel_rem_pio2+0x200>
 800ea96:	ec47 6b10 	vmov	d0, r6, r7
 800ea9a:	4650      	mov	r0, sl
 800ea9c:	f000 fc9c 	bl	800f3d8 <scalbn>
 800eaa0:	ec57 6b10 	vmov	r6, r7, d0
 800eaa4:	2200      	movs	r2, #0
 800eaa6:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 800eaaa:	ee10 0a10 	vmov	r0, s0
 800eaae:	4639      	mov	r1, r7
 800eab0:	f7f1 fd4a 	bl	8000548 <__aeabi_dmul>
 800eab4:	ec41 0b10 	vmov	d0, r0, r1
 800eab8:	f000 fb7a 	bl	800f1b0 <floor>
 800eabc:	4b7f      	ldr	r3, [pc, #508]	; (800ecbc <__kernel_rem_pio2+0x334>)
 800eabe:	ec51 0b10 	vmov	r0, r1, d0
 800eac2:	2200      	movs	r2, #0
 800eac4:	f7f1 fd40 	bl	8000548 <__aeabi_dmul>
 800eac8:	4602      	mov	r2, r0
 800eaca:	460b      	mov	r3, r1
 800eacc:	4630      	mov	r0, r6
 800eace:	4639      	mov	r1, r7
 800ead0:	f7f1 fb82 	bl	80001d8 <__aeabi_dsub>
 800ead4:	460f      	mov	r7, r1
 800ead6:	4606      	mov	r6, r0
 800ead8:	f7f1 ffe6 	bl	8000aa8 <__aeabi_d2iz>
 800eadc:	9007      	str	r0, [sp, #28]
 800eade:	f7f1 fcc9 	bl	8000474 <__aeabi_i2d>
 800eae2:	4602      	mov	r2, r0
 800eae4:	460b      	mov	r3, r1
 800eae6:	4630      	mov	r0, r6
 800eae8:	4639      	mov	r1, r7
 800eaea:	f7f1 fb75 	bl	80001d8 <__aeabi_dsub>
 800eaee:	f1ba 0f00 	cmp.w	sl, #0
 800eaf2:	4606      	mov	r6, r0
 800eaf4:	460f      	mov	r7, r1
 800eaf6:	dd70      	ble.n	800ebda <__kernel_rem_pio2+0x252>
 800eaf8:	1e62      	subs	r2, r4, #1
 800eafa:	ab0c      	add	r3, sp, #48	; 0x30
 800eafc:	9d07      	ldr	r5, [sp, #28]
 800eafe:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 800eb02:	f1ca 0118 	rsb	r1, sl, #24
 800eb06:	fa40 f301 	asr.w	r3, r0, r1
 800eb0a:	441d      	add	r5, r3
 800eb0c:	408b      	lsls	r3, r1
 800eb0e:	1ac0      	subs	r0, r0, r3
 800eb10:	ab0c      	add	r3, sp, #48	; 0x30
 800eb12:	9507      	str	r5, [sp, #28]
 800eb14:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 800eb18:	f1ca 0317 	rsb	r3, sl, #23
 800eb1c:	fa40 f303 	asr.w	r3, r0, r3
 800eb20:	9302      	str	r3, [sp, #8]
 800eb22:	9b02      	ldr	r3, [sp, #8]
 800eb24:	2b00      	cmp	r3, #0
 800eb26:	dd66      	ble.n	800ebf6 <__kernel_rem_pio2+0x26e>
 800eb28:	9b07      	ldr	r3, [sp, #28]
 800eb2a:	2200      	movs	r2, #0
 800eb2c:	3301      	adds	r3, #1
 800eb2e:	9307      	str	r3, [sp, #28]
 800eb30:	4615      	mov	r5, r2
 800eb32:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 800eb36:	4294      	cmp	r4, r2
 800eb38:	f300 8099 	bgt.w	800ec6e <__kernel_rem_pio2+0x2e6>
 800eb3c:	f1ba 0f00 	cmp.w	sl, #0
 800eb40:	dd07      	ble.n	800eb52 <__kernel_rem_pio2+0x1ca>
 800eb42:	f1ba 0f01 	cmp.w	sl, #1
 800eb46:	f000 80a5 	beq.w	800ec94 <__kernel_rem_pio2+0x30c>
 800eb4a:	f1ba 0f02 	cmp.w	sl, #2
 800eb4e:	f000 80c1 	beq.w	800ecd4 <__kernel_rem_pio2+0x34c>
 800eb52:	9b02      	ldr	r3, [sp, #8]
 800eb54:	2b02      	cmp	r3, #2
 800eb56:	d14e      	bne.n	800ebf6 <__kernel_rem_pio2+0x26e>
 800eb58:	4632      	mov	r2, r6
 800eb5a:	463b      	mov	r3, r7
 800eb5c:	4958      	ldr	r1, [pc, #352]	; (800ecc0 <__kernel_rem_pio2+0x338>)
 800eb5e:	2000      	movs	r0, #0
 800eb60:	f7f1 fb3a 	bl	80001d8 <__aeabi_dsub>
 800eb64:	4606      	mov	r6, r0
 800eb66:	460f      	mov	r7, r1
 800eb68:	2d00      	cmp	r5, #0
 800eb6a:	d044      	beq.n	800ebf6 <__kernel_rem_pio2+0x26e>
 800eb6c:	4650      	mov	r0, sl
 800eb6e:	ed9f 0b50 	vldr	d0, [pc, #320]	; 800ecb0 <__kernel_rem_pio2+0x328>
 800eb72:	f000 fc31 	bl	800f3d8 <scalbn>
 800eb76:	4630      	mov	r0, r6
 800eb78:	4639      	mov	r1, r7
 800eb7a:	ec53 2b10 	vmov	r2, r3, d0
 800eb7e:	f7f1 fb2b 	bl	80001d8 <__aeabi_dsub>
 800eb82:	4606      	mov	r6, r0
 800eb84:	460f      	mov	r7, r1
 800eb86:	e036      	b.n	800ebf6 <__kernel_rem_pio2+0x26e>
 800eb88:	4b4e      	ldr	r3, [pc, #312]	; (800ecc4 <__kernel_rem_pio2+0x33c>)
 800eb8a:	2200      	movs	r2, #0
 800eb8c:	4630      	mov	r0, r6
 800eb8e:	4639      	mov	r1, r7
 800eb90:	f7f1 fcda 	bl	8000548 <__aeabi_dmul>
 800eb94:	f7f1 ff88 	bl	8000aa8 <__aeabi_d2iz>
 800eb98:	f7f1 fc6c 	bl	8000474 <__aeabi_i2d>
 800eb9c:	4b4a      	ldr	r3, [pc, #296]	; (800ecc8 <__kernel_rem_pio2+0x340>)
 800eb9e:	2200      	movs	r2, #0
 800eba0:	4680      	mov	r8, r0
 800eba2:	4689      	mov	r9, r1
 800eba4:	f7f1 fcd0 	bl	8000548 <__aeabi_dmul>
 800eba8:	4602      	mov	r2, r0
 800ebaa:	460b      	mov	r3, r1
 800ebac:	4630      	mov	r0, r6
 800ebae:	4639      	mov	r1, r7
 800ebb0:	f7f1 fb12 	bl	80001d8 <__aeabi_dsub>
 800ebb4:	f7f1 ff78 	bl	8000aa8 <__aeabi_d2iz>
 800ebb8:	9b02      	ldr	r3, [sp, #8]
 800ebba:	f843 0b04 	str.w	r0, [r3], #4
 800ebbe:	3d01      	subs	r5, #1
 800ebc0:	9302      	str	r3, [sp, #8]
 800ebc2:	ab70      	add	r3, sp, #448	; 0x1c0
 800ebc4:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800ebc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ebcc:	4640      	mov	r0, r8
 800ebce:	4649      	mov	r1, r9
 800ebd0:	f7f1 fb04 	bl	80001dc <__adddf3>
 800ebd4:	4606      	mov	r6, r0
 800ebd6:	460f      	mov	r7, r1
 800ebd8:	e75b      	b.n	800ea92 <__kernel_rem_pio2+0x10a>
 800ebda:	d105      	bne.n	800ebe8 <__kernel_rem_pio2+0x260>
 800ebdc:	1e63      	subs	r3, r4, #1
 800ebde:	aa0c      	add	r2, sp, #48	; 0x30
 800ebe0:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800ebe4:	15c3      	asrs	r3, r0, #23
 800ebe6:	e79b      	b.n	800eb20 <__kernel_rem_pio2+0x198>
 800ebe8:	4b38      	ldr	r3, [pc, #224]	; (800eccc <__kernel_rem_pio2+0x344>)
 800ebea:	2200      	movs	r2, #0
 800ebec:	f7f1 ff32 	bl	8000a54 <__aeabi_dcmpge>
 800ebf0:	2800      	cmp	r0, #0
 800ebf2:	d139      	bne.n	800ec68 <__kernel_rem_pio2+0x2e0>
 800ebf4:	9002      	str	r0, [sp, #8]
 800ebf6:	2200      	movs	r2, #0
 800ebf8:	2300      	movs	r3, #0
 800ebfa:	4630      	mov	r0, r6
 800ebfc:	4639      	mov	r1, r7
 800ebfe:	f7f1 ff0b 	bl	8000a18 <__aeabi_dcmpeq>
 800ec02:	2800      	cmp	r0, #0
 800ec04:	f000 80b4 	beq.w	800ed70 <__kernel_rem_pio2+0x3e8>
 800ec08:	f104 3bff 	add.w	fp, r4, #4294967295
 800ec0c:	465b      	mov	r3, fp
 800ec0e:	2200      	movs	r2, #0
 800ec10:	9904      	ldr	r1, [sp, #16]
 800ec12:	428b      	cmp	r3, r1
 800ec14:	da65      	bge.n	800ece2 <__kernel_rem_pio2+0x35a>
 800ec16:	2a00      	cmp	r2, #0
 800ec18:	d07b      	beq.n	800ed12 <__kernel_rem_pio2+0x38a>
 800ec1a:	ab0c      	add	r3, sp, #48	; 0x30
 800ec1c:	f1aa 0a18 	sub.w	sl, sl, #24
 800ec20:	f853 302b 	ldr.w	r3, [r3, fp, lsl #2]
 800ec24:	2b00      	cmp	r3, #0
 800ec26:	f000 80a0 	beq.w	800ed6a <__kernel_rem_pio2+0x3e2>
 800ec2a:	ed9f 0b21 	vldr	d0, [pc, #132]	; 800ecb0 <__kernel_rem_pio2+0x328>
 800ec2e:	4650      	mov	r0, sl
 800ec30:	f000 fbd2 	bl	800f3d8 <scalbn>
 800ec34:	4f23      	ldr	r7, [pc, #140]	; (800ecc4 <__kernel_rem_pio2+0x33c>)
 800ec36:	ec55 4b10 	vmov	r4, r5, d0
 800ec3a:	46d8      	mov	r8, fp
 800ec3c:	2600      	movs	r6, #0
 800ec3e:	f1b8 0f00 	cmp.w	r8, #0
 800ec42:	f280 80cf 	bge.w	800ede4 <__kernel_rem_pio2+0x45c>
 800ec46:	ed9f 8b18 	vldr	d8, [pc, #96]	; 800eca8 <__kernel_rem_pio2+0x320>
 800ec4a:	465f      	mov	r7, fp
 800ec4c:	f04f 0800 	mov.w	r8, #0
 800ec50:	2f00      	cmp	r7, #0
 800ec52:	f2c0 80fd 	blt.w	800ee50 <__kernel_rem_pio2+0x4c8>
 800ec56:	ab70      	add	r3, sp, #448	; 0x1c0
 800ec58:	f8df a074 	ldr.w	sl, [pc, #116]	; 800ecd0 <__kernel_rem_pio2+0x348>
 800ec5c:	ec55 4b18 	vmov	r4, r5, d8
 800ec60:	eb03 09c7 	add.w	r9, r3, r7, lsl #3
 800ec64:	2600      	movs	r6, #0
 800ec66:	e0e5      	b.n	800ee34 <__kernel_rem_pio2+0x4ac>
 800ec68:	2302      	movs	r3, #2
 800ec6a:	9302      	str	r3, [sp, #8]
 800ec6c:	e75c      	b.n	800eb28 <__kernel_rem_pio2+0x1a0>
 800ec6e:	f8db 3000 	ldr.w	r3, [fp]
 800ec72:	b955      	cbnz	r5, 800ec8a <__kernel_rem_pio2+0x302>
 800ec74:	b123      	cbz	r3, 800ec80 <__kernel_rem_pio2+0x2f8>
 800ec76:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 800ec7a:	f8cb 3000 	str.w	r3, [fp]
 800ec7e:	2301      	movs	r3, #1
 800ec80:	3201      	adds	r2, #1
 800ec82:	f10b 0b04 	add.w	fp, fp, #4
 800ec86:	461d      	mov	r5, r3
 800ec88:	e755      	b.n	800eb36 <__kernel_rem_pio2+0x1ae>
 800ec8a:	1acb      	subs	r3, r1, r3
 800ec8c:	f8cb 3000 	str.w	r3, [fp]
 800ec90:	462b      	mov	r3, r5
 800ec92:	e7f5      	b.n	800ec80 <__kernel_rem_pio2+0x2f8>
 800ec94:	1e62      	subs	r2, r4, #1
 800ec96:	ab0c      	add	r3, sp, #48	; 0x30
 800ec98:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ec9c:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800eca0:	a90c      	add	r1, sp, #48	; 0x30
 800eca2:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 800eca6:	e754      	b.n	800eb52 <__kernel_rem_pio2+0x1ca>
	...
 800ecb4:	3ff00000 	.word	0x3ff00000
 800ecb8:	0800f7a8 	.word	0x0800f7a8
 800ecbc:	40200000 	.word	0x40200000
 800ecc0:	3ff00000 	.word	0x3ff00000
 800ecc4:	3e700000 	.word	0x3e700000
 800ecc8:	41700000 	.word	0x41700000
 800eccc:	3fe00000 	.word	0x3fe00000
 800ecd0:	0800f768 	.word	0x0800f768
 800ecd4:	1e62      	subs	r2, r4, #1
 800ecd6:	ab0c      	add	r3, sp, #48	; 0x30
 800ecd8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ecdc:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800ece0:	e7de      	b.n	800eca0 <__kernel_rem_pio2+0x318>
 800ece2:	a90c      	add	r1, sp, #48	; 0x30
 800ece4:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800ece8:	3b01      	subs	r3, #1
 800ecea:	430a      	orrs	r2, r1
 800ecec:	e790      	b.n	800ec10 <__kernel_rem_pio2+0x288>
 800ecee:	3301      	adds	r3, #1
 800ecf0:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 800ecf4:	2900      	cmp	r1, #0
 800ecf6:	d0fa      	beq.n	800ecee <__kernel_rem_pio2+0x366>
 800ecf8:	9a08      	ldr	r2, [sp, #32]
 800ecfa:	18e3      	adds	r3, r4, r3
 800ecfc:	18a6      	adds	r6, r4, r2
 800ecfe:	aa20      	add	r2, sp, #128	; 0x80
 800ed00:	1c65      	adds	r5, r4, #1
 800ed02:	eb02 06c6 	add.w	r6, r2, r6, lsl #3
 800ed06:	9302      	str	r3, [sp, #8]
 800ed08:	9b02      	ldr	r3, [sp, #8]
 800ed0a:	42ab      	cmp	r3, r5
 800ed0c:	da04      	bge.n	800ed18 <__kernel_rem_pio2+0x390>
 800ed0e:	461c      	mov	r4, r3
 800ed10:	e6b5      	b.n	800ea7e <__kernel_rem_pio2+0xf6>
 800ed12:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800ed14:	2301      	movs	r3, #1
 800ed16:	e7eb      	b.n	800ecf0 <__kernel_rem_pio2+0x368>
 800ed18:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ed1a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800ed1e:	f7f1 fba9 	bl	8000474 <__aeabi_i2d>
 800ed22:	e8e6 0102 	strd	r0, r1, [r6], #8
 800ed26:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ed28:	46b3      	mov	fp, r6
 800ed2a:	461c      	mov	r4, r3
 800ed2c:	2700      	movs	r7, #0
 800ed2e:	f04f 0800 	mov.w	r8, #0
 800ed32:	f04f 0900 	mov.w	r9, #0
 800ed36:	9b06      	ldr	r3, [sp, #24]
 800ed38:	429f      	cmp	r7, r3
 800ed3a:	dd06      	ble.n	800ed4a <__kernel_rem_pio2+0x3c2>
 800ed3c:	ab70      	add	r3, sp, #448	; 0x1c0
 800ed3e:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800ed42:	e9c3 8900 	strd	r8, r9, [r3]
 800ed46:	3501      	adds	r5, #1
 800ed48:	e7de      	b.n	800ed08 <__kernel_rem_pio2+0x380>
 800ed4a:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 800ed4e:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 800ed52:	f7f1 fbf9 	bl	8000548 <__aeabi_dmul>
 800ed56:	4602      	mov	r2, r0
 800ed58:	460b      	mov	r3, r1
 800ed5a:	4640      	mov	r0, r8
 800ed5c:	4649      	mov	r1, r9
 800ed5e:	f7f1 fa3d 	bl	80001dc <__adddf3>
 800ed62:	3701      	adds	r7, #1
 800ed64:	4680      	mov	r8, r0
 800ed66:	4689      	mov	r9, r1
 800ed68:	e7e5      	b.n	800ed36 <__kernel_rem_pio2+0x3ae>
 800ed6a:	f10b 3bff 	add.w	fp, fp, #4294967295
 800ed6e:	e754      	b.n	800ec1a <__kernel_rem_pio2+0x292>
 800ed70:	ec47 6b10 	vmov	d0, r6, r7
 800ed74:	f1ca 0000 	rsb	r0, sl, #0
 800ed78:	f000 fb2e 	bl	800f3d8 <scalbn>
 800ed7c:	ec57 6b10 	vmov	r6, r7, d0
 800ed80:	4b9f      	ldr	r3, [pc, #636]	; (800f000 <__kernel_rem_pio2+0x678>)
 800ed82:	ee10 0a10 	vmov	r0, s0
 800ed86:	2200      	movs	r2, #0
 800ed88:	4639      	mov	r1, r7
 800ed8a:	f7f1 fe63 	bl	8000a54 <__aeabi_dcmpge>
 800ed8e:	b300      	cbz	r0, 800edd2 <__kernel_rem_pio2+0x44a>
 800ed90:	4b9c      	ldr	r3, [pc, #624]	; (800f004 <__kernel_rem_pio2+0x67c>)
 800ed92:	2200      	movs	r2, #0
 800ed94:	4630      	mov	r0, r6
 800ed96:	4639      	mov	r1, r7
 800ed98:	f7f1 fbd6 	bl	8000548 <__aeabi_dmul>
 800ed9c:	f7f1 fe84 	bl	8000aa8 <__aeabi_d2iz>
 800eda0:	4605      	mov	r5, r0
 800eda2:	f7f1 fb67 	bl	8000474 <__aeabi_i2d>
 800eda6:	4b96      	ldr	r3, [pc, #600]	; (800f000 <__kernel_rem_pio2+0x678>)
 800eda8:	2200      	movs	r2, #0
 800edaa:	f7f1 fbcd 	bl	8000548 <__aeabi_dmul>
 800edae:	460b      	mov	r3, r1
 800edb0:	4602      	mov	r2, r0
 800edb2:	4639      	mov	r1, r7
 800edb4:	4630      	mov	r0, r6
 800edb6:	f7f1 fa0f 	bl	80001d8 <__aeabi_dsub>
 800edba:	f7f1 fe75 	bl	8000aa8 <__aeabi_d2iz>
 800edbe:	f104 0b01 	add.w	fp, r4, #1
 800edc2:	ab0c      	add	r3, sp, #48	; 0x30
 800edc4:	f10a 0a18 	add.w	sl, sl, #24
 800edc8:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800edcc:	f843 502b 	str.w	r5, [r3, fp, lsl #2]
 800edd0:	e72b      	b.n	800ec2a <__kernel_rem_pio2+0x2a2>
 800edd2:	4630      	mov	r0, r6
 800edd4:	4639      	mov	r1, r7
 800edd6:	f7f1 fe67 	bl	8000aa8 <__aeabi_d2iz>
 800edda:	ab0c      	add	r3, sp, #48	; 0x30
 800eddc:	46a3      	mov	fp, r4
 800edde:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800ede2:	e722      	b.n	800ec2a <__kernel_rem_pio2+0x2a2>
 800ede4:	ab70      	add	r3, sp, #448	; 0x1c0
 800ede6:	eb03 09c8 	add.w	r9, r3, r8, lsl #3
 800edea:	ab0c      	add	r3, sp, #48	; 0x30
 800edec:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 800edf0:	f7f1 fb40 	bl	8000474 <__aeabi_i2d>
 800edf4:	4622      	mov	r2, r4
 800edf6:	462b      	mov	r3, r5
 800edf8:	f7f1 fba6 	bl	8000548 <__aeabi_dmul>
 800edfc:	4632      	mov	r2, r6
 800edfe:	e9c9 0100 	strd	r0, r1, [r9]
 800ee02:	463b      	mov	r3, r7
 800ee04:	4620      	mov	r0, r4
 800ee06:	4629      	mov	r1, r5
 800ee08:	f7f1 fb9e 	bl	8000548 <__aeabi_dmul>
 800ee0c:	f108 38ff 	add.w	r8, r8, #4294967295
 800ee10:	4604      	mov	r4, r0
 800ee12:	460d      	mov	r5, r1
 800ee14:	e713      	b.n	800ec3e <__kernel_rem_pio2+0x2b6>
 800ee16:	e8f9 2302 	ldrd	r2, r3, [r9], #8
 800ee1a:	e8fa 0102 	ldrd	r0, r1, [sl], #8
 800ee1e:	f7f1 fb93 	bl	8000548 <__aeabi_dmul>
 800ee22:	4602      	mov	r2, r0
 800ee24:	460b      	mov	r3, r1
 800ee26:	4620      	mov	r0, r4
 800ee28:	4629      	mov	r1, r5
 800ee2a:	f7f1 f9d7 	bl	80001dc <__adddf3>
 800ee2e:	3601      	adds	r6, #1
 800ee30:	4604      	mov	r4, r0
 800ee32:	460d      	mov	r5, r1
 800ee34:	9b04      	ldr	r3, [sp, #16]
 800ee36:	429e      	cmp	r6, r3
 800ee38:	dc01      	bgt.n	800ee3e <__kernel_rem_pio2+0x4b6>
 800ee3a:	45b0      	cmp	r8, r6
 800ee3c:	daeb      	bge.n	800ee16 <__kernel_rem_pio2+0x48e>
 800ee3e:	ab48      	add	r3, sp, #288	; 0x120
 800ee40:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800ee44:	e9c3 4500 	strd	r4, r5, [r3]
 800ee48:	3f01      	subs	r7, #1
 800ee4a:	f108 0801 	add.w	r8, r8, #1
 800ee4e:	e6ff      	b.n	800ec50 <__kernel_rem_pio2+0x2c8>
 800ee50:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 800ee52:	2b02      	cmp	r3, #2
 800ee54:	dc0b      	bgt.n	800ee6e <__kernel_rem_pio2+0x4e6>
 800ee56:	2b00      	cmp	r3, #0
 800ee58:	dc6e      	bgt.n	800ef38 <__kernel_rem_pio2+0x5b0>
 800ee5a:	d045      	beq.n	800eee8 <__kernel_rem_pio2+0x560>
 800ee5c:	9b07      	ldr	r3, [sp, #28]
 800ee5e:	f003 0007 	and.w	r0, r3, #7
 800ee62:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 800ee66:	ecbd 8b02 	vpop	{d8}
 800ee6a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ee6e:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 800ee70:	2b03      	cmp	r3, #3
 800ee72:	d1f3      	bne.n	800ee5c <__kernel_rem_pio2+0x4d4>
 800ee74:	ab48      	add	r3, sp, #288	; 0x120
 800ee76:	eb03 0acb 	add.w	sl, r3, fp, lsl #3
 800ee7a:	46d0      	mov	r8, sl
 800ee7c:	46d9      	mov	r9, fp
 800ee7e:	f1b9 0f00 	cmp.w	r9, #0
 800ee82:	f1a8 0808 	sub.w	r8, r8, #8
 800ee86:	dc64      	bgt.n	800ef52 <__kernel_rem_pio2+0x5ca>
 800ee88:	465c      	mov	r4, fp
 800ee8a:	2c01      	cmp	r4, #1
 800ee8c:	f1aa 0a08 	sub.w	sl, sl, #8
 800ee90:	dc7e      	bgt.n	800ef90 <__kernel_rem_pio2+0x608>
 800ee92:	2000      	movs	r0, #0
 800ee94:	2100      	movs	r1, #0
 800ee96:	f1bb 0f01 	cmp.w	fp, #1
 800ee9a:	f300 8097 	bgt.w	800efcc <__kernel_rem_pio2+0x644>
 800ee9e:	9b02      	ldr	r3, [sp, #8]
 800eea0:	e9dd 5648 	ldrd	r5, r6, [sp, #288]	; 0x120
 800eea4:	e9dd 784a 	ldrd	r7, r8, [sp, #296]	; 0x128
 800eea8:	2b00      	cmp	r3, #0
 800eeaa:	f040 8099 	bne.w	800efe0 <__kernel_rem_pio2+0x658>
 800eeae:	9b01      	ldr	r3, [sp, #4]
 800eeb0:	e9c3 5600 	strd	r5, r6, [r3]
 800eeb4:	e9c3 7802 	strd	r7, r8, [r3, #8]
 800eeb8:	e9c3 0104 	strd	r0, r1, [r3, #16]
 800eebc:	e7ce      	b.n	800ee5c <__kernel_rem_pio2+0x4d4>
 800eebe:	ab48      	add	r3, sp, #288	; 0x120
 800eec0:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800eec4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eec8:	f7f1 f988 	bl	80001dc <__adddf3>
 800eecc:	f10b 3bff 	add.w	fp, fp, #4294967295
 800eed0:	f1bb 0f00 	cmp.w	fp, #0
 800eed4:	daf3      	bge.n	800eebe <__kernel_rem_pio2+0x536>
 800eed6:	9b02      	ldr	r3, [sp, #8]
 800eed8:	b113      	cbz	r3, 800eee0 <__kernel_rem_pio2+0x558>
 800eeda:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800eede:	4619      	mov	r1, r3
 800eee0:	9b01      	ldr	r3, [sp, #4]
 800eee2:	e9c3 0100 	strd	r0, r1, [r3]
 800eee6:	e7b9      	b.n	800ee5c <__kernel_rem_pio2+0x4d4>
 800eee8:	2000      	movs	r0, #0
 800eeea:	2100      	movs	r1, #0
 800eeec:	e7f0      	b.n	800eed0 <__kernel_rem_pio2+0x548>
 800eeee:	ab48      	add	r3, sp, #288	; 0x120
 800eef0:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800eef4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eef8:	f7f1 f970 	bl	80001dc <__adddf3>
 800eefc:	3c01      	subs	r4, #1
 800eefe:	2c00      	cmp	r4, #0
 800ef00:	daf5      	bge.n	800eeee <__kernel_rem_pio2+0x566>
 800ef02:	9b02      	ldr	r3, [sp, #8]
 800ef04:	b1e3      	cbz	r3, 800ef40 <__kernel_rem_pio2+0x5b8>
 800ef06:	4602      	mov	r2, r0
 800ef08:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800ef0c:	9c01      	ldr	r4, [sp, #4]
 800ef0e:	e9c4 2300 	strd	r2, r3, [r4]
 800ef12:	4602      	mov	r2, r0
 800ef14:	460b      	mov	r3, r1
 800ef16:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	; 0x120
 800ef1a:	f7f1 f95d 	bl	80001d8 <__aeabi_dsub>
 800ef1e:	ad4a      	add	r5, sp, #296	; 0x128
 800ef20:	2401      	movs	r4, #1
 800ef22:	45a3      	cmp	fp, r4
 800ef24:	da0f      	bge.n	800ef46 <__kernel_rem_pio2+0x5be>
 800ef26:	9b02      	ldr	r3, [sp, #8]
 800ef28:	b113      	cbz	r3, 800ef30 <__kernel_rem_pio2+0x5a8>
 800ef2a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800ef2e:	4619      	mov	r1, r3
 800ef30:	9b01      	ldr	r3, [sp, #4]
 800ef32:	e9c3 0102 	strd	r0, r1, [r3, #8]
 800ef36:	e791      	b.n	800ee5c <__kernel_rem_pio2+0x4d4>
 800ef38:	465c      	mov	r4, fp
 800ef3a:	2000      	movs	r0, #0
 800ef3c:	2100      	movs	r1, #0
 800ef3e:	e7de      	b.n	800eefe <__kernel_rem_pio2+0x576>
 800ef40:	4602      	mov	r2, r0
 800ef42:	460b      	mov	r3, r1
 800ef44:	e7e2      	b.n	800ef0c <__kernel_rem_pio2+0x584>
 800ef46:	e8f5 2302 	ldrd	r2, r3, [r5], #8
 800ef4a:	f7f1 f947 	bl	80001dc <__adddf3>
 800ef4e:	3401      	adds	r4, #1
 800ef50:	e7e7      	b.n	800ef22 <__kernel_rem_pio2+0x59a>
 800ef52:	e9d8 4500 	ldrd	r4, r5, [r8]
 800ef56:	e9d8 6702 	ldrd	r6, r7, [r8, #8]
 800ef5a:	4620      	mov	r0, r4
 800ef5c:	4632      	mov	r2, r6
 800ef5e:	463b      	mov	r3, r7
 800ef60:	4629      	mov	r1, r5
 800ef62:	f7f1 f93b 	bl	80001dc <__adddf3>
 800ef66:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800ef6a:	4602      	mov	r2, r0
 800ef6c:	460b      	mov	r3, r1
 800ef6e:	4620      	mov	r0, r4
 800ef70:	4629      	mov	r1, r5
 800ef72:	f7f1 f931 	bl	80001d8 <__aeabi_dsub>
 800ef76:	4632      	mov	r2, r6
 800ef78:	463b      	mov	r3, r7
 800ef7a:	f7f1 f92f 	bl	80001dc <__adddf3>
 800ef7e:	ed9d 7b04 	vldr	d7, [sp, #16]
 800ef82:	e9c8 0102 	strd	r0, r1, [r8, #8]
 800ef86:	ed88 7b00 	vstr	d7, [r8]
 800ef8a:	f109 39ff 	add.w	r9, r9, #4294967295
 800ef8e:	e776      	b.n	800ee7e <__kernel_rem_pio2+0x4f6>
 800ef90:	e9da 8900 	ldrd	r8, r9, [sl]
 800ef94:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 800ef98:	4640      	mov	r0, r8
 800ef9a:	4632      	mov	r2, r6
 800ef9c:	463b      	mov	r3, r7
 800ef9e:	4649      	mov	r1, r9
 800efa0:	f7f1 f91c 	bl	80001dc <__adddf3>
 800efa4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800efa8:	4602      	mov	r2, r0
 800efaa:	460b      	mov	r3, r1
 800efac:	4640      	mov	r0, r8
 800efae:	4649      	mov	r1, r9
 800efb0:	f7f1 f912 	bl	80001d8 <__aeabi_dsub>
 800efb4:	4632      	mov	r2, r6
 800efb6:	463b      	mov	r3, r7
 800efb8:	f7f1 f910 	bl	80001dc <__adddf3>
 800efbc:	ed9d 7b04 	vldr	d7, [sp, #16]
 800efc0:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800efc4:	ed8a 7b00 	vstr	d7, [sl]
 800efc8:	3c01      	subs	r4, #1
 800efca:	e75e      	b.n	800ee8a <__kernel_rem_pio2+0x502>
 800efcc:	ab48      	add	r3, sp, #288	; 0x120
 800efce:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800efd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800efd6:	f7f1 f901 	bl	80001dc <__adddf3>
 800efda:	f10b 3bff 	add.w	fp, fp, #4294967295
 800efde:	e75a      	b.n	800ee96 <__kernel_rem_pio2+0x50e>
 800efe0:	9b01      	ldr	r3, [sp, #4]
 800efe2:	9a01      	ldr	r2, [sp, #4]
 800efe4:	601d      	str	r5, [r3, #0]
 800efe6:	f106 4400 	add.w	r4, r6, #2147483648	; 0x80000000
 800efea:	605c      	str	r4, [r3, #4]
 800efec:	609f      	str	r7, [r3, #8]
 800efee:	f108 4300 	add.w	r3, r8, #2147483648	; 0x80000000
 800eff2:	60d3      	str	r3, [r2, #12]
 800eff4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800eff8:	6110      	str	r0, [r2, #16]
 800effa:	6153      	str	r3, [r2, #20]
 800effc:	e72e      	b.n	800ee5c <__kernel_rem_pio2+0x4d4>
 800effe:	bf00      	nop
 800f000:	41700000 	.word	0x41700000
 800f004:	3e700000 	.word	0x3e700000

0800f008 <__kernel_sin>:
 800f008:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f00c:	ed2d 8b04 	vpush	{d8-d9}
 800f010:	eeb0 8a41 	vmov.f32	s16, s2
 800f014:	eef0 8a61 	vmov.f32	s17, s3
 800f018:	ec55 4b10 	vmov	r4, r5, d0
 800f01c:	b083      	sub	sp, #12
 800f01e:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800f022:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 800f026:	9001      	str	r0, [sp, #4]
 800f028:	da06      	bge.n	800f038 <__kernel_sin+0x30>
 800f02a:	ee10 0a10 	vmov	r0, s0
 800f02e:	4629      	mov	r1, r5
 800f030:	f7f1 fd3a 	bl	8000aa8 <__aeabi_d2iz>
 800f034:	2800      	cmp	r0, #0
 800f036:	d051      	beq.n	800f0dc <__kernel_sin+0xd4>
 800f038:	4622      	mov	r2, r4
 800f03a:	462b      	mov	r3, r5
 800f03c:	4620      	mov	r0, r4
 800f03e:	4629      	mov	r1, r5
 800f040:	f7f1 fa82 	bl	8000548 <__aeabi_dmul>
 800f044:	4682      	mov	sl, r0
 800f046:	468b      	mov	fp, r1
 800f048:	4602      	mov	r2, r0
 800f04a:	460b      	mov	r3, r1
 800f04c:	4620      	mov	r0, r4
 800f04e:	4629      	mov	r1, r5
 800f050:	f7f1 fa7a 	bl	8000548 <__aeabi_dmul>
 800f054:	a341      	add	r3, pc, #260	; (adr r3, 800f15c <__kernel_sin+0x154>)
 800f056:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f05a:	4680      	mov	r8, r0
 800f05c:	4689      	mov	r9, r1
 800f05e:	4650      	mov	r0, sl
 800f060:	4659      	mov	r1, fp
 800f062:	f7f1 fa71 	bl	8000548 <__aeabi_dmul>
 800f066:	a33f      	add	r3, pc, #252	; (adr r3, 800f164 <__kernel_sin+0x15c>)
 800f068:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f06c:	f7f1 f8b4 	bl	80001d8 <__aeabi_dsub>
 800f070:	4652      	mov	r2, sl
 800f072:	465b      	mov	r3, fp
 800f074:	f7f1 fa68 	bl	8000548 <__aeabi_dmul>
 800f078:	a33c      	add	r3, pc, #240	; (adr r3, 800f16c <__kernel_sin+0x164>)
 800f07a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f07e:	f7f1 f8ad 	bl	80001dc <__adddf3>
 800f082:	4652      	mov	r2, sl
 800f084:	465b      	mov	r3, fp
 800f086:	f7f1 fa5f 	bl	8000548 <__aeabi_dmul>
 800f08a:	a33a      	add	r3, pc, #232	; (adr r3, 800f174 <__kernel_sin+0x16c>)
 800f08c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f090:	f7f1 f8a2 	bl	80001d8 <__aeabi_dsub>
 800f094:	4652      	mov	r2, sl
 800f096:	465b      	mov	r3, fp
 800f098:	f7f1 fa56 	bl	8000548 <__aeabi_dmul>
 800f09c:	a337      	add	r3, pc, #220	; (adr r3, 800f17c <__kernel_sin+0x174>)
 800f09e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f0a2:	f7f1 f89b 	bl	80001dc <__adddf3>
 800f0a6:	9b01      	ldr	r3, [sp, #4]
 800f0a8:	4606      	mov	r6, r0
 800f0aa:	460f      	mov	r7, r1
 800f0ac:	b9eb      	cbnz	r3, 800f0ea <__kernel_sin+0xe2>
 800f0ae:	4602      	mov	r2, r0
 800f0b0:	460b      	mov	r3, r1
 800f0b2:	4650      	mov	r0, sl
 800f0b4:	4659      	mov	r1, fp
 800f0b6:	f7f1 fa47 	bl	8000548 <__aeabi_dmul>
 800f0ba:	a325      	add	r3, pc, #148	; (adr r3, 800f150 <__kernel_sin+0x148>)
 800f0bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f0c0:	f7f1 f88a 	bl	80001d8 <__aeabi_dsub>
 800f0c4:	4642      	mov	r2, r8
 800f0c6:	464b      	mov	r3, r9
 800f0c8:	f7f1 fa3e 	bl	8000548 <__aeabi_dmul>
 800f0cc:	4602      	mov	r2, r0
 800f0ce:	460b      	mov	r3, r1
 800f0d0:	4620      	mov	r0, r4
 800f0d2:	4629      	mov	r1, r5
 800f0d4:	f7f1 f882 	bl	80001dc <__adddf3>
 800f0d8:	4604      	mov	r4, r0
 800f0da:	460d      	mov	r5, r1
 800f0dc:	ec45 4b10 	vmov	d0, r4, r5
 800f0e0:	b003      	add	sp, #12
 800f0e2:	ecbd 8b04 	vpop	{d8-d9}
 800f0e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f0ea:	4b1b      	ldr	r3, [pc, #108]	; (800f158 <__kernel_sin+0x150>)
 800f0ec:	ec51 0b18 	vmov	r0, r1, d8
 800f0f0:	2200      	movs	r2, #0
 800f0f2:	f7f1 fa29 	bl	8000548 <__aeabi_dmul>
 800f0f6:	4632      	mov	r2, r6
 800f0f8:	ec41 0b19 	vmov	d9, r0, r1
 800f0fc:	463b      	mov	r3, r7
 800f0fe:	4640      	mov	r0, r8
 800f100:	4649      	mov	r1, r9
 800f102:	f7f1 fa21 	bl	8000548 <__aeabi_dmul>
 800f106:	4602      	mov	r2, r0
 800f108:	460b      	mov	r3, r1
 800f10a:	ec51 0b19 	vmov	r0, r1, d9
 800f10e:	f7f1 f863 	bl	80001d8 <__aeabi_dsub>
 800f112:	4652      	mov	r2, sl
 800f114:	465b      	mov	r3, fp
 800f116:	f7f1 fa17 	bl	8000548 <__aeabi_dmul>
 800f11a:	ec53 2b18 	vmov	r2, r3, d8
 800f11e:	f7f1 f85b 	bl	80001d8 <__aeabi_dsub>
 800f122:	a30b      	add	r3, pc, #44	; (adr r3, 800f150 <__kernel_sin+0x148>)
 800f124:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f128:	4606      	mov	r6, r0
 800f12a:	460f      	mov	r7, r1
 800f12c:	4640      	mov	r0, r8
 800f12e:	4649      	mov	r1, r9
 800f130:	f7f1 fa0a 	bl	8000548 <__aeabi_dmul>
 800f134:	4602      	mov	r2, r0
 800f136:	460b      	mov	r3, r1
 800f138:	4630      	mov	r0, r6
 800f13a:	4639      	mov	r1, r7
 800f13c:	f7f1 f84e 	bl	80001dc <__adddf3>
 800f140:	4602      	mov	r2, r0
 800f142:	460b      	mov	r3, r1
 800f144:	4620      	mov	r0, r4
 800f146:	4629      	mov	r1, r5
 800f148:	f7f1 f846 	bl	80001d8 <__aeabi_dsub>
 800f14c:	e7c4      	b.n	800f0d8 <__kernel_sin+0xd0>
 800f14e:	bf00      	nop
 800f150:	55555549 	.word	0x55555549
 800f154:	3fc55555 	.word	0x3fc55555
 800f158:	3fe00000 	.word	0x3fe00000
 800f15c:	5acfd57c 	.word	0x5acfd57c
 800f160:	3de5d93a 	.word	0x3de5d93a
 800f164:	8a2b9ceb 	.word	0x8a2b9ceb
 800f168:	3e5ae5e6 	.word	0x3e5ae5e6
 800f16c:	57b1fe7d 	.word	0x57b1fe7d
 800f170:	3ec71de3 	.word	0x3ec71de3
 800f174:	19c161d5 	.word	0x19c161d5
 800f178:	3f2a01a0 	.word	0x3f2a01a0
 800f17c:	1110f8a6 	.word	0x1110f8a6
 800f180:	3f811111 	.word	0x3f811111

0800f184 <fabs>:
 800f184:	ec51 0b10 	vmov	r0, r1, d0
 800f188:	ee10 2a10 	vmov	r2, s0
 800f18c:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800f190:	ec43 2b10 	vmov	d0, r2, r3
 800f194:	4770      	bx	lr

0800f196 <finite>:
 800f196:	b082      	sub	sp, #8
 800f198:	ed8d 0b00 	vstr	d0, [sp]
 800f19c:	9801      	ldr	r0, [sp, #4]
 800f19e:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 800f1a2:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 800f1a6:	0fc0      	lsrs	r0, r0, #31
 800f1a8:	b002      	add	sp, #8
 800f1aa:	4770      	bx	lr
 800f1ac:	0000      	movs	r0, r0
	...

0800f1b0 <floor>:
 800f1b0:	ec51 0b10 	vmov	r0, r1, d0
 800f1b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f1b8:	f3c1 570a 	ubfx	r7, r1, #20, #11
 800f1bc:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 800f1c0:	2e13      	cmp	r6, #19
 800f1c2:	ee10 5a10 	vmov	r5, s0
 800f1c6:	ee10 8a10 	vmov	r8, s0
 800f1ca:	460c      	mov	r4, r1
 800f1cc:	dc32      	bgt.n	800f234 <floor+0x84>
 800f1ce:	2e00      	cmp	r6, #0
 800f1d0:	da14      	bge.n	800f1fc <floor+0x4c>
 800f1d2:	a333      	add	r3, pc, #204	; (adr r3, 800f2a0 <floor+0xf0>)
 800f1d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f1d8:	f7f1 f800 	bl	80001dc <__adddf3>
 800f1dc:	2200      	movs	r2, #0
 800f1de:	2300      	movs	r3, #0
 800f1e0:	f7f1 fc42 	bl	8000a68 <__aeabi_dcmpgt>
 800f1e4:	b138      	cbz	r0, 800f1f6 <floor+0x46>
 800f1e6:	2c00      	cmp	r4, #0
 800f1e8:	da57      	bge.n	800f29a <floor+0xea>
 800f1ea:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 800f1ee:	431d      	orrs	r5, r3
 800f1f0:	d001      	beq.n	800f1f6 <floor+0x46>
 800f1f2:	4c2d      	ldr	r4, [pc, #180]	; (800f2a8 <floor+0xf8>)
 800f1f4:	2500      	movs	r5, #0
 800f1f6:	4621      	mov	r1, r4
 800f1f8:	4628      	mov	r0, r5
 800f1fa:	e025      	b.n	800f248 <floor+0x98>
 800f1fc:	4f2b      	ldr	r7, [pc, #172]	; (800f2ac <floor+0xfc>)
 800f1fe:	4137      	asrs	r7, r6
 800f200:	ea01 0307 	and.w	r3, r1, r7
 800f204:	4303      	orrs	r3, r0
 800f206:	d01f      	beq.n	800f248 <floor+0x98>
 800f208:	a325      	add	r3, pc, #148	; (adr r3, 800f2a0 <floor+0xf0>)
 800f20a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f20e:	f7f0 ffe5 	bl	80001dc <__adddf3>
 800f212:	2200      	movs	r2, #0
 800f214:	2300      	movs	r3, #0
 800f216:	f7f1 fc27 	bl	8000a68 <__aeabi_dcmpgt>
 800f21a:	2800      	cmp	r0, #0
 800f21c:	d0eb      	beq.n	800f1f6 <floor+0x46>
 800f21e:	2c00      	cmp	r4, #0
 800f220:	bfbe      	ittt	lt
 800f222:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 800f226:	fa43 f606 	asrlt.w	r6, r3, r6
 800f22a:	19a4      	addlt	r4, r4, r6
 800f22c:	ea24 0407 	bic.w	r4, r4, r7
 800f230:	2500      	movs	r5, #0
 800f232:	e7e0      	b.n	800f1f6 <floor+0x46>
 800f234:	2e33      	cmp	r6, #51	; 0x33
 800f236:	dd0b      	ble.n	800f250 <floor+0xa0>
 800f238:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800f23c:	d104      	bne.n	800f248 <floor+0x98>
 800f23e:	ee10 2a10 	vmov	r2, s0
 800f242:	460b      	mov	r3, r1
 800f244:	f7f0 ffca 	bl	80001dc <__adddf3>
 800f248:	ec41 0b10 	vmov	d0, r0, r1
 800f24c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f250:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 800f254:	f04f 33ff 	mov.w	r3, #4294967295
 800f258:	fa23 f707 	lsr.w	r7, r3, r7
 800f25c:	4207      	tst	r7, r0
 800f25e:	d0f3      	beq.n	800f248 <floor+0x98>
 800f260:	a30f      	add	r3, pc, #60	; (adr r3, 800f2a0 <floor+0xf0>)
 800f262:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f266:	f7f0 ffb9 	bl	80001dc <__adddf3>
 800f26a:	2200      	movs	r2, #0
 800f26c:	2300      	movs	r3, #0
 800f26e:	f7f1 fbfb 	bl	8000a68 <__aeabi_dcmpgt>
 800f272:	2800      	cmp	r0, #0
 800f274:	d0bf      	beq.n	800f1f6 <floor+0x46>
 800f276:	2c00      	cmp	r4, #0
 800f278:	da02      	bge.n	800f280 <floor+0xd0>
 800f27a:	2e14      	cmp	r6, #20
 800f27c:	d103      	bne.n	800f286 <floor+0xd6>
 800f27e:	3401      	adds	r4, #1
 800f280:	ea25 0507 	bic.w	r5, r5, r7
 800f284:	e7b7      	b.n	800f1f6 <floor+0x46>
 800f286:	2301      	movs	r3, #1
 800f288:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 800f28c:	fa03 f606 	lsl.w	r6, r3, r6
 800f290:	4435      	add	r5, r6
 800f292:	4545      	cmp	r5, r8
 800f294:	bf38      	it	cc
 800f296:	18e4      	addcc	r4, r4, r3
 800f298:	e7f2      	b.n	800f280 <floor+0xd0>
 800f29a:	2500      	movs	r5, #0
 800f29c:	462c      	mov	r4, r5
 800f29e:	e7aa      	b.n	800f1f6 <floor+0x46>
 800f2a0:	8800759c 	.word	0x8800759c
 800f2a4:	7e37e43c 	.word	0x7e37e43c
 800f2a8:	bff00000 	.word	0xbff00000
 800f2ac:	000fffff 	.word	0x000fffff

0800f2b0 <nan>:
 800f2b0:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800f2b8 <nan+0x8>
 800f2b4:	4770      	bx	lr
 800f2b6:	bf00      	nop
 800f2b8:	00000000 	.word	0x00000000
 800f2bc:	7ff80000 	.word	0x7ff80000

0800f2c0 <rint>:
 800f2c0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800f2c2:	ec51 0b10 	vmov	r0, r1, d0
 800f2c6:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800f2ca:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 800f2ce:	2e13      	cmp	r6, #19
 800f2d0:	ee10 4a10 	vmov	r4, s0
 800f2d4:	460b      	mov	r3, r1
 800f2d6:	ea4f 75d1 	mov.w	r5, r1, lsr #31
 800f2da:	dc58      	bgt.n	800f38e <rint+0xce>
 800f2dc:	2e00      	cmp	r6, #0
 800f2de:	da2b      	bge.n	800f338 <rint+0x78>
 800f2e0:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 800f2e4:	4302      	orrs	r2, r0
 800f2e6:	d023      	beq.n	800f330 <rint+0x70>
 800f2e8:	f3c1 0213 	ubfx	r2, r1, #0, #20
 800f2ec:	4302      	orrs	r2, r0
 800f2ee:	4254      	negs	r4, r2
 800f2f0:	4314      	orrs	r4, r2
 800f2f2:	0c4b      	lsrs	r3, r1, #17
 800f2f4:	0b24      	lsrs	r4, r4, #12
 800f2f6:	045b      	lsls	r3, r3, #17
 800f2f8:	f404 2400 	and.w	r4, r4, #524288	; 0x80000
 800f2fc:	ea44 0103 	orr.w	r1, r4, r3
 800f300:	4b32      	ldr	r3, [pc, #200]	; (800f3cc <rint+0x10c>)
 800f302:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800f306:	e9d3 6700 	ldrd	r6, r7, [r3]
 800f30a:	4602      	mov	r2, r0
 800f30c:	460b      	mov	r3, r1
 800f30e:	4630      	mov	r0, r6
 800f310:	4639      	mov	r1, r7
 800f312:	f7f0 ff63 	bl	80001dc <__adddf3>
 800f316:	e9cd 0100 	strd	r0, r1, [sp]
 800f31a:	463b      	mov	r3, r7
 800f31c:	e9dd 0100 	ldrd	r0, r1, [sp]
 800f320:	4632      	mov	r2, r6
 800f322:	f7f0 ff59 	bl	80001d8 <__aeabi_dsub>
 800f326:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800f32a:	ea43 77c5 	orr.w	r7, r3, r5, lsl #31
 800f32e:	4639      	mov	r1, r7
 800f330:	ec41 0b10 	vmov	d0, r0, r1
 800f334:	b003      	add	sp, #12
 800f336:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f338:	4a25      	ldr	r2, [pc, #148]	; (800f3d0 <rint+0x110>)
 800f33a:	4132      	asrs	r2, r6
 800f33c:	ea01 0702 	and.w	r7, r1, r2
 800f340:	4307      	orrs	r7, r0
 800f342:	d0f5      	beq.n	800f330 <rint+0x70>
 800f344:	0851      	lsrs	r1, r2, #1
 800f346:	ea03 0252 	and.w	r2, r3, r2, lsr #1
 800f34a:	4314      	orrs	r4, r2
 800f34c:	d00c      	beq.n	800f368 <rint+0xa8>
 800f34e:	ea23 0201 	bic.w	r2, r3, r1
 800f352:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800f356:	2e13      	cmp	r6, #19
 800f358:	fa43 f606 	asr.w	r6, r3, r6
 800f35c:	bf0c      	ite	eq
 800f35e:	f04f 4400 	moveq.w	r4, #2147483648	; 0x80000000
 800f362:	2400      	movne	r4, #0
 800f364:	ea42 0306 	orr.w	r3, r2, r6
 800f368:	4918      	ldr	r1, [pc, #96]	; (800f3cc <rint+0x10c>)
 800f36a:	eb01 05c5 	add.w	r5, r1, r5, lsl #3
 800f36e:	4622      	mov	r2, r4
 800f370:	e9d5 4500 	ldrd	r4, r5, [r5]
 800f374:	4620      	mov	r0, r4
 800f376:	4629      	mov	r1, r5
 800f378:	f7f0 ff30 	bl	80001dc <__adddf3>
 800f37c:	e9cd 0100 	strd	r0, r1, [sp]
 800f380:	e9dd 0100 	ldrd	r0, r1, [sp]
 800f384:	4622      	mov	r2, r4
 800f386:	462b      	mov	r3, r5
 800f388:	f7f0 ff26 	bl	80001d8 <__aeabi_dsub>
 800f38c:	e7d0      	b.n	800f330 <rint+0x70>
 800f38e:	2e33      	cmp	r6, #51	; 0x33
 800f390:	dd07      	ble.n	800f3a2 <rint+0xe2>
 800f392:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800f396:	d1cb      	bne.n	800f330 <rint+0x70>
 800f398:	ee10 2a10 	vmov	r2, s0
 800f39c:	f7f0 ff1e 	bl	80001dc <__adddf3>
 800f3a0:	e7c6      	b.n	800f330 <rint+0x70>
 800f3a2:	f2a2 4213 	subw	r2, r2, #1043	; 0x413
 800f3a6:	f04f 36ff 	mov.w	r6, #4294967295
 800f3aa:	40d6      	lsrs	r6, r2
 800f3ac:	4230      	tst	r0, r6
 800f3ae:	d0bf      	beq.n	800f330 <rint+0x70>
 800f3b0:	ea14 0056 	ands.w	r0, r4, r6, lsr #1
 800f3b4:	ea4f 0156 	mov.w	r1, r6, lsr #1
 800f3b8:	bf1f      	itttt	ne
 800f3ba:	ea24 0101 	bicne.w	r1, r4, r1
 800f3be:	f04f 4480 	movne.w	r4, #1073741824	; 0x40000000
 800f3c2:	fa44 f202 	asrne.w	r2, r4, r2
 800f3c6:	ea41 0402 	orrne.w	r4, r1, r2
 800f3ca:	e7cd      	b.n	800f368 <rint+0xa8>
 800f3cc:	0800f7b8 	.word	0x0800f7b8
 800f3d0:	000fffff 	.word	0x000fffff
 800f3d4:	00000000 	.word	0x00000000

0800f3d8 <scalbn>:
 800f3d8:	b570      	push	{r4, r5, r6, lr}
 800f3da:	ec55 4b10 	vmov	r4, r5, d0
 800f3de:	f3c5 520a 	ubfx	r2, r5, #20, #11
 800f3e2:	4606      	mov	r6, r0
 800f3e4:	462b      	mov	r3, r5
 800f3e6:	b99a      	cbnz	r2, 800f410 <scalbn+0x38>
 800f3e8:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800f3ec:	4323      	orrs	r3, r4
 800f3ee:	d036      	beq.n	800f45e <scalbn+0x86>
 800f3f0:	4b39      	ldr	r3, [pc, #228]	; (800f4d8 <scalbn+0x100>)
 800f3f2:	4629      	mov	r1, r5
 800f3f4:	ee10 0a10 	vmov	r0, s0
 800f3f8:	2200      	movs	r2, #0
 800f3fa:	f7f1 f8a5 	bl	8000548 <__aeabi_dmul>
 800f3fe:	4b37      	ldr	r3, [pc, #220]	; (800f4dc <scalbn+0x104>)
 800f400:	429e      	cmp	r6, r3
 800f402:	4604      	mov	r4, r0
 800f404:	460d      	mov	r5, r1
 800f406:	da10      	bge.n	800f42a <scalbn+0x52>
 800f408:	a32b      	add	r3, pc, #172	; (adr r3, 800f4b8 <scalbn+0xe0>)
 800f40a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f40e:	e03a      	b.n	800f486 <scalbn+0xae>
 800f410:	f240 71ff 	movw	r1, #2047	; 0x7ff
 800f414:	428a      	cmp	r2, r1
 800f416:	d10c      	bne.n	800f432 <scalbn+0x5a>
 800f418:	ee10 2a10 	vmov	r2, s0
 800f41c:	4620      	mov	r0, r4
 800f41e:	4629      	mov	r1, r5
 800f420:	f7f0 fedc 	bl	80001dc <__adddf3>
 800f424:	4604      	mov	r4, r0
 800f426:	460d      	mov	r5, r1
 800f428:	e019      	b.n	800f45e <scalbn+0x86>
 800f42a:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800f42e:	460b      	mov	r3, r1
 800f430:	3a36      	subs	r2, #54	; 0x36
 800f432:	4432      	add	r2, r6
 800f434:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800f438:	428a      	cmp	r2, r1
 800f43a:	dd08      	ble.n	800f44e <scalbn+0x76>
 800f43c:	2d00      	cmp	r5, #0
 800f43e:	a120      	add	r1, pc, #128	; (adr r1, 800f4c0 <scalbn+0xe8>)
 800f440:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f444:	da1c      	bge.n	800f480 <scalbn+0xa8>
 800f446:	a120      	add	r1, pc, #128	; (adr r1, 800f4c8 <scalbn+0xf0>)
 800f448:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f44c:	e018      	b.n	800f480 <scalbn+0xa8>
 800f44e:	2a00      	cmp	r2, #0
 800f450:	dd08      	ble.n	800f464 <scalbn+0x8c>
 800f452:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800f456:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800f45a:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800f45e:	ec45 4b10 	vmov	d0, r4, r5
 800f462:	bd70      	pop	{r4, r5, r6, pc}
 800f464:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800f468:	da19      	bge.n	800f49e <scalbn+0xc6>
 800f46a:	f24c 3350 	movw	r3, #50000	; 0xc350
 800f46e:	429e      	cmp	r6, r3
 800f470:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 800f474:	dd0a      	ble.n	800f48c <scalbn+0xb4>
 800f476:	a112      	add	r1, pc, #72	; (adr r1, 800f4c0 <scalbn+0xe8>)
 800f478:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f47c:	2b00      	cmp	r3, #0
 800f47e:	d1e2      	bne.n	800f446 <scalbn+0x6e>
 800f480:	a30f      	add	r3, pc, #60	; (adr r3, 800f4c0 <scalbn+0xe8>)
 800f482:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f486:	f7f1 f85f 	bl	8000548 <__aeabi_dmul>
 800f48a:	e7cb      	b.n	800f424 <scalbn+0x4c>
 800f48c:	a10a      	add	r1, pc, #40	; (adr r1, 800f4b8 <scalbn+0xe0>)
 800f48e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f492:	2b00      	cmp	r3, #0
 800f494:	d0b8      	beq.n	800f408 <scalbn+0x30>
 800f496:	a10e      	add	r1, pc, #56	; (adr r1, 800f4d0 <scalbn+0xf8>)
 800f498:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f49c:	e7b4      	b.n	800f408 <scalbn+0x30>
 800f49e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800f4a2:	3236      	adds	r2, #54	; 0x36
 800f4a4:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800f4a8:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 800f4ac:	4620      	mov	r0, r4
 800f4ae:	4b0c      	ldr	r3, [pc, #48]	; (800f4e0 <scalbn+0x108>)
 800f4b0:	2200      	movs	r2, #0
 800f4b2:	e7e8      	b.n	800f486 <scalbn+0xae>
 800f4b4:	f3af 8000 	nop.w
 800f4b8:	c2f8f359 	.word	0xc2f8f359
 800f4bc:	01a56e1f 	.word	0x01a56e1f
 800f4c0:	8800759c 	.word	0x8800759c
 800f4c4:	7e37e43c 	.word	0x7e37e43c
 800f4c8:	8800759c 	.word	0x8800759c
 800f4cc:	fe37e43c 	.word	0xfe37e43c
 800f4d0:	c2f8f359 	.word	0xc2f8f359
 800f4d4:	81a56e1f 	.word	0x81a56e1f
 800f4d8:	43500000 	.word	0x43500000
 800f4dc:	ffff3cb0 	.word	0xffff3cb0
 800f4e0:	3c900000 	.word	0x3c900000

0800f4e4 <_init>:
 800f4e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f4e6:	bf00      	nop
 800f4e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f4ea:	bc08      	pop	{r3}
 800f4ec:	469e      	mov	lr, r3
 800f4ee:	4770      	bx	lr

0800f4f0 <_fini>:
 800f4f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f4f2:	bf00      	nop
 800f4f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f4f6:	bc08      	pop	{r3}
 800f4f8:	469e      	mov	lr, r3
 800f4fa:	4770      	bx	lr
