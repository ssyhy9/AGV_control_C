
AGV_control_C_MainBoard.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000f8bc  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002c8  0800fa50  0800fa50  0001fa50  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800fd18  0800fd18  00020078  2**0
                  CONTENTS
  4 .ARM          00000008  0800fd18  0800fd18  0001fd18  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800fd20  0800fd20  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800fd20  0800fd20  0001fd20  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800fd24  0800fd24  0001fd24  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  0800fd28  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000553c  20000078  0800fda0  00020078  2**2
                  ALLOC
 10 ._user_heap_stack 00004004  200055b4  0800fda0  000255b4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 12 .debug_info   00033081  00000000  00000000  000200a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00006a2f  00000000  00000000  00053129  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002200  00000000  00000000  00059b58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001f60  00000000  00000000  0005bd58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00029ef8  00000000  00000000  0005dcb8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002bbc4  00000000  00000000  00087bb0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e67dc  00000000  00000000  000b3774  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00199f50  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000092bc  00000000  00000000  00199fa4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000078 	.word	0x20000078
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800fa34 	.word	0x0800fa34

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000007c 	.word	0x2000007c
 80001cc:	0800fa34 	.word	0x0800fa34

080001d0 <__aeabi_drsub>:
 80001d0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001d4:	e002      	b.n	80001dc <__adddf3>
 80001d6:	bf00      	nop

080001d8 <__aeabi_dsub>:
 80001d8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001dc <__adddf3>:
 80001dc:	b530      	push	{r4, r5, lr}
 80001de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001e6:	ea94 0f05 	teq	r4, r5
 80001ea:	bf08      	it	eq
 80001ec:	ea90 0f02 	teqeq	r0, r2
 80001f0:	bf1f      	itttt	ne
 80001f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000202:	f000 80e2 	beq.w	80003ca <__adddf3+0x1ee>
 8000206:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800020a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800020e:	bfb8      	it	lt
 8000210:	426d      	neglt	r5, r5
 8000212:	dd0c      	ble.n	800022e <__adddf3+0x52>
 8000214:	442c      	add	r4, r5
 8000216:	ea80 0202 	eor.w	r2, r0, r2
 800021a:	ea81 0303 	eor.w	r3, r1, r3
 800021e:	ea82 0000 	eor.w	r0, r2, r0
 8000222:	ea83 0101 	eor.w	r1, r3, r1
 8000226:	ea80 0202 	eor.w	r2, r0, r2
 800022a:	ea81 0303 	eor.w	r3, r1, r3
 800022e:	2d36      	cmp	r5, #54	; 0x36
 8000230:	bf88      	it	hi
 8000232:	bd30      	pophi	{r4, r5, pc}
 8000234:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000238:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800023c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000240:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000244:	d002      	beq.n	800024c <__adddf3+0x70>
 8000246:	4240      	negs	r0, r0
 8000248:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800024c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000250:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000254:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000258:	d002      	beq.n	8000260 <__adddf3+0x84>
 800025a:	4252      	negs	r2, r2
 800025c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000260:	ea94 0f05 	teq	r4, r5
 8000264:	f000 80a7 	beq.w	80003b6 <__adddf3+0x1da>
 8000268:	f1a4 0401 	sub.w	r4, r4, #1
 800026c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000270:	db0d      	blt.n	800028e <__adddf3+0xb2>
 8000272:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000276:	fa22 f205 	lsr.w	r2, r2, r5
 800027a:	1880      	adds	r0, r0, r2
 800027c:	f141 0100 	adc.w	r1, r1, #0
 8000280:	fa03 f20e 	lsl.w	r2, r3, lr
 8000284:	1880      	adds	r0, r0, r2
 8000286:	fa43 f305 	asr.w	r3, r3, r5
 800028a:	4159      	adcs	r1, r3
 800028c:	e00e      	b.n	80002ac <__adddf3+0xd0>
 800028e:	f1a5 0520 	sub.w	r5, r5, #32
 8000292:	f10e 0e20 	add.w	lr, lr, #32
 8000296:	2a01      	cmp	r2, #1
 8000298:	fa03 fc0e 	lsl.w	ip, r3, lr
 800029c:	bf28      	it	cs
 800029e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002a2:	fa43 f305 	asr.w	r3, r3, r5
 80002a6:	18c0      	adds	r0, r0, r3
 80002a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002ac:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002b0:	d507      	bpl.n	80002c2 <__adddf3+0xe6>
 80002b2:	f04f 0e00 	mov.w	lr, #0
 80002b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80002ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002be:	eb6e 0101 	sbc.w	r1, lr, r1
 80002c2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002c6:	d31b      	bcc.n	8000300 <__adddf3+0x124>
 80002c8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002cc:	d30c      	bcc.n	80002e8 <__adddf3+0x10c>
 80002ce:	0849      	lsrs	r1, r1, #1
 80002d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80002d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d8:	f104 0401 	add.w	r4, r4, #1
 80002dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002e4:	f080 809a 	bcs.w	800041c <__adddf3+0x240>
 80002e8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002ec:	bf08      	it	eq
 80002ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002f2:	f150 0000 	adcs.w	r0, r0, #0
 80002f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002fa:	ea41 0105 	orr.w	r1, r1, r5
 80002fe:	bd30      	pop	{r4, r5, pc}
 8000300:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000304:	4140      	adcs	r0, r0
 8000306:	eb41 0101 	adc.w	r1, r1, r1
 800030a:	3c01      	subs	r4, #1
 800030c:	bf28      	it	cs
 800030e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000312:	d2e9      	bcs.n	80002e8 <__adddf3+0x10c>
 8000314:	f091 0f00 	teq	r1, #0
 8000318:	bf04      	itt	eq
 800031a:	4601      	moveq	r1, r0
 800031c:	2000      	moveq	r0, #0
 800031e:	fab1 f381 	clz	r3, r1
 8000322:	bf08      	it	eq
 8000324:	3320      	addeq	r3, #32
 8000326:	f1a3 030b 	sub.w	r3, r3, #11
 800032a:	f1b3 0220 	subs.w	r2, r3, #32
 800032e:	da0c      	bge.n	800034a <__adddf3+0x16e>
 8000330:	320c      	adds	r2, #12
 8000332:	dd08      	ble.n	8000346 <__adddf3+0x16a>
 8000334:	f102 0c14 	add.w	ip, r2, #20
 8000338:	f1c2 020c 	rsb	r2, r2, #12
 800033c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000340:	fa21 f102 	lsr.w	r1, r1, r2
 8000344:	e00c      	b.n	8000360 <__adddf3+0x184>
 8000346:	f102 0214 	add.w	r2, r2, #20
 800034a:	bfd8      	it	le
 800034c:	f1c2 0c20 	rsble	ip, r2, #32
 8000350:	fa01 f102 	lsl.w	r1, r1, r2
 8000354:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000358:	bfdc      	itt	le
 800035a:	ea41 010c 	orrle.w	r1, r1, ip
 800035e:	4090      	lslle	r0, r2
 8000360:	1ae4      	subs	r4, r4, r3
 8000362:	bfa2      	ittt	ge
 8000364:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000368:	4329      	orrge	r1, r5
 800036a:	bd30      	popge	{r4, r5, pc}
 800036c:	ea6f 0404 	mvn.w	r4, r4
 8000370:	3c1f      	subs	r4, #31
 8000372:	da1c      	bge.n	80003ae <__adddf3+0x1d2>
 8000374:	340c      	adds	r4, #12
 8000376:	dc0e      	bgt.n	8000396 <__adddf3+0x1ba>
 8000378:	f104 0414 	add.w	r4, r4, #20
 800037c:	f1c4 0220 	rsb	r2, r4, #32
 8000380:	fa20 f004 	lsr.w	r0, r0, r4
 8000384:	fa01 f302 	lsl.w	r3, r1, r2
 8000388:	ea40 0003 	orr.w	r0, r0, r3
 800038c:	fa21 f304 	lsr.w	r3, r1, r4
 8000390:	ea45 0103 	orr.w	r1, r5, r3
 8000394:	bd30      	pop	{r4, r5, pc}
 8000396:	f1c4 040c 	rsb	r4, r4, #12
 800039a:	f1c4 0220 	rsb	r2, r4, #32
 800039e:	fa20 f002 	lsr.w	r0, r0, r2
 80003a2:	fa01 f304 	lsl.w	r3, r1, r4
 80003a6:	ea40 0003 	orr.w	r0, r0, r3
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	fa21 f004 	lsr.w	r0, r1, r4
 80003b2:	4629      	mov	r1, r5
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	f094 0f00 	teq	r4, #0
 80003ba:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003be:	bf06      	itte	eq
 80003c0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003c4:	3401      	addeq	r4, #1
 80003c6:	3d01      	subne	r5, #1
 80003c8:	e74e      	b.n	8000268 <__adddf3+0x8c>
 80003ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ce:	bf18      	it	ne
 80003d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003d4:	d029      	beq.n	800042a <__adddf3+0x24e>
 80003d6:	ea94 0f05 	teq	r4, r5
 80003da:	bf08      	it	eq
 80003dc:	ea90 0f02 	teqeq	r0, r2
 80003e0:	d005      	beq.n	80003ee <__adddf3+0x212>
 80003e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80003e6:	bf04      	itt	eq
 80003e8:	4619      	moveq	r1, r3
 80003ea:	4610      	moveq	r0, r2
 80003ec:	bd30      	pop	{r4, r5, pc}
 80003ee:	ea91 0f03 	teq	r1, r3
 80003f2:	bf1e      	ittt	ne
 80003f4:	2100      	movne	r1, #0
 80003f6:	2000      	movne	r0, #0
 80003f8:	bd30      	popne	{r4, r5, pc}
 80003fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003fe:	d105      	bne.n	800040c <__adddf3+0x230>
 8000400:	0040      	lsls	r0, r0, #1
 8000402:	4149      	adcs	r1, r1
 8000404:	bf28      	it	cs
 8000406:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800040a:	bd30      	pop	{r4, r5, pc}
 800040c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000410:	bf3c      	itt	cc
 8000412:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000416:	bd30      	popcc	{r4, r5, pc}
 8000418:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800041c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000420:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000424:	f04f 0000 	mov.w	r0, #0
 8000428:	bd30      	pop	{r4, r5, pc}
 800042a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800042e:	bf1a      	itte	ne
 8000430:	4619      	movne	r1, r3
 8000432:	4610      	movne	r0, r2
 8000434:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000438:	bf1c      	itt	ne
 800043a:	460b      	movne	r3, r1
 800043c:	4602      	movne	r2, r0
 800043e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000442:	bf06      	itte	eq
 8000444:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000448:	ea91 0f03 	teqeq	r1, r3
 800044c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000450:	bd30      	pop	{r4, r5, pc}
 8000452:	bf00      	nop

08000454 <__aeabi_ui2d>:
 8000454:	f090 0f00 	teq	r0, #0
 8000458:	bf04      	itt	eq
 800045a:	2100      	moveq	r1, #0
 800045c:	4770      	bxeq	lr
 800045e:	b530      	push	{r4, r5, lr}
 8000460:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000464:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000468:	f04f 0500 	mov.w	r5, #0
 800046c:	f04f 0100 	mov.w	r1, #0
 8000470:	e750      	b.n	8000314 <__adddf3+0x138>
 8000472:	bf00      	nop

08000474 <__aeabi_i2d>:
 8000474:	f090 0f00 	teq	r0, #0
 8000478:	bf04      	itt	eq
 800047a:	2100      	moveq	r1, #0
 800047c:	4770      	bxeq	lr
 800047e:	b530      	push	{r4, r5, lr}
 8000480:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000484:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000488:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800048c:	bf48      	it	mi
 800048e:	4240      	negmi	r0, r0
 8000490:	f04f 0100 	mov.w	r1, #0
 8000494:	e73e      	b.n	8000314 <__adddf3+0x138>
 8000496:	bf00      	nop

08000498 <__aeabi_f2d>:
 8000498:	0042      	lsls	r2, r0, #1
 800049a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800049e:	ea4f 0131 	mov.w	r1, r1, rrx
 80004a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004a6:	bf1f      	itttt	ne
 80004a8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004ac:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004b0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004b4:	4770      	bxne	lr
 80004b6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004ba:	bf08      	it	eq
 80004bc:	4770      	bxeq	lr
 80004be:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004c2:	bf04      	itt	eq
 80004c4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004c8:	4770      	bxeq	lr
 80004ca:	b530      	push	{r4, r5, lr}
 80004cc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004d0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004d4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004d8:	e71c      	b.n	8000314 <__adddf3+0x138>
 80004da:	bf00      	nop

080004dc <__aeabi_ul2d>:
 80004dc:	ea50 0201 	orrs.w	r2, r0, r1
 80004e0:	bf08      	it	eq
 80004e2:	4770      	bxeq	lr
 80004e4:	b530      	push	{r4, r5, lr}
 80004e6:	f04f 0500 	mov.w	r5, #0
 80004ea:	e00a      	b.n	8000502 <__aeabi_l2d+0x16>

080004ec <__aeabi_l2d>:
 80004ec:	ea50 0201 	orrs.w	r2, r0, r1
 80004f0:	bf08      	it	eq
 80004f2:	4770      	bxeq	lr
 80004f4:	b530      	push	{r4, r5, lr}
 80004f6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004fa:	d502      	bpl.n	8000502 <__aeabi_l2d+0x16>
 80004fc:	4240      	negs	r0, r0
 80004fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000502:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000506:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800050a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800050e:	f43f aed8 	beq.w	80002c2 <__adddf3+0xe6>
 8000512:	f04f 0203 	mov.w	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000522:	bf18      	it	ne
 8000524:	3203      	addne	r2, #3
 8000526:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800052a:	f1c2 0320 	rsb	r3, r2, #32
 800052e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000532:	fa20 f002 	lsr.w	r0, r0, r2
 8000536:	fa01 fe03 	lsl.w	lr, r1, r3
 800053a:	ea40 000e 	orr.w	r0, r0, lr
 800053e:	fa21 f102 	lsr.w	r1, r1, r2
 8000542:	4414      	add	r4, r2
 8000544:	e6bd      	b.n	80002c2 <__adddf3+0xe6>
 8000546:	bf00      	nop

08000548 <__aeabi_dmul>:
 8000548:	b570      	push	{r4, r5, r6, lr}
 800054a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800054e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000552:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000556:	bf1d      	ittte	ne
 8000558:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800055c:	ea94 0f0c 	teqne	r4, ip
 8000560:	ea95 0f0c 	teqne	r5, ip
 8000564:	f000 f8de 	bleq	8000724 <__aeabi_dmul+0x1dc>
 8000568:	442c      	add	r4, r5
 800056a:	ea81 0603 	eor.w	r6, r1, r3
 800056e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000572:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000576:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800057a:	bf18      	it	ne
 800057c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000580:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000584:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000588:	d038      	beq.n	80005fc <__aeabi_dmul+0xb4>
 800058a:	fba0 ce02 	umull	ip, lr, r0, r2
 800058e:	f04f 0500 	mov.w	r5, #0
 8000592:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000596:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800059a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800059e:	f04f 0600 	mov.w	r6, #0
 80005a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005a6:	f09c 0f00 	teq	ip, #0
 80005aa:	bf18      	it	ne
 80005ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80005b0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005b4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005b8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005bc:	d204      	bcs.n	80005c8 <__aeabi_dmul+0x80>
 80005be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005c2:	416d      	adcs	r5, r5
 80005c4:	eb46 0606 	adc.w	r6, r6, r6
 80005c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005dc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005e0:	bf88      	it	hi
 80005e2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005e6:	d81e      	bhi.n	8000626 <__aeabi_dmul+0xde>
 80005e8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005ec:	bf08      	it	eq
 80005ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005f2:	f150 0000 	adcs.w	r0, r0, #0
 80005f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005fa:	bd70      	pop	{r4, r5, r6, pc}
 80005fc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000600:	ea46 0101 	orr.w	r1, r6, r1
 8000604:	ea40 0002 	orr.w	r0, r0, r2
 8000608:	ea81 0103 	eor.w	r1, r1, r3
 800060c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000610:	bfc2      	ittt	gt
 8000612:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000616:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800061a:	bd70      	popgt	{r4, r5, r6, pc}
 800061c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000620:	f04f 0e00 	mov.w	lr, #0
 8000624:	3c01      	subs	r4, #1
 8000626:	f300 80ab 	bgt.w	8000780 <__aeabi_dmul+0x238>
 800062a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800062e:	bfde      	ittt	le
 8000630:	2000      	movle	r0, #0
 8000632:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000636:	bd70      	pople	{r4, r5, r6, pc}
 8000638:	f1c4 0400 	rsb	r4, r4, #0
 800063c:	3c20      	subs	r4, #32
 800063e:	da35      	bge.n	80006ac <__aeabi_dmul+0x164>
 8000640:	340c      	adds	r4, #12
 8000642:	dc1b      	bgt.n	800067c <__aeabi_dmul+0x134>
 8000644:	f104 0414 	add.w	r4, r4, #20
 8000648:	f1c4 0520 	rsb	r5, r4, #32
 800064c:	fa00 f305 	lsl.w	r3, r0, r5
 8000650:	fa20 f004 	lsr.w	r0, r0, r4
 8000654:	fa01 f205 	lsl.w	r2, r1, r5
 8000658:	ea40 0002 	orr.w	r0, r0, r2
 800065c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000660:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000664:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000668:	fa21 f604 	lsr.w	r6, r1, r4
 800066c:	eb42 0106 	adc.w	r1, r2, r6
 8000670:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000674:	bf08      	it	eq
 8000676:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800067a:	bd70      	pop	{r4, r5, r6, pc}
 800067c:	f1c4 040c 	rsb	r4, r4, #12
 8000680:	f1c4 0520 	rsb	r5, r4, #32
 8000684:	fa00 f304 	lsl.w	r3, r0, r4
 8000688:	fa20 f005 	lsr.w	r0, r0, r5
 800068c:	fa01 f204 	lsl.w	r2, r1, r4
 8000690:	ea40 0002 	orr.w	r0, r0, r2
 8000694:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000698:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800069c:	f141 0100 	adc.w	r1, r1, #0
 80006a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006a4:	bf08      	it	eq
 80006a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f1c4 0520 	rsb	r5, r4, #32
 80006b0:	fa00 f205 	lsl.w	r2, r0, r5
 80006b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80006b8:	fa20 f304 	lsr.w	r3, r0, r4
 80006bc:	fa01 f205 	lsl.w	r2, r1, r5
 80006c0:	ea43 0302 	orr.w	r3, r3, r2
 80006c4:	fa21 f004 	lsr.w	r0, r1, r4
 80006c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006cc:	fa21 f204 	lsr.w	r2, r1, r4
 80006d0:	ea20 0002 	bic.w	r0, r0, r2
 80006d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006dc:	bf08      	it	eq
 80006de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006e2:	bd70      	pop	{r4, r5, r6, pc}
 80006e4:	f094 0f00 	teq	r4, #0
 80006e8:	d10f      	bne.n	800070a <__aeabi_dmul+0x1c2>
 80006ea:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006ee:	0040      	lsls	r0, r0, #1
 80006f0:	eb41 0101 	adc.w	r1, r1, r1
 80006f4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006f8:	bf08      	it	eq
 80006fa:	3c01      	subeq	r4, #1
 80006fc:	d0f7      	beq.n	80006ee <__aeabi_dmul+0x1a6>
 80006fe:	ea41 0106 	orr.w	r1, r1, r6
 8000702:	f095 0f00 	teq	r5, #0
 8000706:	bf18      	it	ne
 8000708:	4770      	bxne	lr
 800070a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800070e:	0052      	lsls	r2, r2, #1
 8000710:	eb43 0303 	adc.w	r3, r3, r3
 8000714:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000718:	bf08      	it	eq
 800071a:	3d01      	subeq	r5, #1
 800071c:	d0f7      	beq.n	800070e <__aeabi_dmul+0x1c6>
 800071e:	ea43 0306 	orr.w	r3, r3, r6
 8000722:	4770      	bx	lr
 8000724:	ea94 0f0c 	teq	r4, ip
 8000728:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800072c:	bf18      	it	ne
 800072e:	ea95 0f0c 	teqne	r5, ip
 8000732:	d00c      	beq.n	800074e <__aeabi_dmul+0x206>
 8000734:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000738:	bf18      	it	ne
 800073a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800073e:	d1d1      	bne.n	80006e4 <__aeabi_dmul+0x19c>
 8000740:	ea81 0103 	eor.w	r1, r1, r3
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	f04f 0000 	mov.w	r0, #0
 800074c:	bd70      	pop	{r4, r5, r6, pc}
 800074e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000752:	bf06      	itte	eq
 8000754:	4610      	moveq	r0, r2
 8000756:	4619      	moveq	r1, r3
 8000758:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800075c:	d019      	beq.n	8000792 <__aeabi_dmul+0x24a>
 800075e:	ea94 0f0c 	teq	r4, ip
 8000762:	d102      	bne.n	800076a <__aeabi_dmul+0x222>
 8000764:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000768:	d113      	bne.n	8000792 <__aeabi_dmul+0x24a>
 800076a:	ea95 0f0c 	teq	r5, ip
 800076e:	d105      	bne.n	800077c <__aeabi_dmul+0x234>
 8000770:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000774:	bf1c      	itt	ne
 8000776:	4610      	movne	r0, r2
 8000778:	4619      	movne	r1, r3
 800077a:	d10a      	bne.n	8000792 <__aeabi_dmul+0x24a>
 800077c:	ea81 0103 	eor.w	r1, r1, r3
 8000780:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000784:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000788:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800078c:	f04f 0000 	mov.w	r0, #0
 8000790:	bd70      	pop	{r4, r5, r6, pc}
 8000792:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000796:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800079a:	bd70      	pop	{r4, r5, r6, pc}

0800079c <__aeabi_ddiv>:
 800079c:	b570      	push	{r4, r5, r6, lr}
 800079e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007a2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007aa:	bf1d      	ittte	ne
 80007ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007b0:	ea94 0f0c 	teqne	r4, ip
 80007b4:	ea95 0f0c 	teqne	r5, ip
 80007b8:	f000 f8a7 	bleq	800090a <__aeabi_ddiv+0x16e>
 80007bc:	eba4 0405 	sub.w	r4, r4, r5
 80007c0:	ea81 0e03 	eor.w	lr, r1, r3
 80007c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007cc:	f000 8088 	beq.w	80008e0 <__aeabi_ddiv+0x144>
 80007d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007d4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007f0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007f4:	429d      	cmp	r5, r3
 80007f6:	bf08      	it	eq
 80007f8:	4296      	cmpeq	r6, r2
 80007fa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007fe:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000802:	d202      	bcs.n	800080a <__aeabi_ddiv+0x6e>
 8000804:	085b      	lsrs	r3, r3, #1
 8000806:	ea4f 0232 	mov.w	r2, r2, rrx
 800080a:	1ab6      	subs	r6, r6, r2
 800080c:	eb65 0503 	sbc.w	r5, r5, r3
 8000810:	085b      	lsrs	r3, r3, #1
 8000812:	ea4f 0232 	mov.w	r2, r2, rrx
 8000816:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800081a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800081e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000822:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000826:	bf22      	ittt	cs
 8000828:	1ab6      	subcs	r6, r6, r2
 800082a:	4675      	movcs	r5, lr
 800082c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000830:	085b      	lsrs	r3, r3, #1
 8000832:	ea4f 0232 	mov.w	r2, r2, rrx
 8000836:	ebb6 0e02 	subs.w	lr, r6, r2
 800083a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800083e:	bf22      	ittt	cs
 8000840:	1ab6      	subcs	r6, r6, r2
 8000842:	4675      	movcs	r5, lr
 8000844:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000848:	085b      	lsrs	r3, r3, #1
 800084a:	ea4f 0232 	mov.w	r2, r2, rrx
 800084e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000852:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000856:	bf22      	ittt	cs
 8000858:	1ab6      	subcs	r6, r6, r2
 800085a:	4675      	movcs	r5, lr
 800085c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000860:	085b      	lsrs	r3, r3, #1
 8000862:	ea4f 0232 	mov.w	r2, r2, rrx
 8000866:	ebb6 0e02 	subs.w	lr, r6, r2
 800086a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086e:	bf22      	ittt	cs
 8000870:	1ab6      	subcs	r6, r6, r2
 8000872:	4675      	movcs	r5, lr
 8000874:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000878:	ea55 0e06 	orrs.w	lr, r5, r6
 800087c:	d018      	beq.n	80008b0 <__aeabi_ddiv+0x114>
 800087e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000882:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000886:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800088a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800088e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000892:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000896:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800089a:	d1c0      	bne.n	800081e <__aeabi_ddiv+0x82>
 800089c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008a0:	d10b      	bne.n	80008ba <__aeabi_ddiv+0x11e>
 80008a2:	ea41 0100 	orr.w	r1, r1, r0
 80008a6:	f04f 0000 	mov.w	r0, #0
 80008aa:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008ae:	e7b6      	b.n	800081e <__aeabi_ddiv+0x82>
 80008b0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008b4:	bf04      	itt	eq
 80008b6:	4301      	orreq	r1, r0
 80008b8:	2000      	moveq	r0, #0
 80008ba:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008be:	bf88      	it	hi
 80008c0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008c4:	f63f aeaf 	bhi.w	8000626 <__aeabi_dmul+0xde>
 80008c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80008cc:	bf04      	itt	eq
 80008ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008d6:	f150 0000 	adcs.w	r0, r0, #0
 80008da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008de:	bd70      	pop	{r4, r5, r6, pc}
 80008e0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008ec:	bfc2      	ittt	gt
 80008ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008f6:	bd70      	popgt	{r4, r5, r6, pc}
 80008f8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008fc:	f04f 0e00 	mov.w	lr, #0
 8000900:	3c01      	subs	r4, #1
 8000902:	e690      	b.n	8000626 <__aeabi_dmul+0xde>
 8000904:	ea45 0e06 	orr.w	lr, r5, r6
 8000908:	e68d      	b.n	8000626 <__aeabi_dmul+0xde>
 800090a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800090e:	ea94 0f0c 	teq	r4, ip
 8000912:	bf08      	it	eq
 8000914:	ea95 0f0c 	teqeq	r5, ip
 8000918:	f43f af3b 	beq.w	8000792 <__aeabi_dmul+0x24a>
 800091c:	ea94 0f0c 	teq	r4, ip
 8000920:	d10a      	bne.n	8000938 <__aeabi_ddiv+0x19c>
 8000922:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000926:	f47f af34 	bne.w	8000792 <__aeabi_dmul+0x24a>
 800092a:	ea95 0f0c 	teq	r5, ip
 800092e:	f47f af25 	bne.w	800077c <__aeabi_dmul+0x234>
 8000932:	4610      	mov	r0, r2
 8000934:	4619      	mov	r1, r3
 8000936:	e72c      	b.n	8000792 <__aeabi_dmul+0x24a>
 8000938:	ea95 0f0c 	teq	r5, ip
 800093c:	d106      	bne.n	800094c <__aeabi_ddiv+0x1b0>
 800093e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000942:	f43f aefd 	beq.w	8000740 <__aeabi_dmul+0x1f8>
 8000946:	4610      	mov	r0, r2
 8000948:	4619      	mov	r1, r3
 800094a:	e722      	b.n	8000792 <__aeabi_dmul+0x24a>
 800094c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000950:	bf18      	it	ne
 8000952:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000956:	f47f aec5 	bne.w	80006e4 <__aeabi_dmul+0x19c>
 800095a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800095e:	f47f af0d 	bne.w	800077c <__aeabi_dmul+0x234>
 8000962:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000966:	f47f aeeb 	bne.w	8000740 <__aeabi_dmul+0x1f8>
 800096a:	e712      	b.n	8000792 <__aeabi_dmul+0x24a>

0800096c <__gedf2>:
 800096c:	f04f 3cff 	mov.w	ip, #4294967295
 8000970:	e006      	b.n	8000980 <__cmpdf2+0x4>
 8000972:	bf00      	nop

08000974 <__ledf2>:
 8000974:	f04f 0c01 	mov.w	ip, #1
 8000978:	e002      	b.n	8000980 <__cmpdf2+0x4>
 800097a:	bf00      	nop

0800097c <__cmpdf2>:
 800097c:	f04f 0c01 	mov.w	ip, #1
 8000980:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000984:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000988:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800098c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000990:	bf18      	it	ne
 8000992:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000996:	d01b      	beq.n	80009d0 <__cmpdf2+0x54>
 8000998:	b001      	add	sp, #4
 800099a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800099e:	bf0c      	ite	eq
 80009a0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009a4:	ea91 0f03 	teqne	r1, r3
 80009a8:	bf02      	ittt	eq
 80009aa:	ea90 0f02 	teqeq	r0, r2
 80009ae:	2000      	moveq	r0, #0
 80009b0:	4770      	bxeq	lr
 80009b2:	f110 0f00 	cmn.w	r0, #0
 80009b6:	ea91 0f03 	teq	r1, r3
 80009ba:	bf58      	it	pl
 80009bc:	4299      	cmppl	r1, r3
 80009be:	bf08      	it	eq
 80009c0:	4290      	cmpeq	r0, r2
 80009c2:	bf2c      	ite	cs
 80009c4:	17d8      	asrcs	r0, r3, #31
 80009c6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009ca:	f040 0001 	orr.w	r0, r0, #1
 80009ce:	4770      	bx	lr
 80009d0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009d4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009d8:	d102      	bne.n	80009e0 <__cmpdf2+0x64>
 80009da:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009de:	d107      	bne.n	80009f0 <__cmpdf2+0x74>
 80009e0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009e4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e8:	d1d6      	bne.n	8000998 <__cmpdf2+0x1c>
 80009ea:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009ee:	d0d3      	beq.n	8000998 <__cmpdf2+0x1c>
 80009f0:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009f4:	4770      	bx	lr
 80009f6:	bf00      	nop

080009f8 <__aeabi_cdrcmple>:
 80009f8:	4684      	mov	ip, r0
 80009fa:	4610      	mov	r0, r2
 80009fc:	4662      	mov	r2, ip
 80009fe:	468c      	mov	ip, r1
 8000a00:	4619      	mov	r1, r3
 8000a02:	4663      	mov	r3, ip
 8000a04:	e000      	b.n	8000a08 <__aeabi_cdcmpeq>
 8000a06:	bf00      	nop

08000a08 <__aeabi_cdcmpeq>:
 8000a08:	b501      	push	{r0, lr}
 8000a0a:	f7ff ffb7 	bl	800097c <__cmpdf2>
 8000a0e:	2800      	cmp	r0, #0
 8000a10:	bf48      	it	mi
 8000a12:	f110 0f00 	cmnmi.w	r0, #0
 8000a16:	bd01      	pop	{r0, pc}

08000a18 <__aeabi_dcmpeq>:
 8000a18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a1c:	f7ff fff4 	bl	8000a08 <__aeabi_cdcmpeq>
 8000a20:	bf0c      	ite	eq
 8000a22:	2001      	moveq	r0, #1
 8000a24:	2000      	movne	r0, #0
 8000a26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a2a:	bf00      	nop

08000a2c <__aeabi_dcmplt>:
 8000a2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a30:	f7ff ffea 	bl	8000a08 <__aeabi_cdcmpeq>
 8000a34:	bf34      	ite	cc
 8000a36:	2001      	movcc	r0, #1
 8000a38:	2000      	movcs	r0, #0
 8000a3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a3e:	bf00      	nop

08000a40 <__aeabi_dcmple>:
 8000a40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a44:	f7ff ffe0 	bl	8000a08 <__aeabi_cdcmpeq>
 8000a48:	bf94      	ite	ls
 8000a4a:	2001      	movls	r0, #1
 8000a4c:	2000      	movhi	r0, #0
 8000a4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a52:	bf00      	nop

08000a54 <__aeabi_dcmpge>:
 8000a54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a58:	f7ff ffce 	bl	80009f8 <__aeabi_cdrcmple>
 8000a5c:	bf94      	ite	ls
 8000a5e:	2001      	movls	r0, #1
 8000a60:	2000      	movhi	r0, #0
 8000a62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a66:	bf00      	nop

08000a68 <__aeabi_dcmpgt>:
 8000a68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a6c:	f7ff ffc4 	bl	80009f8 <__aeabi_cdrcmple>
 8000a70:	bf34      	ite	cc
 8000a72:	2001      	movcc	r0, #1
 8000a74:	2000      	movcs	r0, #0
 8000a76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a7a:	bf00      	nop

08000a7c <__aeabi_dcmpun>:
 8000a7c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a84:	d102      	bne.n	8000a8c <__aeabi_dcmpun+0x10>
 8000a86:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8a:	d10a      	bne.n	8000aa2 <__aeabi_dcmpun+0x26>
 8000a8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a94:	d102      	bne.n	8000a9c <__aeabi_dcmpun+0x20>
 8000a96:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9a:	d102      	bne.n	8000aa2 <__aeabi_dcmpun+0x26>
 8000a9c:	f04f 0000 	mov.w	r0, #0
 8000aa0:	4770      	bx	lr
 8000aa2:	f04f 0001 	mov.w	r0, #1
 8000aa6:	4770      	bx	lr

08000aa8 <__aeabi_d2iz>:
 8000aa8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000aac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ab0:	d215      	bcs.n	8000ade <__aeabi_d2iz+0x36>
 8000ab2:	d511      	bpl.n	8000ad8 <__aeabi_d2iz+0x30>
 8000ab4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ab8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000abc:	d912      	bls.n	8000ae4 <__aeabi_d2iz+0x3c>
 8000abe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ac2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ac6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aca:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000ace:	fa23 f002 	lsr.w	r0, r3, r2
 8000ad2:	bf18      	it	ne
 8000ad4:	4240      	negne	r0, r0
 8000ad6:	4770      	bx	lr
 8000ad8:	f04f 0000 	mov.w	r0, #0
 8000adc:	4770      	bx	lr
 8000ade:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ae2:	d105      	bne.n	8000af0 <__aeabi_d2iz+0x48>
 8000ae4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ae8:	bf08      	it	eq
 8000aea:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000aee:	4770      	bx	lr
 8000af0:	f04f 0000 	mov.w	r0, #0
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop

08000af8 <__aeabi_d2f>:
 8000af8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000afc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000b00:	bf24      	itt	cs
 8000b02:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000b06:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b0a:	d90d      	bls.n	8000b28 <__aeabi_d2f+0x30>
 8000b0c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b10:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b14:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b18:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b1c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b20:	bf08      	it	eq
 8000b22:	f020 0001 	biceq.w	r0, r0, #1
 8000b26:	4770      	bx	lr
 8000b28:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b2c:	d121      	bne.n	8000b72 <__aeabi_d2f+0x7a>
 8000b2e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b32:	bfbc      	itt	lt
 8000b34:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b38:	4770      	bxlt	lr
 8000b3a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b3e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b42:	f1c2 0218 	rsb	r2, r2, #24
 8000b46:	f1c2 0c20 	rsb	ip, r2, #32
 8000b4a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b4e:	fa20 f002 	lsr.w	r0, r0, r2
 8000b52:	bf18      	it	ne
 8000b54:	f040 0001 	orrne.w	r0, r0, #1
 8000b58:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b5c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b60:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b64:	ea40 000c 	orr.w	r0, r0, ip
 8000b68:	fa23 f302 	lsr.w	r3, r3, r2
 8000b6c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b70:	e7cc      	b.n	8000b0c <__aeabi_d2f+0x14>
 8000b72:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b76:	d107      	bne.n	8000b88 <__aeabi_d2f+0x90>
 8000b78:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b7c:	bf1e      	ittt	ne
 8000b7e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b82:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b86:	4770      	bxne	lr
 8000b88:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b8c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b90:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b94:	4770      	bx	lr
 8000b96:	bf00      	nop

08000b98 <__aeabi_uldivmod>:
 8000b98:	b953      	cbnz	r3, 8000bb0 <__aeabi_uldivmod+0x18>
 8000b9a:	b94a      	cbnz	r2, 8000bb0 <__aeabi_uldivmod+0x18>
 8000b9c:	2900      	cmp	r1, #0
 8000b9e:	bf08      	it	eq
 8000ba0:	2800      	cmpeq	r0, #0
 8000ba2:	bf1c      	itt	ne
 8000ba4:	f04f 31ff 	movne.w	r1, #4294967295
 8000ba8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bac:	f000 b96e 	b.w	8000e8c <__aeabi_idiv0>
 8000bb0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bb4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bb8:	f000 f806 	bl	8000bc8 <__udivmoddi4>
 8000bbc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bc0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bc4:	b004      	add	sp, #16
 8000bc6:	4770      	bx	lr

08000bc8 <__udivmoddi4>:
 8000bc8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bcc:	9d08      	ldr	r5, [sp, #32]
 8000bce:	4604      	mov	r4, r0
 8000bd0:	468c      	mov	ip, r1
 8000bd2:	2b00      	cmp	r3, #0
 8000bd4:	f040 8083 	bne.w	8000cde <__udivmoddi4+0x116>
 8000bd8:	428a      	cmp	r2, r1
 8000bda:	4617      	mov	r7, r2
 8000bdc:	d947      	bls.n	8000c6e <__udivmoddi4+0xa6>
 8000bde:	fab2 f282 	clz	r2, r2
 8000be2:	b142      	cbz	r2, 8000bf6 <__udivmoddi4+0x2e>
 8000be4:	f1c2 0020 	rsb	r0, r2, #32
 8000be8:	fa24 f000 	lsr.w	r0, r4, r0
 8000bec:	4091      	lsls	r1, r2
 8000bee:	4097      	lsls	r7, r2
 8000bf0:	ea40 0c01 	orr.w	ip, r0, r1
 8000bf4:	4094      	lsls	r4, r2
 8000bf6:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000bfa:	0c23      	lsrs	r3, r4, #16
 8000bfc:	fbbc f6f8 	udiv	r6, ip, r8
 8000c00:	fa1f fe87 	uxth.w	lr, r7
 8000c04:	fb08 c116 	mls	r1, r8, r6, ip
 8000c08:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c0c:	fb06 f10e 	mul.w	r1, r6, lr
 8000c10:	4299      	cmp	r1, r3
 8000c12:	d909      	bls.n	8000c28 <__udivmoddi4+0x60>
 8000c14:	18fb      	adds	r3, r7, r3
 8000c16:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c1a:	f080 8119 	bcs.w	8000e50 <__udivmoddi4+0x288>
 8000c1e:	4299      	cmp	r1, r3
 8000c20:	f240 8116 	bls.w	8000e50 <__udivmoddi4+0x288>
 8000c24:	3e02      	subs	r6, #2
 8000c26:	443b      	add	r3, r7
 8000c28:	1a5b      	subs	r3, r3, r1
 8000c2a:	b2a4      	uxth	r4, r4
 8000c2c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c30:	fb08 3310 	mls	r3, r8, r0, r3
 8000c34:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c38:	fb00 fe0e 	mul.w	lr, r0, lr
 8000c3c:	45a6      	cmp	lr, r4
 8000c3e:	d909      	bls.n	8000c54 <__udivmoddi4+0x8c>
 8000c40:	193c      	adds	r4, r7, r4
 8000c42:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c46:	f080 8105 	bcs.w	8000e54 <__udivmoddi4+0x28c>
 8000c4a:	45a6      	cmp	lr, r4
 8000c4c:	f240 8102 	bls.w	8000e54 <__udivmoddi4+0x28c>
 8000c50:	3802      	subs	r0, #2
 8000c52:	443c      	add	r4, r7
 8000c54:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c58:	eba4 040e 	sub.w	r4, r4, lr
 8000c5c:	2600      	movs	r6, #0
 8000c5e:	b11d      	cbz	r5, 8000c68 <__udivmoddi4+0xa0>
 8000c60:	40d4      	lsrs	r4, r2
 8000c62:	2300      	movs	r3, #0
 8000c64:	e9c5 4300 	strd	r4, r3, [r5]
 8000c68:	4631      	mov	r1, r6
 8000c6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c6e:	b902      	cbnz	r2, 8000c72 <__udivmoddi4+0xaa>
 8000c70:	deff      	udf	#255	; 0xff
 8000c72:	fab2 f282 	clz	r2, r2
 8000c76:	2a00      	cmp	r2, #0
 8000c78:	d150      	bne.n	8000d1c <__udivmoddi4+0x154>
 8000c7a:	1bcb      	subs	r3, r1, r7
 8000c7c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000c80:	fa1f f887 	uxth.w	r8, r7
 8000c84:	2601      	movs	r6, #1
 8000c86:	fbb3 fcfe 	udiv	ip, r3, lr
 8000c8a:	0c21      	lsrs	r1, r4, #16
 8000c8c:	fb0e 331c 	mls	r3, lr, ip, r3
 8000c90:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000c94:	fb08 f30c 	mul.w	r3, r8, ip
 8000c98:	428b      	cmp	r3, r1
 8000c9a:	d907      	bls.n	8000cac <__udivmoddi4+0xe4>
 8000c9c:	1879      	adds	r1, r7, r1
 8000c9e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000ca2:	d202      	bcs.n	8000caa <__udivmoddi4+0xe2>
 8000ca4:	428b      	cmp	r3, r1
 8000ca6:	f200 80e9 	bhi.w	8000e7c <__udivmoddi4+0x2b4>
 8000caa:	4684      	mov	ip, r0
 8000cac:	1ac9      	subs	r1, r1, r3
 8000cae:	b2a3      	uxth	r3, r4
 8000cb0:	fbb1 f0fe 	udiv	r0, r1, lr
 8000cb4:	fb0e 1110 	mls	r1, lr, r0, r1
 8000cb8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000cbc:	fb08 f800 	mul.w	r8, r8, r0
 8000cc0:	45a0      	cmp	r8, r4
 8000cc2:	d907      	bls.n	8000cd4 <__udivmoddi4+0x10c>
 8000cc4:	193c      	adds	r4, r7, r4
 8000cc6:	f100 33ff 	add.w	r3, r0, #4294967295
 8000cca:	d202      	bcs.n	8000cd2 <__udivmoddi4+0x10a>
 8000ccc:	45a0      	cmp	r8, r4
 8000cce:	f200 80d9 	bhi.w	8000e84 <__udivmoddi4+0x2bc>
 8000cd2:	4618      	mov	r0, r3
 8000cd4:	eba4 0408 	sub.w	r4, r4, r8
 8000cd8:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000cdc:	e7bf      	b.n	8000c5e <__udivmoddi4+0x96>
 8000cde:	428b      	cmp	r3, r1
 8000ce0:	d909      	bls.n	8000cf6 <__udivmoddi4+0x12e>
 8000ce2:	2d00      	cmp	r5, #0
 8000ce4:	f000 80b1 	beq.w	8000e4a <__udivmoddi4+0x282>
 8000ce8:	2600      	movs	r6, #0
 8000cea:	e9c5 0100 	strd	r0, r1, [r5]
 8000cee:	4630      	mov	r0, r6
 8000cf0:	4631      	mov	r1, r6
 8000cf2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cf6:	fab3 f683 	clz	r6, r3
 8000cfa:	2e00      	cmp	r6, #0
 8000cfc:	d14a      	bne.n	8000d94 <__udivmoddi4+0x1cc>
 8000cfe:	428b      	cmp	r3, r1
 8000d00:	d302      	bcc.n	8000d08 <__udivmoddi4+0x140>
 8000d02:	4282      	cmp	r2, r0
 8000d04:	f200 80b8 	bhi.w	8000e78 <__udivmoddi4+0x2b0>
 8000d08:	1a84      	subs	r4, r0, r2
 8000d0a:	eb61 0103 	sbc.w	r1, r1, r3
 8000d0e:	2001      	movs	r0, #1
 8000d10:	468c      	mov	ip, r1
 8000d12:	2d00      	cmp	r5, #0
 8000d14:	d0a8      	beq.n	8000c68 <__udivmoddi4+0xa0>
 8000d16:	e9c5 4c00 	strd	r4, ip, [r5]
 8000d1a:	e7a5      	b.n	8000c68 <__udivmoddi4+0xa0>
 8000d1c:	f1c2 0320 	rsb	r3, r2, #32
 8000d20:	fa20 f603 	lsr.w	r6, r0, r3
 8000d24:	4097      	lsls	r7, r2
 8000d26:	fa01 f002 	lsl.w	r0, r1, r2
 8000d2a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d2e:	40d9      	lsrs	r1, r3
 8000d30:	4330      	orrs	r0, r6
 8000d32:	0c03      	lsrs	r3, r0, #16
 8000d34:	fbb1 f6fe 	udiv	r6, r1, lr
 8000d38:	fa1f f887 	uxth.w	r8, r7
 8000d3c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000d40:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d44:	fb06 f108 	mul.w	r1, r6, r8
 8000d48:	4299      	cmp	r1, r3
 8000d4a:	fa04 f402 	lsl.w	r4, r4, r2
 8000d4e:	d909      	bls.n	8000d64 <__udivmoddi4+0x19c>
 8000d50:	18fb      	adds	r3, r7, r3
 8000d52:	f106 3cff 	add.w	ip, r6, #4294967295
 8000d56:	f080 808d 	bcs.w	8000e74 <__udivmoddi4+0x2ac>
 8000d5a:	4299      	cmp	r1, r3
 8000d5c:	f240 808a 	bls.w	8000e74 <__udivmoddi4+0x2ac>
 8000d60:	3e02      	subs	r6, #2
 8000d62:	443b      	add	r3, r7
 8000d64:	1a5b      	subs	r3, r3, r1
 8000d66:	b281      	uxth	r1, r0
 8000d68:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d6c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d70:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d74:	fb00 f308 	mul.w	r3, r0, r8
 8000d78:	428b      	cmp	r3, r1
 8000d7a:	d907      	bls.n	8000d8c <__udivmoddi4+0x1c4>
 8000d7c:	1879      	adds	r1, r7, r1
 8000d7e:	f100 3cff 	add.w	ip, r0, #4294967295
 8000d82:	d273      	bcs.n	8000e6c <__udivmoddi4+0x2a4>
 8000d84:	428b      	cmp	r3, r1
 8000d86:	d971      	bls.n	8000e6c <__udivmoddi4+0x2a4>
 8000d88:	3802      	subs	r0, #2
 8000d8a:	4439      	add	r1, r7
 8000d8c:	1acb      	subs	r3, r1, r3
 8000d8e:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000d92:	e778      	b.n	8000c86 <__udivmoddi4+0xbe>
 8000d94:	f1c6 0c20 	rsb	ip, r6, #32
 8000d98:	fa03 f406 	lsl.w	r4, r3, r6
 8000d9c:	fa22 f30c 	lsr.w	r3, r2, ip
 8000da0:	431c      	orrs	r4, r3
 8000da2:	fa20 f70c 	lsr.w	r7, r0, ip
 8000da6:	fa01 f306 	lsl.w	r3, r1, r6
 8000daa:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000dae:	fa21 f10c 	lsr.w	r1, r1, ip
 8000db2:	431f      	orrs	r7, r3
 8000db4:	0c3b      	lsrs	r3, r7, #16
 8000db6:	fbb1 f9fe 	udiv	r9, r1, lr
 8000dba:	fa1f f884 	uxth.w	r8, r4
 8000dbe:	fb0e 1119 	mls	r1, lr, r9, r1
 8000dc2:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000dc6:	fb09 fa08 	mul.w	sl, r9, r8
 8000dca:	458a      	cmp	sl, r1
 8000dcc:	fa02 f206 	lsl.w	r2, r2, r6
 8000dd0:	fa00 f306 	lsl.w	r3, r0, r6
 8000dd4:	d908      	bls.n	8000de8 <__udivmoddi4+0x220>
 8000dd6:	1861      	adds	r1, r4, r1
 8000dd8:	f109 30ff 	add.w	r0, r9, #4294967295
 8000ddc:	d248      	bcs.n	8000e70 <__udivmoddi4+0x2a8>
 8000dde:	458a      	cmp	sl, r1
 8000de0:	d946      	bls.n	8000e70 <__udivmoddi4+0x2a8>
 8000de2:	f1a9 0902 	sub.w	r9, r9, #2
 8000de6:	4421      	add	r1, r4
 8000de8:	eba1 010a 	sub.w	r1, r1, sl
 8000dec:	b2bf      	uxth	r7, r7
 8000dee:	fbb1 f0fe 	udiv	r0, r1, lr
 8000df2:	fb0e 1110 	mls	r1, lr, r0, r1
 8000df6:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000dfa:	fb00 f808 	mul.w	r8, r0, r8
 8000dfe:	45b8      	cmp	r8, r7
 8000e00:	d907      	bls.n	8000e12 <__udivmoddi4+0x24a>
 8000e02:	19e7      	adds	r7, r4, r7
 8000e04:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e08:	d22e      	bcs.n	8000e68 <__udivmoddi4+0x2a0>
 8000e0a:	45b8      	cmp	r8, r7
 8000e0c:	d92c      	bls.n	8000e68 <__udivmoddi4+0x2a0>
 8000e0e:	3802      	subs	r0, #2
 8000e10:	4427      	add	r7, r4
 8000e12:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e16:	eba7 0708 	sub.w	r7, r7, r8
 8000e1a:	fba0 8902 	umull	r8, r9, r0, r2
 8000e1e:	454f      	cmp	r7, r9
 8000e20:	46c6      	mov	lr, r8
 8000e22:	4649      	mov	r1, r9
 8000e24:	d31a      	bcc.n	8000e5c <__udivmoddi4+0x294>
 8000e26:	d017      	beq.n	8000e58 <__udivmoddi4+0x290>
 8000e28:	b15d      	cbz	r5, 8000e42 <__udivmoddi4+0x27a>
 8000e2a:	ebb3 020e 	subs.w	r2, r3, lr
 8000e2e:	eb67 0701 	sbc.w	r7, r7, r1
 8000e32:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000e36:	40f2      	lsrs	r2, r6
 8000e38:	ea4c 0202 	orr.w	r2, ip, r2
 8000e3c:	40f7      	lsrs	r7, r6
 8000e3e:	e9c5 2700 	strd	r2, r7, [r5]
 8000e42:	2600      	movs	r6, #0
 8000e44:	4631      	mov	r1, r6
 8000e46:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e4a:	462e      	mov	r6, r5
 8000e4c:	4628      	mov	r0, r5
 8000e4e:	e70b      	b.n	8000c68 <__udivmoddi4+0xa0>
 8000e50:	4606      	mov	r6, r0
 8000e52:	e6e9      	b.n	8000c28 <__udivmoddi4+0x60>
 8000e54:	4618      	mov	r0, r3
 8000e56:	e6fd      	b.n	8000c54 <__udivmoddi4+0x8c>
 8000e58:	4543      	cmp	r3, r8
 8000e5a:	d2e5      	bcs.n	8000e28 <__udivmoddi4+0x260>
 8000e5c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000e60:	eb69 0104 	sbc.w	r1, r9, r4
 8000e64:	3801      	subs	r0, #1
 8000e66:	e7df      	b.n	8000e28 <__udivmoddi4+0x260>
 8000e68:	4608      	mov	r0, r1
 8000e6a:	e7d2      	b.n	8000e12 <__udivmoddi4+0x24a>
 8000e6c:	4660      	mov	r0, ip
 8000e6e:	e78d      	b.n	8000d8c <__udivmoddi4+0x1c4>
 8000e70:	4681      	mov	r9, r0
 8000e72:	e7b9      	b.n	8000de8 <__udivmoddi4+0x220>
 8000e74:	4666      	mov	r6, ip
 8000e76:	e775      	b.n	8000d64 <__udivmoddi4+0x19c>
 8000e78:	4630      	mov	r0, r6
 8000e7a:	e74a      	b.n	8000d12 <__udivmoddi4+0x14a>
 8000e7c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000e80:	4439      	add	r1, r7
 8000e82:	e713      	b.n	8000cac <__udivmoddi4+0xe4>
 8000e84:	3802      	subs	r0, #2
 8000e86:	443c      	add	r4, r7
 8000e88:	e724      	b.n	8000cd4 <__udivmoddi4+0x10c>
 8000e8a:	bf00      	nop

08000e8c <__aeabi_idiv0>:
 8000e8c:	4770      	bx	lr
 8000e8e:	bf00      	nop

08000e90 <APP_Get_CAN1_Data>:
 * @param[in]:    Header: the header get from BSP layer
 * @param[in]:    DATA[]: The data get from BSP layer
 * @retval:       None
 */

void APP_Get_CAN1_Data(CAN_RxHeaderTypeDef *Header, uint8_t DATA[]) {
 8000e90:	b580      	push	{r7, lr}
 8000e92:	b086      	sub	sp, #24
 8000e94:	af00      	add	r7, sp, #0
 8000e96:	6078      	str	r0, [r7, #4]
 8000e98:	6039      	str	r1, [r7, #0]
	CenterBoard_CMD Command[4];

	switch (Header->StdId) {
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	681b      	ldr	r3, [r3, #0]
 8000e9e:	f240 4202 	movw	r2, #1026	; 0x402
 8000ea2:	4293      	cmp	r3, r2
 8000ea4:	d803      	bhi.n	8000eae <APP_Get_CAN1_Data+0x1e>
 8000ea6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000eaa:	d805      	bhi.n	8000eb8 <APP_Get_CAN1_Data+0x28>
	case LeftLower_Ang_ID: {
		APP_Get_SideBoard_Data((Header->StdId - LeftLower_Spd_ID), 1, DATA);
		break;
	}
	default:
		break;
 8000eac:	e01a      	b.n	8000ee4 <APP_Get_CAN1_Data+0x54>
 8000eae:	f2a3 4303 	subw	r3, r3, #1027	; 0x403
	switch (Header->StdId) {
 8000eb2:	2b01      	cmp	r3, #1
 8000eb4:	d816      	bhi.n	8000ee4 <APP_Get_CAN1_Data+0x54>
 8000eb6:	e00a      	b.n	8000ece <APP_Get_CAN1_Data+0x3e>
		APP_Get_SideBoard_Data((Header->StdId - LeftUpper_Spd_ID), 0, DATA);
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	681b      	ldr	r3, [r3, #0]
 8000ebc:	b2db      	uxtb	r3, r3
 8000ebe:	3b01      	subs	r3, #1
 8000ec0:	b2db      	uxtb	r3, r3
 8000ec2:	683a      	ldr	r2, [r7, #0]
 8000ec4:	2100      	movs	r1, #0
 8000ec6:	4618      	mov	r0, r3
 8000ec8:	f000 f842 	bl	8000f50 <APP_Get_SideBoard_Data>
		break;
 8000ecc:	e00b      	b.n	8000ee6 <APP_Get_CAN1_Data+0x56>
		APP_Get_SideBoard_Data((Header->StdId - LeftLower_Spd_ID), 1, DATA);
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	681b      	ldr	r3, [r3, #0]
 8000ed2:	b2db      	uxtb	r3, r3
 8000ed4:	3b03      	subs	r3, #3
 8000ed6:	b2db      	uxtb	r3, r3
 8000ed8:	683a      	ldr	r2, [r7, #0]
 8000eda:	2101      	movs	r1, #1
 8000edc:	4618      	mov	r0, r3
 8000ede:	f000 f837 	bl	8000f50 <APP_Get_SideBoard_Data>
		break;
 8000ee2:	e000      	b.n	8000ee6 <APP_Get_CAN1_Data+0x56>
		break;
 8000ee4:	bf00      	nop
	}
}
 8000ee6:	bf00      	nop
 8000ee8:	3718      	adds	r7, #24
 8000eea:	46bd      	mov	sp, r7
 8000eec:	bd80      	pop	{r7, pc}

08000eee <APP_Get_CAN2_Data>:

void APP_Get_CAN2_Data(CAN_RxHeaderTypeDef *Header, uint8_t DATA[]) {
 8000eee:	b580      	push	{r7, lr}
 8000ef0:	b082      	sub	sp, #8
 8000ef2:	af00      	add	r7, sp, #0
 8000ef4:	6078      	str	r0, [r7, #4]
 8000ef6:	6039      	str	r1, [r7, #0]
	switch (Header->StdId) {
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	681b      	ldr	r3, [r3, #0]
 8000efc:	f240 4206 	movw	r2, #1030	; 0x406
 8000f00:	4293      	cmp	r3, r2
 8000f02:	d804      	bhi.n	8000f0e <APP_Get_CAN2_Data+0x20>
 8000f04:	f240 4205 	movw	r2, #1029	; 0x405
 8000f08:	4293      	cmp	r3, r2
 8000f0a:	d205      	bcs.n	8000f18 <APP_Get_CAN2_Data+0x2a>
	case RightLower_Ang_ID: {
		APP_Get_SideBoard_Data((Header->StdId - RightLower_Spd_ID), 3, DATA);
		break;
	}
	default:
		break;
 8000f0c:	e01a      	b.n	8000f44 <APP_Get_CAN2_Data+0x56>
 8000f0e:	f2a3 4307 	subw	r3, r3, #1031	; 0x407
	switch (Header->StdId) {
 8000f12:	2b01      	cmp	r3, #1
 8000f14:	d816      	bhi.n	8000f44 <APP_Get_CAN2_Data+0x56>
 8000f16:	e00a      	b.n	8000f2e <APP_Get_CAN2_Data+0x40>
		APP_Get_SideBoard_Data((Header->StdId - RightUpper_Spd_ID), 2, DATA);
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	681b      	ldr	r3, [r3, #0]
 8000f1c:	b2db      	uxtb	r3, r3
 8000f1e:	3b05      	subs	r3, #5
 8000f20:	b2db      	uxtb	r3, r3
 8000f22:	683a      	ldr	r2, [r7, #0]
 8000f24:	2102      	movs	r1, #2
 8000f26:	4618      	mov	r0, r3
 8000f28:	f000 f812 	bl	8000f50 <APP_Get_SideBoard_Data>
		break;
 8000f2c:	e00b      	b.n	8000f46 <APP_Get_CAN2_Data+0x58>
		APP_Get_SideBoard_Data((Header->StdId - RightLower_Spd_ID), 3, DATA);
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	681b      	ldr	r3, [r3, #0]
 8000f32:	b2db      	uxtb	r3, r3
 8000f34:	3b07      	subs	r3, #7
 8000f36:	b2db      	uxtb	r3, r3
 8000f38:	683a      	ldr	r2, [r7, #0]
 8000f3a:	2103      	movs	r1, #3
 8000f3c:	4618      	mov	r0, r3
 8000f3e:	f000 f807 	bl	8000f50 <APP_Get_SideBoard_Data>
		break;
 8000f42:	e000      	b.n	8000f46 <APP_Get_CAN2_Data+0x58>
		break;
 8000f44:	bf00      	nop
	}
}
 8000f46:	bf00      	nop
 8000f48:	3708      	adds	r7, #8
 8000f4a:	46bd      	mov	sp, r7
 8000f4c:	bd80      	pop	{r7, pc}
	...

08000f50 <APP_Get_SideBoard_Data>:


void APP_Get_SideBoard_Data(uint8_t MotorIdx, uint16_t SideBoardIdx, uint8_t CAN_DATA[]) {
 8000f50:	b490      	push	{r4, r7}
 8000f52:	b082      	sub	sp, #8
 8000f54:	af00      	add	r7, sp, #0
 8000f56:	4603      	mov	r3, r0
 8000f58:	603a      	str	r2, [r7, #0]
 8000f5a:	71fb      	strb	r3, [r7, #7]
 8000f5c:	460b      	mov	r3, r1
 8000f5e:	80bb      	strh	r3, [r7, #4]
	CenterBoard.MotorRxMsgRaw[MotorIdx][SideBoardIdx].AngRaw = (CAN_DATA[0] << 8) + CAN_DATA[1];
 8000f60:	683b      	ldr	r3, [r7, #0]
 8000f62:	781b      	ldrb	r3, [r3, #0]
 8000f64:	b29b      	uxth	r3, r3
 8000f66:	021b      	lsls	r3, r3, #8
 8000f68:	b29a      	uxth	r2, r3
 8000f6a:	683b      	ldr	r3, [r7, #0]
 8000f6c:	3301      	adds	r3, #1
 8000f6e:	781b      	ldrb	r3, [r3, #0]
 8000f70:	b29b      	uxth	r3, r3
 8000f72:	4413      	add	r3, r2
 8000f74:	b29a      	uxth	r2, r3
 8000f76:	79f9      	ldrb	r1, [r7, #7]
 8000f78:	88bb      	ldrh	r3, [r7, #4]
 8000f7a:	b214      	sxth	r4, r2
 8000f7c:	4832      	ldr	r0, [pc, #200]	; (8001048 <APP_Get_SideBoard_Data+0xf8>)
 8000f7e:	461a      	mov	r2, r3
 8000f80:	00d2      	lsls	r2, r2, #3
 8000f82:	441a      	add	r2, r3
 8000f84:	0093      	lsls	r3, r2, #2
 8000f86:	461a      	mov	r2, r3
 8000f88:	460b      	mov	r3, r1
 8000f8a:	00db      	lsls	r3, r3, #3
 8000f8c:	440b      	add	r3, r1
 8000f8e:	011b      	lsls	r3, r3, #4
 8000f90:	4413      	add	r3, r2
 8000f92:	4403      	add	r3, r0
 8000f94:	3320      	adds	r3, #32
 8000f96:	4622      	mov	r2, r4
 8000f98:	801a      	strh	r2, [r3, #0]
	CenterBoard.MotorRxMsgRaw[MotorIdx][SideBoardIdx].SpdRaw = (CAN_DATA[2] << 8) + CAN_DATA[3];
 8000f9a:	683b      	ldr	r3, [r7, #0]
 8000f9c:	3302      	adds	r3, #2
 8000f9e:	781b      	ldrb	r3, [r3, #0]
 8000fa0:	b29b      	uxth	r3, r3
 8000fa2:	021b      	lsls	r3, r3, #8
 8000fa4:	b29a      	uxth	r2, r3
 8000fa6:	683b      	ldr	r3, [r7, #0]
 8000fa8:	3303      	adds	r3, #3
 8000faa:	781b      	ldrb	r3, [r3, #0]
 8000fac:	b29b      	uxth	r3, r3
 8000fae:	4413      	add	r3, r2
 8000fb0:	b29a      	uxth	r2, r3
 8000fb2:	79f9      	ldrb	r1, [r7, #7]
 8000fb4:	88bb      	ldrh	r3, [r7, #4]
 8000fb6:	b214      	sxth	r4, r2
 8000fb8:	4823      	ldr	r0, [pc, #140]	; (8001048 <APP_Get_SideBoard_Data+0xf8>)
 8000fba:	461a      	mov	r2, r3
 8000fbc:	00d2      	lsls	r2, r2, #3
 8000fbe:	441a      	add	r2, r3
 8000fc0:	0093      	lsls	r3, r2, #2
 8000fc2:	461a      	mov	r2, r3
 8000fc4:	460b      	mov	r3, r1
 8000fc6:	00db      	lsls	r3, r3, #3
 8000fc8:	440b      	add	r3, r1
 8000fca:	011b      	lsls	r3, r3, #4
 8000fcc:	4413      	add	r3, r2
 8000fce:	4403      	add	r3, r0
 8000fd0:	3322      	adds	r3, #34	; 0x22
 8000fd2:	4622      	mov	r2, r4
 8000fd4:	801a      	strh	r2, [r3, #0]
	CenterBoard.MotorRxMsgRaw[MotorIdx][SideBoardIdx].TorqueCurrentRaw = (CAN_DATA[4] << 8)+ CAN_DATA[5];
 8000fd6:	683b      	ldr	r3, [r7, #0]
 8000fd8:	3304      	adds	r3, #4
 8000fda:	781b      	ldrb	r3, [r3, #0]
 8000fdc:	b29b      	uxth	r3, r3
 8000fde:	021b      	lsls	r3, r3, #8
 8000fe0:	b29a      	uxth	r2, r3
 8000fe2:	683b      	ldr	r3, [r7, #0]
 8000fe4:	3305      	adds	r3, #5
 8000fe6:	781b      	ldrb	r3, [r3, #0]
 8000fe8:	b29b      	uxth	r3, r3
 8000fea:	4413      	add	r3, r2
 8000fec:	b29a      	uxth	r2, r3
 8000fee:	79f9      	ldrb	r1, [r7, #7]
 8000ff0:	88bb      	ldrh	r3, [r7, #4]
 8000ff2:	b214      	sxth	r4, r2
 8000ff4:	4814      	ldr	r0, [pc, #80]	; (8001048 <APP_Get_SideBoard_Data+0xf8>)
 8000ff6:	461a      	mov	r2, r3
 8000ff8:	00d2      	lsls	r2, r2, #3
 8000ffa:	441a      	add	r2, r3
 8000ffc:	0093      	lsls	r3, r2, #2
 8000ffe:	461a      	mov	r2, r3
 8001000:	460b      	mov	r3, r1
 8001002:	00db      	lsls	r3, r3, #3
 8001004:	440b      	add	r3, r1
 8001006:	011b      	lsls	r3, r3, #4
 8001008:	4413      	add	r3, r2
 800100a:	4403      	add	r3, r0
 800100c:	3324      	adds	r3, #36	; 0x24
 800100e:	4622      	mov	r2, r4
 8001010:	801a      	strh	r2, [r3, #0]
	CenterBoard.MotorRxMsgRaw[MotorIdx][SideBoardIdx].TemperatureRaw = (CAN_DATA[6] << 8)+ CAN_DATA[7];
 8001012:	683b      	ldr	r3, [r7, #0]
 8001014:	3307      	adds	r3, #7
 8001016:	781a      	ldrb	r2, [r3, #0]
 8001018:	79f9      	ldrb	r1, [r7, #7]
 800101a:	88bb      	ldrh	r3, [r7, #4]
 800101c:	b254      	sxtb	r4, r2
 800101e:	480a      	ldr	r0, [pc, #40]	; (8001048 <APP_Get_SideBoard_Data+0xf8>)
 8001020:	461a      	mov	r2, r3
 8001022:	00d2      	lsls	r2, r2, #3
 8001024:	441a      	add	r2, r3
 8001026:	0093      	lsls	r3, r2, #2
 8001028:	461a      	mov	r2, r3
 800102a:	460b      	mov	r3, r1
 800102c:	00db      	lsls	r3, r3, #3
 800102e:	440b      	add	r3, r1
 8001030:	011b      	lsls	r3, r3, #4
 8001032:	4413      	add	r3, r2
 8001034:	4403      	add	r3, r0
 8001036:	3326      	adds	r3, #38	; 0x26
 8001038:	4622      	mov	r2, r4
 800103a:	701a      	strb	r2, [r3, #0]
}
 800103c:	bf00      	nop
 800103e:	3708      	adds	r7, #8
 8001040:	46bd      	mov	sp, r7
 8001042:	bc90      	pop	{r4, r7}
 8001044:	4770      	bx	lr
 8001046:	bf00      	nop
 8001048:	20004a1c 	.word	0x20004a1c

0800104c <BSP_Send_Msg_to_SideBoard>:


void BSP_Send_Msg_to_SideBoard(CAN_HandleTypeDef *hcan, uint16_t CommandID, CenterBoard_CMD Command[]) {
 800104c:	b580      	push	{r7, lr}
 800104e:	b08e      	sub	sp, #56	; 0x38
 8001050:	af00      	add	r7, sp, #0
 8001052:	60f8      	str	r0, [r7, #12]
 8001054:	460b      	mov	r3, r1
 8001056:	607a      	str	r2, [r7, #4]
 8001058:	817b      	strh	r3, [r7, #10]
	uint32_t send_mail_box;
	CAN_TxHeaderTypeDef TxHeader;
	uint8_t DATA[8] = { 0 };
 800105a:	2300      	movs	r3, #0
 800105c:	617b      	str	r3, [r7, #20]
 800105e:	2300      	movs	r3, #0
 8001060:	61bb      	str	r3, [r7, #24]

	//Header Information
	TxHeader.StdId = CommandID;//0x3FF
 8001062:	897b      	ldrh	r3, [r7, #10]
 8001064:	61fb      	str	r3, [r7, #28]
	TxHeader.IDE = CAN_ID_STD;
 8001066:	2300      	movs	r3, #0
 8001068:	627b      	str	r3, [r7, #36]	; 0x24
	TxHeader.RTR = CAN_RTR_DATA;
 800106a:	2300      	movs	r3, #0
 800106c:	62bb      	str	r3, [r7, #40]	; 0x28
	TxHeader.DLC = 0x08;
 800106e:	2308      	movs	r3, #8
 8001070:	62fb      	str	r3, [r7, #44]	; 0x2c
	if(hcan == &hcan1){
 8001072:	68fb      	ldr	r3, [r7, #12]
 8001074:	4a3e      	ldr	r2, [pc, #248]	; (8001170 <BSP_Send_Msg_to_SideBoard+0x124>)
 8001076:	4293      	cmp	r3, r2
 8001078:	d134      	bne.n	80010e4 <BSP_Send_Msg_to_SideBoard+0x98>
	//The data send to upper board
	DATA[0] = Command[0].CurrentSet_Ang >> 8;
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001080:	121b      	asrs	r3, r3, #8
 8001082:	b21b      	sxth	r3, r3
 8001084:	b2db      	uxtb	r3, r3
 8001086:	753b      	strb	r3, [r7, #20]
	DATA[1] = Command[0].CurrentSet_Ang;
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800108e:	b2db      	uxtb	r3, r3
 8001090:	757b      	strb	r3, [r7, #21]
	DATA[2] = Command[0].CurrentSet_Spd >> 8;
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001098:	121b      	asrs	r3, r3, #8
 800109a:	b21b      	sxth	r3, r3
 800109c:	b2db      	uxtb	r3, r3
 800109e:	75bb      	strb	r3, [r7, #22]
	DATA[3] = Command[0].CurrentSet_Spd;
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80010a6:	b2db      	uxtb	r3, r3
 80010a8:	75fb      	strb	r3, [r7, #23]

	//The data send to lower board
	DATA[4] = Command[2].CurrentSet_Ang >> 8;
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	3308      	adds	r3, #8
 80010ae:	f9b3 3000 	ldrsh.w	r3, [r3]
 80010b2:	121b      	asrs	r3, r3, #8
 80010b4:	b21b      	sxth	r3, r3
 80010b6:	b2db      	uxtb	r3, r3
 80010b8:	763b      	strb	r3, [r7, #24]
	DATA[5] = Command[2].CurrentSet_Ang;
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	3308      	adds	r3, #8
 80010be:	f9b3 3000 	ldrsh.w	r3, [r3]
 80010c2:	b2db      	uxtb	r3, r3
 80010c4:	767b      	strb	r3, [r7, #25]
	DATA[6] = Command[2].CurrentSet_Spd >> 8;
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	3308      	adds	r3, #8
 80010ca:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80010ce:	121b      	asrs	r3, r3, #8
 80010d0:	b21b      	sxth	r3, r3
 80010d2:	b2db      	uxtb	r3, r3
 80010d4:	76bb      	strb	r3, [r7, #26]
	DATA[7] = Command[2].CurrentSet_Spd;
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	3308      	adds	r3, #8
 80010da:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80010de:	b2db      	uxtb	r3, r3
 80010e0:	76fb      	strb	r3, [r7, #27]
 80010e2:	e037      	b.n	8001154 <BSP_Send_Msg_to_SideBoard+0x108>
	}
	else{
	//The data send to upper board
	DATA[0] = Command[1].CurrentSet_Ang >> 8;
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	3304      	adds	r3, #4
 80010e8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80010ec:	121b      	asrs	r3, r3, #8
 80010ee:	b21b      	sxth	r3, r3
 80010f0:	b2db      	uxtb	r3, r3
 80010f2:	753b      	strb	r3, [r7, #20]
	DATA[1] = Command[1].CurrentSet_Ang;
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	3304      	adds	r3, #4
 80010f8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80010fc:	b2db      	uxtb	r3, r3
 80010fe:	757b      	strb	r3, [r7, #21]
	DATA[2] = Command[1].CurrentSet_Spd >> 8;
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	3304      	adds	r3, #4
 8001104:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001108:	121b      	asrs	r3, r3, #8
 800110a:	b21b      	sxth	r3, r3
 800110c:	b2db      	uxtb	r3, r3
 800110e:	75bb      	strb	r3, [r7, #22]
	DATA[3] = Command[1].CurrentSet_Spd;
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	3304      	adds	r3, #4
 8001114:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001118:	b2db      	uxtb	r3, r3
 800111a:	75fb      	strb	r3, [r7, #23]

	//The data send to lower board
	DATA[4] = Command[3].CurrentSet_Ang >> 8;
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	330c      	adds	r3, #12
 8001120:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001124:	121b      	asrs	r3, r3, #8
 8001126:	b21b      	sxth	r3, r3
 8001128:	b2db      	uxtb	r3, r3
 800112a:	763b      	strb	r3, [r7, #24]
	DATA[5] = Command[3].CurrentSet_Ang;
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	330c      	adds	r3, #12
 8001130:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001134:	b2db      	uxtb	r3, r3
 8001136:	767b      	strb	r3, [r7, #25]
	DATA[6] = Command[3].CurrentSet_Spd >> 8;
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	330c      	adds	r3, #12
 800113c:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001140:	121b      	asrs	r3, r3, #8
 8001142:	b21b      	sxth	r3, r3
 8001144:	b2db      	uxtb	r3, r3
 8001146:	76bb      	strb	r3, [r7, #26]
	DATA[7] = Command[3].CurrentSet_Spd;
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	330c      	adds	r3, #12
 800114c:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001150:	b2db      	uxtb	r3, r3
 8001152:	76fb      	strb	r3, [r7, #27]
	}

	HAL_CAN_AddTxMessage(hcan, &TxHeader, DATA, &send_mail_box);
 8001154:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001158:	f107 0214 	add.w	r2, r7, #20
 800115c:	f107 011c 	add.w	r1, r7, #28
 8001160:	68f8      	ldr	r0, [r7, #12]
 8001162:	f002 fb47 	bl	80037f4 <HAL_CAN_AddTxMessage>
}
 8001166:	bf00      	nop
 8001168:	3738      	adds	r7, #56	; 0x38
 800116a:	46bd      	mov	sp, r7
 800116c:	bd80      	pop	{r7, pc}
 800116e:	bf00      	nop
 8001170:	20004c94 	.word	0x20004c94

08001174 <get_INS_angle_point>:
  * @brief          get the euler angle, 0:yaw, 1:pitch, 2:roll, unit: rad
  * @param[in]      none
  * @retval         the pointer of INS_angle
  */
const float32_t get_INS_angle_point(void)
{
 8001174:	b480      	push	{r7}
 8001176:	af00      	add	r7, sp, #0
//    return INS_angle;
	return INS_angle[0];
 8001178:	4b04      	ldr	r3, [pc, #16]	; (800118c <get_INS_angle_point+0x18>)
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	ee07 3a90 	vmov	s15, r3
}
 8001180:	eeb0 0a67 	vmov.f32	s0, s15
 8001184:	46bd      	mov	sp, r7
 8001186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800118a:	4770      	bx	lr
 800118c:	20000094 	.word	0x20000094

08001190 <chassis_task>:
  *					->send all current command through CAN
  * @param[in]      pvParameters: null
  * @retval         none
  */
void chassis_task(void *pvParameters)
{
 8001190:	b580      	push	{r7, lr}
 8001192:	b08a      	sub	sp, #40	; 0x28
 8001194:	af00      	add	r7, sp, #0
 8001196:	6078      	str	r0, [r7, #4]
    //wait for a period initially
    vTaskDelay(CHASSIS_TASK_INIT_TIME);
 8001198:	f240 1065 	movw	r0, #357	; 0x165
 800119c:	f00a fa64 	bl	800b668 <vTaskDelay>

    //chassis initialization
    chassis_init(&chassis_move);
 80011a0:	4812      	ldr	r0, [pc, #72]	; (80011ec <chassis_task+0x5c>)
 80011a2:	f000 f82d 	bl	8001200 <chassis_init>
//
//        //when mode changes, some data may needs changing
//        chassis_mode_change_control_transit(&chassis_move);

        //chassis data update
        chassis_feedback_update(&chassis_move);
 80011a6:	4811      	ldr	r0, [pc, #68]	; (80011ec <chassis_task+0x5c>)
 80011a8:	f000 f841 	bl	800122e <chassis_feedback_update>

        chassis_rc_to_control_vector(&chassis_move);
 80011ac:	480f      	ldr	r0, [pc, #60]	; (80011ec <chassis_task+0x5c>)
 80011ae:	f000 f85f 	bl	8001270 <chassis_rc_to_control_vector>

        //set chassis control set-point
        chassis_set_control(&chassis_move);
 80011b2:	480e      	ldr	r0, [pc, #56]	; (80011ec <chassis_task+0x5c>)
 80011b4:	f000 f920 	bl	80013f8 <chassis_set_control>

        BSP_Send_Msg_to_SideBoard(&hcan1, CenterBoard_CMD_ID, CenterBoard_To_SideBoard_Data);
 80011b8:	4a0d      	ldr	r2, [pc, #52]	; (80011f0 <chassis_task+0x60>)
 80011ba:	f240 31ff 	movw	r1, #1023	; 0x3ff
 80011be:	480d      	ldr	r0, [pc, #52]	; (80011f4 <chassis_task+0x64>)
 80011c0:	f7ff ff44 	bl	800104c <BSP_Send_Msg_to_SideBoard>
        BSP_Send_Msg_to_SideBoard(&hcan2, CenterBoard_CMD_ID, CenterBoard_To_SideBoard_Data);  //send message
 80011c4:	4a0a      	ldr	r2, [pc, #40]	; (80011f0 <chassis_task+0x60>)
 80011c6:	f240 31ff 	movw	r1, #1023	; 0x3ff
 80011ca:	480b      	ldr	r0, [pc, #44]	; (80011f8 <chassis_task+0x68>)
 80011cc:	f7ff ff3e 	bl	800104c <BSP_Send_Msg_to_SideBoard>
        //OS delay
        vTaskDelay(CHASSIS_CONTROL_TIME_MS);
 80011d0:	2002      	movs	r0, #2
 80011d2:	f00a fa49 	bl	800b668 <vTaskDelay>

#if INCLUDE_uxTaskGetStackHighWaterMark
        chassis_high_water = uxTaskGetStackHighWaterMark(NULL);
 80011d6:	2000      	movs	r0, #0
 80011d8:	f00a fe8e 	bl	800bef8 <uxTaskGetStackHighWaterMark>
 80011dc:	4603      	mov	r3, r0
 80011de:	4a07      	ldr	r2, [pc, #28]	; (80011fc <chassis_task+0x6c>)
 80011e0:	6013      	str	r3, [r2, #0]
//            }//end of "else"
//
//        }//end of detect-pending "if"

        //OS delay
        vTaskDelay(CHASSIS_CONTROL_TIME_MS);
 80011e2:	2002      	movs	r0, #2
 80011e4:	f00a fa40 	bl	800b668 <vTaskDelay>
    {
 80011e8:	e7dd      	b.n	80011a6 <chassis_task+0x16>
 80011ea:	bf00      	nop
 80011ec:	20004b7c 	.word	0x20004b7c
 80011f0:	20004b68 	.word	0x20004b68
 80011f4:	20004c94 	.word	0x20004c94
 80011f8:	20004c6c 	.word	0x20004c6c
 80011fc:	20004b78 	.word	0x20004b78

08001200 <chassis_init>:
  *                 ->maximum speed for chassis and each motor initialization
  * @param[out]     chassis_move_init: "chassis_move" pointer
  * @retval         none
  */
static void chassis_init(chassis_move_t *chassis_move_init)
{
 8001200:	b580      	push	{r7, lr}
 8001202:	b082      	sub	sp, #8
 8001204:	af00      	add	r7, sp, #0
 8001206:	6078      	str	r0, [r7, #4]
    if (chassis_move_init == NULL)
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	2b00      	cmp	r3, #0
 800120c:	d00b      	beq.n	8001226 <chassis_init+0x26>
    {
        return;
    }

    //get remote control data pointer
    chassis_move_init->chassis_RC = get_remote_control_point();
 800120e:	f000 fb49 	bl	80018a4 <get_remote_control_point>
 8001212:	4602      	mov	r2, r0
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	601a      	str	r2, [r3, #0]
    
    // initialize of chassis mode (for test only, other modes would be added later)
    chassis_move_init->chassis_mode = CHASSIS_VECTOR_FOLLOW_GIMBAL_YAW;
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	2200      	movs	r2, #0
 800121c:	711a      	strb	r2, [r3, #4]
    
    //update data
    chassis_feedback_update(chassis_move_init);
 800121e:	6878      	ldr	r0, [r7, #4]
 8001220:	f000 f805 	bl	800122e <chassis_feedback_update>
 8001224:	e000      	b.n	8001228 <chassis_init+0x28>
        return;
 8001226:	bf00      	nop

}
 8001228:	3708      	adds	r7, #8
 800122a:	46bd      	mov	sp, r7
 800122c:	bd80      	pop	{r7, pc}

0800122e <chassis_feedback_update>:
  *                 such as rc data, euler angle, self-rotation speed, motor speed and robot speed
  * @param[out]     chassis_move_update: "chassis_move" pointer
  * @retval         none
  */
static void chassis_feedback_update(chassis_move_t *chassis_move_update)
{
 800122e:	b580      	push	{r7, lr}
 8001230:	b082      	sub	sp, #8
 8001232:	af00      	add	r7, sp, #0
 8001234:	6078      	str	r0, [r7, #4]
    if (chassis_move_update == NULL)
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	2b00      	cmp	r3, #0
 800123a:	d014      	beq.n	8001266 <chassis_feedback_update+0x38>
    {
        return;
    }

    chassis_rc_to_control_vector(chassis_move_update);
 800123c:	6878      	ldr	r0, [r7, #4]
 800123e:	f000 f817 	bl	8001270 <chassis_rc_to_control_vector>

    //update the values return from remote controller
    chassis_move_update->chassis_RC = get_remote_control_point();
 8001242:	f000 fb2f 	bl	80018a4 <get_remote_control_point>
 8001246:	4602      	mov	r2, r0
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	601a      	str	r2, [r3, #0]

    //update the chassis relative angle
    chassis_move_update->chassis_relative_angle = get_INS_angle_point();
 800124c:	f7ff ff92 	bl	8001174 <get_INS_angle_point>
 8001250:	eef0 7a40 	vmov.f32	s15, s0
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	edc3 7a22 	vstr	s15, [r3, #136]	; 0x88

    //update the gimbal relative angle (give the value of 0, for test only)
    chassis_move_update->relative_angle_from_gimbal = 0;
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	f04f 0200 	mov.w	r2, #0
 8001260:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
 8001264:	e000      	b.n	8001268 <chassis_feedback_update+0x3a>
        return;
 8001266:	bf00      	nop

}
 8001268:	3708      	adds	r7, #8
 800126a:	46bd      	mov	sp, r7
 800126c:	bd80      	pop	{r7, pc}
	...

08001270 <chassis_rc_to_control_vector>:
  * @param[out]     vy_set: horizontal speed set-point
  * @param[out]     chassis_move_rc_to_vector: "chassis_move" pointer
  * @retval         none
  */
void chassis_rc_to_control_vector(chassis_move_t *chassis_move_rc_to_vector)
{
 8001270:	b480      	push	{r7}
 8001272:	b085      	sub	sp, #20
 8001274:	af00      	add	r7, sp, #0
 8001276:	6078      	str	r0, [r7, #4]
    if (chassis_move_rc_to_vector == NULL)
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	2b00      	cmp	r3, #0
 800127c:	f000 80af 	beq.w	80013de <chassis_rc_to_control_vector+0x16e>
    int16_t y_channel;			//original data return from remote controller's channel 0
    int16_t wz_channel;			//original data return from remote controller's channel 4

    //update the values get from remote controller
    //pay attention to the sign of "y" here
    x_channel = chassis_move_rc_to_vector->chassis_RC->rc.ch[CHASSIS_X_CHANNEL];
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	789a      	ldrb	r2, [r3, #2]
 8001286:	78db      	ldrb	r3, [r3, #3]
 8001288:	021b      	lsls	r3, r3, #8
 800128a:	4313      	orrs	r3, r2
 800128c:	041b      	lsls	r3, r3, #16
 800128e:	141b      	asrs	r3, r3, #16
 8001290:	81fb      	strh	r3, [r7, #14]
    y_channel = -chassis_move_rc_to_vector->chassis_RC->rc.ch[CHASSIS_Y_CHANNEL];
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	f9b3 3000 	ldrsh.w	r3, [r3]
 800129a:	b21b      	sxth	r3, r3
 800129c:	b29b      	uxth	r3, r3
 800129e:	425b      	negs	r3, r3
 80012a0:	b29b      	uxth	r3, r3
 80012a2:	81bb      	strh	r3, [r7, #12]
    wz_channel = chassis_move_rc_to_vector->chassis_RC->rc.ch[CHASSIS_WZ_CHANNEL];
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	7a1a      	ldrb	r2, [r3, #8]
 80012aa:	7a5b      	ldrb	r3, [r3, #9]
 80012ac:	021b      	lsls	r3, r3, #8
 80012ae:	4313      	orrs	r3, r2
 80012b0:	041b      	lsls	r3, r3, #16
 80012b2:	141b      	asrs	r3, r3, #16
 80012b4:	817b      	strh	r3, [r7, #10]

    chassis_move_rc_to_vector->x_set = x_channel * CHASSIS_X_RC_SEN;
 80012b6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80012ba:	ee07 3a90 	vmov	s15, r3
 80012be:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80012c2:	ed9f 7a4a 	vldr	s14, [pc, #296]	; 80013ec <chassis_rc_to_control_vector+0x17c>
 80012c6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	edc3 7a25 	vstr	s15, [r3, #148]	; 0x94
    chassis_move_rc_to_vector->y_set = y_channel * CHASSIS_Y_RC_SEN;
 80012d0:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80012d4:	ee07 3a90 	vmov	s15, r3
 80012d8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80012dc:	ed9f 7a43 	vldr	s14, [pc, #268]	; 80013ec <chassis_rc_to_control_vector+0x17c>
 80012e0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	edc3 7a26 	vstr	s15, [r3, #152]	; 0x98
    chassis_move_rc_to_vector->wz_set = wz_channel * CHASSIS_WZ_RC_SEN;
 80012ea:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80012ee:	ee07 3a90 	vmov	s15, r3
 80012f2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80012f6:	ed9f 7a3e 	vldr	s14, [pc, #248]	; 80013f0 <chassis_rc_to_control_vector+0x180>
 80012fa:	ee67 7a87 	vmul.f32	s15, s15, s14
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	edc3 7a27 	vstr	s15, [r3, #156]	; 0x9c

    chassis_move_rc_to_vector->x_channel_origin = x_channel;
 8001304:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001308:	ee07 3a90 	vmov	s15, r3
 800130c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	edc3 7a28 	vstr	s15, [r3, #160]	; 0xa0
    chassis_move_rc_to_vector->y_channel_origin = y_channel;
 8001316:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800131a:	ee07 3a90 	vmov	s15, r3
 800131e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	edc3 7a29 	vstr	s15, [r3, #164]	; 0xa4
    chassis_move_rc_to_vector->wz_channel_origin = wz_channel;
 8001328:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800132c:	ee07 3a90 	vmov	s15, r3
 8001330:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	edc3 7a2a 	vstr	s15, [r3, #168]	; 0xa8

    //dead zone limit, because some remote control need be calibrated
    //the value of joy stick is not zero in middle place
    rc_deadband_limit(chassis_move_rc_to_vector->chassis_RC->rc.ch[CHASSIS_X_CHANNEL], x_channel, CHASSIS_RC_DEADLINE);
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001342:	b21b      	sxth	r3, r3
 8001344:	2b0a      	cmp	r3, #10
 8001346:	dc07      	bgt.n	8001358 <chassis_rc_to_control_vector+0xe8>
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001350:	b21b      	sxth	r3, r3
 8001352:	f113 0f0a 	cmn.w	r3, #10
 8001356:	da09      	bge.n	800136c <chassis_rc_to_control_vector+0xfc>
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	789a      	ldrb	r2, [r3, #2]
 800135e:	78db      	ldrb	r3, [r3, #3]
 8001360:	021b      	lsls	r3, r3, #8
 8001362:	4313      	orrs	r3, r2
 8001364:	041b      	lsls	r3, r3, #16
 8001366:	141b      	asrs	r3, r3, #16
 8001368:	81fb      	strh	r3, [r7, #14]
 800136a:	e001      	b.n	8001370 <chassis_rc_to_control_vector+0x100>
 800136c:	2300      	movs	r3, #0
 800136e:	81fb      	strh	r3, [r7, #14]
    rc_deadband_limit(-chassis_move_rc_to_vector->chassis_RC->rc.ch[CHASSIS_Y_CHANNEL], y_channel, CHASSIS_RC_DEADLINE);
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001378:	b21b      	sxth	r3, r3
 800137a:	f113 0f0a 	cmn.w	r3, #10
 800137e:	db06      	blt.n	800138e <chassis_rc_to_control_vector+0x11e>
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001388:	b21b      	sxth	r3, r3
 800138a:	2b0a      	cmp	r3, #10
 800138c:	dd09      	ble.n	80013a2 <chassis_rc_to_control_vector+0x132>
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001396:	b21b      	sxth	r3, r3
 8001398:	b29b      	uxth	r3, r3
 800139a:	425b      	negs	r3, r3
 800139c:	b29b      	uxth	r3, r3
 800139e:	81bb      	strh	r3, [r7, #12]
 80013a0:	e001      	b.n	80013a6 <chassis_rc_to_control_vector+0x136>
 80013a2:	2300      	movs	r3, #0
 80013a4:	81bb      	strh	r3, [r7, #12]
    rc_deadband_limit(chassis_move_rc_to_vector->chassis_RC->rc.ch[CHASSIS_WZ_CHANNEL], wz_channel, CHASSIS_RC_DEADLINE);
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80013ae:	b21b      	sxth	r3, r3
 80013b0:	2b0a      	cmp	r3, #10
 80013b2:	dc07      	bgt.n	80013c4 <chassis_rc_to_control_vector+0x154>
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80013bc:	b21b      	sxth	r3, r3
 80013be:	f113 0f0a 	cmn.w	r3, #10
 80013c2:	da09      	bge.n	80013d8 <chassis_rc_to_control_vector+0x168>
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	7a1a      	ldrb	r2, [r3, #8]
 80013ca:	7a5b      	ldrb	r3, [r3, #9]
 80013cc:	021b      	lsls	r3, r3, #8
 80013ce:	4313      	orrs	r3, r2
 80013d0:	041b      	lsls	r3, r3, #16
 80013d2:	141b      	asrs	r3, r3, #16
 80013d4:	817b      	strh	r3, [r7, #10]
 80013d6:	e003      	b.n	80013e0 <chassis_rc_to_control_vector+0x170>
 80013d8:	2300      	movs	r3, #0
 80013da:	817b      	strh	r3, [r7, #10]
 80013dc:	e000      	b.n	80013e0 <chassis_rc_to_control_vector+0x170>
        return;
 80013de:	bf00      	nop

}
 80013e0:	3714      	adds	r7, #20
 80013e2:	46bd      	mov	sp, r7
 80013e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e8:	4770      	bx	lr
 80013ea:	bf00      	nop
 80013ec:	3c03126f 	.word	0x3c03126f
 80013f0:	3ba3d70a 	.word	0x3ba3d70a
 80013f4:	00000000 	.word	0x00000000

080013f8 <chassis_set_control>:

/**
 * @brief	chassis_move_mode selection
 */
static void chassis_set_control(chassis_move_t *chassis_move_control)
{
 80013f8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80013fc:	b08c      	sub	sp, #48	; 0x30
 80013fe:	af00      	add	r7, sp, #0
 8001400:	6078      	str	r0, [r7, #4]
    if (chassis_move_control == NULL)
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	2b00      	cmp	r3, #0
 8001406:	f000 8237 	beq.w	8001878 <chassis_set_control+0x480>
    {
        return;
    }

    chassis_feedback_update(chassis_move_control);
 800140a:	6878      	ldr	r0, [r7, #4]
 800140c:	f7ff ff0f 	bl	800122e <chassis_feedback_update>
    chassis_rc_to_control_vector(chassis_move_control);
 8001410:	6878      	ldr	r0, [r7, #4]
 8001412:	f7ff ff2d 	bl	8001270 <chassis_rc_to_control_vector>

    if (chassis_move_control->chassis_mode == CHASSIS_VECTOR_FOLLOW_GIMBAL_YAW)
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	791b      	ldrb	r3, [r3, #4]
 800141a:	2b00      	cmp	r3, #0
 800141c:	f040 822d 	bne.w	800187a <chassis_set_control+0x482>
    {
    	float32_t vxy_to_gimbal, gimbal_angle_to_chassis;
    	float32_t vx_to_wheel_system, vy_to_wheel_system;
    	float32_t relative_angle_set_to_get;

    	vxy_to_gimbal = sqrt(pow(chassis_move_control->x_set, 2) + pow(chassis_move_control->y_set, 2));
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001426:	4618      	mov	r0, r3
 8001428:	f7ff f836 	bl	8000498 <__aeabi_f2d>
 800142c:	4602      	mov	r2, r0
 800142e:	460b      	mov	r3, r1
 8001430:	ed9f 1b91 	vldr	d1, [pc, #580]	; 8001678 <chassis_set_control+0x280>
 8001434:	ec43 2b10 	vmov	d0, r2, r3
 8001438:	f00c f960 	bl	800d6fc <pow>
 800143c:	ec55 4b10 	vmov	r4, r5, d0
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001446:	4618      	mov	r0, r3
 8001448:	f7ff f826 	bl	8000498 <__aeabi_f2d>
 800144c:	4602      	mov	r2, r0
 800144e:	460b      	mov	r3, r1
 8001450:	ed9f 1b89 	vldr	d1, [pc, #548]	; 8001678 <chassis_set_control+0x280>
 8001454:	ec43 2b10 	vmov	d0, r2, r3
 8001458:	f00c f950 	bl	800d6fc <pow>
 800145c:	ec53 2b10 	vmov	r2, r3, d0
 8001460:	4620      	mov	r0, r4
 8001462:	4629      	mov	r1, r5
 8001464:	f7fe feba 	bl	80001dc <__adddf3>
 8001468:	4602      	mov	r2, r0
 800146a:	460b      	mov	r3, r1
 800146c:	ec43 2b17 	vmov	d7, r2, r3
 8001470:	eeb0 0a47 	vmov.f32	s0, s14
 8001474:	eef0 0a67 	vmov.f32	s1, s15
 8001478:	f00c f9ee 	bl	800d858 <sqrt>
 800147c:	ec53 2b10 	vmov	r2, r3, d0
 8001480:	4610      	mov	r0, r2
 8001482:	4619      	mov	r1, r3
 8001484:	f7ff fb38 	bl	8000af8 <__aeabi_d2f>
 8001488:	4603      	mov	r3, r0
 800148a:	62bb      	str	r3, [r7, #40]	; 0x28
    	gimbal_angle_to_chassis = chassis_move_control->relative_angle_from_gimbal - chassis_move_control->chassis_relative_angle;
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	ed93 7a23 	vldr	s14, [r3, #140]	; 0x8c
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	edd3 7a22 	vldr	s15, [r3, #136]	; 0x88
 8001498:	ee77 7a67 	vsub.f32	s15, s14, s15
 800149c:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24

    	float32_t vxy_to_gimbal_f32[4] =
    	{
    	  chassis_move_control->x_set, chassis_move_control->y_set, 0.0, 1.0
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
    	float32_t vxy_to_gimbal_f32[4] =
 80014a6:	60bb      	str	r3, [r7, #8]
    	  chassis_move_control->x_set, chassis_move_control->y_set, 0.0, 1.0
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
    	float32_t vxy_to_gimbal_f32[4] =
 80014ae:	60fb      	str	r3, [r7, #12]
 80014b0:	f04f 0300 	mov.w	r3, #0
 80014b4:	613b      	str	r3, [r7, #16]
 80014b6:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 80014ba:	617b      	str	r3, [r7, #20]
    	};

    	for (uint8_t i = 0; i < 4; i++)
 80014bc:	2300      	movs	r3, #0
 80014be:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 80014c2:	e1d3      	b.n	800186c <chassis_set_control+0x474>
    	{
    		vx_to_wheel_system = vxy_to_gimbal * cos(chassis_move_control->vxy_relative_angle_to_gimbal - (gimbal_angle_to_chassis)) + chassis_move_control->wz_set * sin(WHEEL_POSITION[i]);
 80014c4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80014c6:	f7fe ffe7 	bl	8000498 <__aeabi_f2d>
 80014ca:	4604      	mov	r4, r0
 80014cc:	460d      	mov	r5, r1
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	ed93 7a24 	vldr	s14, [r3, #144]	; 0x90
 80014d4:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80014d8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80014dc:	ee17 0a90 	vmov	r0, s15
 80014e0:	f7fe ffda 	bl	8000498 <__aeabi_f2d>
 80014e4:	4602      	mov	r2, r0
 80014e6:	460b      	mov	r3, r1
 80014e8:	ec43 2b10 	vmov	d0, r2, r3
 80014ec:	f00c f828 	bl	800d540 <cos>
 80014f0:	ec53 2b10 	vmov	r2, r3, d0
 80014f4:	4620      	mov	r0, r4
 80014f6:	4629      	mov	r1, r5
 80014f8:	f7ff f826 	bl	8000548 <__aeabi_dmul>
 80014fc:	4602      	mov	r2, r0
 80014fe:	460b      	mov	r3, r1
 8001500:	4690      	mov	r8, r2
 8001502:	4699      	mov	r9, r3
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800150a:	4618      	mov	r0, r3
 800150c:	f7fe ffc4 	bl	8000498 <__aeabi_f2d>
 8001510:	4604      	mov	r4, r0
 8001512:	460d      	mov	r5, r1
 8001514:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001518:	4a59      	ldr	r2, [pc, #356]	; (8001680 <chassis_set_control+0x288>)
 800151a:	009b      	lsls	r3, r3, #2
 800151c:	4413      	add	r3, r2
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	4618      	mov	r0, r3
 8001522:	f7fe ffb9 	bl	8000498 <__aeabi_f2d>
 8001526:	4602      	mov	r2, r0
 8001528:	460b      	mov	r3, r1
 800152a:	ec43 2b10 	vmov	d0, r2, r3
 800152e:	f00c f857 	bl	800d5e0 <sin>
 8001532:	ec53 2b10 	vmov	r2, r3, d0
 8001536:	4620      	mov	r0, r4
 8001538:	4629      	mov	r1, r5
 800153a:	f7ff f805 	bl	8000548 <__aeabi_dmul>
 800153e:	4602      	mov	r2, r0
 8001540:	460b      	mov	r3, r1
 8001542:	4640      	mov	r0, r8
 8001544:	4649      	mov	r1, r9
 8001546:	f7fe fe49 	bl	80001dc <__adddf3>
 800154a:	4602      	mov	r2, r0
 800154c:	460b      	mov	r3, r1
 800154e:	4610      	mov	r0, r2
 8001550:	4619      	mov	r1, r3
 8001552:	f7ff fad1 	bl	8000af8 <__aeabi_d2f>
 8001556:	4603      	mov	r3, r0
 8001558:	623b      	str	r3, [r7, #32]
    		vy_to_wheel_system = vxy_to_gimbal * sin(chassis_move_control->vxy_relative_angle_to_gimbal - (gimbal_angle_to_chassis)) + chassis_move_control->wz_set * cos(WHEEL_POSITION[i]);
 800155a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800155c:	f7fe ff9c 	bl	8000498 <__aeabi_f2d>
 8001560:	4604      	mov	r4, r0
 8001562:	460d      	mov	r5, r1
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	ed93 7a24 	vldr	s14, [r3, #144]	; 0x90
 800156a:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800156e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001572:	ee17 0a90 	vmov	r0, s15
 8001576:	f7fe ff8f 	bl	8000498 <__aeabi_f2d>
 800157a:	4602      	mov	r2, r0
 800157c:	460b      	mov	r3, r1
 800157e:	ec43 2b10 	vmov	d0, r2, r3
 8001582:	f00c f82d 	bl	800d5e0 <sin>
 8001586:	ec53 2b10 	vmov	r2, r3, d0
 800158a:	4620      	mov	r0, r4
 800158c:	4629      	mov	r1, r5
 800158e:	f7fe ffdb 	bl	8000548 <__aeabi_dmul>
 8001592:	4602      	mov	r2, r0
 8001594:	460b      	mov	r3, r1
 8001596:	4690      	mov	r8, r2
 8001598:	4699      	mov	r9, r3
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80015a0:	4618      	mov	r0, r3
 80015a2:	f7fe ff79 	bl	8000498 <__aeabi_f2d>
 80015a6:	4604      	mov	r4, r0
 80015a8:	460d      	mov	r5, r1
 80015aa:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80015ae:	4a34      	ldr	r2, [pc, #208]	; (8001680 <chassis_set_control+0x288>)
 80015b0:	009b      	lsls	r3, r3, #2
 80015b2:	4413      	add	r3, r2
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	4618      	mov	r0, r3
 80015b8:	f7fe ff6e 	bl	8000498 <__aeabi_f2d>
 80015bc:	4602      	mov	r2, r0
 80015be:	460b      	mov	r3, r1
 80015c0:	ec43 2b10 	vmov	d0, r2, r3
 80015c4:	f00b ffbc 	bl	800d540 <cos>
 80015c8:	ec53 2b10 	vmov	r2, r3, d0
 80015cc:	4620      	mov	r0, r4
 80015ce:	4629      	mov	r1, r5
 80015d0:	f7fe ffba 	bl	8000548 <__aeabi_dmul>
 80015d4:	4602      	mov	r2, r0
 80015d6:	460b      	mov	r3, r1
 80015d8:	4640      	mov	r0, r8
 80015da:	4649      	mov	r1, r9
 80015dc:	f7fe fdfe 	bl	80001dc <__adddf3>
 80015e0:	4602      	mov	r2, r0
 80015e2:	460b      	mov	r3, r1
 80015e4:	4610      	mov	r0, r2
 80015e6:	4619      	mov	r1, r3
 80015e8:	f7ff fa86 	bl	8000af8 <__aeabi_d2f>
 80015ec:	4603      	mov	r3, r0
 80015ee:	61fb      	str	r3, [r7, #28]

//    		chassis_move_control->motor_chassis[i].wheel_dir_flag = 0;
//    		chassis_move_control->motor_chassis[i].speed_set = sqrt(pow(vx_to_chassis, 2) + pow(vy_to_chassis, 2));
    		//for single wheel system test only
    		chassis_move_control->chassis_board[i].speed_set = vx_to_wheel_system;
 80015f0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80015f4:	687a      	ldr	r2, [r7, #4]
 80015f6:	015b      	lsls	r3, r3, #5
 80015f8:	4413      	add	r3, r2
 80015fa:	330c      	adds	r3, #12
 80015fc:	6a3a      	ldr	r2, [r7, #32]
 80015fe:	601a      	str	r2, [r3, #0]
    		chassis_move_control->chassis_board[i].motor_ecd_speed_set = vy_to_wheel_system;
 8001600:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001604:	687a      	ldr	r2, [r7, #4]
 8001606:	015b      	lsls	r3, r3, #5
 8001608:	4413      	add	r3, r2
 800160a:	3318      	adds	r3, #24
 800160c:	69fa      	ldr	r2, [r7, #28]
 800160e:	601a      	str	r2, [r3, #0]

    		if (vy_to_wheel_system < 0) {
 8001610:	edd7 7a07 	vldr	s15, [r7, #28]
 8001614:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001618:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800161c:	d536      	bpl.n	800168c <chassis_set_control+0x294>
    			chassis_move_control->chassis_board[i].direction_wheel_angle_set = - acos(vx_to_wheel_system / chassis_move_control->chassis_board[i].speed_set);
 800161e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001622:	687a      	ldr	r2, [r7, #4]
 8001624:	015b      	lsls	r3, r3, #5
 8001626:	4413      	add	r3, r2
 8001628:	330c      	adds	r3, #12
 800162a:	edd3 7a00 	vldr	s15, [r3]
 800162e:	ed97 7a08 	vldr	s14, [r7, #32]
 8001632:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8001636:	ee16 0a90 	vmov	r0, s13
 800163a:	f7fe ff2d 	bl	8000498 <__aeabi_f2d>
 800163e:	4602      	mov	r2, r0
 8001640:	460b      	mov	r3, r1
 8001642:	ec43 2b10 	vmov	d0, r2, r3
 8001646:	f00c f81f 	bl	800d688 <acos>
 800164a:	ec53 2b10 	vmov	r2, r3, d0
 800164e:	4610      	mov	r0, r2
 8001650:	4619      	mov	r1, r3
 8001652:	f7ff fa51 	bl	8000af8 <__aeabi_d2f>
 8001656:	4602      	mov	r2, r0
 8001658:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800165c:	ee07 2a90 	vmov	s15, r2
 8001660:	eef1 7a67 	vneg.f32	s15, s15
 8001664:	687a      	ldr	r2, [r7, #4]
 8001666:	3301      	adds	r3, #1
 8001668:	015b      	lsls	r3, r3, #5
 800166a:	4413      	add	r3, r2
 800166c:	edc3 7a00 	vstr	s15, [r3]
 8001670:	e030      	b.n	80016d4 <chassis_set_control+0x2dc>
 8001672:	bf00      	nop
 8001674:	f3af 8000 	nop.w
 8001678:	00000000 	.word	0x00000000
 800167c:	40000000 	.word	0x40000000
 8001680:	0800fa7c 	.word	0x0800fa7c
 8001684:	3fc90fdb 	.word	0x3fc90fdb
 8001688:	3d4ccccd 	.word	0x3d4ccccd
    		}
    		else {
    			chassis_move_control->chassis_board[i].direction_wheel_angle_set = acos(vx_to_wheel_system / chassis_move_control->chassis_board[i].speed_set);
 800168c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001690:	687a      	ldr	r2, [r7, #4]
 8001692:	015b      	lsls	r3, r3, #5
 8001694:	4413      	add	r3, r2
 8001696:	330c      	adds	r3, #12
 8001698:	edd3 7a00 	vldr	s15, [r3]
 800169c:	ed97 7a08 	vldr	s14, [r7, #32]
 80016a0:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80016a4:	ee16 0a90 	vmov	r0, s13
 80016a8:	f7fe fef6 	bl	8000498 <__aeabi_f2d>
 80016ac:	4602      	mov	r2, r0
 80016ae:	460b      	mov	r3, r1
 80016b0:	ec43 2b10 	vmov	d0, r2, r3
 80016b4:	f00b ffe8 	bl	800d688 <acos>
 80016b8:	ec53 2b10 	vmov	r2, r3, d0
 80016bc:	f897 402f 	ldrb.w	r4, [r7, #47]	; 0x2f
 80016c0:	4610      	mov	r0, r2
 80016c2:	4619      	mov	r1, r3
 80016c4:	f7ff fa18 	bl	8000af8 <__aeabi_d2f>
 80016c8:	4601      	mov	r1, r0
 80016ca:	687a      	ldr	r2, [r7, #4]
 80016cc:	1c63      	adds	r3, r4, #1
 80016ce:	015b      	lsls	r3, r3, #5
 80016d0:	4413      	add	r3, r2
 80016d2:	6019      	str	r1, [r3, #0]
    		}

    		relative_angle_set_to_get = fabs(chassis_move_control->chassis_board[i].direction_wheel_angle_set) - fabs(chassis_move_control->chassis_board[i].direction_wheel_angle);
 80016d4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80016d8:	687a      	ldr	r2, [r7, #4]
 80016da:	3301      	adds	r3, #1
 80016dc:	015b      	lsls	r3, r3, #5
 80016de:	4413      	add	r3, r2
 80016e0:	edd3 7a00 	vldr	s15, [r3]
 80016e4:	eeb0 7ae7 	vabs.f32	s14, s15
 80016e8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80016ec:	687a      	ldr	r2, [r7, #4]
 80016ee:	015b      	lsls	r3, r3, #5
 80016f0:	4413      	add	r3, r2
 80016f2:	331c      	adds	r3, #28
 80016f4:	edd3 7a00 	vldr	s15, [r3]
 80016f8:	eef0 7ae7 	vabs.f32	s15, s15
 80016fc:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001700:	edc7 7a06 	vstr	s15, [r7, #24]

    		if (fabs(chassis_move_control->chassis_board[i].speed) > 2.5f && fabs(relative_angle_set_to_get) > HALF_PI)
 8001704:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001708:	687a      	ldr	r2, [r7, #4]
 800170a:	015b      	lsls	r3, r3, #5
 800170c:	4413      	add	r3, r2
 800170e:	3308      	adds	r3, #8
 8001710:	edd3 7a00 	vldr	s15, [r3]
 8001714:	eef0 7ae7 	vabs.f32	s15, s15
 8001718:	eeb0 7a04 	vmov.f32	s14, #4	; 0x40200000  2.5
 800171c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001720:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001724:	dd0b      	ble.n	800173e <chassis_set_control+0x346>
 8001726:	edd7 7a06 	vldr	s15, [r7, #24]
 800172a:	eef0 7ae7 	vabs.f32	s15, s15
 800172e:	ed1f 7a2b 	vldr	s14, [pc, #-172]	; 8001684 <chassis_set_control+0x28c>
 8001732:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001736:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800173a:	f300 8091 	bgt.w	8001860 <chassis_set_control+0x468>
    		{
    			continue;
    		}

    		if (fabs(chassis_move_control->chassis_board[i].speed) <= 2.5f && fabs(relative_angle_set_to_get) > HALF_PI && chassis_move_control->chassis_board[i].wheel_dir_flag == 0)
 800173e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001742:	687a      	ldr	r2, [r7, #4]
 8001744:	015b      	lsls	r3, r3, #5
 8001746:	4413      	add	r3, r2
 8001748:	3308      	adds	r3, #8
 800174a:	edd3 7a00 	vldr	s15, [r3]
 800174e:	eef0 7ae7 	vabs.f32	s15, s15
 8001752:	eeb0 7a04 	vmov.f32	s14, #4	; 0x40200000  2.5
 8001756:	eef4 7ac7 	vcmpe.f32	s15, s14
 800175a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800175e:	d84f      	bhi.n	8001800 <chassis_set_control+0x408>
 8001760:	edd7 7a06 	vldr	s15, [r7, #24]
 8001764:	eef0 7ae7 	vabs.f32	s15, s15
 8001768:	ed1f 7a3a 	vldr	s14, [pc, #-232]	; 8001684 <chassis_set_control+0x28c>
 800176c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001770:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001774:	dd44      	ble.n	8001800 <chassis_set_control+0x408>
 8001776:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800177a:	687a      	ldr	r2, [r7, #4]
 800177c:	3301      	adds	r3, #1
 800177e:	015b      	lsls	r3, r3, #5
 8001780:	4413      	add	r3, r2
 8001782:	3304      	adds	r3, #4
 8001784:	781b      	ldrb	r3, [r3, #0]
 8001786:	2b00      	cmp	r3, #0
 8001788:	d13a      	bne.n	8001800 <chassis_set_control+0x408>
    		{
    			chassis_move_control->chassis_board[i].speed_set = 0;
 800178a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800178e:	687a      	ldr	r2, [r7, #4]
 8001790:	015b      	lsls	r3, r3, #5
 8001792:	4413      	add	r3, r2
 8001794:	330c      	adds	r3, #12
 8001796:	f04f 0200 	mov.w	r2, #0
 800179a:	601a      	str	r2, [r3, #0]
    			chassis_move_control->chassis_board[i].direction_wheel_angle_set = - chassis_move_control->chassis_board[i].direction_wheel_angle_set;
 800179c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80017a0:	687a      	ldr	r2, [r7, #4]
 80017a2:	3301      	adds	r3, #1
 80017a4:	015b      	lsls	r3, r3, #5
 80017a6:	4413      	add	r3, r2
 80017a8:	edd3 7a00 	vldr	s15, [r3]
 80017ac:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80017b0:	eef1 7a67 	vneg.f32	s15, s15
 80017b4:	687a      	ldr	r2, [r7, #4]
 80017b6:	3301      	adds	r3, #1
 80017b8:	015b      	lsls	r3, r3, #5
 80017ba:	4413      	add	r3, r2
 80017bc:	edc3 7a00 	vstr	s15, [r3]

    			chassis_feedback_update(chassis_move_control);
 80017c0:	6878      	ldr	r0, [r7, #4]
 80017c2:	f7ff fd34 	bl	800122e <chassis_feedback_update>
    			if (fabs(relative_angle_set_to_get) < 0.05f) chassis_move_control->chassis_board[i].speed_set = - chassis_move_control->chassis_board[i].speed_set;
 80017c6:	edd7 7a06 	vldr	s15, [r7, #24]
 80017ca:	eef0 7ae7 	vabs.f32	s15, s15
 80017ce:	ed1f 7a52 	vldr	s14, [pc, #-328]	; 8001688 <chassis_set_control+0x290>
 80017d2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80017d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80017da:	d511      	bpl.n	8001800 <chassis_set_control+0x408>
 80017dc:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80017e0:	687a      	ldr	r2, [r7, #4]
 80017e2:	015b      	lsls	r3, r3, #5
 80017e4:	4413      	add	r3, r2
 80017e6:	330c      	adds	r3, #12
 80017e8:	edd3 7a00 	vldr	s15, [r3]
 80017ec:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80017f0:	eef1 7a67 	vneg.f32	s15, s15
 80017f4:	687a      	ldr	r2, [r7, #4]
 80017f6:	015b      	lsls	r3, r3, #5
 80017f8:	4413      	add	r3, r2
 80017fa:	330c      	adds	r3, #12
 80017fc:	edc3 7a00 	vstr	s15, [r3]
    		}

    		chassis_move_control->chassis_board[i].wheel_dir_flag = 1;
 8001800:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001804:	687a      	ldr	r2, [r7, #4]
 8001806:	3301      	adds	r3, #1
 8001808:	015b      	lsls	r3, r3, #5
 800180a:	4413      	add	r3, r2
 800180c:	3304      	adds	r3, #4
 800180e:	2201      	movs	r2, #1
 8001810:	701a      	strb	r2, [r3, #0]

    		CenterBoard_To_SideBoard_Data[i].CurrentSet_Spd = chassis_move_control->chassis_board[i].speed_set;
 8001812:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001816:	687a      	ldr	r2, [r7, #4]
 8001818:	015b      	lsls	r3, r3, #5
 800181a:	4413      	add	r3, r2
 800181c:	330c      	adds	r3, #12
 800181e:	edd3 7a00 	vldr	s15, [r3]
 8001822:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001826:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800182a:	ee17 2a90 	vmov	r2, s15
 800182e:	b211      	sxth	r1, r2
 8001830:	4a14      	ldr	r2, [pc, #80]	; (8001884 <chassis_set_control+0x48c>)
 8001832:	009b      	lsls	r3, r3, #2
 8001834:	4413      	add	r3, r2
 8001836:	460a      	mov	r2, r1
 8001838:	805a      	strh	r2, [r3, #2]
    		CenterBoard_To_SideBoard_Data[i].CurrentSet_Ang = chassis_move_control->chassis_board[i].direction_wheel_angle_set;
 800183a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800183e:	687a      	ldr	r2, [r7, #4]
 8001840:	3301      	adds	r3, #1
 8001842:	015b      	lsls	r3, r3, #5
 8001844:	4413      	add	r3, r2
 8001846:	edd3 7a00 	vldr	s15, [r3]
 800184a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800184e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001852:	ee17 2a90 	vmov	r2, s15
 8001856:	b211      	sxth	r1, r2
 8001858:	4a0a      	ldr	r2, [pc, #40]	; (8001884 <chassis_set_control+0x48c>)
 800185a:	f822 1023 	strh.w	r1, [r2, r3, lsl #2]
 800185e:	e000      	b.n	8001862 <chassis_set_control+0x46a>
    			continue;
 8001860:	bf00      	nop
    	for (uint8_t i = 0; i < 4; i++)
 8001862:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001866:	3301      	adds	r3, #1
 8001868:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800186c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001870:	2b03      	cmp	r3, #3
 8001872:	f67f ae27 	bls.w	80014c4 <chassis_set_control+0xcc>
 8001876:	e000      	b.n	800187a <chassis_set_control+0x482>
        return;
 8001878:	bf00      	nop
    	}

    }//end of "CHASSIS_VECTOR_FOLLOW_GIMBAL_YAW"
}
 800187a:	3730      	adds	r7, #48	; 0x30
 800187c:	46bd      	mov	sp, r7
 800187e:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001882:	bf00      	nop
 8001884:	20004b68 	.word	0x20004b68

08001888 <remote_control_init>:
  * @brief          遥控器初始化
  * @param[in]      none
  * @retval         none
  */
void remote_control_init(void)
{
 8001888:	b580      	push	{r7, lr}
 800188a:	af00      	add	r7, sp, #0
    RC_Init(sbus_rx_buf[0], sbus_rx_buf[1], SBUS_RX_BUF_NUM);
 800188c:	2224      	movs	r2, #36	; 0x24
 800188e:	4903      	ldr	r1, [pc, #12]	; (800189c <remote_control_init+0x14>)
 8001890:	4803      	ldr	r0, [pc, #12]	; (80018a0 <remote_control_init+0x18>)
 8001892:	f000 fa83 	bl	8001d9c <RC_Init>
}
 8001896:	bf00      	nop
 8001898:	bd80      	pop	{r7, pc}
 800189a:	bf00      	nop
 800189c:	200000c4 	.word	0x200000c4
 80018a0:	200000a0 	.word	0x200000a0

080018a4 <get_remote_control_point>:
  * @brief          获取遥控器数据指针
  * @param[in]      none
  * @retval         遥控器数据指针
  */
const RC_ctrl_t *get_remote_control_point(void)
{
 80018a4:	b480      	push	{r7}
 80018a6:	af00      	add	r7, sp, #0
    return &rc_ctrl;
 80018a8:	4b02      	ldr	r3, [pc, #8]	; (80018b4 <get_remote_control_point+0x10>)
}
 80018aa:	4618      	mov	r0, r3
 80018ac:	46bd      	mov	sp, r7
 80018ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b2:	4770      	bx	lr
 80018b4:	20004c28 	.word	0x20004c28

080018b8 <USART3_IRQHandler>:
    RC_restart(SBUS_RX_BUF_NUM);
}

//串口中断
void USART3_IRQHandler(void)
{
 80018b8:	b580      	push	{r7, lr}
 80018ba:	b082      	sub	sp, #8
 80018bc:	af00      	add	r7, sp, #0
    if(huart3.Instance->SR & UART_FLAG_RXNE)//接收到数据
 80018be:	4b47      	ldr	r3, [pc, #284]	; (80019dc <USART3_IRQHandler+0x124>)
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	f003 0320 	and.w	r3, r3, #32
 80018c8:	2b00      	cmp	r3, #0
 80018ca:	d00b      	beq.n	80018e4 <USART3_IRQHandler+0x2c>
    {
        __HAL_UART_CLEAR_PEFLAG(&huart3);
 80018cc:	2300      	movs	r3, #0
 80018ce:	607b      	str	r3, [r7, #4]
 80018d0:	4b42      	ldr	r3, [pc, #264]	; (80019dc <USART3_IRQHandler+0x124>)
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	607b      	str	r3, [r7, #4]
 80018d8:	4b40      	ldr	r3, [pc, #256]	; (80019dc <USART3_IRQHandler+0x124>)
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	685b      	ldr	r3, [r3, #4]
 80018de:	607b      	str	r3, [r7, #4]
 80018e0:	687b      	ldr	r3, [r7, #4]
                sbus_to_usart1(sbus_rx_buf[1]);
            }
        }
    }

}
 80018e2:	e076      	b.n	80019d2 <USART3_IRQHandler+0x11a>
    else if(USART3->SR & UART_FLAG_IDLE)
 80018e4:	4b3e      	ldr	r3, [pc, #248]	; (80019e0 <USART3_IRQHandler+0x128>)
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	f003 0310 	and.w	r3, r3, #16
 80018ec:	2b00      	cmp	r3, #0
 80018ee:	d070      	beq.n	80019d2 <USART3_IRQHandler+0x11a>
        __HAL_UART_CLEAR_PEFLAG(&huart3);
 80018f0:	2300      	movs	r3, #0
 80018f2:	603b      	str	r3, [r7, #0]
 80018f4:	4b39      	ldr	r3, [pc, #228]	; (80019dc <USART3_IRQHandler+0x124>)
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	603b      	str	r3, [r7, #0]
 80018fc:	4b37      	ldr	r3, [pc, #220]	; (80019dc <USART3_IRQHandler+0x124>)
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	685b      	ldr	r3, [r3, #4]
 8001902:	603b      	str	r3, [r7, #0]
 8001904:	683b      	ldr	r3, [r7, #0]
        if ((hdma_usart3_rx.Instance->CR & DMA_SxCR_CT) == RESET)
 8001906:	4b37      	ldr	r3, [pc, #220]	; (80019e4 <USART3_IRQHandler+0x12c>)
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001910:	2b00      	cmp	r3, #0
 8001912:	d130      	bne.n	8001976 <USART3_IRQHandler+0xbe>
            __HAL_DMA_DISABLE(&hdma_usart3_rx);
 8001914:	4b33      	ldr	r3, [pc, #204]	; (80019e4 <USART3_IRQHandler+0x12c>)
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	681a      	ldr	r2, [r3, #0]
 800191a:	4b32      	ldr	r3, [pc, #200]	; (80019e4 <USART3_IRQHandler+0x12c>)
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	f022 0201 	bic.w	r2, r2, #1
 8001922:	601a      	str	r2, [r3, #0]
            this_time_rx_len = SBUS_RX_BUF_NUM - hdma_usart3_rx.Instance->NDTR;
 8001924:	4b2f      	ldr	r3, [pc, #188]	; (80019e4 <USART3_IRQHandler+0x12c>)
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	685b      	ldr	r3, [r3, #4]
 800192a:	b29b      	uxth	r3, r3
 800192c:	f1c3 0324 	rsb	r3, r3, #36	; 0x24
 8001930:	b29a      	uxth	r2, r3
 8001932:	4b2d      	ldr	r3, [pc, #180]	; (80019e8 <USART3_IRQHandler+0x130>)
 8001934:	801a      	strh	r2, [r3, #0]
            hdma_usart3_rx.Instance->NDTR = SBUS_RX_BUF_NUM;
 8001936:	4b2b      	ldr	r3, [pc, #172]	; (80019e4 <USART3_IRQHandler+0x12c>)
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	2224      	movs	r2, #36	; 0x24
 800193c:	605a      	str	r2, [r3, #4]
            hdma_usart3_rx.Instance->CR |= DMA_SxCR_CT;
 800193e:	4b29      	ldr	r3, [pc, #164]	; (80019e4 <USART3_IRQHandler+0x12c>)
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	681a      	ldr	r2, [r3, #0]
 8001944:	4b27      	ldr	r3, [pc, #156]	; (80019e4 <USART3_IRQHandler+0x12c>)
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 800194c:	601a      	str	r2, [r3, #0]
            __HAL_DMA_ENABLE(&hdma_usart3_rx);
 800194e:	4b25      	ldr	r3, [pc, #148]	; (80019e4 <USART3_IRQHandler+0x12c>)
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	681a      	ldr	r2, [r3, #0]
 8001954:	4b23      	ldr	r3, [pc, #140]	; (80019e4 <USART3_IRQHandler+0x12c>)
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	f042 0201 	orr.w	r2, r2, #1
 800195c:	601a      	str	r2, [r3, #0]
            if(this_time_rx_len == RC_FRAME_LENGTH)
 800195e:	4b22      	ldr	r3, [pc, #136]	; (80019e8 <USART3_IRQHandler+0x130>)
 8001960:	881b      	ldrh	r3, [r3, #0]
 8001962:	2b12      	cmp	r3, #18
 8001964:	d135      	bne.n	80019d2 <USART3_IRQHandler+0x11a>
                sbus_to_rc(sbus_rx_buf[0], &rc_ctrl);
 8001966:	4921      	ldr	r1, [pc, #132]	; (80019ec <USART3_IRQHandler+0x134>)
 8001968:	4821      	ldr	r0, [pc, #132]	; (80019f0 <USART3_IRQHandler+0x138>)
 800196a:	f000 f847 	bl	80019fc <sbus_to_rc>
                sbus_to_usart1(sbus_rx_buf[0]);
 800196e:	4820      	ldr	r0, [pc, #128]	; (80019f0 <USART3_IRQHandler+0x138>)
 8001970:	f000 f952 	bl	8001c18 <sbus_to_usart1>
}
 8001974:	e02d      	b.n	80019d2 <USART3_IRQHandler+0x11a>
            __HAL_DMA_DISABLE(&hdma_usart3_rx);
 8001976:	4b1b      	ldr	r3, [pc, #108]	; (80019e4 <USART3_IRQHandler+0x12c>)
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	681a      	ldr	r2, [r3, #0]
 800197c:	4b19      	ldr	r3, [pc, #100]	; (80019e4 <USART3_IRQHandler+0x12c>)
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	f022 0201 	bic.w	r2, r2, #1
 8001984:	601a      	str	r2, [r3, #0]
            this_time_rx_len = SBUS_RX_BUF_NUM - hdma_usart3_rx.Instance->NDTR;
 8001986:	4b17      	ldr	r3, [pc, #92]	; (80019e4 <USART3_IRQHandler+0x12c>)
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	685b      	ldr	r3, [r3, #4]
 800198c:	b29b      	uxth	r3, r3
 800198e:	f1c3 0324 	rsb	r3, r3, #36	; 0x24
 8001992:	b29a      	uxth	r2, r3
 8001994:	4b14      	ldr	r3, [pc, #80]	; (80019e8 <USART3_IRQHandler+0x130>)
 8001996:	801a      	strh	r2, [r3, #0]
            hdma_usart3_rx.Instance->NDTR = SBUS_RX_BUF_NUM;
 8001998:	4b12      	ldr	r3, [pc, #72]	; (80019e4 <USART3_IRQHandler+0x12c>)
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	2224      	movs	r2, #36	; 0x24
 800199e:	605a      	str	r2, [r3, #4]
            DMA1_Stream1->CR &= ~(DMA_SxCR_CT);
 80019a0:	4b14      	ldr	r3, [pc, #80]	; (80019f4 <USART3_IRQHandler+0x13c>)
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	4a13      	ldr	r2, [pc, #76]	; (80019f4 <USART3_IRQHandler+0x13c>)
 80019a6:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 80019aa:	6013      	str	r3, [r2, #0]
            __HAL_DMA_ENABLE(&hdma_usart3_rx);
 80019ac:	4b0d      	ldr	r3, [pc, #52]	; (80019e4 <USART3_IRQHandler+0x12c>)
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	681a      	ldr	r2, [r3, #0]
 80019b2:	4b0c      	ldr	r3, [pc, #48]	; (80019e4 <USART3_IRQHandler+0x12c>)
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	f042 0201 	orr.w	r2, r2, #1
 80019ba:	601a      	str	r2, [r3, #0]
            if(this_time_rx_len == RC_FRAME_LENGTH)
 80019bc:	4b0a      	ldr	r3, [pc, #40]	; (80019e8 <USART3_IRQHandler+0x130>)
 80019be:	881b      	ldrh	r3, [r3, #0]
 80019c0:	2b12      	cmp	r3, #18
 80019c2:	d106      	bne.n	80019d2 <USART3_IRQHandler+0x11a>
                sbus_to_rc(sbus_rx_buf[1], &rc_ctrl);
 80019c4:	4909      	ldr	r1, [pc, #36]	; (80019ec <USART3_IRQHandler+0x134>)
 80019c6:	480c      	ldr	r0, [pc, #48]	; (80019f8 <USART3_IRQHandler+0x140>)
 80019c8:	f000 f818 	bl	80019fc <sbus_to_rc>
                sbus_to_usart1(sbus_rx_buf[1]);
 80019cc:	480a      	ldr	r0, [pc, #40]	; (80019f8 <USART3_IRQHandler+0x140>)
 80019ce:	f000 f923 	bl	8001c18 <sbus_to_usart1>
}
 80019d2:	bf00      	nop
 80019d4:	3708      	adds	r7, #8
 80019d6:	46bd      	mov	sp, r7
 80019d8:	bd80      	pop	{r7, pc}
 80019da:	bf00      	nop
 80019dc:	20004fdc 	.word	0x20004fdc
 80019e0:	40004800 	.word	0x40004800
 80019e4:	20004f7c 	.word	0x20004f7c
 80019e8:	200000e8 	.word	0x200000e8
 80019ec:	20004c28 	.word	0x20004c28
 80019f0:	200000a0 	.word	0x200000a0
 80019f4:	40026028 	.word	0x40026028
 80019f8:	200000c4 	.word	0x200000c4

080019fc <sbus_to_rc>:
  * @param[in]      sbus_buf: 原生数据指针
  * @param[out]     rc_ctrl: 遥控器数据指
  * @retval         none
  */
static void sbus_to_rc(volatile const uint8_t *sbus_buf, RC_ctrl_t *rc_ctrl)
{
 80019fc:	b480      	push	{r7}
 80019fe:	b083      	sub	sp, #12
 8001a00:	af00      	add	r7, sp, #0
 8001a02:	6078      	str	r0, [r7, #4]
 8001a04:	6039      	str	r1, [r7, #0]
    if (sbus_buf == NULL || rc_ctrl == NULL)
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	f000 80ff 	beq.w	8001c0c <sbus_to_rc+0x210>
 8001a0e:	683b      	ldr	r3, [r7, #0]
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	f000 80fb 	beq.w	8001c0c <sbus_to_rc+0x210>
    {
        return;
    }

    rc_ctrl->rc.ch[0] = (sbus_buf[0] | (sbus_buf[1] << 8)) & 0x07ff;        //!< Channel 0
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	781b      	ldrb	r3, [r3, #0]
 8001a1a:	b2db      	uxtb	r3, r3
 8001a1c:	b21a      	sxth	r2, r3
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	3301      	adds	r3, #1
 8001a22:	781b      	ldrb	r3, [r3, #0]
 8001a24:	b2db      	uxtb	r3, r3
 8001a26:	021b      	lsls	r3, r3, #8
 8001a28:	b21b      	sxth	r3, r3
 8001a2a:	4313      	orrs	r3, r2
 8001a2c:	b21b      	sxth	r3, r3
 8001a2e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001a32:	b21a      	sxth	r2, r3
 8001a34:	683b      	ldr	r3, [r7, #0]
 8001a36:	801a      	strh	r2, [r3, #0]
    rc_ctrl->rc.ch[1] = ((sbus_buf[1] >> 3) | (sbus_buf[2] << 5)) & 0x07ff; //!< Channel 1
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	3301      	adds	r3, #1
 8001a3c:	781b      	ldrb	r3, [r3, #0]
 8001a3e:	b2db      	uxtb	r3, r3
 8001a40:	08db      	lsrs	r3, r3, #3
 8001a42:	b2db      	uxtb	r3, r3
 8001a44:	b21a      	sxth	r2, r3
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	3302      	adds	r3, #2
 8001a4a:	781b      	ldrb	r3, [r3, #0]
 8001a4c:	b2db      	uxtb	r3, r3
 8001a4e:	015b      	lsls	r3, r3, #5
 8001a50:	b21b      	sxth	r3, r3
 8001a52:	4313      	orrs	r3, r2
 8001a54:	b21b      	sxth	r3, r3
 8001a56:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001a5a:	b21a      	sxth	r2, r3
 8001a5c:	683b      	ldr	r3, [r7, #0]
 8001a5e:	805a      	strh	r2, [r3, #2]
    rc_ctrl->rc.ch[2] = ((sbus_buf[2] >> 6) | (sbus_buf[3] << 2) |          //!< Channel 2
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	3302      	adds	r3, #2
 8001a64:	781b      	ldrb	r3, [r3, #0]
 8001a66:	b2db      	uxtb	r3, r3
 8001a68:	099b      	lsrs	r3, r3, #6
 8001a6a:	b2db      	uxtb	r3, r3
 8001a6c:	b21a      	sxth	r2, r3
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	3303      	adds	r3, #3
 8001a72:	781b      	ldrb	r3, [r3, #0]
 8001a74:	b2db      	uxtb	r3, r3
 8001a76:	009b      	lsls	r3, r3, #2
 8001a78:	b21b      	sxth	r3, r3
 8001a7a:	4313      	orrs	r3, r2
 8001a7c:	b21a      	sxth	r2, r3
                         (sbus_buf[4] << 10)) &0x07ff;
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	3304      	adds	r3, #4
 8001a82:	781b      	ldrb	r3, [r3, #0]
 8001a84:	b2db      	uxtb	r3, r3
 8001a86:	029b      	lsls	r3, r3, #10
    rc_ctrl->rc.ch[2] = ((sbus_buf[2] >> 6) | (sbus_buf[3] << 2) |          //!< Channel 2
 8001a88:	b21b      	sxth	r3, r3
 8001a8a:	4313      	orrs	r3, r2
 8001a8c:	b21b      	sxth	r3, r3
                         (sbus_buf[4] << 10)) &0x07ff;
 8001a8e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001a92:	b21a      	sxth	r2, r3
    rc_ctrl->rc.ch[2] = ((sbus_buf[2] >> 6) | (sbus_buf[3] << 2) |          //!< Channel 2
 8001a94:	683b      	ldr	r3, [r7, #0]
 8001a96:	809a      	strh	r2, [r3, #4]
    rc_ctrl->rc.ch[3] = ((sbus_buf[4] >> 1) | (sbus_buf[5] << 7)) & 0x07ff; //!< Channel 3
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	3304      	adds	r3, #4
 8001a9c:	781b      	ldrb	r3, [r3, #0]
 8001a9e:	b2db      	uxtb	r3, r3
 8001aa0:	085b      	lsrs	r3, r3, #1
 8001aa2:	b2db      	uxtb	r3, r3
 8001aa4:	b21a      	sxth	r2, r3
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	3305      	adds	r3, #5
 8001aaa:	781b      	ldrb	r3, [r3, #0]
 8001aac:	b2db      	uxtb	r3, r3
 8001aae:	01db      	lsls	r3, r3, #7
 8001ab0:	b21b      	sxth	r3, r3
 8001ab2:	4313      	orrs	r3, r2
 8001ab4:	b21b      	sxth	r3, r3
 8001ab6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001aba:	b21a      	sxth	r2, r3
 8001abc:	683b      	ldr	r3, [r7, #0]
 8001abe:	80da      	strh	r2, [r3, #6]
    rc_ctrl->rc.s[0] = ((sbus_buf[5] >> 4) & 0x0003);                  //!< Switch left
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	3305      	adds	r3, #5
 8001ac4:	781b      	ldrb	r3, [r3, #0]
 8001ac6:	b2db      	uxtb	r3, r3
 8001ac8:	091b      	lsrs	r3, r3, #4
 8001aca:	b2db      	uxtb	r3, r3
 8001acc:	f003 0303 	and.w	r3, r3, #3
 8001ad0:	b2da      	uxtb	r2, r3
 8001ad2:	683b      	ldr	r3, [r7, #0]
 8001ad4:	729a      	strb	r2, [r3, #10]
    rc_ctrl->rc.s[1] = ((sbus_buf[5] >> 4) & 0x000C) >> 2;                       //!< Switch right
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	3305      	adds	r3, #5
 8001ada:	781b      	ldrb	r3, [r3, #0]
 8001adc:	b2db      	uxtb	r3, r3
 8001ade:	091b      	lsrs	r3, r3, #4
 8001ae0:	b2db      	uxtb	r3, r3
 8001ae2:	109b      	asrs	r3, r3, #2
 8001ae4:	b2db      	uxtb	r3, r3
 8001ae6:	f003 0303 	and.w	r3, r3, #3
 8001aea:	b2da      	uxtb	r2, r3
 8001aec:	683b      	ldr	r3, [r7, #0]
 8001aee:	72da      	strb	r2, [r3, #11]
    rc_ctrl->mouse.x = sbus_buf[6] | (sbus_buf[7] << 8);                    //!< Mouse X axis
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	3306      	adds	r3, #6
 8001af4:	781b      	ldrb	r3, [r3, #0]
 8001af6:	b2db      	uxtb	r3, r3
 8001af8:	b21a      	sxth	r2, r3
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	3307      	adds	r3, #7
 8001afe:	781b      	ldrb	r3, [r3, #0]
 8001b00:	b2db      	uxtb	r3, r3
 8001b02:	021b      	lsls	r3, r3, #8
 8001b04:	b21b      	sxth	r3, r3
 8001b06:	4313      	orrs	r3, r2
 8001b08:	b21a      	sxth	r2, r3
 8001b0a:	683b      	ldr	r3, [r7, #0]
 8001b0c:	819a      	strh	r2, [r3, #12]
    rc_ctrl->mouse.y = sbus_buf[8] | (sbus_buf[9] << 8);                    //!< Mouse Y axis
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	3308      	adds	r3, #8
 8001b12:	781b      	ldrb	r3, [r3, #0]
 8001b14:	b2db      	uxtb	r3, r3
 8001b16:	b21a      	sxth	r2, r3
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	3309      	adds	r3, #9
 8001b1c:	781b      	ldrb	r3, [r3, #0]
 8001b1e:	b2db      	uxtb	r3, r3
 8001b20:	021b      	lsls	r3, r3, #8
 8001b22:	b21b      	sxth	r3, r3
 8001b24:	4313      	orrs	r3, r2
 8001b26:	b21a      	sxth	r2, r3
 8001b28:	683b      	ldr	r3, [r7, #0]
 8001b2a:	81da      	strh	r2, [r3, #14]
    rc_ctrl->mouse.z = sbus_buf[10] | (sbus_buf[11] << 8);                  //!< Mouse Z axis
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	330a      	adds	r3, #10
 8001b30:	781b      	ldrb	r3, [r3, #0]
 8001b32:	b2db      	uxtb	r3, r3
 8001b34:	b21a      	sxth	r2, r3
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	330b      	adds	r3, #11
 8001b3a:	781b      	ldrb	r3, [r3, #0]
 8001b3c:	b2db      	uxtb	r3, r3
 8001b3e:	021b      	lsls	r3, r3, #8
 8001b40:	b21b      	sxth	r3, r3
 8001b42:	4313      	orrs	r3, r2
 8001b44:	b21a      	sxth	r2, r3
 8001b46:	683b      	ldr	r3, [r7, #0]
 8001b48:	821a      	strh	r2, [r3, #16]
    rc_ctrl->mouse.press_l = sbus_buf[12];                                  //!< Mouse Left Is Press ?
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	7b1b      	ldrb	r3, [r3, #12]
 8001b4e:	b2da      	uxtb	r2, r3
 8001b50:	683b      	ldr	r3, [r7, #0]
 8001b52:	749a      	strb	r2, [r3, #18]
    rc_ctrl->mouse.press_r = sbus_buf[13];                                  //!< Mouse Right Is Press ?
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	7b5b      	ldrb	r3, [r3, #13]
 8001b58:	b2da      	uxtb	r2, r3
 8001b5a:	683b      	ldr	r3, [r7, #0]
 8001b5c:	74da      	strb	r2, [r3, #19]
    rc_ctrl->key.v = sbus_buf[14] | (sbus_buf[15] << 8);                    //!< KeyBoard value
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	330e      	adds	r3, #14
 8001b62:	781b      	ldrb	r3, [r3, #0]
 8001b64:	b2db      	uxtb	r3, r3
 8001b66:	b21a      	sxth	r2, r3
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	330f      	adds	r3, #15
 8001b6c:	781b      	ldrb	r3, [r3, #0]
 8001b6e:	b2db      	uxtb	r3, r3
 8001b70:	021b      	lsls	r3, r3, #8
 8001b72:	b21b      	sxth	r3, r3
 8001b74:	4313      	orrs	r3, r2
 8001b76:	b21b      	sxth	r3, r3
 8001b78:	b29a      	uxth	r2, r3
 8001b7a:	683b      	ldr	r3, [r7, #0]
 8001b7c:	829a      	strh	r2, [r3, #20]
    rc_ctrl->rc.ch[4] = sbus_buf[16] | (sbus_buf[17] << 8);                 //NULL
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	3310      	adds	r3, #16
 8001b82:	781b      	ldrb	r3, [r3, #0]
 8001b84:	b2db      	uxtb	r3, r3
 8001b86:	b21a      	sxth	r2, r3
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	3311      	adds	r3, #17
 8001b8c:	781b      	ldrb	r3, [r3, #0]
 8001b8e:	b2db      	uxtb	r3, r3
 8001b90:	021b      	lsls	r3, r3, #8
 8001b92:	b21b      	sxth	r3, r3
 8001b94:	4313      	orrs	r3, r2
 8001b96:	b21a      	sxth	r2, r3
 8001b98:	683b      	ldr	r3, [r7, #0]
 8001b9a:	811a      	strh	r2, [r3, #8]

    rc_ctrl->rc.ch[0] -= RC_CH_VALUE_OFFSET;
 8001b9c:	683b      	ldr	r3, [r7, #0]
 8001b9e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001ba2:	b21b      	sxth	r3, r3
 8001ba4:	b29b      	uxth	r3, r3
 8001ba6:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 8001baa:	b29b      	uxth	r3, r3
 8001bac:	b21a      	sxth	r2, r3
 8001bae:	683b      	ldr	r3, [r7, #0]
 8001bb0:	801a      	strh	r2, [r3, #0]
    rc_ctrl->rc.ch[1] -= RC_CH_VALUE_OFFSET;
 8001bb2:	683b      	ldr	r3, [r7, #0]
 8001bb4:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001bb8:	b21b      	sxth	r3, r3
 8001bba:	b29b      	uxth	r3, r3
 8001bbc:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 8001bc0:	b29b      	uxth	r3, r3
 8001bc2:	b21a      	sxth	r2, r3
 8001bc4:	683b      	ldr	r3, [r7, #0]
 8001bc6:	805a      	strh	r2, [r3, #2]
    rc_ctrl->rc.ch[2] -= RC_CH_VALUE_OFFSET;
 8001bc8:	683b      	ldr	r3, [r7, #0]
 8001bca:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001bce:	b21b      	sxth	r3, r3
 8001bd0:	b29b      	uxth	r3, r3
 8001bd2:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 8001bd6:	b29b      	uxth	r3, r3
 8001bd8:	b21a      	sxth	r2, r3
 8001bda:	683b      	ldr	r3, [r7, #0]
 8001bdc:	809a      	strh	r2, [r3, #4]
    rc_ctrl->rc.ch[3] -= RC_CH_VALUE_OFFSET;
 8001bde:	683b      	ldr	r3, [r7, #0]
 8001be0:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8001be4:	b21b      	sxth	r3, r3
 8001be6:	b29b      	uxth	r3, r3
 8001be8:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 8001bec:	b29b      	uxth	r3, r3
 8001bee:	b21a      	sxth	r2, r3
 8001bf0:	683b      	ldr	r3, [r7, #0]
 8001bf2:	80da      	strh	r2, [r3, #6]
    rc_ctrl->rc.ch[4] -= RC_CH_VALUE_OFFSET;
 8001bf4:	683b      	ldr	r3, [r7, #0]
 8001bf6:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8001bfa:	b21b      	sxth	r3, r3
 8001bfc:	b29b      	uxth	r3, r3
 8001bfe:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 8001c02:	b29b      	uxth	r3, r3
 8001c04:	b21a      	sxth	r2, r3
 8001c06:	683b      	ldr	r3, [r7, #0]
 8001c08:	811a      	strh	r2, [r3, #8]
 8001c0a:	e000      	b.n	8001c0e <sbus_to_rc+0x212>
        return;
 8001c0c:	bf00      	nop
}
 8001c0e:	370c      	adds	r7, #12
 8001c10:	46bd      	mov	sp, r7
 8001c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c16:	4770      	bx	lr

08001c18 <sbus_to_usart1>:
  * @brief          通过usart1发送sbus数据,在usart3_IRQHandle调用
  * @param[in]      sbus: sbus数据, 18字节
  * @retval         none
  */
void sbus_to_usart1(uint8_t *sbus)
{
 8001c18:	b580      	push	{r7, lr}
 8001c1a:	b082      	sub	sp, #8
 8001c1c:	af00      	add	r7, sp, #0
 8001c1e:	6078      	str	r0, [r7, #4]
    static uint8_t usart_tx_buf[20];
    static uint8_t i =0;
    usart_tx_buf[0] = 0xA6;
 8001c20:	4b16      	ldr	r3, [pc, #88]	; (8001c7c <sbus_to_usart1+0x64>)
 8001c22:	22a6      	movs	r2, #166	; 0xa6
 8001c24:	701a      	strb	r2, [r3, #0]
    memcpy(usart_tx_buf + 1, sbus, 18);
 8001c26:	4b16      	ldr	r3, [pc, #88]	; (8001c80 <sbus_to_usart1+0x68>)
 8001c28:	2212      	movs	r2, #18
 8001c2a:	6879      	ldr	r1, [r7, #4]
 8001c2c:	4618      	mov	r0, r3
 8001c2e:	f00b fc6f 	bl	800d510 <memcpy>
    for(i = 0, usart_tx_buf[19] = 0; i < 19; i++)
 8001c32:	4b14      	ldr	r3, [pc, #80]	; (8001c84 <sbus_to_usart1+0x6c>)
 8001c34:	2200      	movs	r2, #0
 8001c36:	701a      	strb	r2, [r3, #0]
 8001c38:	4b10      	ldr	r3, [pc, #64]	; (8001c7c <sbus_to_usart1+0x64>)
 8001c3a:	2200      	movs	r2, #0
 8001c3c:	74da      	strb	r2, [r3, #19]
 8001c3e:	e010      	b.n	8001c62 <sbus_to_usart1+0x4a>
    {
        usart_tx_buf[19] += usart_tx_buf[i];
 8001c40:	4b0e      	ldr	r3, [pc, #56]	; (8001c7c <sbus_to_usart1+0x64>)
 8001c42:	7cda      	ldrb	r2, [r3, #19]
 8001c44:	4b0f      	ldr	r3, [pc, #60]	; (8001c84 <sbus_to_usart1+0x6c>)
 8001c46:	781b      	ldrb	r3, [r3, #0]
 8001c48:	4619      	mov	r1, r3
 8001c4a:	4b0c      	ldr	r3, [pc, #48]	; (8001c7c <sbus_to_usart1+0x64>)
 8001c4c:	5c5b      	ldrb	r3, [r3, r1]
 8001c4e:	4413      	add	r3, r2
 8001c50:	b2da      	uxtb	r2, r3
 8001c52:	4b0a      	ldr	r3, [pc, #40]	; (8001c7c <sbus_to_usart1+0x64>)
 8001c54:	74da      	strb	r2, [r3, #19]
    for(i = 0, usart_tx_buf[19] = 0; i < 19; i++)
 8001c56:	4b0b      	ldr	r3, [pc, #44]	; (8001c84 <sbus_to_usart1+0x6c>)
 8001c58:	781b      	ldrb	r3, [r3, #0]
 8001c5a:	3301      	adds	r3, #1
 8001c5c:	b2da      	uxtb	r2, r3
 8001c5e:	4b09      	ldr	r3, [pc, #36]	; (8001c84 <sbus_to_usart1+0x6c>)
 8001c60:	701a      	strb	r2, [r3, #0]
 8001c62:	4b08      	ldr	r3, [pc, #32]	; (8001c84 <sbus_to_usart1+0x6c>)
 8001c64:	781b      	ldrb	r3, [r3, #0]
 8001c66:	2b12      	cmp	r3, #18
 8001c68:	d9ea      	bls.n	8001c40 <sbus_to_usart1+0x28>
    }
    usart1_tx_dma_enable(usart_tx_buf, 20);
 8001c6a:	2114      	movs	r1, #20
 8001c6c:	4803      	ldr	r0, [pc, #12]	; (8001c7c <sbus_to_usart1+0x64>)
 8001c6e:	f000 f8f1 	bl	8001e54 <usart1_tx_dma_enable>
}
 8001c72:	bf00      	nop
 8001c74:	3708      	adds	r7, #8
 8001c76:	46bd      	mov	sp, r7
 8001c78:	bd80      	pop	{r7, pc}
 8001c7a:	bf00      	nop
 8001c7c:	200000ec 	.word	0x200000ec
 8001c80:	200000ed 	.word	0x200000ed
 8001c84:	20000100 	.word	0x20000100

08001c88 <BSP_CAN_Filtering_Init>:
 * @brief:        Set up filtering ID and mask for board
 * @param[in]:    None
 * @param[out]:   can_filter_st: The set up settings for the filter transmitted to HAL layer
 * @retval:       None
 */
void BSP_CAN_Filtering_Init(void) {
 8001c88:	b580      	push	{r7, lr}
 8001c8a:	b08a      	sub	sp, #40	; 0x28
 8001c8c:	af00      	add	r7, sp, #0
	CAN_FilterTypeDef can_filter_st;
	can_filter_st.FilterActivation = ENABLE;
 8001c8e:	2301      	movs	r3, #1
 8001c90:	623b      	str	r3, [r7, #32]
	can_filter_st.FilterMode = CAN_FILTERMODE_IDMASK;
 8001c92:	2300      	movs	r3, #0
 8001c94:	61bb      	str	r3, [r7, #24]
	can_filter_st.FilterScale = CAN_FILTERSCALE_32BIT;
 8001c96:	2301      	movs	r3, #1
 8001c98:	61fb      	str	r3, [r7, #28]
	can_filter_st.FilterIdHigh = 0x0000;
 8001c9a:	2300      	movs	r3, #0
 8001c9c:	603b      	str	r3, [r7, #0]
	can_filter_st.FilterIdLow = 0x0000;
 8001c9e:	2300      	movs	r3, #0
 8001ca0:	607b      	str	r3, [r7, #4]
	can_filter_st.FilterMaskIdHigh = 0x0000;
 8001ca2:	2300      	movs	r3, #0
 8001ca4:	60bb      	str	r3, [r7, #8]
	can_filter_st.FilterMaskIdLow = 0x0000;
 8001ca6:	2300      	movs	r3, #0
 8001ca8:	60fb      	str	r3, [r7, #12]
	can_filter_st.FilterBank = 0;
 8001caa:	2300      	movs	r3, #0
 8001cac:	617b      	str	r3, [r7, #20]
	can_filter_st.FilterFIFOAssignment = CAN_RX_FIFO0;
 8001cae:	2300      	movs	r3, #0
 8001cb0:	613b      	str	r3, [r7, #16]
	HAL_CAN_ConfigFilter(&hcan1, &can_filter_st);
 8001cb2:	463b      	mov	r3, r7
 8001cb4:	4619      	mov	r1, r3
 8001cb6:	480f      	ldr	r0, [pc, #60]	; (8001cf4 <BSP_CAN_Filtering_Init+0x6c>)
 8001cb8:	f001 fc78 	bl	80035ac <HAL_CAN_ConfigFilter>
	HAL_CAN_Start(&hcan1);
 8001cbc:	480d      	ldr	r0, [pc, #52]	; (8001cf4 <BSP_CAN_Filtering_Init+0x6c>)
 8001cbe:	f001 fd55 	bl	800376c <HAL_CAN_Start>
	HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING);
 8001cc2:	2102      	movs	r1, #2
 8001cc4:	480b      	ldr	r0, [pc, #44]	; (8001cf4 <BSP_CAN_Filtering_Init+0x6c>)
 8001cc6:	f001 ff82 	bl	8003bce <HAL_CAN_ActivateNotification>

	can_filter_st.SlaveStartFilterBank = 14;
 8001cca:	230e      	movs	r3, #14
 8001ccc:	627b      	str	r3, [r7, #36]	; 0x24
	can_filter_st.FilterBank = 14;
 8001cce:	230e      	movs	r3, #14
 8001cd0:	617b      	str	r3, [r7, #20]
	HAL_CAN_ConfigFilter(&hcan2, &can_filter_st);
 8001cd2:	463b      	mov	r3, r7
 8001cd4:	4619      	mov	r1, r3
 8001cd6:	4808      	ldr	r0, [pc, #32]	; (8001cf8 <BSP_CAN_Filtering_Init+0x70>)
 8001cd8:	f001 fc68 	bl	80035ac <HAL_CAN_ConfigFilter>
	HAL_CAN_Start(&hcan2);
 8001cdc:	4806      	ldr	r0, [pc, #24]	; (8001cf8 <BSP_CAN_Filtering_Init+0x70>)
 8001cde:	f001 fd45 	bl	800376c <HAL_CAN_Start>
	HAL_CAN_ActivateNotification(&hcan2, CAN_IT_RX_FIFO0_MSG_PENDING);
 8001ce2:	2102      	movs	r1, #2
 8001ce4:	4804      	ldr	r0, [pc, #16]	; (8001cf8 <BSP_CAN_Filtering_Init+0x70>)
 8001ce6:	f001 ff72 	bl	8003bce <HAL_CAN_ActivateNotification>
}
 8001cea:	bf00      	nop
 8001cec:	3728      	adds	r7, #40	; 0x28
 8001cee:	46bd      	mov	sp, r7
 8001cf0:	bd80      	pop	{r7, pc}
 8001cf2:	bf00      	nop
 8001cf4:	20004c94 	.word	0x20004c94
 8001cf8:	20004c6c 	.word	0x20004c6c

08001cfc <HAL_CAN_RxFifo0MsgPendingCallback>:
 * @brief:        Send Data to the APP layer to do data processing when receiving data from CAN port
 * @param[in]:    hcan: The CAN port that have data transmitted in
 * @param[out]:   rx_data: The data received from HAL layer, to be transmitted to the APP layer
 * @retvel:       None
 */
void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan) {
 8001cfc:	b5b0      	push	{r4, r5, r7, lr}
 8001cfe:	b08c      	sub	sp, #48	; 0x30
 8001d00:	af00      	add	r7, sp, #0
 8001d02:	6078      	str	r0, [r7, #4]
	CAN_RxHeaderTypeDef rx_header;
	uint8_t rx_data[8];

	HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &rx_header, rx_data); //Get Data From HAL Layer
 8001d04:	f107 0308 	add.w	r3, r7, #8
 8001d08:	f107 0210 	add.w	r2, r7, #16
 8001d0c:	2100      	movs	r1, #0
 8001d0e:	6878      	ldr	r0, [r7, #4]
 8001d10:	f001 fe4b 	bl	80039aa <HAL_CAN_GetRxMessage>

	CAN_BSP_return_data.header = rx_header;
 8001d14:	4b1e      	ldr	r3, [pc, #120]	; (8001d90 <HAL_CAN_RxFifo0MsgPendingCallback+0x94>)
 8001d16:	461d      	mov	r5, r3
 8001d18:	f107 0410 	add.w	r4, r7, #16
 8001d1c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001d1e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001d20:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8001d24:	e885 0007 	stmia.w	r5, {r0, r1, r2}
	for (int i = 0; i < 8; i++){
 8001d28:	2300      	movs	r3, #0
 8001d2a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001d2c:	e00d      	b.n	8001d4a <HAL_CAN_RxFifo0MsgPendingCallback+0x4e>
		CAN_BSP_return_data.data[i] = rx_data[i];
 8001d2e:	f107 0208 	add.w	r2, r7, #8
 8001d32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001d34:	4413      	add	r3, r2
 8001d36:	7819      	ldrb	r1, [r3, #0]
 8001d38:	4a15      	ldr	r2, [pc, #84]	; (8001d90 <HAL_CAN_RxFifo0MsgPendingCallback+0x94>)
 8001d3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001d3c:	4413      	add	r3, r2
 8001d3e:	331c      	adds	r3, #28
 8001d40:	460a      	mov	r2, r1
 8001d42:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < 8; i++){
 8001d44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001d46:	3301      	adds	r3, #1
 8001d48:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001d4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001d4c:	2b07      	cmp	r3, #7
 8001d4e:	ddee      	ble.n	8001d2e <HAL_CAN_RxFifo0MsgPendingCallback+0x32>
	}

//	BSP_CAN_Msg_Ptr(rx_header, rx_data);

	if (hcan->Instance == CAN1) {
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	4a0f      	ldr	r2, [pc, #60]	; (8001d94 <HAL_CAN_RxFifo0MsgPendingCallback+0x98>)
 8001d56:	4293      	cmp	r3, r2
 8001d58:	d108      	bne.n	8001d6c <HAL_CAN_RxFifo0MsgPendingCallback+0x70>
		APP_Get_CAN1_Data(&rx_header, rx_data); //Pass data to APP Layer
 8001d5a:	f107 0208 	add.w	r2, r7, #8
 8001d5e:	f107 0310 	add.w	r3, r7, #16
 8001d62:	4611      	mov	r1, r2
 8001d64:	4618      	mov	r0, r3
 8001d66:	f7ff f893 	bl	8000e90 <APP_Get_CAN1_Data>
	}
	else if (hcan->Instance == CAN2)
	{
		APP_Get_CAN2_Data(&rx_header, rx_data); //Pass data to APP Layer
	}
}
 8001d6a:	e00c      	b.n	8001d86 <HAL_CAN_RxFifo0MsgPendingCallback+0x8a>
	else if (hcan->Instance == CAN2)
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	4a09      	ldr	r2, [pc, #36]	; (8001d98 <HAL_CAN_RxFifo0MsgPendingCallback+0x9c>)
 8001d72:	4293      	cmp	r3, r2
 8001d74:	d107      	bne.n	8001d86 <HAL_CAN_RxFifo0MsgPendingCallback+0x8a>
		APP_Get_CAN2_Data(&rx_header, rx_data); //Pass data to APP Layer
 8001d76:	f107 0208 	add.w	r2, r7, #8
 8001d7a:	f107 0310 	add.w	r3, r7, #16
 8001d7e:	4611      	mov	r1, r2
 8001d80:	4618      	mov	r0, r3
 8001d82:	f7ff f8b4 	bl	8000eee <APP_Get_CAN2_Data>
}
 8001d86:	bf00      	nop
 8001d88:	3730      	adds	r7, #48	; 0x30
 8001d8a:	46bd      	mov	sp, r7
 8001d8c:	bdb0      	pop	{r4, r5, r7, pc}
 8001d8e:	bf00      	nop
 8001d90:	20004c48 	.word	0x20004c48
 8001d94:	40006400 	.word	0x40006400
 8001d98:	40006800 	.word	0x40006800

08001d9c <RC_Init>:
  * @param[in]      rx2_buf: memory buffer 2
  * @param[in]      dma_buf_num: data length
  * @retval         none
  */
void RC_Init(uint8_t *rx1_buf, uint8_t *rx2_buf, uint16_t dma_buf_num)
{
 8001d9c:	b480      	push	{r7}
 8001d9e:	b085      	sub	sp, #20
 8001da0:	af00      	add	r7, sp, #0
 8001da2:	60f8      	str	r0, [r7, #12]
 8001da4:	60b9      	str	r1, [r7, #8]
 8001da6:	4613      	mov	r3, r2
 8001da8:	80fb      	strh	r3, [r7, #6]

    //enable the DMA transfer for the receiver request
    SET_BIT(huart3.Instance->CR3, USART_CR3_DMAR);
 8001daa:	4b27      	ldr	r3, [pc, #156]	; (8001e48 <RC_Init+0xac>)
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	695a      	ldr	r2, [r3, #20]
 8001db0:	4b25      	ldr	r3, [pc, #148]	; (8001e48 <RC_Init+0xac>)
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001db8:	615a      	str	r2, [r3, #20]

    //enable idle interrupt
    __HAL_UART_ENABLE_IT(&huart3, UART_IT_IDLE);
 8001dba:	4b23      	ldr	r3, [pc, #140]	; (8001e48 <RC_Init+0xac>)
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	68da      	ldr	r2, [r3, #12]
 8001dc0:	4b21      	ldr	r3, [pc, #132]	; (8001e48 <RC_Init+0xac>)
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	f042 0210 	orr.w	r2, r2, #16
 8001dc8:	60da      	str	r2, [r3, #12]

    //disable DMA
    __HAL_DMA_DISABLE(&hdma_usart3_rx);
 8001dca:	4b20      	ldr	r3, [pc, #128]	; (8001e4c <RC_Init+0xb0>)
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	681a      	ldr	r2, [r3, #0]
 8001dd0:	4b1e      	ldr	r3, [pc, #120]	; (8001e4c <RC_Init+0xb0>)
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	f022 0201 	bic.w	r2, r2, #1
 8001dd8:	601a      	str	r2, [r3, #0]
    while(hdma_usart3_rx.Instance->CR & DMA_SxCR_EN)
 8001dda:	e007      	b.n	8001dec <RC_Init+0x50>
    {
        __HAL_DMA_DISABLE(&hdma_usart3_rx);
 8001ddc:	4b1b      	ldr	r3, [pc, #108]	; (8001e4c <RC_Init+0xb0>)
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	681a      	ldr	r2, [r3, #0]
 8001de2:	4b1a      	ldr	r3, [pc, #104]	; (8001e4c <RC_Init+0xb0>)
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	f022 0201 	bic.w	r2, r2, #1
 8001dea:	601a      	str	r2, [r3, #0]
    while(hdma_usart3_rx.Instance->CR & DMA_SxCR_EN)
 8001dec:	4b17      	ldr	r3, [pc, #92]	; (8001e4c <RC_Init+0xb0>)
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	f003 0301 	and.w	r3, r3, #1
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d1f0      	bne.n	8001ddc <RC_Init+0x40>
    }

    hdma_usart3_rx.Instance->PAR = (uint32_t) & (USART3->DR);
 8001dfa:	4b14      	ldr	r3, [pc, #80]	; (8001e4c <RC_Init+0xb0>)
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	4a14      	ldr	r2, [pc, #80]	; (8001e50 <RC_Init+0xb4>)
 8001e00:	609a      	str	r2, [r3, #8]
    //memory buffer 1
    hdma_usart3_rx.Instance->M0AR = (uint32_t)(rx1_buf);
 8001e02:	4b12      	ldr	r3, [pc, #72]	; (8001e4c <RC_Init+0xb0>)
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	68fa      	ldr	r2, [r7, #12]
 8001e08:	60da      	str	r2, [r3, #12]
    //memory buffer 2
    hdma_usart3_rx.Instance->M1AR = (uint32_t)(rx2_buf);
 8001e0a:	4b10      	ldr	r3, [pc, #64]	; (8001e4c <RC_Init+0xb0>)
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	68ba      	ldr	r2, [r7, #8]
 8001e10:	611a      	str	r2, [r3, #16]
    //data length
    hdma_usart3_rx.Instance->NDTR = dma_buf_num;
 8001e12:	4b0e      	ldr	r3, [pc, #56]	; (8001e4c <RC_Init+0xb0>)
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	88fa      	ldrh	r2, [r7, #6]
 8001e18:	605a      	str	r2, [r3, #4]
    //enable double memory buffer
    SET_BIT(hdma_usart3_rx.Instance->CR, DMA_SxCR_DBM);
 8001e1a:	4b0c      	ldr	r3, [pc, #48]	; (8001e4c <RC_Init+0xb0>)
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	681a      	ldr	r2, [r3, #0]
 8001e20:	4b0a      	ldr	r3, [pc, #40]	; (8001e4c <RC_Init+0xb0>)
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8001e28:	601a      	str	r2, [r3, #0]

    //enable DMA
    __HAL_DMA_ENABLE(&hdma_usart3_rx);
 8001e2a:	4b08      	ldr	r3, [pc, #32]	; (8001e4c <RC_Init+0xb0>)
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	681a      	ldr	r2, [r3, #0]
 8001e30:	4b06      	ldr	r3, [pc, #24]	; (8001e4c <RC_Init+0xb0>)
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	f042 0201 	orr.w	r2, r2, #1
 8001e38:	601a      	str	r2, [r3, #0]
}
 8001e3a:	bf00      	nop
 8001e3c:	3714      	adds	r7, #20
 8001e3e:	46bd      	mov	sp, r7
 8001e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e44:	4770      	bx	lr
 8001e46:	bf00      	nop
 8001e48:	20004fdc 	.word	0x20004fdc
 8001e4c:	20004f7c 	.word	0x20004f7c
 8001e50:	40004804 	.word	0x40004804

08001e54 <usart1_tx_dma_enable>:
    hdma_usart1_tx.Instance->NDTR = 0;


}
void usart1_tx_dma_enable(uint8_t *data, uint16_t len)
{
 8001e54:	b480      	push	{r7}
 8001e56:	b083      	sub	sp, #12
 8001e58:	af00      	add	r7, sp, #0
 8001e5a:	6078      	str	r0, [r7, #4]
 8001e5c:	460b      	mov	r3, r1
 8001e5e:	807b      	strh	r3, [r7, #2]
    //disable DMA
    //ʧЧDMA
    __HAL_DMA_DISABLE(&hdma_usart1_tx);
 8001e60:	4b29      	ldr	r3, [pc, #164]	; (8001f08 <usart1_tx_dma_enable+0xb4>)
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	681a      	ldr	r2, [r3, #0]
 8001e66:	4b28      	ldr	r3, [pc, #160]	; (8001f08 <usart1_tx_dma_enable+0xb4>)
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	f022 0201 	bic.w	r2, r2, #1
 8001e6e:	601a      	str	r2, [r3, #0]

    while(hdma_usart1_tx.Instance->CR & DMA_SxCR_EN)
 8001e70:	e007      	b.n	8001e82 <usart1_tx_dma_enable+0x2e>
    {
        __HAL_DMA_DISABLE(&hdma_usart1_tx);
 8001e72:	4b25      	ldr	r3, [pc, #148]	; (8001f08 <usart1_tx_dma_enable+0xb4>)
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	681a      	ldr	r2, [r3, #0]
 8001e78:	4b23      	ldr	r3, [pc, #140]	; (8001f08 <usart1_tx_dma_enable+0xb4>)
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	f022 0201 	bic.w	r2, r2, #1
 8001e80:	601a      	str	r2, [r3, #0]
    while(hdma_usart1_tx.Instance->CR & DMA_SxCR_EN)
 8001e82:	4b21      	ldr	r3, [pc, #132]	; (8001f08 <usart1_tx_dma_enable+0xb4>)
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	f003 0301 	and.w	r3, r3, #1
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d1f0      	bne.n	8001e72 <usart1_tx_dma_enable+0x1e>
    }

    __HAL_DMA_CLEAR_FLAG(&hdma_usart1_tx, DMA_HISR_TCIF7);
 8001e90:	4b1d      	ldr	r3, [pc, #116]	; (8001f08 <usart1_tx_dma_enable+0xb4>)
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	461a      	mov	r2, r3
 8001e96:	4b1d      	ldr	r3, [pc, #116]	; (8001f0c <usart1_tx_dma_enable+0xb8>)
 8001e98:	429a      	cmp	r2, r3
 8001e9a:	d904      	bls.n	8001ea6 <usart1_tx_dma_enable+0x52>
 8001e9c:	4b1c      	ldr	r3, [pc, #112]	; (8001f10 <usart1_tx_dma_enable+0xbc>)
 8001e9e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001ea2:	60da      	str	r2, [r3, #12]
 8001ea4:	e019      	b.n	8001eda <usart1_tx_dma_enable+0x86>
 8001ea6:	4b18      	ldr	r3, [pc, #96]	; (8001f08 <usart1_tx_dma_enable+0xb4>)
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	461a      	mov	r2, r3
 8001eac:	4b19      	ldr	r3, [pc, #100]	; (8001f14 <usart1_tx_dma_enable+0xc0>)
 8001eae:	429a      	cmp	r2, r3
 8001eb0:	d904      	bls.n	8001ebc <usart1_tx_dma_enable+0x68>
 8001eb2:	4a17      	ldr	r2, [pc, #92]	; (8001f10 <usart1_tx_dma_enable+0xbc>)
 8001eb4:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8001eb8:	6093      	str	r3, [r2, #8]
 8001eba:	e00e      	b.n	8001eda <usart1_tx_dma_enable+0x86>
 8001ebc:	4b12      	ldr	r3, [pc, #72]	; (8001f08 <usart1_tx_dma_enable+0xb4>)
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	461a      	mov	r2, r3
 8001ec2:	4b15      	ldr	r3, [pc, #84]	; (8001f18 <usart1_tx_dma_enable+0xc4>)
 8001ec4:	429a      	cmp	r2, r3
 8001ec6:	d904      	bls.n	8001ed2 <usart1_tx_dma_enable+0x7e>
 8001ec8:	4a14      	ldr	r2, [pc, #80]	; (8001f1c <usart1_tx_dma_enable+0xc8>)
 8001eca:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8001ece:	60d3      	str	r3, [r2, #12]
 8001ed0:	e003      	b.n	8001eda <usart1_tx_dma_enable+0x86>
 8001ed2:	4a12      	ldr	r2, [pc, #72]	; (8001f1c <usart1_tx_dma_enable+0xc8>)
 8001ed4:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8001ed8:	6093      	str	r3, [r2, #8]

    hdma_usart1_tx.Instance->M0AR = (uint32_t)(data);
 8001eda:	4b0b      	ldr	r3, [pc, #44]	; (8001f08 <usart1_tx_dma_enable+0xb4>)
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	687a      	ldr	r2, [r7, #4]
 8001ee0:	60da      	str	r2, [r3, #12]
    __HAL_DMA_SET_COUNTER(&hdma_usart1_tx, len);
 8001ee2:	4b09      	ldr	r3, [pc, #36]	; (8001f08 <usart1_tx_dma_enable+0xb4>)
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	887a      	ldrh	r2, [r7, #2]
 8001ee8:	605a      	str	r2, [r3, #4]

    __HAL_DMA_ENABLE(&hdma_usart1_tx);
 8001eea:	4b07      	ldr	r3, [pc, #28]	; (8001f08 <usart1_tx_dma_enable+0xb4>)
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	681a      	ldr	r2, [r3, #0]
 8001ef0:	4b05      	ldr	r3, [pc, #20]	; (8001f08 <usart1_tx_dma_enable+0xb4>)
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	f042 0201 	orr.w	r2, r2, #1
 8001ef8:	601a      	str	r2, [r3, #0]
}
 8001efa:	bf00      	nop
 8001efc:	370c      	adds	r7, #12
 8001efe:	46bd      	mov	sp, r7
 8001f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f04:	4770      	bx	lr
 8001f06:	bf00      	nop
 8001f08:	20005020 	.word	0x20005020
 8001f0c:	40026458 	.word	0x40026458
 8001f10:	40026400 	.word	0x40026400
 8001f14:	400260b8 	.word	0x400260b8
 8001f18:	40026058 	.word	0x40026058
 8001f1c:	40026000 	.word	0x40026000

08001f20 <MX_CAN1_Init>:
CAN_HandleTypeDef hcan1;
CAN_HandleTypeDef hcan2;

/* CAN1 init function */
void MX_CAN1_Init(void)
{
 8001f20:	b580      	push	{r7, lr}
 8001f22:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8001f24:	4b17      	ldr	r3, [pc, #92]	; (8001f84 <MX_CAN1_Init+0x64>)
 8001f26:	4a18      	ldr	r2, [pc, #96]	; (8001f88 <MX_CAN1_Init+0x68>)
 8001f28:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 3;
 8001f2a:	4b16      	ldr	r3, [pc, #88]	; (8001f84 <MX_CAN1_Init+0x64>)
 8001f2c:	2203      	movs	r2, #3
 8001f2e:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8001f30:	4b14      	ldr	r3, [pc, #80]	; (8001f84 <MX_CAN1_Init+0x64>)
 8001f32:	2200      	movs	r2, #0
 8001f34:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8001f36:	4b13      	ldr	r3, [pc, #76]	; (8001f84 <MX_CAN1_Init+0x64>)
 8001f38:	2200      	movs	r2, #0
 8001f3a:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_10TQ;
 8001f3c:	4b11      	ldr	r3, [pc, #68]	; (8001f84 <MX_CAN1_Init+0x64>)
 8001f3e:	f44f 2210 	mov.w	r2, #589824	; 0x90000
 8001f42:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_3TQ;
 8001f44:	4b0f      	ldr	r3, [pc, #60]	; (8001f84 <MX_CAN1_Init+0x64>)
 8001f46:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8001f4a:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8001f4c:	4b0d      	ldr	r3, [pc, #52]	; (8001f84 <MX_CAN1_Init+0x64>)
 8001f4e:	2200      	movs	r2, #0
 8001f50:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = ENABLE;
 8001f52:	4b0c      	ldr	r3, [pc, #48]	; (8001f84 <MX_CAN1_Init+0x64>)
 8001f54:	2201      	movs	r2, #1
 8001f56:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8001f58:	4b0a      	ldr	r3, [pc, #40]	; (8001f84 <MX_CAN1_Init+0x64>)
 8001f5a:	2200      	movs	r2, #0
 8001f5c:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8001f5e:	4b09      	ldr	r3, [pc, #36]	; (8001f84 <MX_CAN1_Init+0x64>)
 8001f60:	2200      	movs	r2, #0
 8001f62:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8001f64:	4b07      	ldr	r3, [pc, #28]	; (8001f84 <MX_CAN1_Init+0x64>)
 8001f66:	2200      	movs	r2, #0
 8001f68:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8001f6a:	4b06      	ldr	r3, [pc, #24]	; (8001f84 <MX_CAN1_Init+0x64>)
 8001f6c:	2200      	movs	r2, #0
 8001f6e:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8001f70:	4804      	ldr	r0, [pc, #16]	; (8001f84 <MX_CAN1_Init+0x64>)
 8001f72:	f001 fa1f 	bl	80033b4 <HAL_CAN_Init>
 8001f76:	4603      	mov	r3, r0
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	d001      	beq.n	8001f80 <MX_CAN1_Init+0x60>
  {
    Error_Handler();
 8001f7c:	f000 fada 	bl	8002534 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 8001f80:	bf00      	nop
 8001f82:	bd80      	pop	{r7, pc}
 8001f84:	20004c94 	.word	0x20004c94
 8001f88:	40006400 	.word	0x40006400

08001f8c <MX_CAN2_Init>:
/* CAN2 init function */
void MX_CAN2_Init(void)
{
 8001f8c:	b580      	push	{r7, lr}
 8001f8e:	af00      	add	r7, sp, #0
  /* USER CODE END CAN2_Init 0 */

  /* USER CODE BEGIN CAN2_Init 1 */

  /* USER CODE END CAN2_Init 1 */
  hcan2.Instance = CAN2;
 8001f90:	4b17      	ldr	r3, [pc, #92]	; (8001ff0 <MX_CAN2_Init+0x64>)
 8001f92:	4a18      	ldr	r2, [pc, #96]	; (8001ff4 <MX_CAN2_Init+0x68>)
 8001f94:	601a      	str	r2, [r3, #0]
  hcan2.Init.Prescaler = 3;
 8001f96:	4b16      	ldr	r3, [pc, #88]	; (8001ff0 <MX_CAN2_Init+0x64>)
 8001f98:	2203      	movs	r2, #3
 8001f9a:	605a      	str	r2, [r3, #4]
  hcan2.Init.Mode = CAN_MODE_NORMAL;
 8001f9c:	4b14      	ldr	r3, [pc, #80]	; (8001ff0 <MX_CAN2_Init+0x64>)
 8001f9e:	2200      	movs	r2, #0
 8001fa0:	609a      	str	r2, [r3, #8]
  hcan2.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8001fa2:	4b13      	ldr	r3, [pc, #76]	; (8001ff0 <MX_CAN2_Init+0x64>)
 8001fa4:	2200      	movs	r2, #0
 8001fa6:	60da      	str	r2, [r3, #12]
  hcan2.Init.TimeSeg1 = CAN_BS1_10TQ;
 8001fa8:	4b11      	ldr	r3, [pc, #68]	; (8001ff0 <MX_CAN2_Init+0x64>)
 8001faa:	f44f 2210 	mov.w	r2, #589824	; 0x90000
 8001fae:	611a      	str	r2, [r3, #16]
  hcan2.Init.TimeSeg2 = CAN_BS2_3TQ;
 8001fb0:	4b0f      	ldr	r3, [pc, #60]	; (8001ff0 <MX_CAN2_Init+0x64>)
 8001fb2:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8001fb6:	615a      	str	r2, [r3, #20]
  hcan2.Init.TimeTriggeredMode = DISABLE;
 8001fb8:	4b0d      	ldr	r3, [pc, #52]	; (8001ff0 <MX_CAN2_Init+0x64>)
 8001fba:	2200      	movs	r2, #0
 8001fbc:	761a      	strb	r2, [r3, #24]
  hcan2.Init.AutoBusOff = DISABLE;
 8001fbe:	4b0c      	ldr	r3, [pc, #48]	; (8001ff0 <MX_CAN2_Init+0x64>)
 8001fc0:	2200      	movs	r2, #0
 8001fc2:	765a      	strb	r2, [r3, #25]
  hcan2.Init.AutoWakeUp = DISABLE;
 8001fc4:	4b0a      	ldr	r3, [pc, #40]	; (8001ff0 <MX_CAN2_Init+0x64>)
 8001fc6:	2200      	movs	r2, #0
 8001fc8:	769a      	strb	r2, [r3, #26]
  hcan2.Init.AutoRetransmission = DISABLE;
 8001fca:	4b09      	ldr	r3, [pc, #36]	; (8001ff0 <MX_CAN2_Init+0x64>)
 8001fcc:	2200      	movs	r2, #0
 8001fce:	76da      	strb	r2, [r3, #27]
  hcan2.Init.ReceiveFifoLocked = DISABLE;
 8001fd0:	4b07      	ldr	r3, [pc, #28]	; (8001ff0 <MX_CAN2_Init+0x64>)
 8001fd2:	2200      	movs	r2, #0
 8001fd4:	771a      	strb	r2, [r3, #28]
  hcan2.Init.TransmitFifoPriority = DISABLE;
 8001fd6:	4b06      	ldr	r3, [pc, #24]	; (8001ff0 <MX_CAN2_Init+0x64>)
 8001fd8:	2200      	movs	r2, #0
 8001fda:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan2) != HAL_OK)
 8001fdc:	4804      	ldr	r0, [pc, #16]	; (8001ff0 <MX_CAN2_Init+0x64>)
 8001fde:	f001 f9e9 	bl	80033b4 <HAL_CAN_Init>
 8001fe2:	4603      	mov	r3, r0
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d001      	beq.n	8001fec <MX_CAN2_Init+0x60>
  {
    Error_Handler();
 8001fe8:	f000 faa4 	bl	8002534 <Error_Handler>
  }
  /* USER CODE BEGIN CAN2_Init 2 */

  /* USER CODE END CAN2_Init 2 */

}
 8001fec:	bf00      	nop
 8001fee:	bd80      	pop	{r7, pc}
 8001ff0:	20004c6c 	.word	0x20004c6c
 8001ff4:	40006800 	.word	0x40006800

08001ff8 <HAL_CAN_MspInit>:

static uint32_t HAL_RCC_CAN1_CLK_ENABLED=0;

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 8001ff8:	b580      	push	{r7, lr}
 8001ffa:	b08c      	sub	sp, #48	; 0x30
 8001ffc:	af00      	add	r7, sp, #0
 8001ffe:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002000:	f107 031c 	add.w	r3, r7, #28
 8002004:	2200      	movs	r2, #0
 8002006:	601a      	str	r2, [r3, #0]
 8002008:	605a      	str	r2, [r3, #4]
 800200a:	609a      	str	r2, [r3, #8]
 800200c:	60da      	str	r2, [r3, #12]
 800200e:	611a      	str	r2, [r3, #16]
  if(canHandle->Instance==CAN1)
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	4a52      	ldr	r2, [pc, #328]	; (8002160 <HAL_CAN_MspInit+0x168>)
 8002016:	4293      	cmp	r3, r2
 8002018:	d145      	bne.n	80020a6 <HAL_CAN_MspInit+0xae>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    HAL_RCC_CAN1_CLK_ENABLED++;
 800201a:	4b52      	ldr	r3, [pc, #328]	; (8002164 <HAL_CAN_MspInit+0x16c>)
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	3301      	adds	r3, #1
 8002020:	4a50      	ldr	r2, [pc, #320]	; (8002164 <HAL_CAN_MspInit+0x16c>)
 8002022:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 8002024:	4b4f      	ldr	r3, [pc, #316]	; (8002164 <HAL_CAN_MspInit+0x16c>)
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	2b01      	cmp	r3, #1
 800202a:	d10d      	bne.n	8002048 <HAL_CAN_MspInit+0x50>
      __HAL_RCC_CAN1_CLK_ENABLE();
 800202c:	2300      	movs	r3, #0
 800202e:	61bb      	str	r3, [r7, #24]
 8002030:	4b4d      	ldr	r3, [pc, #308]	; (8002168 <HAL_CAN_MspInit+0x170>)
 8002032:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002034:	4a4c      	ldr	r2, [pc, #304]	; (8002168 <HAL_CAN_MspInit+0x170>)
 8002036:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800203a:	6413      	str	r3, [r2, #64]	; 0x40
 800203c:	4b4a      	ldr	r3, [pc, #296]	; (8002168 <HAL_CAN_MspInit+0x170>)
 800203e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002040:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002044:	61bb      	str	r3, [r7, #24]
 8002046:	69bb      	ldr	r3, [r7, #24]
    }

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002048:	2300      	movs	r3, #0
 800204a:	617b      	str	r3, [r7, #20]
 800204c:	4b46      	ldr	r3, [pc, #280]	; (8002168 <HAL_CAN_MspInit+0x170>)
 800204e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002050:	4a45      	ldr	r2, [pc, #276]	; (8002168 <HAL_CAN_MspInit+0x170>)
 8002052:	f043 0308 	orr.w	r3, r3, #8
 8002056:	6313      	str	r3, [r2, #48]	; 0x30
 8002058:	4b43      	ldr	r3, [pc, #268]	; (8002168 <HAL_CAN_MspInit+0x170>)
 800205a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800205c:	f003 0308 	and.w	r3, r3, #8
 8002060:	617b      	str	r3, [r7, #20]
 8002062:	697b      	ldr	r3, [r7, #20]
    /**CAN1 GPIO Configuration
    PD0     ------> CAN1_RX
    PD1     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8002064:	2303      	movs	r3, #3
 8002066:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002068:	2302      	movs	r3, #2
 800206a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800206c:	2300      	movs	r3, #0
 800206e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002070:	2303      	movs	r3, #3
 8002072:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8002074:	2309      	movs	r3, #9
 8002076:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002078:	f107 031c 	add.w	r3, r7, #28
 800207c:	4619      	mov	r1, r3
 800207e:	483b      	ldr	r0, [pc, #236]	; (800216c <HAL_CAN_MspInit+0x174>)
 8002080:	f002 fc58 	bl	8004934 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_TX_IRQn, 5, 0);
 8002084:	2200      	movs	r2, #0
 8002086:	2105      	movs	r1, #5
 8002088:	2013      	movs	r0, #19
 800208a:	f002 f8ad 	bl	80041e8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_TX_IRQn);
 800208e:	2013      	movs	r0, #19
 8002090:	f002 f8c6 	bl	8004220 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 5, 0);
 8002094:	2200      	movs	r2, #0
 8002096:	2105      	movs	r1, #5
 8002098:	2014      	movs	r0, #20
 800209a:	f002 f8a5 	bl	80041e8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 800209e:	2014      	movs	r0, #20
 80020a0:	f002 f8be 	bl	8004220 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(CAN2_RX0_IRQn);
  /* USER CODE BEGIN CAN2_MspInit 1 */

  /* USER CODE END CAN2_MspInit 1 */
  }
}
 80020a4:	e058      	b.n	8002158 <HAL_CAN_MspInit+0x160>
  else if(canHandle->Instance==CAN2)
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	4a31      	ldr	r2, [pc, #196]	; (8002170 <HAL_CAN_MspInit+0x178>)
 80020ac:	4293      	cmp	r3, r2
 80020ae:	d153      	bne.n	8002158 <HAL_CAN_MspInit+0x160>
    __HAL_RCC_CAN2_CLK_ENABLE();
 80020b0:	2300      	movs	r3, #0
 80020b2:	613b      	str	r3, [r7, #16]
 80020b4:	4b2c      	ldr	r3, [pc, #176]	; (8002168 <HAL_CAN_MspInit+0x170>)
 80020b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020b8:	4a2b      	ldr	r2, [pc, #172]	; (8002168 <HAL_CAN_MspInit+0x170>)
 80020ba:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80020be:	6413      	str	r3, [r2, #64]	; 0x40
 80020c0:	4b29      	ldr	r3, [pc, #164]	; (8002168 <HAL_CAN_MspInit+0x170>)
 80020c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020c4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80020c8:	613b      	str	r3, [r7, #16]
 80020ca:	693b      	ldr	r3, [r7, #16]
    HAL_RCC_CAN1_CLK_ENABLED++;
 80020cc:	4b25      	ldr	r3, [pc, #148]	; (8002164 <HAL_CAN_MspInit+0x16c>)
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	3301      	adds	r3, #1
 80020d2:	4a24      	ldr	r2, [pc, #144]	; (8002164 <HAL_CAN_MspInit+0x16c>)
 80020d4:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 80020d6:	4b23      	ldr	r3, [pc, #140]	; (8002164 <HAL_CAN_MspInit+0x16c>)
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	2b01      	cmp	r3, #1
 80020dc:	d10d      	bne.n	80020fa <HAL_CAN_MspInit+0x102>
      __HAL_RCC_CAN1_CLK_ENABLE();
 80020de:	2300      	movs	r3, #0
 80020e0:	60fb      	str	r3, [r7, #12]
 80020e2:	4b21      	ldr	r3, [pc, #132]	; (8002168 <HAL_CAN_MspInit+0x170>)
 80020e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020e6:	4a20      	ldr	r2, [pc, #128]	; (8002168 <HAL_CAN_MspInit+0x170>)
 80020e8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80020ec:	6413      	str	r3, [r2, #64]	; 0x40
 80020ee:	4b1e      	ldr	r3, [pc, #120]	; (8002168 <HAL_CAN_MspInit+0x170>)
 80020f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80020f6:	60fb      	str	r3, [r7, #12]
 80020f8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80020fa:	2300      	movs	r3, #0
 80020fc:	60bb      	str	r3, [r7, #8]
 80020fe:	4b1a      	ldr	r3, [pc, #104]	; (8002168 <HAL_CAN_MspInit+0x170>)
 8002100:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002102:	4a19      	ldr	r2, [pc, #100]	; (8002168 <HAL_CAN_MspInit+0x170>)
 8002104:	f043 0302 	orr.w	r3, r3, #2
 8002108:	6313      	str	r3, [r2, #48]	; 0x30
 800210a:	4b17      	ldr	r3, [pc, #92]	; (8002168 <HAL_CAN_MspInit+0x170>)
 800210c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800210e:	f003 0302 	and.w	r3, r3, #2
 8002112:	60bb      	str	r3, [r7, #8]
 8002114:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_13;
 8002116:	f242 0320 	movw	r3, #8224	; 0x2020
 800211a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800211c:	2302      	movs	r3, #2
 800211e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002120:	2300      	movs	r3, #0
 8002122:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002124:	2303      	movs	r3, #3
 8002126:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN2;
 8002128:	2309      	movs	r3, #9
 800212a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800212c:	f107 031c 	add.w	r3, r7, #28
 8002130:	4619      	mov	r1, r3
 8002132:	4810      	ldr	r0, [pc, #64]	; (8002174 <HAL_CAN_MspInit+0x17c>)
 8002134:	f002 fbfe 	bl	8004934 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(CAN2_TX_IRQn, 5, 0);
 8002138:	2200      	movs	r2, #0
 800213a:	2105      	movs	r1, #5
 800213c:	203f      	movs	r0, #63	; 0x3f
 800213e:	f002 f853 	bl	80041e8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN2_TX_IRQn);
 8002142:	203f      	movs	r0, #63	; 0x3f
 8002144:	f002 f86c 	bl	8004220 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN2_RX0_IRQn, 5, 0);
 8002148:	2200      	movs	r2, #0
 800214a:	2105      	movs	r1, #5
 800214c:	2040      	movs	r0, #64	; 0x40
 800214e:	f002 f84b 	bl	80041e8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN2_RX0_IRQn);
 8002152:	2040      	movs	r0, #64	; 0x40
 8002154:	f002 f864 	bl	8004220 <HAL_NVIC_EnableIRQ>
}
 8002158:	bf00      	nop
 800215a:	3730      	adds	r7, #48	; 0x30
 800215c:	46bd      	mov	sp, r7
 800215e:	bd80      	pop	{r7, pc}
 8002160:	40006400 	.word	0x40006400
 8002164:	20000104 	.word	0x20000104
 8002168:	40023800 	.word	0x40023800
 800216c:	40020c00 	.word	0x40020c00
 8002170:	40006800 	.word	0x40006800
 8002174:	40020400 	.word	0x40020400

08002178 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8002178:	b580      	push	{r7, lr}
 800217a:	b082      	sub	sp, #8
 800217c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800217e:	2300      	movs	r3, #0
 8002180:	607b      	str	r3, [r7, #4]
 8002182:	4b27      	ldr	r3, [pc, #156]	; (8002220 <MX_DMA_Init+0xa8>)
 8002184:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002186:	4a26      	ldr	r2, [pc, #152]	; (8002220 <MX_DMA_Init+0xa8>)
 8002188:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800218c:	6313      	str	r3, [r2, #48]	; 0x30
 800218e:	4b24      	ldr	r3, [pc, #144]	; (8002220 <MX_DMA_Init+0xa8>)
 8002190:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002192:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002196:	607b      	str	r3, [r7, #4]
 8002198:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 800219a:	2300      	movs	r3, #0
 800219c:	603b      	str	r3, [r7, #0]
 800219e:	4b20      	ldr	r3, [pc, #128]	; (8002220 <MX_DMA_Init+0xa8>)
 80021a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021a2:	4a1f      	ldr	r2, [pc, #124]	; (8002220 <MX_DMA_Init+0xa8>)
 80021a4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80021a8:	6313      	str	r3, [r2, #48]	; 0x30
 80021aa:	4b1d      	ldr	r3, [pc, #116]	; (8002220 <MX_DMA_Init+0xa8>)
 80021ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021ae:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80021b2:	603b      	str	r3, [r7, #0]
 80021b4:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 5, 0);
 80021b6:	2200      	movs	r2, #0
 80021b8:	2105      	movs	r1, #5
 80021ba:	200c      	movs	r0, #12
 80021bc:	f002 f814 	bl	80041e8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 80021c0:	200c      	movs	r0, #12
 80021c2:	f002 f82d 	bl	8004220 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 5, 0);
 80021c6:	2200      	movs	r2, #0
 80021c8:	2105      	movs	r1, #5
 80021ca:	2039      	movs	r0, #57	; 0x39
 80021cc:	f002 f80c 	bl	80041e8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 80021d0:	2039      	movs	r0, #57	; 0x39
 80021d2:	f002 f825 	bl	8004220 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 5, 0);
 80021d6:	2200      	movs	r2, #0
 80021d8:	2105      	movs	r1, #5
 80021da:	203a      	movs	r0, #58	; 0x3a
 80021dc:	f002 f804 	bl	80041e8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 80021e0:	203a      	movs	r0, #58	; 0x3a
 80021e2:	f002 f81d 	bl	8004220 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 5, 0);
 80021e6:	2200      	movs	r2, #0
 80021e8:	2105      	movs	r1, #5
 80021ea:	203b      	movs	r0, #59	; 0x3b
 80021ec:	f001 fffc 	bl	80041e8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 80021f0:	203b      	movs	r0, #59	; 0x3b
 80021f2:	f002 f815 	bl	8004220 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 5, 0);
 80021f6:	2200      	movs	r2, #0
 80021f8:	2105      	movs	r1, #5
 80021fa:	2045      	movs	r0, #69	; 0x45
 80021fc:	f001 fff4 	bl	80041e8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 8002200:	2045      	movs	r0, #69	; 0x45
 8002202:	f002 f80d 	bl	8004220 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream7_IRQn, 5, 0);
 8002206:	2200      	movs	r2, #0
 8002208:	2105      	movs	r1, #5
 800220a:	2046      	movs	r0, #70	; 0x46
 800220c:	f001 ffec 	bl	80041e8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream7_IRQn);
 8002210:	2046      	movs	r0, #70	; 0x46
 8002212:	f002 f805 	bl	8004220 <HAL_NVIC_EnableIRQ>

}
 8002216:	bf00      	nop
 8002218:	3708      	adds	r7, #8
 800221a:	46bd      	mov	sp, r7
 800221c:	bd80      	pop	{r7, pc}
 800221e:	bf00      	nop
 8002220:	40023800 	.word	0x40023800

08002224 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8002224:	b580      	push	{r7, lr}
 8002226:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of ChassisTask */
  ChassisTaskHandle = osThreadNew(chassis_task, NULL, &ChassisTask_attributes);
 8002228:	4a08      	ldr	r2, [pc, #32]	; (800224c <MX_FREERTOS_Init+0x28>)
 800222a:	2100      	movs	r1, #0
 800222c:	4808      	ldr	r0, [pc, #32]	; (8002250 <MX_FREERTOS_Init+0x2c>)
 800222e:	f008 f9f7 	bl	800a620 <osThreadNew>
 8002232:	4603      	mov	r3, r0
 8002234:	4a07      	ldr	r2, [pc, #28]	; (8002254 <MX_FREERTOS_Init+0x30>)
 8002236:	6013      	str	r3, [r2, #0]

  /* creation of IMUTask */
  IMUTaskHandle = osThreadNew(INS_task1, NULL, &IMUTask_attributes);
 8002238:	4a07      	ldr	r2, [pc, #28]	; (8002258 <MX_FREERTOS_Init+0x34>)
 800223a:	2100      	movs	r1, #0
 800223c:	4807      	ldr	r0, [pc, #28]	; (800225c <MX_FREERTOS_Init+0x38>)
 800223e:	f008 f9ef 	bl	800a620 <osThreadNew>
 8002242:	4603      	mov	r3, r0
 8002244:	4a06      	ldr	r2, [pc, #24]	; (8002260 <MX_FREERTOS_Init+0x3c>)
 8002246:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 8002248:	bf00      	nop
 800224a:	bd80      	pop	{r7, pc}
 800224c:	0800fa90 	.word	0x0800fa90
 8002250:	08001191 	.word	0x08001191
 8002254:	20004cc0 	.word	0x20004cc0
 8002258:	0800fab4 	.word	0x0800fab4
 800225c:	08002265 	.word	0x08002265
 8002260:	20004cbc 	.word	0x20004cbc

08002264 <INS_task1>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_INS_task1 */
__weak void INS_task1(void *argument)
{
 8002264:	b580      	push	{r7, lr}
 8002266:	b082      	sub	sp, #8
 8002268:	af00      	add	r7, sp, #0
 800226a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN INS_task1 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 800226c:	2001      	movs	r0, #1
 800226e:	f008 fa69 	bl	800a744 <osDelay>
 8002272:	e7fb      	b.n	800226c <INS_task1+0x8>

08002274 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8002274:	b580      	push	{r7, lr}
 8002276:	b08c      	sub	sp, #48	; 0x30
 8002278:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800227a:	f107 031c 	add.w	r3, r7, #28
 800227e:	2200      	movs	r2, #0
 8002280:	601a      	str	r2, [r3, #0]
 8002282:	605a      	str	r2, [r3, #4]
 8002284:	609a      	str	r2, [r3, #8]
 8002286:	60da      	str	r2, [r3, #12]
 8002288:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800228a:	2300      	movs	r3, #0
 800228c:	61bb      	str	r3, [r7, #24]
 800228e:	4b46      	ldr	r3, [pc, #280]	; (80023a8 <MX_GPIO_Init+0x134>)
 8002290:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002292:	4a45      	ldr	r2, [pc, #276]	; (80023a8 <MX_GPIO_Init+0x134>)
 8002294:	f043 0302 	orr.w	r3, r3, #2
 8002298:	6313      	str	r3, [r2, #48]	; 0x30
 800229a:	4b43      	ldr	r3, [pc, #268]	; (80023a8 <MX_GPIO_Init+0x134>)
 800229c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800229e:	f003 0302 	and.w	r3, r3, #2
 80022a2:	61bb      	str	r3, [r7, #24]
 80022a4:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80022a6:	2300      	movs	r3, #0
 80022a8:	617b      	str	r3, [r7, #20]
 80022aa:	4b3f      	ldr	r3, [pc, #252]	; (80023a8 <MX_GPIO_Init+0x134>)
 80022ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022ae:	4a3e      	ldr	r2, [pc, #248]	; (80023a8 <MX_GPIO_Init+0x134>)
 80022b0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80022b4:	6313      	str	r3, [r2, #48]	; 0x30
 80022b6:	4b3c      	ldr	r3, [pc, #240]	; (80023a8 <MX_GPIO_Init+0x134>)
 80022b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80022be:	617b      	str	r3, [r7, #20]
 80022c0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80022c2:	2300      	movs	r3, #0
 80022c4:	613b      	str	r3, [r7, #16]
 80022c6:	4b38      	ldr	r3, [pc, #224]	; (80023a8 <MX_GPIO_Init+0x134>)
 80022c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022ca:	4a37      	ldr	r2, [pc, #220]	; (80023a8 <MX_GPIO_Init+0x134>)
 80022cc:	f043 0301 	orr.w	r3, r3, #1
 80022d0:	6313      	str	r3, [r2, #48]	; 0x30
 80022d2:	4b35      	ldr	r3, [pc, #212]	; (80023a8 <MX_GPIO_Init+0x134>)
 80022d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022d6:	f003 0301 	and.w	r3, r3, #1
 80022da:	613b      	str	r3, [r7, #16]
 80022dc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80022de:	2300      	movs	r3, #0
 80022e0:	60fb      	str	r3, [r7, #12]
 80022e2:	4b31      	ldr	r3, [pc, #196]	; (80023a8 <MX_GPIO_Init+0x134>)
 80022e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022e6:	4a30      	ldr	r2, [pc, #192]	; (80023a8 <MX_GPIO_Init+0x134>)
 80022e8:	f043 0308 	orr.w	r3, r3, #8
 80022ec:	6313      	str	r3, [r2, #48]	; 0x30
 80022ee:	4b2e      	ldr	r3, [pc, #184]	; (80023a8 <MX_GPIO_Init+0x134>)
 80022f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022f2:	f003 0308 	and.w	r3, r3, #8
 80022f6:	60fb      	str	r3, [r7, #12]
 80022f8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80022fa:	2300      	movs	r3, #0
 80022fc:	60bb      	str	r3, [r7, #8]
 80022fe:	4b2a      	ldr	r3, [pc, #168]	; (80023a8 <MX_GPIO_Init+0x134>)
 8002300:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002302:	4a29      	ldr	r2, [pc, #164]	; (80023a8 <MX_GPIO_Init+0x134>)
 8002304:	f043 0304 	orr.w	r3, r3, #4
 8002308:	6313      	str	r3, [r2, #48]	; 0x30
 800230a:	4b27      	ldr	r3, [pc, #156]	; (80023a8 <MX_GPIO_Init+0x134>)
 800230c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800230e:	f003 0304 	and.w	r3, r3, #4
 8002312:	60bb      	str	r3, [r7, #8]
 8002314:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002316:	2300      	movs	r3, #0
 8002318:	607b      	str	r3, [r7, #4]
 800231a:	4b23      	ldr	r3, [pc, #140]	; (80023a8 <MX_GPIO_Init+0x134>)
 800231c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800231e:	4a22      	ldr	r2, [pc, #136]	; (80023a8 <MX_GPIO_Init+0x134>)
 8002320:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002324:	6313      	str	r3, [r2, #48]	; 0x30
 8002326:	4b20      	ldr	r3, [pc, #128]	; (80023a8 <MX_GPIO_Init+0x134>)
 8002328:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800232a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800232e:	607b      	str	r3, [r7, #4]
 8002330:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, GPIO_PIN_RESET);
 8002332:	2200      	movs	r2, #0
 8002334:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002338:	481c      	ldr	r0, [pc, #112]	; (80023ac <MX_GPIO_Init+0x138>)
 800233a:	f002 fc97 	bl	8004c6c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET);
 800233e:	2200      	movs	r2, #0
 8002340:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002344:	481a      	ldr	r0, [pc, #104]	; (80023b0 <MX_GPIO_Init+0x13c>)
 8002346:	f002 fc91 	bl	8004c6c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PB8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 800234a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800234e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002350:	2301      	movs	r3, #1
 8002352:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002354:	2300      	movs	r3, #0
 8002356:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002358:	2300      	movs	r3, #0
 800235a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800235c:	f107 031c 	add.w	r3, r7, #28
 8002360:	4619      	mov	r1, r3
 8002362:	4812      	ldr	r0, [pc, #72]	; (80023ac <MX_GPIO_Init+0x138>)
 8002364:	f002 fae6 	bl	8004934 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8002368:	f44f 7380 	mov.w	r3, #256	; 0x100
 800236c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800236e:	2301      	movs	r3, #1
 8002370:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002372:	2300      	movs	r3, #0
 8002374:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002376:	2300      	movs	r3, #0
 8002378:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800237a:	f107 031c 	add.w	r3, r7, #28
 800237e:	4619      	mov	r1, r3
 8002380:	480b      	ldr	r0, [pc, #44]	; (80023b0 <MX_GPIO_Init+0x13c>)
 8002382:	f002 fad7 	bl	8004934 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8002386:	f44f 7380 	mov.w	r3, #256	; 0x100
 800238a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800238c:	2300      	movs	r3, #0
 800238e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002390:	2300      	movs	r3, #0
 8002392:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002394:	f107 031c 	add.w	r3, r7, #28
 8002398:	4619      	mov	r1, r3
 800239a:	4806      	ldr	r0, [pc, #24]	; (80023b4 <MX_GPIO_Init+0x140>)
 800239c:	f002 faca 	bl	8004934 <HAL_GPIO_Init>

}
 80023a0:	bf00      	nop
 80023a2:	3730      	adds	r7, #48	; 0x30
 80023a4:	46bd      	mov	sp, r7
 80023a6:	bd80      	pop	{r7, pc}
 80023a8:	40023800 	.word	0x40023800
 80023ac:	40020400 	.word	0x40020400
 80023b0:	40020000 	.word	0x40020000
 80023b4:	40020800 	.word	0x40020800

080023b8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80023b8:	b580      	push	{r7, lr}
 80023ba:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80023bc:	f000 ffb8 	bl	8003330 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80023c0:	f000 f824 	bl	800240c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80023c4:	f7ff ff56 	bl	8002274 <MX_GPIO_Init>
  MX_DMA_Init();
 80023c8:	f7ff fed6 	bl	8002178 <MX_DMA_Init>
  MX_CAN1_Init();
 80023cc:	f7ff fda8 	bl	8001f20 <MX_CAN1_Init>
  MX_CAN2_Init();
 80023d0:	f7ff fddc 	bl	8001f8c <MX_CAN2_Init>
  MX_RTC_Init();
 80023d4:	f000 f8b4 	bl	8002540 <MX_RTC_Init>
  MX_TIM4_Init();
 80023d8:	f000 fb2c 	bl	8002a34 <MX_TIM4_Init>
  MX_TIM5_Init();
 80023dc:	f000 fbac 	bl	8002b38 <MX_TIM5_Init>
  MX_TIM12_Init();
 80023e0:	f000 fc1a 	bl	8002c18 <MX_TIM12_Init>
  MX_USART1_UART_Init();
 80023e4:	f000 fd5e 	bl	8002ea4 <MX_USART1_UART_Init>
  MX_USART3_UART_Init();
 80023e8:	f000 fd86 	bl	8002ef8 <MX_USART3_UART_Init>
  MX_SPI1_Init();
 80023ec:	f000 f8e4 	bl	80025b8 <MX_SPI1_Init>
  MX_USART6_UART_Init();
 80023f0:	f000 fdac 	bl	8002f4c <MX_USART6_UART_Init>
  /* USER CODE BEGIN 2 */
  BSP_CAN_Filtering_Init();
 80023f4:	f7ff fc48 	bl	8001c88 <BSP_CAN_Filtering_Init>
  remote_control_init();
 80023f8:	f7ff fa46 	bl	8001888 <remote_control_init>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();  /* Call init function for freertos objects (in freertos.c) */
 80023fc:	f008 f8c6 	bl	800a58c <osKernelInitialize>
  MX_FREERTOS_Init();
 8002400:	f7ff ff10 	bl	8002224 <MX_FREERTOS_Init>
  /* Start scheduler */
  osKernelStart();
 8002404:	f008 f8e6 	bl	800a5d4 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8002408:	e7fe      	b.n	8002408 <main+0x50>
	...

0800240c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800240c:	b580      	push	{r7, lr}
 800240e:	b098      	sub	sp, #96	; 0x60
 8002410:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002412:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002416:	2230      	movs	r2, #48	; 0x30
 8002418:	2100      	movs	r1, #0
 800241a:	4618      	mov	r0, r3
 800241c:	f00b f886 	bl	800d52c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002420:	f107 031c 	add.w	r3, r7, #28
 8002424:	2200      	movs	r2, #0
 8002426:	601a      	str	r2, [r3, #0]
 8002428:	605a      	str	r2, [r3, #4]
 800242a:	609a      	str	r2, [r3, #8]
 800242c:	60da      	str	r2, [r3, #12]
 800242e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002430:	f107 030c 	add.w	r3, r7, #12
 8002434:	2200      	movs	r2, #0
 8002436:	601a      	str	r2, [r3, #0]
 8002438:	605a      	str	r2, [r3, #4]
 800243a:	609a      	str	r2, [r3, #8]
 800243c:	60da      	str	r2, [r3, #12]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800243e:	2300      	movs	r3, #0
 8002440:	60bb      	str	r3, [r7, #8]
 8002442:	4b31      	ldr	r3, [pc, #196]	; (8002508 <SystemClock_Config+0xfc>)
 8002444:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002446:	4a30      	ldr	r2, [pc, #192]	; (8002508 <SystemClock_Config+0xfc>)
 8002448:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800244c:	6413      	str	r3, [r2, #64]	; 0x40
 800244e:	4b2e      	ldr	r3, [pc, #184]	; (8002508 <SystemClock_Config+0xfc>)
 8002450:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002452:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002456:	60bb      	str	r3, [r7, #8]
 8002458:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800245a:	2300      	movs	r3, #0
 800245c:	607b      	str	r3, [r7, #4]
 800245e:	4b2b      	ldr	r3, [pc, #172]	; (800250c <SystemClock_Config+0x100>)
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	4a2a      	ldr	r2, [pc, #168]	; (800250c <SystemClock_Config+0x100>)
 8002464:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002468:	6013      	str	r3, [r2, #0]
 800246a:	4b28      	ldr	r3, [pc, #160]	; (800250c <SystemClock_Config+0x100>)
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002472:	607b      	str	r3, [r7, #4]
 8002474:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 8002476:	2309      	movs	r3, #9
 8002478:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800247a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800247e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8002480:	2301      	movs	r3, #1
 8002482:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002484:	2302      	movs	r3, #2
 8002486:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002488:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800248c:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 6;
 800248e:	2306      	movs	r3, #6
 8002490:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 168;
 8002492:	23a8      	movs	r3, #168	; 0xa8
 8002494:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002496:	2302      	movs	r3, #2
 8002498:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800249a:	2307      	movs	r3, #7
 800249c:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800249e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80024a2:	4618      	mov	r0, r3
 80024a4:	f003 fb74 	bl	8005b90 <HAL_RCC_OscConfig>
 80024a8:	4603      	mov	r3, r0
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d001      	beq.n	80024b2 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 80024ae:	f000 f841 	bl	8002534 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80024b2:	230f      	movs	r3, #15
 80024b4:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80024b6:	2302      	movs	r3, #2
 80024b8:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80024ba:	2300      	movs	r3, #0
 80024bc:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80024be:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80024c2:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80024c4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80024c8:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80024ca:	f107 031c 	add.w	r3, r7, #28
 80024ce:	2105      	movs	r1, #5
 80024d0:	4618      	mov	r0, r3
 80024d2:	f003 fdd5 	bl	8006080 <HAL_RCC_ClockConfig>
 80024d6:	4603      	mov	r3, r0
 80024d8:	2b00      	cmp	r3, #0
 80024da:	d001      	beq.n	80024e0 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 80024dc:	f000 f82a 	bl	8002534 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 80024e0:	2302      	movs	r3, #2
 80024e2:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 80024e4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80024e8:	61bb      	str	r3, [r7, #24]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80024ea:	f107 030c 	add.w	r3, r7, #12
 80024ee:	4618      	mov	r0, r3
 80024f0:	f003 ffc8 	bl	8006484 <HAL_RCCEx_PeriphCLKConfig>
 80024f4:	4603      	mov	r3, r0
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d001      	beq.n	80024fe <SystemClock_Config+0xf2>
  {
    Error_Handler();
 80024fa:	f000 f81b 	bl	8002534 <Error_Handler>
  }
}
 80024fe:	bf00      	nop
 8002500:	3760      	adds	r7, #96	; 0x60
 8002502:	46bd      	mov	sp, r7
 8002504:	bd80      	pop	{r7, pc}
 8002506:	bf00      	nop
 8002508:	40023800 	.word	0x40023800
 800250c:	40007000 	.word	0x40007000

08002510 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002510:	b580      	push	{r7, lr}
 8002512:	b082      	sub	sp, #8
 8002514:	af00      	add	r7, sp, #0
 8002516:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM3) {
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	4a04      	ldr	r2, [pc, #16]	; (8002530 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800251e:	4293      	cmp	r3, r2
 8002520:	d101      	bne.n	8002526 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8002522:	f000 ff27 	bl	8003374 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8002526:	bf00      	nop
 8002528:	3708      	adds	r7, #8
 800252a:	46bd      	mov	sp, r7
 800252c:	bd80      	pop	{r7, pc}
 800252e:	bf00      	nop
 8002530:	40000400 	.word	0x40000400

08002534 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002534:	b480      	push	{r7}
 8002536:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002538:	b672      	cpsid	i
}
 800253a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800253c:	e7fe      	b.n	800253c <Error_Handler+0x8>
	...

08002540 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8002540:	b580      	push	{r7, lr}
 8002542:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8002544:	4b0f      	ldr	r3, [pc, #60]	; (8002584 <MX_RTC_Init+0x44>)
 8002546:	4a10      	ldr	r2, [pc, #64]	; (8002588 <MX_RTC_Init+0x48>)
 8002548:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 800254a:	4b0e      	ldr	r3, [pc, #56]	; (8002584 <MX_RTC_Init+0x44>)
 800254c:	2200      	movs	r2, #0
 800254e:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 124;
 8002550:	4b0c      	ldr	r3, [pc, #48]	; (8002584 <MX_RTC_Init+0x44>)
 8002552:	227c      	movs	r2, #124	; 0x7c
 8002554:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 3199;
 8002556:	4b0b      	ldr	r3, [pc, #44]	; (8002584 <MX_RTC_Init+0x44>)
 8002558:	f640 427f 	movw	r2, #3199	; 0xc7f
 800255c:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 800255e:	4b09      	ldr	r3, [pc, #36]	; (8002584 <MX_RTC_Init+0x44>)
 8002560:	2200      	movs	r2, #0
 8002562:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8002564:	4b07      	ldr	r3, [pc, #28]	; (8002584 <MX_RTC_Init+0x44>)
 8002566:	2200      	movs	r2, #0
 8002568:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 800256a:	4b06      	ldr	r3, [pc, #24]	; (8002584 <MX_RTC_Init+0x44>)
 800256c:	2200      	movs	r2, #0
 800256e:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8002570:	4804      	ldr	r0, [pc, #16]	; (8002584 <MX_RTC_Init+0x44>)
 8002572:	f004 f869 	bl	8006648 <HAL_RTC_Init>
 8002576:	4603      	mov	r3, r0
 8002578:	2b00      	cmp	r3, #0
 800257a:	d001      	beq.n	8002580 <MX_RTC_Init+0x40>
  {
    Error_Handler();
 800257c:	f7ff ffda 	bl	8002534 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8002580:	bf00      	nop
 8002582:	bd80      	pop	{r7, pc}
 8002584:	20004cc4 	.word	0x20004cc4
 8002588:	40002800 	.word	0x40002800

0800258c <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 800258c:	b480      	push	{r7}
 800258e:	b083      	sub	sp, #12
 8002590:	af00      	add	r7, sp, #0
 8002592:	6078      	str	r0, [r7, #4]

  if(rtcHandle->Instance==RTC)
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	4a05      	ldr	r2, [pc, #20]	; (80025b0 <HAL_RTC_MspInit+0x24>)
 800259a:	4293      	cmp	r3, r2
 800259c:	d102      	bne.n	80025a4 <HAL_RTC_MspInit+0x18>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 800259e:	4b05      	ldr	r3, [pc, #20]	; (80025b4 <HAL_RTC_MspInit+0x28>)
 80025a0:	2201      	movs	r2, #1
 80025a2:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 80025a4:	bf00      	nop
 80025a6:	370c      	adds	r7, #12
 80025a8:	46bd      	mov	sp, r7
 80025aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ae:	4770      	bx	lr
 80025b0:	40002800 	.word	0x40002800
 80025b4:	42470e3c 	.word	0x42470e3c

080025b8 <MX_SPI1_Init>:
DMA_HandleTypeDef hdma_spi1_rx;
DMA_HandleTypeDef hdma_spi1_tx;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 80025b8:	b580      	push	{r7, lr}
 80025ba:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 80025bc:	4b17      	ldr	r3, [pc, #92]	; (800261c <MX_SPI1_Init+0x64>)
 80025be:	4a18      	ldr	r2, [pc, #96]	; (8002620 <MX_SPI1_Init+0x68>)
 80025c0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80025c2:	4b16      	ldr	r3, [pc, #88]	; (800261c <MX_SPI1_Init+0x64>)
 80025c4:	f44f 7282 	mov.w	r2, #260	; 0x104
 80025c8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80025ca:	4b14      	ldr	r3, [pc, #80]	; (800261c <MX_SPI1_Init+0x64>)
 80025cc:	2200      	movs	r2, #0
 80025ce:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80025d0:	4b12      	ldr	r3, [pc, #72]	; (800261c <MX_SPI1_Init+0x64>)
 80025d2:	2200      	movs	r2, #0
 80025d4:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80025d6:	4b11      	ldr	r3, [pc, #68]	; (800261c <MX_SPI1_Init+0x64>)
 80025d8:	2200      	movs	r2, #0
 80025da:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80025dc:	4b0f      	ldr	r3, [pc, #60]	; (800261c <MX_SPI1_Init+0x64>)
 80025de:	2200      	movs	r2, #0
 80025e0:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80025e2:	4b0e      	ldr	r3, [pc, #56]	; (800261c <MX_SPI1_Init+0x64>)
 80025e4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80025e8:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 80025ea:	4b0c      	ldr	r3, [pc, #48]	; (800261c <MX_SPI1_Init+0x64>)
 80025ec:	2230      	movs	r2, #48	; 0x30
 80025ee:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80025f0:	4b0a      	ldr	r3, [pc, #40]	; (800261c <MX_SPI1_Init+0x64>)
 80025f2:	2200      	movs	r2, #0
 80025f4:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80025f6:	4b09      	ldr	r3, [pc, #36]	; (800261c <MX_SPI1_Init+0x64>)
 80025f8:	2200      	movs	r2, #0
 80025fa:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80025fc:	4b07      	ldr	r3, [pc, #28]	; (800261c <MX_SPI1_Init+0x64>)
 80025fe:	2200      	movs	r2, #0
 8002600:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8002602:	4b06      	ldr	r3, [pc, #24]	; (800261c <MX_SPI1_Init+0x64>)
 8002604:	220a      	movs	r2, #10
 8002606:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002608:	4804      	ldr	r0, [pc, #16]	; (800261c <MX_SPI1_Init+0x64>)
 800260a:	f004 f902 	bl	8006812 <HAL_SPI_Init>
 800260e:	4603      	mov	r3, r0
 8002610:	2b00      	cmp	r3, #0
 8002612:	d001      	beq.n	8002618 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8002614:	f7ff ff8e 	bl	8002534 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8002618:	bf00      	nop
 800261a:	bd80      	pop	{r7, pc}
 800261c:	20004ce4 	.word	0x20004ce4
 8002620:	40013000 	.word	0x40013000

08002624 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8002624:	b580      	push	{r7, lr}
 8002626:	b08a      	sub	sp, #40	; 0x28
 8002628:	af00      	add	r7, sp, #0
 800262a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800262c:	f107 0314 	add.w	r3, r7, #20
 8002630:	2200      	movs	r2, #0
 8002632:	601a      	str	r2, [r3, #0]
 8002634:	605a      	str	r2, [r3, #4]
 8002636:	609a      	str	r2, [r3, #8]
 8002638:	60da      	str	r2, [r3, #12]
 800263a:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	4a57      	ldr	r2, [pc, #348]	; (80027a0 <HAL_SPI_MspInit+0x17c>)
 8002642:	4293      	cmp	r3, r2
 8002644:	f040 80a8 	bne.w	8002798 <HAL_SPI_MspInit+0x174>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002648:	2300      	movs	r3, #0
 800264a:	613b      	str	r3, [r7, #16]
 800264c:	4b55      	ldr	r3, [pc, #340]	; (80027a4 <HAL_SPI_MspInit+0x180>)
 800264e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002650:	4a54      	ldr	r2, [pc, #336]	; (80027a4 <HAL_SPI_MspInit+0x180>)
 8002652:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002656:	6453      	str	r3, [r2, #68]	; 0x44
 8002658:	4b52      	ldr	r3, [pc, #328]	; (80027a4 <HAL_SPI_MspInit+0x180>)
 800265a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800265c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002660:	613b      	str	r3, [r7, #16]
 8002662:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002664:	2300      	movs	r3, #0
 8002666:	60fb      	str	r3, [r7, #12]
 8002668:	4b4e      	ldr	r3, [pc, #312]	; (80027a4 <HAL_SPI_MspInit+0x180>)
 800266a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800266c:	4a4d      	ldr	r2, [pc, #308]	; (80027a4 <HAL_SPI_MspInit+0x180>)
 800266e:	f043 0302 	orr.w	r3, r3, #2
 8002672:	6313      	str	r3, [r2, #48]	; 0x30
 8002674:	4b4b      	ldr	r3, [pc, #300]	; (80027a4 <HAL_SPI_MspInit+0x180>)
 8002676:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002678:	f003 0302 	and.w	r3, r3, #2
 800267c:	60fb      	str	r3, [r7, #12]
 800267e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002680:	2300      	movs	r3, #0
 8002682:	60bb      	str	r3, [r7, #8]
 8002684:	4b47      	ldr	r3, [pc, #284]	; (80027a4 <HAL_SPI_MspInit+0x180>)
 8002686:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002688:	4a46      	ldr	r2, [pc, #280]	; (80027a4 <HAL_SPI_MspInit+0x180>)
 800268a:	f043 0301 	orr.w	r3, r3, #1
 800268e:	6313      	str	r3, [r2, #48]	; 0x30
 8002690:	4b44      	ldr	r3, [pc, #272]	; (80027a4 <HAL_SPI_MspInit+0x180>)
 8002692:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002694:	f003 0301 	and.w	r3, r3, #1
 8002698:	60bb      	str	r3, [r7, #8]
 800269a:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PB4     ------> SPI1_MISO
    PB3     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_3;
 800269c:	2318      	movs	r3, #24
 800269e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026a0:	2302      	movs	r3, #2
 80026a2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026a4:	2300      	movs	r3, #0
 80026a6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80026a8:	2303      	movs	r3, #3
 80026aa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80026ac:	2305      	movs	r3, #5
 80026ae:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80026b0:	f107 0314 	add.w	r3, r7, #20
 80026b4:	4619      	mov	r1, r3
 80026b6:	483c      	ldr	r0, [pc, #240]	; (80027a8 <HAL_SPI_MspInit+0x184>)
 80026b8:	f002 f93c 	bl	8004934 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 80026bc:	2380      	movs	r3, #128	; 0x80
 80026be:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026c0:	2302      	movs	r3, #2
 80026c2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026c4:	2300      	movs	r3, #0
 80026c6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80026c8:	2303      	movs	r3, #3
 80026ca:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80026cc:	2305      	movs	r3, #5
 80026ce:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80026d0:	f107 0314 	add.w	r3, r7, #20
 80026d4:	4619      	mov	r1, r3
 80026d6:	4835      	ldr	r0, [pc, #212]	; (80027ac <HAL_SPI_MspInit+0x188>)
 80026d8:	f002 f92c 	bl	8004934 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_RX Init */
    hdma_spi1_rx.Instance = DMA2_Stream2;
 80026dc:	4b34      	ldr	r3, [pc, #208]	; (80027b0 <HAL_SPI_MspInit+0x18c>)
 80026de:	4a35      	ldr	r2, [pc, #212]	; (80027b4 <HAL_SPI_MspInit+0x190>)
 80026e0:	601a      	str	r2, [r3, #0]
    hdma_spi1_rx.Init.Channel = DMA_CHANNEL_3;
 80026e2:	4b33      	ldr	r3, [pc, #204]	; (80027b0 <HAL_SPI_MspInit+0x18c>)
 80026e4:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 80026e8:	605a      	str	r2, [r3, #4]
    hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80026ea:	4b31      	ldr	r3, [pc, #196]	; (80027b0 <HAL_SPI_MspInit+0x18c>)
 80026ec:	2200      	movs	r2, #0
 80026ee:	609a      	str	r2, [r3, #8]
    hdma_spi1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80026f0:	4b2f      	ldr	r3, [pc, #188]	; (80027b0 <HAL_SPI_MspInit+0x18c>)
 80026f2:	2200      	movs	r2, #0
 80026f4:	60da      	str	r2, [r3, #12]
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80026f6:	4b2e      	ldr	r3, [pc, #184]	; (80027b0 <HAL_SPI_MspInit+0x18c>)
 80026f8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80026fc:	611a      	str	r2, [r3, #16]
    hdma_spi1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80026fe:	4b2c      	ldr	r3, [pc, #176]	; (80027b0 <HAL_SPI_MspInit+0x18c>)
 8002700:	2200      	movs	r2, #0
 8002702:	615a      	str	r2, [r3, #20]
    hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002704:	4b2a      	ldr	r3, [pc, #168]	; (80027b0 <HAL_SPI_MspInit+0x18c>)
 8002706:	2200      	movs	r2, #0
 8002708:	619a      	str	r2, [r3, #24]
    hdma_spi1_rx.Init.Mode = DMA_NORMAL;
 800270a:	4b29      	ldr	r3, [pc, #164]	; (80027b0 <HAL_SPI_MspInit+0x18c>)
 800270c:	2200      	movs	r2, #0
 800270e:	61da      	str	r2, [r3, #28]
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8002710:	4b27      	ldr	r3, [pc, #156]	; (80027b0 <HAL_SPI_MspInit+0x18c>)
 8002712:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8002716:	621a      	str	r2, [r3, #32]
    hdma_spi1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002718:	4b25      	ldr	r3, [pc, #148]	; (80027b0 <HAL_SPI_MspInit+0x18c>)
 800271a:	2200      	movs	r2, #0
 800271c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 800271e:	4824      	ldr	r0, [pc, #144]	; (80027b0 <HAL_SPI_MspInit+0x18c>)
 8002720:	f001 fd8c 	bl	800423c <HAL_DMA_Init>
 8002724:	4603      	mov	r3, r0
 8002726:	2b00      	cmp	r3, #0
 8002728:	d001      	beq.n	800272e <HAL_SPI_MspInit+0x10a>
    {
      Error_Handler();
 800272a:	f7ff ff03 	bl	8002534 <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmarx,hdma_spi1_rx);
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	4a1f      	ldr	r2, [pc, #124]	; (80027b0 <HAL_SPI_MspInit+0x18c>)
 8002732:	64da      	str	r2, [r3, #76]	; 0x4c
 8002734:	4a1e      	ldr	r2, [pc, #120]	; (80027b0 <HAL_SPI_MspInit+0x18c>)
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	6393      	str	r3, [r2, #56]	; 0x38

    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA2_Stream3;
 800273a:	4b1f      	ldr	r3, [pc, #124]	; (80027b8 <HAL_SPI_MspInit+0x194>)
 800273c:	4a1f      	ldr	r2, [pc, #124]	; (80027bc <HAL_SPI_MspInit+0x198>)
 800273e:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Channel = DMA_CHANNEL_3;
 8002740:	4b1d      	ldr	r3, [pc, #116]	; (80027b8 <HAL_SPI_MspInit+0x194>)
 8002742:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 8002746:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002748:	4b1b      	ldr	r3, [pc, #108]	; (80027b8 <HAL_SPI_MspInit+0x194>)
 800274a:	2240      	movs	r2, #64	; 0x40
 800274c:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800274e:	4b1a      	ldr	r3, [pc, #104]	; (80027b8 <HAL_SPI_MspInit+0x194>)
 8002750:	2200      	movs	r2, #0
 8002752:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002754:	4b18      	ldr	r3, [pc, #96]	; (80027b8 <HAL_SPI_MspInit+0x194>)
 8002756:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800275a:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800275c:	4b16      	ldr	r3, [pc, #88]	; (80027b8 <HAL_SPI_MspInit+0x194>)
 800275e:	2200      	movs	r2, #0
 8002760:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002762:	4b15      	ldr	r3, [pc, #84]	; (80027b8 <HAL_SPI_MspInit+0x194>)
 8002764:	2200      	movs	r2, #0
 8002766:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 8002768:	4b13      	ldr	r3, [pc, #76]	; (80027b8 <HAL_SPI_MspInit+0x194>)
 800276a:	2200      	movs	r2, #0
 800276c:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_HIGH;
 800276e:	4b12      	ldr	r3, [pc, #72]	; (80027b8 <HAL_SPI_MspInit+0x194>)
 8002770:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002774:	621a      	str	r2, [r3, #32]
    hdma_spi1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002776:	4b10      	ldr	r3, [pc, #64]	; (80027b8 <HAL_SPI_MspInit+0x194>)
 8002778:	2200      	movs	r2, #0
 800277a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 800277c:	480e      	ldr	r0, [pc, #56]	; (80027b8 <HAL_SPI_MspInit+0x194>)
 800277e:	f001 fd5d 	bl	800423c <HAL_DMA_Init>
 8002782:	4603      	mov	r3, r0
 8002784:	2b00      	cmp	r3, #0
 8002786:	d001      	beq.n	800278c <HAL_SPI_MspInit+0x168>
    {
      Error_Handler();
 8002788:	f7ff fed4 	bl	8002534 <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi1_tx);
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	4a0a      	ldr	r2, [pc, #40]	; (80027b8 <HAL_SPI_MspInit+0x194>)
 8002790:	649a      	str	r2, [r3, #72]	; 0x48
 8002792:	4a09      	ldr	r2, [pc, #36]	; (80027b8 <HAL_SPI_MspInit+0x194>)
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8002798:	bf00      	nop
 800279a:	3728      	adds	r7, #40	; 0x28
 800279c:	46bd      	mov	sp, r7
 800279e:	bd80      	pop	{r7, pc}
 80027a0:	40013000 	.word	0x40013000
 80027a4:	40023800 	.word	0x40023800
 80027a8:	40020400 	.word	0x40020400
 80027ac:	40020000 	.word	0x40020000
 80027b0:	20004d3c 	.word	0x20004d3c
 80027b4:	40026440 	.word	0x40026440
 80027b8:	20004d9c 	.word	0x20004d9c
 80027bc:	40026458 	.word	0x40026458

080027c0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80027c0:	b580      	push	{r7, lr}
 80027c2:	b082      	sub	sp, #8
 80027c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80027c6:	2300      	movs	r3, #0
 80027c8:	607b      	str	r3, [r7, #4]
 80027ca:	4b12      	ldr	r3, [pc, #72]	; (8002814 <HAL_MspInit+0x54>)
 80027cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027ce:	4a11      	ldr	r2, [pc, #68]	; (8002814 <HAL_MspInit+0x54>)
 80027d0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80027d4:	6453      	str	r3, [r2, #68]	; 0x44
 80027d6:	4b0f      	ldr	r3, [pc, #60]	; (8002814 <HAL_MspInit+0x54>)
 80027d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027da:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80027de:	607b      	str	r3, [r7, #4]
 80027e0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80027e2:	2300      	movs	r3, #0
 80027e4:	603b      	str	r3, [r7, #0]
 80027e6:	4b0b      	ldr	r3, [pc, #44]	; (8002814 <HAL_MspInit+0x54>)
 80027e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027ea:	4a0a      	ldr	r2, [pc, #40]	; (8002814 <HAL_MspInit+0x54>)
 80027ec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80027f0:	6413      	str	r3, [r2, #64]	; 0x40
 80027f2:	4b08      	ldr	r3, [pc, #32]	; (8002814 <HAL_MspInit+0x54>)
 80027f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80027fa:	603b      	str	r3, [r7, #0]
 80027fc:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80027fe:	2200      	movs	r2, #0
 8002800:	210f      	movs	r1, #15
 8002802:	f06f 0001 	mvn.w	r0, #1
 8002806:	f001 fcef 	bl	80041e8 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800280a:	bf00      	nop
 800280c:	3708      	adds	r7, #8
 800280e:	46bd      	mov	sp, r7
 8002810:	bd80      	pop	{r7, pc}
 8002812:	bf00      	nop
 8002814:	40023800 	.word	0x40023800

08002818 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002818:	b580      	push	{r7, lr}
 800281a:	b08c      	sub	sp, #48	; 0x30
 800281c:	af00      	add	r7, sp, #0
 800281e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8002820:	2300      	movs	r3, #0
 8002822:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8002824:	2300      	movs	r3, #0
 8002826:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM3 IRQ priority */
  HAL_NVIC_SetPriority(TIM3_IRQn, TickPriority ,0);
 8002828:	2200      	movs	r2, #0
 800282a:	6879      	ldr	r1, [r7, #4]
 800282c:	201d      	movs	r0, #29
 800282e:	f001 fcdb 	bl	80041e8 <HAL_NVIC_SetPriority>

  /* Enable the TIM3 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8002832:	201d      	movs	r0, #29
 8002834:	f001 fcf4 	bl	8004220 <HAL_NVIC_EnableIRQ>
  /* Enable TIM3 clock */
  __HAL_RCC_TIM3_CLK_ENABLE();
 8002838:	2300      	movs	r3, #0
 800283a:	60fb      	str	r3, [r7, #12]
 800283c:	4b1f      	ldr	r3, [pc, #124]	; (80028bc <HAL_InitTick+0xa4>)
 800283e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002840:	4a1e      	ldr	r2, [pc, #120]	; (80028bc <HAL_InitTick+0xa4>)
 8002842:	f043 0302 	orr.w	r3, r3, #2
 8002846:	6413      	str	r3, [r2, #64]	; 0x40
 8002848:	4b1c      	ldr	r3, [pc, #112]	; (80028bc <HAL_InitTick+0xa4>)
 800284a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800284c:	f003 0302 	and.w	r3, r3, #2
 8002850:	60fb      	str	r3, [r7, #12]
 8002852:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002854:	f107 0210 	add.w	r2, r7, #16
 8002858:	f107 0314 	add.w	r3, r7, #20
 800285c:	4611      	mov	r1, r2
 800285e:	4618      	mov	r0, r3
 8002860:	f003 fdde 	bl	8006420 <HAL_RCC_GetClockConfig>

  /* Compute TIM3 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8002864:	f003 fdb4 	bl	80063d0 <HAL_RCC_GetPCLK1Freq>
 8002868:	4603      	mov	r3, r0
 800286a:	005b      	lsls	r3, r3, #1
 800286c:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM3 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800286e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002870:	4a13      	ldr	r2, [pc, #76]	; (80028c0 <HAL_InitTick+0xa8>)
 8002872:	fba2 2303 	umull	r2, r3, r2, r3
 8002876:	0c9b      	lsrs	r3, r3, #18
 8002878:	3b01      	subs	r3, #1
 800287a:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM3 */
  htim3.Instance = TIM3;
 800287c:	4b11      	ldr	r3, [pc, #68]	; (80028c4 <HAL_InitTick+0xac>)
 800287e:	4a12      	ldr	r2, [pc, #72]	; (80028c8 <HAL_InitTick+0xb0>)
 8002880:	601a      	str	r2, [r3, #0]
  + Period = [(TIM3CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim3.Init.Period = (1000000U / 1000U) - 1U;
 8002882:	4b10      	ldr	r3, [pc, #64]	; (80028c4 <HAL_InitTick+0xac>)
 8002884:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002888:	60da      	str	r2, [r3, #12]
  htim3.Init.Prescaler = uwPrescalerValue;
 800288a:	4a0e      	ldr	r2, [pc, #56]	; (80028c4 <HAL_InitTick+0xac>)
 800288c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800288e:	6053      	str	r3, [r2, #4]
  htim3.Init.ClockDivision = 0;
 8002890:	4b0c      	ldr	r3, [pc, #48]	; (80028c4 <HAL_InitTick+0xac>)
 8002892:	2200      	movs	r2, #0
 8002894:	611a      	str	r2, [r3, #16]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002896:	4b0b      	ldr	r3, [pc, #44]	; (80028c4 <HAL_InitTick+0xac>)
 8002898:	2200      	movs	r2, #0
 800289a:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim3) == HAL_OK)
 800289c:	4809      	ldr	r0, [pc, #36]	; (80028c4 <HAL_InitTick+0xac>)
 800289e:	f004 f841 	bl	8006924 <HAL_TIM_Base_Init>
 80028a2:	4603      	mov	r3, r0
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d104      	bne.n	80028b2 <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim3);
 80028a8:	4806      	ldr	r0, [pc, #24]	; (80028c4 <HAL_InitTick+0xac>)
 80028aa:	f004 f88b 	bl	80069c4 <HAL_TIM_Base_Start_IT>
 80028ae:	4603      	mov	r3, r0
 80028b0:	e000      	b.n	80028b4 <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 80028b2:	2301      	movs	r3, #1
}
 80028b4:	4618      	mov	r0, r3
 80028b6:	3730      	adds	r7, #48	; 0x30
 80028b8:	46bd      	mov	sp, r7
 80028ba:	bd80      	pop	{r7, pc}
 80028bc:	40023800 	.word	0x40023800
 80028c0:	431bde83 	.word	0x431bde83
 80028c4:	20004dfc 	.word	0x20004dfc
 80028c8:	40000400 	.word	0x40000400

080028cc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80028cc:	b480      	push	{r7}
 80028ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80028d0:	e7fe      	b.n	80028d0 <NMI_Handler+0x4>

080028d2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80028d2:	b480      	push	{r7}
 80028d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80028d6:	e7fe      	b.n	80028d6 <HardFault_Handler+0x4>

080028d8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80028d8:	b480      	push	{r7}
 80028da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80028dc:	e7fe      	b.n	80028dc <MemManage_Handler+0x4>

080028de <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80028de:	b480      	push	{r7}
 80028e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80028e2:	e7fe      	b.n	80028e2 <BusFault_Handler+0x4>

080028e4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80028e4:	b480      	push	{r7}
 80028e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80028e8:	e7fe      	b.n	80028e8 <UsageFault_Handler+0x4>

080028ea <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80028ea:	b480      	push	{r7}
 80028ec:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80028ee:	bf00      	nop
 80028f0:	46bd      	mov	sp, r7
 80028f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028f6:	4770      	bx	lr

080028f8 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 80028f8:	b580      	push	{r7, lr}
 80028fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 80028fc:	4802      	ldr	r0, [pc, #8]	; (8002908 <DMA1_Stream1_IRQHandler+0x10>)
 80028fe:	f001 fddd 	bl	80044bc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8002902:	bf00      	nop
 8002904:	bd80      	pop	{r7, pc}
 8002906:	bf00      	nop
 8002908:	20004f7c 	.word	0x20004f7c

0800290c <CAN1_TX_IRQHandler>:

/**
  * @brief This function handles CAN1 TX interrupts.
  */
void CAN1_TX_IRQHandler(void)
{
 800290c:	b580      	push	{r7, lr}
 800290e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_TX_IRQn 0 */

  /* USER CODE END CAN1_TX_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8002910:	4802      	ldr	r0, [pc, #8]	; (800291c <CAN1_TX_IRQHandler+0x10>)
 8002912:	f001 f982 	bl	8003c1a <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_TX_IRQn 1 */

  /* USER CODE END CAN1_TX_IRQn 1 */
}
 8002916:	bf00      	nop
 8002918:	bd80      	pop	{r7, pc}
 800291a:	bf00      	nop
 800291c:	20004c94 	.word	0x20004c94

08002920 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupts.
  */
void CAN1_RX0_IRQHandler(void)
{
 8002920:	b580      	push	{r7, lr}
 8002922:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8002924:	4802      	ldr	r0, [pc, #8]	; (8002930 <CAN1_RX0_IRQHandler+0x10>)
 8002926:	f001 f978 	bl	8003c1a <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 800292a:	bf00      	nop
 800292c:	bd80      	pop	{r7, pc}
 800292e:	bf00      	nop
 8002930:	20004c94 	.word	0x20004c94

08002934 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8002934:	b580      	push	{r7, lr}
 8002936:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8002938:	4802      	ldr	r0, [pc, #8]	; (8002944 <TIM3_IRQHandler+0x10>)
 800293a:	f004 f902 	bl	8006b42 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 800293e:	bf00      	nop
 8002940:	bd80      	pop	{r7, pc}
 8002942:	bf00      	nop
 8002944:	20004dfc 	.word	0x20004dfc

08002948 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8002948:	b580      	push	{r7, lr}
 800294a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */
////
  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 800294c:	4802      	ldr	r0, [pc, #8]	; (8002958 <USART1_IRQHandler+0x10>)
 800294e:	f004 ff7b 	bl	8007848 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */
////
  /* USER CODE END USART1_IRQn 1 */
}
 8002952:	bf00      	nop
 8002954:	bd80      	pop	{r7, pc}
 8002956:	bf00      	nop
 8002958:	200050e0 	.word	0x200050e0

0800295c <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 800295c:	b580      	push	{r7, lr}
 800295e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart6_rx);
 8002960:	4802      	ldr	r0, [pc, #8]	; (800296c <DMA2_Stream1_IRQHandler+0x10>)
 8002962:	f001 fdab 	bl	80044bc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 8002966:	bf00      	nop
 8002968:	bd80      	pop	{r7, pc}
 800296a:	bf00      	nop
 800296c:	20004f1c 	.word	0x20004f1c

08002970 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8002970:	b580      	push	{r7, lr}
 8002972:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_rx);
 8002974:	4802      	ldr	r0, [pc, #8]	; (8002980 <DMA2_Stream2_IRQHandler+0x10>)
 8002976:	f001 fda1 	bl	80044bc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 800297a:	bf00      	nop
 800297c:	bd80      	pop	{r7, pc}
 800297e:	bf00      	nop
 8002980:	20004d3c 	.word	0x20004d3c

08002984 <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 8002984:	b580      	push	{r7, lr}
 8002986:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 8002988:	4802      	ldr	r0, [pc, #8]	; (8002994 <DMA2_Stream3_IRQHandler+0x10>)
 800298a:	f001 fd97 	bl	80044bc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 800298e:	bf00      	nop
 8002990:	bd80      	pop	{r7, pc}
 8002992:	bf00      	nop
 8002994:	20004d9c 	.word	0x20004d9c

08002998 <CAN2_TX_IRQHandler>:

/**
  * @brief This function handles CAN2 TX interrupts.
  */
void CAN2_TX_IRQHandler(void)
{
 8002998:	b580      	push	{r7, lr}
 800299a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN2_TX_IRQn 0 */

  /* USER CODE END CAN2_TX_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan2);
 800299c:	4802      	ldr	r0, [pc, #8]	; (80029a8 <CAN2_TX_IRQHandler+0x10>)
 800299e:	f001 f93c 	bl	8003c1a <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN2_TX_IRQn 1 */

  /* USER CODE END CAN2_TX_IRQn 1 */
}
 80029a2:	bf00      	nop
 80029a4:	bd80      	pop	{r7, pc}
 80029a6:	bf00      	nop
 80029a8:	20004c6c 	.word	0x20004c6c

080029ac <CAN2_RX0_IRQHandler>:

/**
  * @brief This function handles CAN2 RX0 interrupts.
  */
void CAN2_RX0_IRQHandler(void)
{
 80029ac:	b580      	push	{r7, lr}
 80029ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN2_RX0_IRQn 0 */

  /* USER CODE END CAN2_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan2);
 80029b0:	4802      	ldr	r0, [pc, #8]	; (80029bc <CAN2_RX0_IRQHandler+0x10>)
 80029b2:	f001 f932 	bl	8003c1a <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN2_RX0_IRQn 1 */

  /* USER CODE END CAN2_RX0_IRQn 1 */
}
 80029b6:	bf00      	nop
 80029b8:	bd80      	pop	{r7, pc}
 80029ba:	bf00      	nop
 80029bc:	20004c6c 	.word	0x20004c6c

080029c0 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80029c0:	b580      	push	{r7, lr}
 80029c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 80029c4:	4802      	ldr	r0, [pc, #8]	; (80029d0 <OTG_FS_IRQHandler+0x10>)
 80029c6:	f002 f96a 	bl	8004c9e <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80029ca:	bf00      	nop
 80029cc:	bd80      	pop	{r7, pc}
 80029ce:	bf00      	nop
 80029d0:	200051ac 	.word	0x200051ac

080029d4 <DMA2_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA2 stream6 global interrupt.
  */
void DMA2_Stream6_IRQHandler(void)
{
 80029d4:	b580      	push	{r7, lr}
 80029d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart6_tx);
 80029d8:	4802      	ldr	r0, [pc, #8]	; (80029e4 <DMA2_Stream6_IRQHandler+0x10>)
 80029da:	f001 fd6f 	bl	80044bc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream6_IRQn 1 */

  /* USER CODE END DMA2_Stream6_IRQn 1 */
}
 80029de:	bf00      	nop
 80029e0:	bd80      	pop	{r7, pc}
 80029e2:	bf00      	nop
 80029e4:	20005080 	.word	0x20005080

080029e8 <DMA2_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA2 stream7 global interrupt.
  */
void DMA2_Stream7_IRQHandler(void)
{
 80029e8:	b580      	push	{r7, lr}
 80029ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream7_IRQn 0 */

  /* USER CODE END DMA2_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 80029ec:	4802      	ldr	r0, [pc, #8]	; (80029f8 <DMA2_Stream7_IRQHandler+0x10>)
 80029ee:	f001 fd65 	bl	80044bc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream7_IRQn 1 */

  /* USER CODE END DMA2_Stream7_IRQn 1 */
}
 80029f2:	bf00      	nop
 80029f4:	bd80      	pop	{r7, pc}
 80029f6:	bf00      	nop
 80029f8:	20005020 	.word	0x20005020

080029fc <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 80029fc:	b580      	push	{r7, lr}
 80029fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 8002a00:	4802      	ldr	r0, [pc, #8]	; (8002a0c <USART6_IRQHandler+0x10>)
 8002a02:	f004 ff21 	bl	8007848 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 8002a06:	bf00      	nop
 8002a08:	bd80      	pop	{r7, pc}
 8002a0a:	bf00      	nop
 8002a0c:	20005124 	.word	0x20005124

08002a10 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002a10:	b480      	push	{r7}
 8002a12:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002a14:	4b06      	ldr	r3, [pc, #24]	; (8002a30 <SystemInit+0x20>)
 8002a16:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a1a:	4a05      	ldr	r2, [pc, #20]	; (8002a30 <SystemInit+0x20>)
 8002a1c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002a20:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002a24:	bf00      	nop
 8002a26:	46bd      	mov	sp, r7
 8002a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a2c:	4770      	bx	lr
 8002a2e:	bf00      	nop
 8002a30:	e000ed00 	.word	0xe000ed00

08002a34 <MX_TIM4_Init>:
TIM_HandleTypeDef htim5;
TIM_HandleTypeDef htim12;

/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8002a34:	b580      	push	{r7, lr}
 8002a36:	b08e      	sub	sp, #56	; 0x38
 8002a38:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002a3a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002a3e:	2200      	movs	r2, #0
 8002a40:	601a      	str	r2, [r3, #0]
 8002a42:	605a      	str	r2, [r3, #4]
 8002a44:	609a      	str	r2, [r3, #8]
 8002a46:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002a48:	f107 0320 	add.w	r3, r7, #32
 8002a4c:	2200      	movs	r2, #0
 8002a4e:	601a      	str	r2, [r3, #0]
 8002a50:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002a52:	1d3b      	adds	r3, r7, #4
 8002a54:	2200      	movs	r2, #0
 8002a56:	601a      	str	r2, [r3, #0]
 8002a58:	605a      	str	r2, [r3, #4]
 8002a5a:	609a      	str	r2, [r3, #8]
 8002a5c:	60da      	str	r2, [r3, #12]
 8002a5e:	611a      	str	r2, [r3, #16]
 8002a60:	615a      	str	r2, [r3, #20]
 8002a62:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8002a64:	4b32      	ldr	r3, [pc, #200]	; (8002b30 <MX_TIM4_Init+0xfc>)
 8002a66:	4a33      	ldr	r2, [pc, #204]	; (8002b34 <MX_TIM4_Init+0x100>)
 8002a68:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 83;
 8002a6a:	4b31      	ldr	r3, [pc, #196]	; (8002b30 <MX_TIM4_Init+0xfc>)
 8002a6c:	2253      	movs	r2, #83	; 0x53
 8002a6e:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002a70:	4b2f      	ldr	r3, [pc, #188]	; (8002b30 <MX_TIM4_Init+0xfc>)
 8002a72:	2200      	movs	r2, #0
 8002a74:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 19999;
 8002a76:	4b2e      	ldr	r3, [pc, #184]	; (8002b30 <MX_TIM4_Init+0xfc>)
 8002a78:	f644 621f 	movw	r2, #19999	; 0x4e1f
 8002a7c:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002a7e:	4b2c      	ldr	r3, [pc, #176]	; (8002b30 <MX_TIM4_Init+0xfc>)
 8002a80:	2200      	movs	r2, #0
 8002a82:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002a84:	4b2a      	ldr	r3, [pc, #168]	; (8002b30 <MX_TIM4_Init+0xfc>)
 8002a86:	2200      	movs	r2, #0
 8002a88:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8002a8a:	4829      	ldr	r0, [pc, #164]	; (8002b30 <MX_TIM4_Init+0xfc>)
 8002a8c:	f003 ff4a 	bl	8006924 <HAL_TIM_Base_Init>
 8002a90:	4603      	mov	r3, r0
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d001      	beq.n	8002a9a <MX_TIM4_Init+0x66>
  {
    Error_Handler();
 8002a96:	f7ff fd4d 	bl	8002534 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002a9a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002a9e:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8002aa0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002aa4:	4619      	mov	r1, r3
 8002aa6:	4822      	ldr	r0, [pc, #136]	; (8002b30 <MX_TIM4_Init+0xfc>)
 8002aa8:	f004 fa16 	bl	8006ed8 <HAL_TIM_ConfigClockSource>
 8002aac:	4603      	mov	r3, r0
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d001      	beq.n	8002ab6 <MX_TIM4_Init+0x82>
  {
    Error_Handler();
 8002ab2:	f7ff fd3f 	bl	8002534 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8002ab6:	481e      	ldr	r0, [pc, #120]	; (8002b30 <MX_TIM4_Init+0xfc>)
 8002ab8:	f003 fff4 	bl	8006aa4 <HAL_TIM_PWM_Init>
 8002abc:	4603      	mov	r3, r0
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d001      	beq.n	8002ac6 <MX_TIM4_Init+0x92>
  {
    Error_Handler();
 8002ac2:	f7ff fd37 	bl	8002534 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002ac6:	2300      	movs	r3, #0
 8002ac8:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002aca:	2300      	movs	r3, #0
 8002acc:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8002ace:	f107 0320 	add.w	r3, r7, #32
 8002ad2:	4619      	mov	r1, r3
 8002ad4:	4816      	ldr	r0, [pc, #88]	; (8002b30 <MX_TIM4_Init+0xfc>)
 8002ad6:	f004 fdd9 	bl	800768c <HAL_TIMEx_MasterConfigSynchronization>
 8002ada:	4603      	mov	r3, r0
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d001      	beq.n	8002ae4 <MX_TIM4_Init+0xb0>
  {
    Error_Handler();
 8002ae0:	f7ff fd28 	bl	8002534 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002ae4:	2360      	movs	r3, #96	; 0x60
 8002ae6:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8002ae8:	2300      	movs	r3, #0
 8002aea:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002aec:	2300      	movs	r3, #0
 8002aee:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002af0:	2300      	movs	r3, #0
 8002af2:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002af4:	1d3b      	adds	r3, r7, #4
 8002af6:	2200      	movs	r2, #0
 8002af8:	4619      	mov	r1, r3
 8002afa:	480d      	ldr	r0, [pc, #52]	; (8002b30 <MX_TIM4_Init+0xfc>)
 8002afc:	f004 f92a 	bl	8006d54 <HAL_TIM_PWM_ConfigChannel>
 8002b00:	4603      	mov	r3, r0
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d001      	beq.n	8002b0a <MX_TIM4_Init+0xd6>
  {
    Error_Handler();
 8002b06:	f7ff fd15 	bl	8002534 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002b0a:	1d3b      	adds	r3, r7, #4
 8002b0c:	2204      	movs	r2, #4
 8002b0e:	4619      	mov	r1, r3
 8002b10:	4807      	ldr	r0, [pc, #28]	; (8002b30 <MX_TIM4_Init+0xfc>)
 8002b12:	f004 f91f 	bl	8006d54 <HAL_TIM_PWM_ConfigChannel>
 8002b16:	4603      	mov	r3, r0
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d001      	beq.n	8002b20 <MX_TIM4_Init+0xec>
  {
    Error_Handler();
 8002b1c:	f7ff fd0a 	bl	8002534 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8002b20:	4803      	ldr	r0, [pc, #12]	; (8002b30 <MX_TIM4_Init+0xfc>)
 8002b22:	f000 f937 	bl	8002d94 <HAL_TIM_MspPostInit>

}
 8002b26:	bf00      	nop
 8002b28:	3738      	adds	r7, #56	; 0x38
 8002b2a:	46bd      	mov	sp, r7
 8002b2c:	bd80      	pop	{r7, pc}
 8002b2e:	bf00      	nop
 8002b30:	20004e44 	.word	0x20004e44
 8002b34:	40000800 	.word	0x40000800

08002b38 <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 8002b38:	b580      	push	{r7, lr}
 8002b3a:	b08a      	sub	sp, #40	; 0x28
 8002b3c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002b3e:	f107 0320 	add.w	r3, r7, #32
 8002b42:	2200      	movs	r2, #0
 8002b44:	601a      	str	r2, [r3, #0]
 8002b46:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002b48:	1d3b      	adds	r3, r7, #4
 8002b4a:	2200      	movs	r2, #0
 8002b4c:	601a      	str	r2, [r3, #0]
 8002b4e:	605a      	str	r2, [r3, #4]
 8002b50:	609a      	str	r2, [r3, #8]
 8002b52:	60da      	str	r2, [r3, #12]
 8002b54:	611a      	str	r2, [r3, #16]
 8002b56:	615a      	str	r2, [r3, #20]
 8002b58:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8002b5a:	4b2d      	ldr	r3, [pc, #180]	; (8002c10 <MX_TIM5_Init+0xd8>)
 8002b5c:	4a2d      	ldr	r2, [pc, #180]	; (8002c14 <MX_TIM5_Init+0xdc>)
 8002b5e:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 8002b60:	4b2b      	ldr	r3, [pc, #172]	; (8002c10 <MX_TIM5_Init+0xd8>)
 8002b62:	2200      	movs	r2, #0
 8002b64:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002b66:	4b2a      	ldr	r3, [pc, #168]	; (8002c10 <MX_TIM5_Init+0xd8>)
 8002b68:	2200      	movs	r2, #0
 8002b6a:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 8002b6c:	4b28      	ldr	r3, [pc, #160]	; (8002c10 <MX_TIM5_Init+0xd8>)
 8002b6e:	f04f 32ff 	mov.w	r2, #4294967295
 8002b72:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002b74:	4b26      	ldr	r3, [pc, #152]	; (8002c10 <MX_TIM5_Init+0xd8>)
 8002b76:	2200      	movs	r2, #0
 8002b78:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002b7a:	4b25      	ldr	r3, [pc, #148]	; (8002c10 <MX_TIM5_Init+0xd8>)
 8002b7c:	2200      	movs	r2, #0
 8002b7e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 8002b80:	4823      	ldr	r0, [pc, #140]	; (8002c10 <MX_TIM5_Init+0xd8>)
 8002b82:	f003 ff8f 	bl	8006aa4 <HAL_TIM_PWM_Init>
 8002b86:	4603      	mov	r3, r0
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d001      	beq.n	8002b90 <MX_TIM5_Init+0x58>
  {
    Error_Handler();
 8002b8c:	f7ff fcd2 	bl	8002534 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002b90:	2300      	movs	r3, #0
 8002b92:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002b94:	2300      	movs	r3, #0
 8002b96:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8002b98:	f107 0320 	add.w	r3, r7, #32
 8002b9c:	4619      	mov	r1, r3
 8002b9e:	481c      	ldr	r0, [pc, #112]	; (8002c10 <MX_TIM5_Init+0xd8>)
 8002ba0:	f004 fd74 	bl	800768c <HAL_TIMEx_MasterConfigSynchronization>
 8002ba4:	4603      	mov	r3, r0
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d001      	beq.n	8002bae <MX_TIM5_Init+0x76>
  {
    Error_Handler();
 8002baa:	f7ff fcc3 	bl	8002534 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002bae:	2360      	movs	r3, #96	; 0x60
 8002bb0:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8002bb2:	2300      	movs	r3, #0
 8002bb4:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002bb6:	2300      	movs	r3, #0
 8002bb8:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002bba:	2300      	movs	r3, #0
 8002bbc:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002bbe:	1d3b      	adds	r3, r7, #4
 8002bc0:	2200      	movs	r2, #0
 8002bc2:	4619      	mov	r1, r3
 8002bc4:	4812      	ldr	r0, [pc, #72]	; (8002c10 <MX_TIM5_Init+0xd8>)
 8002bc6:	f004 f8c5 	bl	8006d54 <HAL_TIM_PWM_ConfigChannel>
 8002bca:	4603      	mov	r3, r0
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d001      	beq.n	8002bd4 <MX_TIM5_Init+0x9c>
  {
    Error_Handler();
 8002bd0:	f7ff fcb0 	bl	8002534 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002bd4:	1d3b      	adds	r3, r7, #4
 8002bd6:	2204      	movs	r2, #4
 8002bd8:	4619      	mov	r1, r3
 8002bda:	480d      	ldr	r0, [pc, #52]	; (8002c10 <MX_TIM5_Init+0xd8>)
 8002bdc:	f004 f8ba 	bl	8006d54 <HAL_TIM_PWM_ConfigChannel>
 8002be0:	4603      	mov	r3, r0
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d001      	beq.n	8002bea <MX_TIM5_Init+0xb2>
  {
    Error_Handler();
 8002be6:	f7ff fca5 	bl	8002534 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8002bea:	1d3b      	adds	r3, r7, #4
 8002bec:	2208      	movs	r2, #8
 8002bee:	4619      	mov	r1, r3
 8002bf0:	4807      	ldr	r0, [pc, #28]	; (8002c10 <MX_TIM5_Init+0xd8>)
 8002bf2:	f004 f8af 	bl	8006d54 <HAL_TIM_PWM_ConfigChannel>
 8002bf6:	4603      	mov	r3, r0
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	d001      	beq.n	8002c00 <MX_TIM5_Init+0xc8>
  {
    Error_Handler();
 8002bfc:	f7ff fc9a 	bl	8002534 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 8002c00:	4803      	ldr	r0, [pc, #12]	; (8002c10 <MX_TIM5_Init+0xd8>)
 8002c02:	f000 f8c7 	bl	8002d94 <HAL_TIM_MspPostInit>

}
 8002c06:	bf00      	nop
 8002c08:	3728      	adds	r7, #40	; 0x28
 8002c0a:	46bd      	mov	sp, r7
 8002c0c:	bd80      	pop	{r7, pc}
 8002c0e:	bf00      	nop
 8002c10:	20004e8c 	.word	0x20004e8c
 8002c14:	40000c00 	.word	0x40000c00

08002c18 <MX_TIM12_Init>:
/* TIM12 init function */
void MX_TIM12_Init(void)
{
 8002c18:	b580      	push	{r7, lr}
 8002c1a:	b08c      	sub	sp, #48	; 0x30
 8002c1c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM12_Init 0 */

  /* USER CODE END TIM12_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002c1e:	f107 0320 	add.w	r3, r7, #32
 8002c22:	2200      	movs	r2, #0
 8002c24:	601a      	str	r2, [r3, #0]
 8002c26:	605a      	str	r2, [r3, #4]
 8002c28:	609a      	str	r2, [r3, #8]
 8002c2a:	60da      	str	r2, [r3, #12]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002c2c:	1d3b      	adds	r3, r7, #4
 8002c2e:	2200      	movs	r2, #0
 8002c30:	601a      	str	r2, [r3, #0]
 8002c32:	605a      	str	r2, [r3, #4]
 8002c34:	609a      	str	r2, [r3, #8]
 8002c36:	60da      	str	r2, [r3, #12]
 8002c38:	611a      	str	r2, [r3, #16]
 8002c3a:	615a      	str	r2, [r3, #20]
 8002c3c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM12_Init 1 */

  /* USER CODE END TIM12_Init 1 */
  htim12.Instance = TIM12;
 8002c3e:	4b26      	ldr	r3, [pc, #152]	; (8002cd8 <MX_TIM12_Init+0xc0>)
 8002c40:	4a26      	ldr	r2, [pc, #152]	; (8002cdc <MX_TIM12_Init+0xc4>)
 8002c42:	601a      	str	r2, [r3, #0]
  htim12.Init.Prescaler = 1281;
 8002c44:	4b24      	ldr	r3, [pc, #144]	; (8002cd8 <MX_TIM12_Init+0xc0>)
 8002c46:	f240 5201 	movw	r2, #1281	; 0x501
 8002c4a:	605a      	str	r2, [r3, #4]
  htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002c4c:	4b22      	ldr	r3, [pc, #136]	; (8002cd8 <MX_TIM12_Init+0xc0>)
 8002c4e:	2200      	movs	r2, #0
 8002c50:	609a      	str	r2, [r3, #8]
  htim12.Init.Period = 31111;
 8002c52:	4b21      	ldr	r3, [pc, #132]	; (8002cd8 <MX_TIM12_Init+0xc0>)
 8002c54:	f647 1287 	movw	r2, #31111	; 0x7987
 8002c58:	60da      	str	r2, [r3, #12]
  htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002c5a:	4b1f      	ldr	r3, [pc, #124]	; (8002cd8 <MX_TIM12_Init+0xc0>)
 8002c5c:	2200      	movs	r2, #0
 8002c5e:	611a      	str	r2, [r3, #16]
  htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002c60:	4b1d      	ldr	r3, [pc, #116]	; (8002cd8 <MX_TIM12_Init+0xc0>)
 8002c62:	2200      	movs	r2, #0
 8002c64:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim12) != HAL_OK)
 8002c66:	481c      	ldr	r0, [pc, #112]	; (8002cd8 <MX_TIM12_Init+0xc0>)
 8002c68:	f003 fe5c 	bl	8006924 <HAL_TIM_Base_Init>
 8002c6c:	4603      	mov	r3, r0
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d001      	beq.n	8002c76 <MX_TIM12_Init+0x5e>
  {
    Error_Handler();
 8002c72:	f7ff fc5f 	bl	8002534 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002c76:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002c7a:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim12, &sClockSourceConfig) != HAL_OK)
 8002c7c:	f107 0320 	add.w	r3, r7, #32
 8002c80:	4619      	mov	r1, r3
 8002c82:	4815      	ldr	r0, [pc, #84]	; (8002cd8 <MX_TIM12_Init+0xc0>)
 8002c84:	f004 f928 	bl	8006ed8 <HAL_TIM_ConfigClockSource>
 8002c88:	4603      	mov	r3, r0
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d001      	beq.n	8002c92 <MX_TIM12_Init+0x7a>
  {
    Error_Handler();
 8002c8e:	f7ff fc51 	bl	8002534 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim12) != HAL_OK)
 8002c92:	4811      	ldr	r0, [pc, #68]	; (8002cd8 <MX_TIM12_Init+0xc0>)
 8002c94:	f003 ff06 	bl	8006aa4 <HAL_TIM_PWM_Init>
 8002c98:	4603      	mov	r3, r0
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d001      	beq.n	8002ca2 <MX_TIM12_Init+0x8a>
  {
    Error_Handler();
 8002c9e:	f7ff fc49 	bl	8002534 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002ca2:	2360      	movs	r3, #96	; 0x60
 8002ca4:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8002ca6:	2300      	movs	r3, #0
 8002ca8:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002caa:	2300      	movs	r3, #0
 8002cac:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002cae:	2300      	movs	r3, #0
 8002cb0:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002cb2:	1d3b      	adds	r3, r7, #4
 8002cb4:	2200      	movs	r2, #0
 8002cb6:	4619      	mov	r1, r3
 8002cb8:	4807      	ldr	r0, [pc, #28]	; (8002cd8 <MX_TIM12_Init+0xc0>)
 8002cba:	f004 f84b 	bl	8006d54 <HAL_TIM_PWM_ConfigChannel>
 8002cbe:	4603      	mov	r3, r0
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d001      	beq.n	8002cc8 <MX_TIM12_Init+0xb0>
  {
    Error_Handler();
 8002cc4:	f7ff fc36 	bl	8002534 <Error_Handler>
  }
  /* USER CODE BEGIN TIM12_Init 2 */

  /* USER CODE END TIM12_Init 2 */
  HAL_TIM_MspPostInit(&htim12);
 8002cc8:	4803      	ldr	r0, [pc, #12]	; (8002cd8 <MX_TIM12_Init+0xc0>)
 8002cca:	f000 f863 	bl	8002d94 <HAL_TIM_MspPostInit>

}
 8002cce:	bf00      	nop
 8002cd0:	3730      	adds	r7, #48	; 0x30
 8002cd2:	46bd      	mov	sp, r7
 8002cd4:	bd80      	pop	{r7, pc}
 8002cd6:	bf00      	nop
 8002cd8:	20004ed4 	.word	0x20004ed4
 8002cdc:	40001800 	.word	0x40001800

08002ce0 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002ce0:	b480      	push	{r7}
 8002ce2:	b085      	sub	sp, #20
 8002ce4:	af00      	add	r7, sp, #0
 8002ce6:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM4)
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	4a15      	ldr	r2, [pc, #84]	; (8002d44 <HAL_TIM_Base_MspInit+0x64>)
 8002cee:	4293      	cmp	r3, r2
 8002cf0:	d10e      	bne.n	8002d10 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* TIM4 clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002cf2:	2300      	movs	r3, #0
 8002cf4:	60fb      	str	r3, [r7, #12]
 8002cf6:	4b14      	ldr	r3, [pc, #80]	; (8002d48 <HAL_TIM_Base_MspInit+0x68>)
 8002cf8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cfa:	4a13      	ldr	r2, [pc, #76]	; (8002d48 <HAL_TIM_Base_MspInit+0x68>)
 8002cfc:	f043 0304 	orr.w	r3, r3, #4
 8002d00:	6413      	str	r3, [r2, #64]	; 0x40
 8002d02:	4b11      	ldr	r3, [pc, #68]	; (8002d48 <HAL_TIM_Base_MspInit+0x68>)
 8002d04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d06:	f003 0304 	and.w	r3, r3, #4
 8002d0a:	60fb      	str	r3, [r7, #12]
 8002d0c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_TIM12_CLK_ENABLE();
  /* USER CODE BEGIN TIM12_MspInit 1 */

  /* USER CODE END TIM12_MspInit 1 */
  }
}
 8002d0e:	e012      	b.n	8002d36 <HAL_TIM_Base_MspInit+0x56>
  else if(tim_baseHandle->Instance==TIM12)
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	4a0d      	ldr	r2, [pc, #52]	; (8002d4c <HAL_TIM_Base_MspInit+0x6c>)
 8002d16:	4293      	cmp	r3, r2
 8002d18:	d10d      	bne.n	8002d36 <HAL_TIM_Base_MspInit+0x56>
    __HAL_RCC_TIM12_CLK_ENABLE();
 8002d1a:	2300      	movs	r3, #0
 8002d1c:	60bb      	str	r3, [r7, #8]
 8002d1e:	4b0a      	ldr	r3, [pc, #40]	; (8002d48 <HAL_TIM_Base_MspInit+0x68>)
 8002d20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d22:	4a09      	ldr	r2, [pc, #36]	; (8002d48 <HAL_TIM_Base_MspInit+0x68>)
 8002d24:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002d28:	6413      	str	r3, [r2, #64]	; 0x40
 8002d2a:	4b07      	ldr	r3, [pc, #28]	; (8002d48 <HAL_TIM_Base_MspInit+0x68>)
 8002d2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d2e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d32:	60bb      	str	r3, [r7, #8]
 8002d34:	68bb      	ldr	r3, [r7, #8]
}
 8002d36:	bf00      	nop
 8002d38:	3714      	adds	r7, #20
 8002d3a:	46bd      	mov	sp, r7
 8002d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d40:	4770      	bx	lr
 8002d42:	bf00      	nop
 8002d44:	40000800 	.word	0x40000800
 8002d48:	40023800 	.word	0x40023800
 8002d4c:	40001800 	.word	0x40001800

08002d50 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8002d50:	b480      	push	{r7}
 8002d52:	b085      	sub	sp, #20
 8002d54:	af00      	add	r7, sp, #0
 8002d56:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM5)
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	4a0b      	ldr	r2, [pc, #44]	; (8002d8c <HAL_TIM_PWM_MspInit+0x3c>)
 8002d5e:	4293      	cmp	r3, r2
 8002d60:	d10d      	bne.n	8002d7e <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM5_MspInit 0 */

  /* USER CODE END TIM5_MspInit 0 */
    /* TIM5 clock enable */
    __HAL_RCC_TIM5_CLK_ENABLE();
 8002d62:	2300      	movs	r3, #0
 8002d64:	60fb      	str	r3, [r7, #12]
 8002d66:	4b0a      	ldr	r3, [pc, #40]	; (8002d90 <HAL_TIM_PWM_MspInit+0x40>)
 8002d68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d6a:	4a09      	ldr	r2, [pc, #36]	; (8002d90 <HAL_TIM_PWM_MspInit+0x40>)
 8002d6c:	f043 0308 	orr.w	r3, r3, #8
 8002d70:	6413      	str	r3, [r2, #64]	; 0x40
 8002d72:	4b07      	ldr	r3, [pc, #28]	; (8002d90 <HAL_TIM_PWM_MspInit+0x40>)
 8002d74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d76:	f003 0308 	and.w	r3, r3, #8
 8002d7a:	60fb      	str	r3, [r7, #12]
 8002d7c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }
}
 8002d7e:	bf00      	nop
 8002d80:	3714      	adds	r7, #20
 8002d82:	46bd      	mov	sp, r7
 8002d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d88:	4770      	bx	lr
 8002d8a:	bf00      	nop
 8002d8c:	40000c00 	.word	0x40000c00
 8002d90:	40023800 	.word	0x40023800

08002d94 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8002d94:	b580      	push	{r7, lr}
 8002d96:	b08a      	sub	sp, #40	; 0x28
 8002d98:	af00      	add	r7, sp, #0
 8002d9a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002d9c:	f107 0314 	add.w	r3, r7, #20
 8002da0:	2200      	movs	r2, #0
 8002da2:	601a      	str	r2, [r3, #0]
 8002da4:	605a      	str	r2, [r3, #4]
 8002da6:	609a      	str	r2, [r3, #8]
 8002da8:	60da      	str	r2, [r3, #12]
 8002daa:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM4)
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	4a36      	ldr	r2, [pc, #216]	; (8002e8c <HAL_TIM_MspPostInit+0xf8>)
 8002db2:	4293      	cmp	r3, r2
 8002db4:	d11e      	bne.n	8002df4 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002db6:	2300      	movs	r3, #0
 8002db8:	613b      	str	r3, [r7, #16]
 8002dba:	4b35      	ldr	r3, [pc, #212]	; (8002e90 <HAL_TIM_MspPostInit+0xfc>)
 8002dbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dbe:	4a34      	ldr	r2, [pc, #208]	; (8002e90 <HAL_TIM_MspPostInit+0xfc>)
 8002dc0:	f043 0302 	orr.w	r3, r3, #2
 8002dc4:	6313      	str	r3, [r2, #48]	; 0x30
 8002dc6:	4b32      	ldr	r3, [pc, #200]	; (8002e90 <HAL_TIM_MspPostInit+0xfc>)
 8002dc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dca:	f003 0302 	and.w	r3, r3, #2
 8002dce:	613b      	str	r3, [r7, #16]
 8002dd0:	693b      	ldr	r3, [r7, #16]
    /**TIM4 GPIO Configuration
    PB7     ------> TIM4_CH2
    PB6     ------> TIM4_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_6;
 8002dd2:	23c0      	movs	r3, #192	; 0xc0
 8002dd4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002dd6:	2302      	movs	r3, #2
 8002dd8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002dda:	2300      	movs	r3, #0
 8002ddc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002dde:	2300      	movs	r3, #0
 8002de0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8002de2:	2302      	movs	r3, #2
 8002de4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002de6:	f107 0314 	add.w	r3, r7, #20
 8002dea:	4619      	mov	r1, r3
 8002dec:	4829      	ldr	r0, [pc, #164]	; (8002e94 <HAL_TIM_MspPostInit+0x100>)
 8002dee:	f001 fda1 	bl	8004934 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM12_MspPostInit 1 */

  /* USER CODE END TIM12_MspPostInit 1 */
  }

}
 8002df2:	e047      	b.n	8002e84 <HAL_TIM_MspPostInit+0xf0>
  else if(timHandle->Instance==TIM5)
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	4a27      	ldr	r2, [pc, #156]	; (8002e98 <HAL_TIM_MspPostInit+0x104>)
 8002dfa:	4293      	cmp	r3, r2
 8002dfc:	d11f      	bne.n	8002e3e <HAL_TIM_MspPostInit+0xaa>
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8002dfe:	2300      	movs	r3, #0
 8002e00:	60fb      	str	r3, [r7, #12]
 8002e02:	4b23      	ldr	r3, [pc, #140]	; (8002e90 <HAL_TIM_MspPostInit+0xfc>)
 8002e04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e06:	4a22      	ldr	r2, [pc, #136]	; (8002e90 <HAL_TIM_MspPostInit+0xfc>)
 8002e08:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002e0c:	6313      	str	r3, [r2, #48]	; 0x30
 8002e0e:	4b20      	ldr	r3, [pc, #128]	; (8002e90 <HAL_TIM_MspPostInit+0xfc>)
 8002e10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e12:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e16:	60fb      	str	r3, [r7, #12]
 8002e18:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_11|GPIO_PIN_10;
 8002e1a:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8002e1e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e20:	2302      	movs	r3, #2
 8002e22:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e24:	2300      	movs	r3, #0
 8002e26:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e28:	2300      	movs	r3, #0
 8002e2a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8002e2c:	2302      	movs	r3, #2
 8002e2e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8002e30:	f107 0314 	add.w	r3, r7, #20
 8002e34:	4619      	mov	r1, r3
 8002e36:	4819      	ldr	r0, [pc, #100]	; (8002e9c <HAL_TIM_MspPostInit+0x108>)
 8002e38:	f001 fd7c 	bl	8004934 <HAL_GPIO_Init>
}
 8002e3c:	e022      	b.n	8002e84 <HAL_TIM_MspPostInit+0xf0>
  else if(timHandle->Instance==TIM12)
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	4a17      	ldr	r2, [pc, #92]	; (8002ea0 <HAL_TIM_MspPostInit+0x10c>)
 8002e44:	4293      	cmp	r3, r2
 8002e46:	d11d      	bne.n	8002e84 <HAL_TIM_MspPostInit+0xf0>
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8002e48:	2300      	movs	r3, #0
 8002e4a:	60bb      	str	r3, [r7, #8]
 8002e4c:	4b10      	ldr	r3, [pc, #64]	; (8002e90 <HAL_TIM_MspPostInit+0xfc>)
 8002e4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e50:	4a0f      	ldr	r2, [pc, #60]	; (8002e90 <HAL_TIM_MspPostInit+0xfc>)
 8002e52:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002e56:	6313      	str	r3, [r2, #48]	; 0x30
 8002e58:	4b0d      	ldr	r3, [pc, #52]	; (8002e90 <HAL_TIM_MspPostInit+0xfc>)
 8002e5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e5c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e60:	60bb      	str	r3, [r7, #8]
 8002e62:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8002e64:	2340      	movs	r3, #64	; 0x40
 8002e66:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e68:	2302      	movs	r3, #2
 8002e6a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e6c:	2300      	movs	r3, #0
 8002e6e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e70:	2300      	movs	r3, #0
 8002e72:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM12;
 8002e74:	2309      	movs	r3, #9
 8002e76:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8002e78:	f107 0314 	add.w	r3, r7, #20
 8002e7c:	4619      	mov	r1, r3
 8002e7e:	4807      	ldr	r0, [pc, #28]	; (8002e9c <HAL_TIM_MspPostInit+0x108>)
 8002e80:	f001 fd58 	bl	8004934 <HAL_GPIO_Init>
}
 8002e84:	bf00      	nop
 8002e86:	3728      	adds	r7, #40	; 0x28
 8002e88:	46bd      	mov	sp, r7
 8002e8a:	bd80      	pop	{r7, pc}
 8002e8c:	40000800 	.word	0x40000800
 8002e90:	40023800 	.word	0x40023800
 8002e94:	40020400 	.word	0x40020400
 8002e98:	40000c00 	.word	0x40000c00
 8002e9c:	40021c00 	.word	0x40021c00
 8002ea0:	40001800 	.word	0x40001800

08002ea4 <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart6_tx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8002ea4:	b580      	push	{r7, lr}
 8002ea6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002ea8:	4b11      	ldr	r3, [pc, #68]	; (8002ef0 <MX_USART1_UART_Init+0x4c>)
 8002eaa:	4a12      	ldr	r2, [pc, #72]	; (8002ef4 <MX_USART1_UART_Init+0x50>)
 8002eac:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8002eae:	4b10      	ldr	r3, [pc, #64]	; (8002ef0 <MX_USART1_UART_Init+0x4c>)
 8002eb0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002eb4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002eb6:	4b0e      	ldr	r3, [pc, #56]	; (8002ef0 <MX_USART1_UART_Init+0x4c>)
 8002eb8:	2200      	movs	r2, #0
 8002eba:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002ebc:	4b0c      	ldr	r3, [pc, #48]	; (8002ef0 <MX_USART1_UART_Init+0x4c>)
 8002ebe:	2200      	movs	r2, #0
 8002ec0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002ec2:	4b0b      	ldr	r3, [pc, #44]	; (8002ef0 <MX_USART1_UART_Init+0x4c>)
 8002ec4:	2200      	movs	r2, #0
 8002ec6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002ec8:	4b09      	ldr	r3, [pc, #36]	; (8002ef0 <MX_USART1_UART_Init+0x4c>)
 8002eca:	220c      	movs	r2, #12
 8002ecc:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002ece:	4b08      	ldr	r3, [pc, #32]	; (8002ef0 <MX_USART1_UART_Init+0x4c>)
 8002ed0:	2200      	movs	r2, #0
 8002ed2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002ed4:	4b06      	ldr	r3, [pc, #24]	; (8002ef0 <MX_USART1_UART_Init+0x4c>)
 8002ed6:	2200      	movs	r2, #0
 8002ed8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002eda:	4805      	ldr	r0, [pc, #20]	; (8002ef0 <MX_USART1_UART_Init+0x4c>)
 8002edc:	f004 fc66 	bl	80077ac <HAL_UART_Init>
 8002ee0:	4603      	mov	r3, r0
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d001      	beq.n	8002eea <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8002ee6:	f7ff fb25 	bl	8002534 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002eea:	bf00      	nop
 8002eec:	bd80      	pop	{r7, pc}
 8002eee:	bf00      	nop
 8002ef0:	200050e0 	.word	0x200050e0
 8002ef4:	40011000 	.word	0x40011000

08002ef8 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8002ef8:	b580      	push	{r7, lr}
 8002efa:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8002efc:	4b10      	ldr	r3, [pc, #64]	; (8002f40 <MX_USART3_UART_Init+0x48>)
 8002efe:	4a11      	ldr	r2, [pc, #68]	; (8002f44 <MX_USART3_UART_Init+0x4c>)
 8002f00:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 100000;
 8002f02:	4b0f      	ldr	r3, [pc, #60]	; (8002f40 <MX_USART3_UART_Init+0x48>)
 8002f04:	4a10      	ldr	r2, [pc, #64]	; (8002f48 <MX_USART3_UART_Init+0x50>)
 8002f06:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8002f08:	4b0d      	ldr	r3, [pc, #52]	; (8002f40 <MX_USART3_UART_Init+0x48>)
 8002f0a:	2200      	movs	r2, #0
 8002f0c:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8002f0e:	4b0c      	ldr	r3, [pc, #48]	; (8002f40 <MX_USART3_UART_Init+0x48>)
 8002f10:	2200      	movs	r2, #0
 8002f12:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8002f14:	4b0a      	ldr	r3, [pc, #40]	; (8002f40 <MX_USART3_UART_Init+0x48>)
 8002f16:	2200      	movs	r2, #0
 8002f18:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8002f1a:	4b09      	ldr	r3, [pc, #36]	; (8002f40 <MX_USART3_UART_Init+0x48>)
 8002f1c:	220c      	movs	r2, #12
 8002f1e:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002f20:	4b07      	ldr	r3, [pc, #28]	; (8002f40 <MX_USART3_UART_Init+0x48>)
 8002f22:	2200      	movs	r2, #0
 8002f24:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8002f26:	4b06      	ldr	r3, [pc, #24]	; (8002f40 <MX_USART3_UART_Init+0x48>)
 8002f28:	2200      	movs	r2, #0
 8002f2a:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8002f2c:	4804      	ldr	r0, [pc, #16]	; (8002f40 <MX_USART3_UART_Init+0x48>)
 8002f2e:	f004 fc3d 	bl	80077ac <HAL_UART_Init>
 8002f32:	4603      	mov	r3, r0
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d001      	beq.n	8002f3c <MX_USART3_UART_Init+0x44>
  {
    Error_Handler();
 8002f38:	f7ff fafc 	bl	8002534 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8002f3c:	bf00      	nop
 8002f3e:	bd80      	pop	{r7, pc}
 8002f40:	20004fdc 	.word	0x20004fdc
 8002f44:	40004800 	.word	0x40004800
 8002f48:	000186a0 	.word	0x000186a0

08002f4c <MX_USART6_UART_Init>:
/* USART6 init function */

void MX_USART6_UART_Init(void)
{
 8002f4c:	b580      	push	{r7, lr}
 8002f4e:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8002f50:	4b11      	ldr	r3, [pc, #68]	; (8002f98 <MX_USART6_UART_Init+0x4c>)
 8002f52:	4a12      	ldr	r2, [pc, #72]	; (8002f9c <MX_USART6_UART_Init+0x50>)
 8002f54:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 8002f56:	4b10      	ldr	r3, [pc, #64]	; (8002f98 <MX_USART6_UART_Init+0x4c>)
 8002f58:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002f5c:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8002f5e:	4b0e      	ldr	r3, [pc, #56]	; (8002f98 <MX_USART6_UART_Init+0x4c>)
 8002f60:	2200      	movs	r2, #0
 8002f62:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8002f64:	4b0c      	ldr	r3, [pc, #48]	; (8002f98 <MX_USART6_UART_Init+0x4c>)
 8002f66:	2200      	movs	r2, #0
 8002f68:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8002f6a:	4b0b      	ldr	r3, [pc, #44]	; (8002f98 <MX_USART6_UART_Init+0x4c>)
 8002f6c:	2200      	movs	r2, #0
 8002f6e:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8002f70:	4b09      	ldr	r3, [pc, #36]	; (8002f98 <MX_USART6_UART_Init+0x4c>)
 8002f72:	220c      	movs	r2, #12
 8002f74:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002f76:	4b08      	ldr	r3, [pc, #32]	; (8002f98 <MX_USART6_UART_Init+0x4c>)
 8002f78:	2200      	movs	r2, #0
 8002f7a:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8002f7c:	4b06      	ldr	r3, [pc, #24]	; (8002f98 <MX_USART6_UART_Init+0x4c>)
 8002f7e:	2200      	movs	r2, #0
 8002f80:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8002f82:	4805      	ldr	r0, [pc, #20]	; (8002f98 <MX_USART6_UART_Init+0x4c>)
 8002f84:	f004 fc12 	bl	80077ac <HAL_UART_Init>
 8002f88:	4603      	mov	r3, r0
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d001      	beq.n	8002f92 <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 8002f8e:	f7ff fad1 	bl	8002534 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8002f92:	bf00      	nop
 8002f94:	bd80      	pop	{r7, pc}
 8002f96:	bf00      	nop
 8002f98:	20005124 	.word	0x20005124
 8002f9c:	40011400 	.word	0x40011400

08002fa0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002fa0:	b580      	push	{r7, lr}
 8002fa2:	b08e      	sub	sp, #56	; 0x38
 8002fa4:	af00      	add	r7, sp, #0
 8002fa6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002fa8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002fac:	2200      	movs	r2, #0
 8002fae:	601a      	str	r2, [r3, #0]
 8002fb0:	605a      	str	r2, [r3, #4]
 8002fb2:	609a      	str	r2, [r3, #8]
 8002fb4:	60da      	str	r2, [r3, #12]
 8002fb6:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	4a68      	ldr	r2, [pc, #416]	; (8003160 <HAL_UART_MspInit+0x1c0>)
 8002fbe:	4293      	cmp	r3, r2
 8002fc0:	d164      	bne.n	800308c <HAL_UART_MspInit+0xec>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002fc2:	2300      	movs	r3, #0
 8002fc4:	623b      	str	r3, [r7, #32]
 8002fc6:	4b67      	ldr	r3, [pc, #412]	; (8003164 <HAL_UART_MspInit+0x1c4>)
 8002fc8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002fca:	4a66      	ldr	r2, [pc, #408]	; (8003164 <HAL_UART_MspInit+0x1c4>)
 8002fcc:	f043 0310 	orr.w	r3, r3, #16
 8002fd0:	6453      	str	r3, [r2, #68]	; 0x44
 8002fd2:	4b64      	ldr	r3, [pc, #400]	; (8003164 <HAL_UART_MspInit+0x1c4>)
 8002fd4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002fd6:	f003 0310 	and.w	r3, r3, #16
 8002fda:	623b      	str	r3, [r7, #32]
 8002fdc:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002fde:	2300      	movs	r3, #0
 8002fe0:	61fb      	str	r3, [r7, #28]
 8002fe2:	4b60      	ldr	r3, [pc, #384]	; (8003164 <HAL_UART_MspInit+0x1c4>)
 8002fe4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fe6:	4a5f      	ldr	r2, [pc, #380]	; (8003164 <HAL_UART_MspInit+0x1c4>)
 8002fe8:	f043 0301 	orr.w	r3, r3, #1
 8002fec:	6313      	str	r3, [r2, #48]	; 0x30
 8002fee:	4b5d      	ldr	r3, [pc, #372]	; (8003164 <HAL_UART_MspInit+0x1c4>)
 8002ff0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ff2:	f003 0301 	and.w	r3, r3, #1
 8002ff6:	61fb      	str	r3, [r7, #28]
 8002ff8:	69fb      	ldr	r3, [r7, #28]
    /**USART1 GPIO Configuration
    PA10     ------> USART1_RX
    PA9     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_9;
 8002ffa:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8002ffe:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003000:	2302      	movs	r3, #2
 8003002:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003004:	2300      	movs	r3, #0
 8003006:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003008:	2303      	movs	r3, #3
 800300a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800300c:	2307      	movs	r3, #7
 800300e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003010:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003014:	4619      	mov	r1, r3
 8003016:	4854      	ldr	r0, [pc, #336]	; (8003168 <HAL_UART_MspInit+0x1c8>)
 8003018:	f001 fc8c 	bl	8004934 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA2_Stream7;
 800301c:	4b53      	ldr	r3, [pc, #332]	; (800316c <HAL_UART_MspInit+0x1cc>)
 800301e:	4a54      	ldr	r2, [pc, #336]	; (8003170 <HAL_UART_MspInit+0x1d0>)
 8003020:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Channel = DMA_CHANNEL_4;
 8003022:	4b52      	ldr	r3, [pc, #328]	; (800316c <HAL_UART_MspInit+0x1cc>)
 8003024:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003028:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800302a:	4b50      	ldr	r3, [pc, #320]	; (800316c <HAL_UART_MspInit+0x1cc>)
 800302c:	2240      	movs	r2, #64	; 0x40
 800302e:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003030:	4b4e      	ldr	r3, [pc, #312]	; (800316c <HAL_UART_MspInit+0x1cc>)
 8003032:	2200      	movs	r2, #0
 8003034:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8003036:	4b4d      	ldr	r3, [pc, #308]	; (800316c <HAL_UART_MspInit+0x1cc>)
 8003038:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800303c:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800303e:	4b4b      	ldr	r3, [pc, #300]	; (800316c <HAL_UART_MspInit+0x1cc>)
 8003040:	2200      	movs	r2, #0
 8003042:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003044:	4b49      	ldr	r3, [pc, #292]	; (800316c <HAL_UART_MspInit+0x1cc>)
 8003046:	2200      	movs	r2, #0
 8003048:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 800304a:	4b48      	ldr	r3, [pc, #288]	; (800316c <HAL_UART_MspInit+0x1cc>)
 800304c:	2200      	movs	r2, #0
 800304e:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8003050:	4b46      	ldr	r3, [pc, #280]	; (800316c <HAL_UART_MspInit+0x1cc>)
 8003052:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8003056:	621a      	str	r2, [r3, #32]
    hdma_usart1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003058:	4b44      	ldr	r3, [pc, #272]	; (800316c <HAL_UART_MspInit+0x1cc>)
 800305a:	2200      	movs	r2, #0
 800305c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 800305e:	4843      	ldr	r0, [pc, #268]	; (800316c <HAL_UART_MspInit+0x1cc>)
 8003060:	f001 f8ec 	bl	800423c <HAL_DMA_Init>
 8003064:	4603      	mov	r3, r0
 8003066:	2b00      	cmp	r3, #0
 8003068:	d001      	beq.n	800306e <HAL_UART_MspInit+0xce>
    {
      Error_Handler();
 800306a:	f7ff fa63 	bl	8002534 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart1_tx);
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	4a3e      	ldr	r2, [pc, #248]	; (800316c <HAL_UART_MspInit+0x1cc>)
 8003072:	635a      	str	r2, [r3, #52]	; 0x34
 8003074:	4a3d      	ldr	r2, [pc, #244]	; (800316c <HAL_UART_MspInit+0x1cc>)
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 800307a:	2200      	movs	r2, #0
 800307c:	2105      	movs	r1, #5
 800307e:	2025      	movs	r0, #37	; 0x25
 8003080:	f001 f8b2 	bl	80041e8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8003084:	2025      	movs	r0, #37	; 0x25
 8003086:	f001 f8cb 	bl	8004220 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }
}
 800308a:	e114      	b.n	80032b6 <HAL_UART_MspInit+0x316>
  else if(uartHandle->Instance==USART3)
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	4a38      	ldr	r2, [pc, #224]	; (8003174 <HAL_UART_MspInit+0x1d4>)
 8003092:	4293      	cmp	r3, r2
 8003094:	d176      	bne.n	8003184 <HAL_UART_MspInit+0x1e4>
    __HAL_RCC_USART3_CLK_ENABLE();
 8003096:	2300      	movs	r3, #0
 8003098:	61bb      	str	r3, [r7, #24]
 800309a:	4b32      	ldr	r3, [pc, #200]	; (8003164 <HAL_UART_MspInit+0x1c4>)
 800309c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800309e:	4a31      	ldr	r2, [pc, #196]	; (8003164 <HAL_UART_MspInit+0x1c4>)
 80030a0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80030a4:	6413      	str	r3, [r2, #64]	; 0x40
 80030a6:	4b2f      	ldr	r3, [pc, #188]	; (8003164 <HAL_UART_MspInit+0x1c4>)
 80030a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030aa:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80030ae:	61bb      	str	r3, [r7, #24]
 80030b0:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80030b2:	2300      	movs	r3, #0
 80030b4:	617b      	str	r3, [r7, #20]
 80030b6:	4b2b      	ldr	r3, [pc, #172]	; (8003164 <HAL_UART_MspInit+0x1c4>)
 80030b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030ba:	4a2a      	ldr	r2, [pc, #168]	; (8003164 <HAL_UART_MspInit+0x1c4>)
 80030bc:	f043 0304 	orr.w	r3, r3, #4
 80030c0:	6313      	str	r3, [r2, #48]	; 0x30
 80030c2:	4b28      	ldr	r3, [pc, #160]	; (8003164 <HAL_UART_MspInit+0x1c4>)
 80030c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030c6:	f003 0304 	and.w	r3, r3, #4
 80030ca:	617b      	str	r3, [r7, #20]
 80030cc:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_10;
 80030ce:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80030d2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80030d4:	2302      	movs	r3, #2
 80030d6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030d8:	2300      	movs	r3, #0
 80030da:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80030dc:	2303      	movs	r3, #3
 80030de:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80030e0:	2307      	movs	r3, #7
 80030e2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80030e4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80030e8:	4619      	mov	r1, r3
 80030ea:	4823      	ldr	r0, [pc, #140]	; (8003178 <HAL_UART_MspInit+0x1d8>)
 80030ec:	f001 fc22 	bl	8004934 <HAL_GPIO_Init>
    hdma_usart3_rx.Instance = DMA1_Stream1;
 80030f0:	4b22      	ldr	r3, [pc, #136]	; (800317c <HAL_UART_MspInit+0x1dc>)
 80030f2:	4a23      	ldr	r2, [pc, #140]	; (8003180 <HAL_UART_MspInit+0x1e0>)
 80030f4:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Channel = DMA_CHANNEL_4;
 80030f6:	4b21      	ldr	r3, [pc, #132]	; (800317c <HAL_UART_MspInit+0x1dc>)
 80030f8:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80030fc:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80030fe:	4b1f      	ldr	r3, [pc, #124]	; (800317c <HAL_UART_MspInit+0x1dc>)
 8003100:	2200      	movs	r2, #0
 8003102:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003104:	4b1d      	ldr	r3, [pc, #116]	; (800317c <HAL_UART_MspInit+0x1dc>)
 8003106:	2200      	movs	r2, #0
 8003108:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 800310a:	4b1c      	ldr	r3, [pc, #112]	; (800317c <HAL_UART_MspInit+0x1dc>)
 800310c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003110:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003112:	4b1a      	ldr	r3, [pc, #104]	; (800317c <HAL_UART_MspInit+0x1dc>)
 8003114:	2200      	movs	r2, #0
 8003116:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003118:	4b18      	ldr	r3, [pc, #96]	; (800317c <HAL_UART_MspInit+0x1dc>)
 800311a:	2200      	movs	r2, #0
 800311c:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_NORMAL;
 800311e:	4b17      	ldr	r3, [pc, #92]	; (800317c <HAL_UART_MspInit+0x1dc>)
 8003120:	2200      	movs	r2, #0
 8003122:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_HIGH;
 8003124:	4b15      	ldr	r3, [pc, #84]	; (800317c <HAL_UART_MspInit+0x1dc>)
 8003126:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800312a:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800312c:	4b13      	ldr	r3, [pc, #76]	; (800317c <HAL_UART_MspInit+0x1dc>)
 800312e:	2200      	movs	r2, #0
 8003130:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 8003132:	4812      	ldr	r0, [pc, #72]	; (800317c <HAL_UART_MspInit+0x1dc>)
 8003134:	f001 f882 	bl	800423c <HAL_DMA_Init>
 8003138:	4603      	mov	r3, r0
 800313a:	2b00      	cmp	r3, #0
 800313c:	d001      	beq.n	8003142 <HAL_UART_MspInit+0x1a2>
      Error_Handler();
 800313e:	f7ff f9f9 	bl	8002534 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart3_rx);
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	4a0d      	ldr	r2, [pc, #52]	; (800317c <HAL_UART_MspInit+0x1dc>)
 8003146:	639a      	str	r2, [r3, #56]	; 0x38
 8003148:	4a0c      	ldr	r2, [pc, #48]	; (800317c <HAL_UART_MspInit+0x1dc>)
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 800314e:	2200      	movs	r2, #0
 8003150:	2105      	movs	r1, #5
 8003152:	2027      	movs	r0, #39	; 0x27
 8003154:	f001 f848 	bl	80041e8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8003158:	2027      	movs	r0, #39	; 0x27
 800315a:	f001 f861 	bl	8004220 <HAL_NVIC_EnableIRQ>
}
 800315e:	e0aa      	b.n	80032b6 <HAL_UART_MspInit+0x316>
 8003160:	40011000 	.word	0x40011000
 8003164:	40023800 	.word	0x40023800
 8003168:	40020000 	.word	0x40020000
 800316c:	20005020 	.word	0x20005020
 8003170:	400264b8 	.word	0x400264b8
 8003174:	40004800 	.word	0x40004800
 8003178:	40020800 	.word	0x40020800
 800317c:	20004f7c 	.word	0x20004f7c
 8003180:	40026028 	.word	0x40026028
  else if(uartHandle->Instance==USART6)
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	4a4d      	ldr	r2, [pc, #308]	; (80032c0 <HAL_UART_MspInit+0x320>)
 800318a:	4293      	cmp	r3, r2
 800318c:	f040 8093 	bne.w	80032b6 <HAL_UART_MspInit+0x316>
    __HAL_RCC_USART6_CLK_ENABLE();
 8003190:	2300      	movs	r3, #0
 8003192:	613b      	str	r3, [r7, #16]
 8003194:	4b4b      	ldr	r3, [pc, #300]	; (80032c4 <HAL_UART_MspInit+0x324>)
 8003196:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003198:	4a4a      	ldr	r2, [pc, #296]	; (80032c4 <HAL_UART_MspInit+0x324>)
 800319a:	f043 0320 	orr.w	r3, r3, #32
 800319e:	6453      	str	r3, [r2, #68]	; 0x44
 80031a0:	4b48      	ldr	r3, [pc, #288]	; (80032c4 <HAL_UART_MspInit+0x324>)
 80031a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031a4:	f003 0320 	and.w	r3, r3, #32
 80031a8:	613b      	str	r3, [r7, #16]
 80031aa:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 80031ac:	2300      	movs	r3, #0
 80031ae:	60fb      	str	r3, [r7, #12]
 80031b0:	4b44      	ldr	r3, [pc, #272]	; (80032c4 <HAL_UART_MspInit+0x324>)
 80031b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031b4:	4a43      	ldr	r2, [pc, #268]	; (80032c4 <HAL_UART_MspInit+0x324>)
 80031b6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80031ba:	6313      	str	r3, [r2, #48]	; 0x30
 80031bc:	4b41      	ldr	r3, [pc, #260]	; (80032c4 <HAL_UART_MspInit+0x324>)
 80031be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80031c4:	60fb      	str	r3, [r7, #12]
 80031c6:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_9;
 80031c8:	f44f 4384 	mov.w	r3, #16896	; 0x4200
 80031cc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80031ce:	2302      	movs	r3, #2
 80031d0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031d2:	2300      	movs	r3, #0
 80031d4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80031d6:	2303      	movs	r3, #3
 80031d8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 80031da:	2308      	movs	r3, #8
 80031dc:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80031de:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80031e2:	4619      	mov	r1, r3
 80031e4:	4838      	ldr	r0, [pc, #224]	; (80032c8 <HAL_UART_MspInit+0x328>)
 80031e6:	f001 fba5 	bl	8004934 <HAL_GPIO_Init>
    hdma_usart6_rx.Instance = DMA2_Stream1;
 80031ea:	4b38      	ldr	r3, [pc, #224]	; (80032cc <HAL_UART_MspInit+0x32c>)
 80031ec:	4a38      	ldr	r2, [pc, #224]	; (80032d0 <HAL_UART_MspInit+0x330>)
 80031ee:	601a      	str	r2, [r3, #0]
    hdma_usart6_rx.Init.Channel = DMA_CHANNEL_5;
 80031f0:	4b36      	ldr	r3, [pc, #216]	; (80032cc <HAL_UART_MspInit+0x32c>)
 80031f2:	f04f 6220 	mov.w	r2, #167772160	; 0xa000000
 80031f6:	605a      	str	r2, [r3, #4]
    hdma_usart6_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80031f8:	4b34      	ldr	r3, [pc, #208]	; (80032cc <HAL_UART_MspInit+0x32c>)
 80031fa:	2200      	movs	r2, #0
 80031fc:	609a      	str	r2, [r3, #8]
    hdma_usart6_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80031fe:	4b33      	ldr	r3, [pc, #204]	; (80032cc <HAL_UART_MspInit+0x32c>)
 8003200:	2200      	movs	r2, #0
 8003202:	60da      	str	r2, [r3, #12]
    hdma_usart6_rx.Init.MemInc = DMA_MINC_ENABLE;
 8003204:	4b31      	ldr	r3, [pc, #196]	; (80032cc <HAL_UART_MspInit+0x32c>)
 8003206:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800320a:	611a      	str	r2, [r3, #16]
    hdma_usart6_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800320c:	4b2f      	ldr	r3, [pc, #188]	; (80032cc <HAL_UART_MspInit+0x32c>)
 800320e:	2200      	movs	r2, #0
 8003210:	615a      	str	r2, [r3, #20]
    hdma_usart6_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003212:	4b2e      	ldr	r3, [pc, #184]	; (80032cc <HAL_UART_MspInit+0x32c>)
 8003214:	2200      	movs	r2, #0
 8003216:	619a      	str	r2, [r3, #24]
    hdma_usart6_rx.Init.Mode = DMA_NORMAL;
 8003218:	4b2c      	ldr	r3, [pc, #176]	; (80032cc <HAL_UART_MspInit+0x32c>)
 800321a:	2200      	movs	r2, #0
 800321c:	61da      	str	r2, [r3, #28]
    hdma_usart6_rx.Init.Priority = DMA_PRIORITY_HIGH;
 800321e:	4b2b      	ldr	r3, [pc, #172]	; (80032cc <HAL_UART_MspInit+0x32c>)
 8003220:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003224:	621a      	str	r2, [r3, #32]
    hdma_usart6_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003226:	4b29      	ldr	r3, [pc, #164]	; (80032cc <HAL_UART_MspInit+0x32c>)
 8003228:	2200      	movs	r2, #0
 800322a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart6_rx) != HAL_OK)
 800322c:	4827      	ldr	r0, [pc, #156]	; (80032cc <HAL_UART_MspInit+0x32c>)
 800322e:	f001 f805 	bl	800423c <HAL_DMA_Init>
 8003232:	4603      	mov	r3, r0
 8003234:	2b00      	cmp	r3, #0
 8003236:	d001      	beq.n	800323c <HAL_UART_MspInit+0x29c>
      Error_Handler();
 8003238:	f7ff f97c 	bl	8002534 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart6_rx);
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	4a23      	ldr	r2, [pc, #140]	; (80032cc <HAL_UART_MspInit+0x32c>)
 8003240:	639a      	str	r2, [r3, #56]	; 0x38
 8003242:	4a22      	ldr	r2, [pc, #136]	; (80032cc <HAL_UART_MspInit+0x32c>)
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_usart6_tx.Instance = DMA2_Stream6;
 8003248:	4b22      	ldr	r3, [pc, #136]	; (80032d4 <HAL_UART_MspInit+0x334>)
 800324a:	4a23      	ldr	r2, [pc, #140]	; (80032d8 <HAL_UART_MspInit+0x338>)
 800324c:	601a      	str	r2, [r3, #0]
    hdma_usart6_tx.Init.Channel = DMA_CHANNEL_5;
 800324e:	4b21      	ldr	r3, [pc, #132]	; (80032d4 <HAL_UART_MspInit+0x334>)
 8003250:	f04f 6220 	mov.w	r2, #167772160	; 0xa000000
 8003254:	605a      	str	r2, [r3, #4]
    hdma_usart6_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003256:	4b1f      	ldr	r3, [pc, #124]	; (80032d4 <HAL_UART_MspInit+0x334>)
 8003258:	2240      	movs	r2, #64	; 0x40
 800325a:	609a      	str	r2, [r3, #8]
    hdma_usart6_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800325c:	4b1d      	ldr	r3, [pc, #116]	; (80032d4 <HAL_UART_MspInit+0x334>)
 800325e:	2200      	movs	r2, #0
 8003260:	60da      	str	r2, [r3, #12]
    hdma_usart6_tx.Init.MemInc = DMA_MINC_ENABLE;
 8003262:	4b1c      	ldr	r3, [pc, #112]	; (80032d4 <HAL_UART_MspInit+0x334>)
 8003264:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003268:	611a      	str	r2, [r3, #16]
    hdma_usart6_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800326a:	4b1a      	ldr	r3, [pc, #104]	; (80032d4 <HAL_UART_MspInit+0x334>)
 800326c:	2200      	movs	r2, #0
 800326e:	615a      	str	r2, [r3, #20]
    hdma_usart6_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003270:	4b18      	ldr	r3, [pc, #96]	; (80032d4 <HAL_UART_MspInit+0x334>)
 8003272:	2200      	movs	r2, #0
 8003274:	619a      	str	r2, [r3, #24]
    hdma_usart6_tx.Init.Mode = DMA_NORMAL;
 8003276:	4b17      	ldr	r3, [pc, #92]	; (80032d4 <HAL_UART_MspInit+0x334>)
 8003278:	2200      	movs	r2, #0
 800327a:	61da      	str	r2, [r3, #28]
    hdma_usart6_tx.Init.Priority = DMA_PRIORITY_MEDIUM;
 800327c:	4b15      	ldr	r3, [pc, #84]	; (80032d4 <HAL_UART_MspInit+0x334>)
 800327e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8003282:	621a      	str	r2, [r3, #32]
    hdma_usart6_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003284:	4b13      	ldr	r3, [pc, #76]	; (80032d4 <HAL_UART_MspInit+0x334>)
 8003286:	2200      	movs	r2, #0
 8003288:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart6_tx) != HAL_OK)
 800328a:	4812      	ldr	r0, [pc, #72]	; (80032d4 <HAL_UART_MspInit+0x334>)
 800328c:	f000 ffd6 	bl	800423c <HAL_DMA_Init>
 8003290:	4603      	mov	r3, r0
 8003292:	2b00      	cmp	r3, #0
 8003294:	d001      	beq.n	800329a <HAL_UART_MspInit+0x2fa>
      Error_Handler();
 8003296:	f7ff f94d 	bl	8002534 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart6_tx);
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	4a0d      	ldr	r2, [pc, #52]	; (80032d4 <HAL_UART_MspInit+0x334>)
 800329e:	635a      	str	r2, [r3, #52]	; 0x34
 80032a0:	4a0c      	ldr	r2, [pc, #48]	; (80032d4 <HAL_UART_MspInit+0x334>)
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART6_IRQn, 5, 0);
 80032a6:	2200      	movs	r2, #0
 80032a8:	2105      	movs	r1, #5
 80032aa:	2047      	movs	r0, #71	; 0x47
 80032ac:	f000 ff9c 	bl	80041e8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 80032b0:	2047      	movs	r0, #71	; 0x47
 80032b2:	f000 ffb5 	bl	8004220 <HAL_NVIC_EnableIRQ>
}
 80032b6:	bf00      	nop
 80032b8:	3738      	adds	r7, #56	; 0x38
 80032ba:	46bd      	mov	sp, r7
 80032bc:	bd80      	pop	{r7, pc}
 80032be:	bf00      	nop
 80032c0:	40011400 	.word	0x40011400
 80032c4:	40023800 	.word	0x40023800
 80032c8:	40021800 	.word	0x40021800
 80032cc:	20004f1c 	.word	0x20004f1c
 80032d0:	40026428 	.word	0x40026428
 80032d4:	20005080 	.word	0x20005080
 80032d8:	400264a0 	.word	0x400264a0

080032dc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80032dc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003314 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80032e0:	480d      	ldr	r0, [pc, #52]	; (8003318 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80032e2:	490e      	ldr	r1, [pc, #56]	; (800331c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80032e4:	4a0e      	ldr	r2, [pc, #56]	; (8003320 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80032e6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80032e8:	e002      	b.n	80032f0 <LoopCopyDataInit>

080032ea <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80032ea:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80032ec:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80032ee:	3304      	adds	r3, #4

080032f0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80032f0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80032f2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80032f4:	d3f9      	bcc.n	80032ea <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80032f6:	4a0b      	ldr	r2, [pc, #44]	; (8003324 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80032f8:	4c0b      	ldr	r4, [pc, #44]	; (8003328 <LoopFillZerobss+0x26>)
  movs r3, #0
 80032fa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80032fc:	e001      	b.n	8003302 <LoopFillZerobss>

080032fe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80032fe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003300:	3204      	adds	r2, #4

08003302 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003302:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003304:	d3fb      	bcc.n	80032fe <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8003306:	f7ff fb83 	bl	8002a10 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800330a:	f00a f8dd 	bl	800d4c8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800330e:	f7ff f853 	bl	80023b8 <main>
  bx  lr    
 8003312:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8003314:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8003318:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800331c:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 8003320:	0800fd28 	.word	0x0800fd28
  ldr r2, =_sbss
 8003324:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 8003328:	200055b4 	.word	0x200055b4

0800332c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800332c:	e7fe      	b.n	800332c <ADC_IRQHandler>
	...

08003330 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003330:	b580      	push	{r7, lr}
 8003332:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003334:	4b0e      	ldr	r3, [pc, #56]	; (8003370 <HAL_Init+0x40>)
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	4a0d      	ldr	r2, [pc, #52]	; (8003370 <HAL_Init+0x40>)
 800333a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800333e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003340:	4b0b      	ldr	r3, [pc, #44]	; (8003370 <HAL_Init+0x40>)
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	4a0a      	ldr	r2, [pc, #40]	; (8003370 <HAL_Init+0x40>)
 8003346:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800334a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800334c:	4b08      	ldr	r3, [pc, #32]	; (8003370 <HAL_Init+0x40>)
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	4a07      	ldr	r2, [pc, #28]	; (8003370 <HAL_Init+0x40>)
 8003352:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003356:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003358:	2003      	movs	r0, #3
 800335a:	f000 ff3a 	bl	80041d2 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800335e:	2000      	movs	r0, #0
 8003360:	f7ff fa5a 	bl	8002818 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003364:	f7ff fa2c 	bl	80027c0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003368:	2300      	movs	r3, #0
}
 800336a:	4618      	mov	r0, r3
 800336c:	bd80      	pop	{r7, pc}
 800336e:	bf00      	nop
 8003370:	40023c00 	.word	0x40023c00

08003374 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003374:	b480      	push	{r7}
 8003376:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003378:	4b06      	ldr	r3, [pc, #24]	; (8003394 <HAL_IncTick+0x20>)
 800337a:	781b      	ldrb	r3, [r3, #0]
 800337c:	461a      	mov	r2, r3
 800337e:	4b06      	ldr	r3, [pc, #24]	; (8003398 <HAL_IncTick+0x24>)
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	4413      	add	r3, r2
 8003384:	4a04      	ldr	r2, [pc, #16]	; (8003398 <HAL_IncTick+0x24>)
 8003386:	6013      	str	r3, [r2, #0]
}
 8003388:	bf00      	nop
 800338a:	46bd      	mov	sp, r7
 800338c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003390:	4770      	bx	lr
 8003392:	bf00      	nop
 8003394:	20000008 	.word	0x20000008
 8003398:	20005168 	.word	0x20005168

0800339c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800339c:	b480      	push	{r7}
 800339e:	af00      	add	r7, sp, #0
  return uwTick;
 80033a0:	4b03      	ldr	r3, [pc, #12]	; (80033b0 <HAL_GetTick+0x14>)
 80033a2:	681b      	ldr	r3, [r3, #0]
}
 80033a4:	4618      	mov	r0, r3
 80033a6:	46bd      	mov	sp, r7
 80033a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ac:	4770      	bx	lr
 80033ae:	bf00      	nop
 80033b0:	20005168 	.word	0x20005168

080033b4 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 80033b4:	b580      	push	{r7, lr}
 80033b6:	b084      	sub	sp, #16
 80033b8:	af00      	add	r7, sp, #0
 80033ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d101      	bne.n	80033c6 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 80033c2:	2301      	movs	r3, #1
 80033c4:	e0ed      	b.n	80035a2 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80033cc:	b2db      	uxtb	r3, r3
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d102      	bne.n	80033d8 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 80033d2:	6878      	ldr	r0, [r7, #4]
 80033d4:	f7fe fe10 	bl	8001ff8 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	681a      	ldr	r2, [r3, #0]
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	f042 0201 	orr.w	r2, r2, #1
 80033e6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80033e8:	f7ff ffd8 	bl	800339c <HAL_GetTick>
 80033ec:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80033ee:	e012      	b.n	8003416 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80033f0:	f7ff ffd4 	bl	800339c <HAL_GetTick>
 80033f4:	4602      	mov	r2, r0
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	1ad3      	subs	r3, r2, r3
 80033fa:	2b0a      	cmp	r3, #10
 80033fc:	d90b      	bls.n	8003416 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003402:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	2205      	movs	r2, #5
 800340e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8003412:	2301      	movs	r3, #1
 8003414:	e0c5      	b.n	80035a2 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	685b      	ldr	r3, [r3, #4]
 800341c:	f003 0301 	and.w	r3, r3, #1
 8003420:	2b00      	cmp	r3, #0
 8003422:	d0e5      	beq.n	80033f0 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	681a      	ldr	r2, [r3, #0]
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	f022 0202 	bic.w	r2, r2, #2
 8003432:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003434:	f7ff ffb2 	bl	800339c <HAL_GetTick>
 8003438:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800343a:	e012      	b.n	8003462 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800343c:	f7ff ffae 	bl	800339c <HAL_GetTick>
 8003440:	4602      	mov	r2, r0
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	1ad3      	subs	r3, r2, r3
 8003446:	2b0a      	cmp	r3, #10
 8003448:	d90b      	bls.n	8003462 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800344e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	2205      	movs	r2, #5
 800345a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800345e:	2301      	movs	r3, #1
 8003460:	e09f      	b.n	80035a2 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	685b      	ldr	r3, [r3, #4]
 8003468:	f003 0302 	and.w	r3, r3, #2
 800346c:	2b00      	cmp	r3, #0
 800346e:	d1e5      	bne.n	800343c <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	7e1b      	ldrb	r3, [r3, #24]
 8003474:	2b01      	cmp	r3, #1
 8003476:	d108      	bne.n	800348a <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	681a      	ldr	r2, [r3, #0]
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003486:	601a      	str	r2, [r3, #0]
 8003488:	e007      	b.n	800349a <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	681a      	ldr	r2, [r3, #0]
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003498:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	7e5b      	ldrb	r3, [r3, #25]
 800349e:	2b01      	cmp	r3, #1
 80034a0:	d108      	bne.n	80034b4 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	681a      	ldr	r2, [r3, #0]
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80034b0:	601a      	str	r2, [r3, #0]
 80034b2:	e007      	b.n	80034c4 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	681a      	ldr	r2, [r3, #0]
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80034c2:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	7e9b      	ldrb	r3, [r3, #26]
 80034c8:	2b01      	cmp	r3, #1
 80034ca:	d108      	bne.n	80034de <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	681a      	ldr	r2, [r3, #0]
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	f042 0220 	orr.w	r2, r2, #32
 80034da:	601a      	str	r2, [r3, #0]
 80034dc:	e007      	b.n	80034ee <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	681a      	ldr	r2, [r3, #0]
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	f022 0220 	bic.w	r2, r2, #32
 80034ec:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	7edb      	ldrb	r3, [r3, #27]
 80034f2:	2b01      	cmp	r3, #1
 80034f4:	d108      	bne.n	8003508 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	681a      	ldr	r2, [r3, #0]
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	f022 0210 	bic.w	r2, r2, #16
 8003504:	601a      	str	r2, [r3, #0]
 8003506:	e007      	b.n	8003518 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	681a      	ldr	r2, [r3, #0]
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	f042 0210 	orr.w	r2, r2, #16
 8003516:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	7f1b      	ldrb	r3, [r3, #28]
 800351c:	2b01      	cmp	r3, #1
 800351e:	d108      	bne.n	8003532 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	681a      	ldr	r2, [r3, #0]
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	f042 0208 	orr.w	r2, r2, #8
 800352e:	601a      	str	r2, [r3, #0]
 8003530:	e007      	b.n	8003542 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	681a      	ldr	r2, [r3, #0]
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	f022 0208 	bic.w	r2, r2, #8
 8003540:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	7f5b      	ldrb	r3, [r3, #29]
 8003546:	2b01      	cmp	r3, #1
 8003548:	d108      	bne.n	800355c <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	681a      	ldr	r2, [r3, #0]
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	f042 0204 	orr.w	r2, r2, #4
 8003558:	601a      	str	r2, [r3, #0]
 800355a:	e007      	b.n	800356c <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	681a      	ldr	r2, [r3, #0]
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	f022 0204 	bic.w	r2, r2, #4
 800356a:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	689a      	ldr	r2, [r3, #8]
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	68db      	ldr	r3, [r3, #12]
 8003574:	431a      	orrs	r2, r3
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	691b      	ldr	r3, [r3, #16]
 800357a:	431a      	orrs	r2, r3
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	695b      	ldr	r3, [r3, #20]
 8003580:	ea42 0103 	orr.w	r1, r2, r3
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	685b      	ldr	r3, [r3, #4]
 8003588:	1e5a      	subs	r2, r3, #1
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	430a      	orrs	r2, r1
 8003590:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	2200      	movs	r2, #0
 8003596:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	2201      	movs	r2, #1
 800359c:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 80035a0:	2300      	movs	r3, #0
}
 80035a2:	4618      	mov	r0, r3
 80035a4:	3710      	adds	r7, #16
 80035a6:	46bd      	mov	sp, r7
 80035a8:	bd80      	pop	{r7, pc}
	...

080035ac <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 80035ac:	b480      	push	{r7}
 80035ae:	b087      	sub	sp, #28
 80035b0:	af00      	add	r7, sp, #0
 80035b2:	6078      	str	r0, [r7, #4]
 80035b4:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	f893 3020 	ldrb.w	r3, [r3, #32]
 80035c2:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 80035c4:	7cfb      	ldrb	r3, [r7, #19]
 80035c6:	2b01      	cmp	r3, #1
 80035c8:	d003      	beq.n	80035d2 <HAL_CAN_ConfigFilter+0x26>
 80035ca:	7cfb      	ldrb	r3, [r7, #19]
 80035cc:	2b02      	cmp	r3, #2
 80035ce:	f040 80be 	bne.w	800374e <HAL_CAN_ConfigFilter+0x1a2>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 80035d2:	4b65      	ldr	r3, [pc, #404]	; (8003768 <HAL_CAN_ConfigFilter+0x1bc>)
 80035d4:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80035d6:	697b      	ldr	r3, [r7, #20]
 80035d8:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80035dc:	f043 0201 	orr.w	r2, r3, #1
 80035e0:	697b      	ldr	r3, [r7, #20]
 80035e2:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 80035e6:	697b      	ldr	r3, [r7, #20]
 80035e8:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80035ec:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 80035f0:	697b      	ldr	r3, [r7, #20]
 80035f2:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 80035f6:	697b      	ldr	r3, [r7, #20]
 80035f8:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 80035fc:	683b      	ldr	r3, [r7, #0]
 80035fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003600:	021b      	lsls	r3, r3, #8
 8003602:	431a      	orrs	r2, r3
 8003604:	697b      	ldr	r3, [r7, #20]
 8003606:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 800360a:	683b      	ldr	r3, [r7, #0]
 800360c:	695b      	ldr	r3, [r3, #20]
 800360e:	f003 031f 	and.w	r3, r3, #31
 8003612:	2201      	movs	r2, #1
 8003614:	fa02 f303 	lsl.w	r3, r2, r3
 8003618:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 800361a:	697b      	ldr	r3, [r7, #20]
 800361c:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	43db      	mvns	r3, r3
 8003624:	401a      	ands	r2, r3
 8003626:	697b      	ldr	r3, [r7, #20]
 8003628:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 800362c:	683b      	ldr	r3, [r7, #0]
 800362e:	69db      	ldr	r3, [r3, #28]
 8003630:	2b00      	cmp	r3, #0
 8003632:	d123      	bne.n	800367c <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8003634:	697b      	ldr	r3, [r7, #20]
 8003636:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	43db      	mvns	r3, r3
 800363e:	401a      	ands	r2, r3
 8003640:	697b      	ldr	r3, [r7, #20]
 8003642:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8003646:	683b      	ldr	r3, [r7, #0]
 8003648:	68db      	ldr	r3, [r3, #12]
 800364a:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 800364c:	683b      	ldr	r3, [r7, #0]
 800364e:	685b      	ldr	r3, [r3, #4]
 8003650:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8003652:	683a      	ldr	r2, [r7, #0]
 8003654:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8003656:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8003658:	697b      	ldr	r3, [r7, #20]
 800365a:	3248      	adds	r2, #72	; 0x48
 800365c:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8003660:	683b      	ldr	r3, [r7, #0]
 8003662:	689b      	ldr	r3, [r3, #8]
 8003664:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8003666:	683b      	ldr	r3, [r7, #0]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800366c:	683b      	ldr	r3, [r7, #0]
 800366e:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8003670:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8003672:	6979      	ldr	r1, [r7, #20]
 8003674:	3348      	adds	r3, #72	; 0x48
 8003676:	00db      	lsls	r3, r3, #3
 8003678:	440b      	add	r3, r1
 800367a:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 800367c:	683b      	ldr	r3, [r7, #0]
 800367e:	69db      	ldr	r3, [r3, #28]
 8003680:	2b01      	cmp	r3, #1
 8003682:	d122      	bne.n	80036ca <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8003684:	697b      	ldr	r3, [r7, #20]
 8003686:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	431a      	orrs	r2, r3
 800368e:	697b      	ldr	r3, [r7, #20]
 8003690:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8003694:	683b      	ldr	r3, [r7, #0]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 800369a:	683b      	ldr	r3, [r7, #0]
 800369c:	685b      	ldr	r3, [r3, #4]
 800369e:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80036a0:	683a      	ldr	r2, [r7, #0]
 80036a2:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80036a4:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80036a6:	697b      	ldr	r3, [r7, #20]
 80036a8:	3248      	adds	r2, #72	; 0x48
 80036aa:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80036ae:	683b      	ldr	r3, [r7, #0]
 80036b0:	689b      	ldr	r3, [r3, #8]
 80036b2:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 80036b4:	683b      	ldr	r3, [r7, #0]
 80036b6:	68db      	ldr	r3, [r3, #12]
 80036b8:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80036ba:	683b      	ldr	r3, [r7, #0]
 80036bc:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80036be:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80036c0:	6979      	ldr	r1, [r7, #20]
 80036c2:	3348      	adds	r3, #72	; 0x48
 80036c4:	00db      	lsls	r3, r3, #3
 80036c6:	440b      	add	r3, r1
 80036c8:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 80036ca:	683b      	ldr	r3, [r7, #0]
 80036cc:	699b      	ldr	r3, [r3, #24]
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d109      	bne.n	80036e6 <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 80036d2:	697b      	ldr	r3, [r7, #20]
 80036d4:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	43db      	mvns	r3, r3
 80036dc:	401a      	ands	r2, r3
 80036de:	697b      	ldr	r3, [r7, #20]
 80036e0:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 80036e4:	e007      	b.n	80036f6 <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 80036e6:	697b      	ldr	r3, [r7, #20]
 80036e8:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	431a      	orrs	r2, r3
 80036f0:	697b      	ldr	r3, [r7, #20]
 80036f2:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 80036f6:	683b      	ldr	r3, [r7, #0]
 80036f8:	691b      	ldr	r3, [r3, #16]
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d109      	bne.n	8003712 <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 80036fe:	697b      	ldr	r3, [r7, #20]
 8003700:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	43db      	mvns	r3, r3
 8003708:	401a      	ands	r2, r3
 800370a:	697b      	ldr	r3, [r7, #20]
 800370c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8003710:	e007      	b.n	8003722 <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8003712:	697b      	ldr	r3, [r7, #20]
 8003714:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	431a      	orrs	r2, r3
 800371c:	697b      	ldr	r3, [r7, #20]
 800371e:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8003722:	683b      	ldr	r3, [r7, #0]
 8003724:	6a1b      	ldr	r3, [r3, #32]
 8003726:	2b01      	cmp	r3, #1
 8003728:	d107      	bne.n	800373a <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 800372a:	697b      	ldr	r3, [r7, #20]
 800372c:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	431a      	orrs	r2, r3
 8003734:	697b      	ldr	r3, [r7, #20]
 8003736:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 800373a:	697b      	ldr	r3, [r7, #20]
 800373c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8003740:	f023 0201 	bic.w	r2, r3, #1
 8003744:	697b      	ldr	r3, [r7, #20]
 8003746:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 800374a:	2300      	movs	r3, #0
 800374c:	e006      	b.n	800375c <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003752:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800375a:	2301      	movs	r3, #1
  }
}
 800375c:	4618      	mov	r0, r3
 800375e:	371c      	adds	r7, #28
 8003760:	46bd      	mov	sp, r7
 8003762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003766:	4770      	bx	lr
 8003768:	40006400 	.word	0x40006400

0800376c <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 800376c:	b580      	push	{r7, lr}
 800376e:	b084      	sub	sp, #16
 8003770:	af00      	add	r7, sp, #0
 8003772:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	f893 3020 	ldrb.w	r3, [r3, #32]
 800377a:	b2db      	uxtb	r3, r3
 800377c:	2b01      	cmp	r3, #1
 800377e:	d12e      	bne.n	80037de <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	2202      	movs	r2, #2
 8003784:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	681a      	ldr	r2, [r3, #0]
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	f022 0201 	bic.w	r2, r2, #1
 8003796:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8003798:	f7ff fe00 	bl	800339c <HAL_GetTick>
 800379c:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800379e:	e012      	b.n	80037c6 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80037a0:	f7ff fdfc 	bl	800339c <HAL_GetTick>
 80037a4:	4602      	mov	r2, r0
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	1ad3      	subs	r3, r2, r3
 80037aa:	2b0a      	cmp	r3, #10
 80037ac:	d90b      	bls.n	80037c6 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037b2:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	2205      	movs	r2, #5
 80037be:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 80037c2:	2301      	movs	r3, #1
 80037c4:	e012      	b.n	80037ec <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	685b      	ldr	r3, [r3, #4]
 80037cc:	f003 0301 	and.w	r3, r3, #1
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	d1e5      	bne.n	80037a0 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	2200      	movs	r2, #0
 80037d8:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 80037da:	2300      	movs	r3, #0
 80037dc:	e006      	b.n	80037ec <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037e2:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80037ea:	2301      	movs	r3, #1
  }
}
 80037ec:	4618      	mov	r0, r3
 80037ee:	3710      	adds	r7, #16
 80037f0:	46bd      	mov	sp, r7
 80037f2:	bd80      	pop	{r7, pc}

080037f4 <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 80037f4:	b480      	push	{r7}
 80037f6:	b089      	sub	sp, #36	; 0x24
 80037f8:	af00      	add	r7, sp, #0
 80037fa:	60f8      	str	r0, [r7, #12]
 80037fc:	60b9      	str	r1, [r7, #8]
 80037fe:	607a      	str	r2, [r7, #4]
 8003800:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003808:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	689b      	ldr	r3, [r3, #8]
 8003810:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8003812:	7ffb      	ldrb	r3, [r7, #31]
 8003814:	2b01      	cmp	r3, #1
 8003816:	d003      	beq.n	8003820 <HAL_CAN_AddTxMessage+0x2c>
 8003818:	7ffb      	ldrb	r3, [r7, #31]
 800381a:	2b02      	cmp	r3, #2
 800381c:	f040 80b8 	bne.w	8003990 <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8003820:	69bb      	ldr	r3, [r7, #24]
 8003822:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003826:	2b00      	cmp	r3, #0
 8003828:	d10a      	bne.n	8003840 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 800382a:	69bb      	ldr	r3, [r7, #24]
 800382c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8003830:	2b00      	cmp	r3, #0
 8003832:	d105      	bne.n	8003840 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8003834:	69bb      	ldr	r3, [r7, #24]
 8003836:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 800383a:	2b00      	cmp	r3, #0
 800383c:	f000 80a0 	beq.w	8003980 <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8003840:	69bb      	ldr	r3, [r7, #24]
 8003842:	0e1b      	lsrs	r3, r3, #24
 8003844:	f003 0303 	and.w	r3, r3, #3
 8003848:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 800384a:	697b      	ldr	r3, [r7, #20]
 800384c:	2b02      	cmp	r3, #2
 800384e:	d907      	bls.n	8003860 <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003854:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 800385c:	2301      	movs	r3, #1
 800385e:	e09e      	b.n	800399e <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8003860:	2201      	movs	r2, #1
 8003862:	697b      	ldr	r3, [r7, #20]
 8003864:	409a      	lsls	r2, r3
 8003866:	683b      	ldr	r3, [r7, #0]
 8003868:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 800386a:	68bb      	ldr	r3, [r7, #8]
 800386c:	689b      	ldr	r3, [r3, #8]
 800386e:	2b00      	cmp	r3, #0
 8003870:	d10d      	bne.n	800388e <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8003872:	68bb      	ldr	r3, [r7, #8]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8003878:	68bb      	ldr	r3, [r7, #8]
 800387a:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 800387c:	68f9      	ldr	r1, [r7, #12]
 800387e:	6809      	ldr	r1, [r1, #0]
 8003880:	431a      	orrs	r2, r3
 8003882:	697b      	ldr	r3, [r7, #20]
 8003884:	3318      	adds	r3, #24
 8003886:	011b      	lsls	r3, r3, #4
 8003888:	440b      	add	r3, r1
 800388a:	601a      	str	r2, [r3, #0]
 800388c:	e00f      	b.n	80038ae <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800388e:	68bb      	ldr	r3, [r7, #8]
 8003890:	685b      	ldr	r3, [r3, #4]
 8003892:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8003894:	68bb      	ldr	r3, [r7, #8]
 8003896:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8003898:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 800389a:	68bb      	ldr	r3, [r7, #8]
 800389c:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800389e:	68f9      	ldr	r1, [r7, #12]
 80038a0:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 80038a2:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80038a4:	697b      	ldr	r3, [r7, #20]
 80038a6:	3318      	adds	r3, #24
 80038a8:	011b      	lsls	r3, r3, #4
 80038aa:	440b      	add	r3, r1
 80038ac:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	6819      	ldr	r1, [r3, #0]
 80038b2:	68bb      	ldr	r3, [r7, #8]
 80038b4:	691a      	ldr	r2, [r3, #16]
 80038b6:	697b      	ldr	r3, [r7, #20]
 80038b8:	3318      	adds	r3, #24
 80038ba:	011b      	lsls	r3, r3, #4
 80038bc:	440b      	add	r3, r1
 80038be:	3304      	adds	r3, #4
 80038c0:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 80038c2:	68bb      	ldr	r3, [r7, #8]
 80038c4:	7d1b      	ldrb	r3, [r3, #20]
 80038c6:	2b01      	cmp	r3, #1
 80038c8:	d111      	bne.n	80038ee <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	681a      	ldr	r2, [r3, #0]
 80038ce:	697b      	ldr	r3, [r7, #20]
 80038d0:	3318      	adds	r3, #24
 80038d2:	011b      	lsls	r3, r3, #4
 80038d4:	4413      	add	r3, r2
 80038d6:	3304      	adds	r3, #4
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	68fa      	ldr	r2, [r7, #12]
 80038dc:	6811      	ldr	r1, [r2, #0]
 80038de:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80038e2:	697b      	ldr	r3, [r7, #20]
 80038e4:	3318      	adds	r3, #24
 80038e6:	011b      	lsls	r3, r3, #4
 80038e8:	440b      	add	r3, r1
 80038ea:	3304      	adds	r3, #4
 80038ec:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	3307      	adds	r3, #7
 80038f2:	781b      	ldrb	r3, [r3, #0]
 80038f4:	061a      	lsls	r2, r3, #24
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	3306      	adds	r3, #6
 80038fa:	781b      	ldrb	r3, [r3, #0]
 80038fc:	041b      	lsls	r3, r3, #16
 80038fe:	431a      	orrs	r2, r3
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	3305      	adds	r3, #5
 8003904:	781b      	ldrb	r3, [r3, #0]
 8003906:	021b      	lsls	r3, r3, #8
 8003908:	4313      	orrs	r3, r2
 800390a:	687a      	ldr	r2, [r7, #4]
 800390c:	3204      	adds	r2, #4
 800390e:	7812      	ldrb	r2, [r2, #0]
 8003910:	4610      	mov	r0, r2
 8003912:	68fa      	ldr	r2, [r7, #12]
 8003914:	6811      	ldr	r1, [r2, #0]
 8003916:	ea43 0200 	orr.w	r2, r3, r0
 800391a:	697b      	ldr	r3, [r7, #20]
 800391c:	011b      	lsls	r3, r3, #4
 800391e:	440b      	add	r3, r1
 8003920:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8003924:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	3303      	adds	r3, #3
 800392a:	781b      	ldrb	r3, [r3, #0]
 800392c:	061a      	lsls	r2, r3, #24
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	3302      	adds	r3, #2
 8003932:	781b      	ldrb	r3, [r3, #0]
 8003934:	041b      	lsls	r3, r3, #16
 8003936:	431a      	orrs	r2, r3
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	3301      	adds	r3, #1
 800393c:	781b      	ldrb	r3, [r3, #0]
 800393e:	021b      	lsls	r3, r3, #8
 8003940:	4313      	orrs	r3, r2
 8003942:	687a      	ldr	r2, [r7, #4]
 8003944:	7812      	ldrb	r2, [r2, #0]
 8003946:	4610      	mov	r0, r2
 8003948:	68fa      	ldr	r2, [r7, #12]
 800394a:	6811      	ldr	r1, [r2, #0]
 800394c:	ea43 0200 	orr.w	r2, r3, r0
 8003950:	697b      	ldr	r3, [r7, #20]
 8003952:	011b      	lsls	r3, r3, #4
 8003954:	440b      	add	r3, r1
 8003956:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 800395a:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	681a      	ldr	r2, [r3, #0]
 8003960:	697b      	ldr	r3, [r7, #20]
 8003962:	3318      	adds	r3, #24
 8003964:	011b      	lsls	r3, r3, #4
 8003966:	4413      	add	r3, r2
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	68fa      	ldr	r2, [r7, #12]
 800396c:	6811      	ldr	r1, [r2, #0]
 800396e:	f043 0201 	orr.w	r2, r3, #1
 8003972:	697b      	ldr	r3, [r7, #20]
 8003974:	3318      	adds	r3, #24
 8003976:	011b      	lsls	r3, r3, #4
 8003978:	440b      	add	r3, r1
 800397a:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 800397c:	2300      	movs	r3, #0
 800397e:	e00e      	b.n	800399e <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003984:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 800398c:	2301      	movs	r3, #1
 800398e:	e006      	b.n	800399e <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003994:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800399c:	2301      	movs	r3, #1
  }
}
 800399e:	4618      	mov	r0, r3
 80039a0:	3724      	adds	r7, #36	; 0x24
 80039a2:	46bd      	mov	sp, r7
 80039a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039a8:	4770      	bx	lr

080039aa <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 80039aa:	b480      	push	{r7}
 80039ac:	b087      	sub	sp, #28
 80039ae:	af00      	add	r7, sp, #0
 80039b0:	60f8      	str	r0, [r7, #12]
 80039b2:	60b9      	str	r1, [r7, #8]
 80039b4:	607a      	str	r2, [r7, #4]
 80039b6:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	f893 3020 	ldrb.w	r3, [r3, #32]
 80039be:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 80039c0:	7dfb      	ldrb	r3, [r7, #23]
 80039c2:	2b01      	cmp	r3, #1
 80039c4:	d003      	beq.n	80039ce <HAL_CAN_GetRxMessage+0x24>
 80039c6:	7dfb      	ldrb	r3, [r7, #23]
 80039c8:	2b02      	cmp	r3, #2
 80039ca:	f040 80f3 	bne.w	8003bb4 <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80039ce:	68bb      	ldr	r3, [r7, #8]
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	d10e      	bne.n	80039f2 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	68db      	ldr	r3, [r3, #12]
 80039da:	f003 0303 	and.w	r3, r3, #3
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d116      	bne.n	8003a10 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039e6:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80039ee:	2301      	movs	r3, #1
 80039f0:	e0e7      	b.n	8003bc2 <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	691b      	ldr	r3, [r3, #16]
 80039f8:	f003 0303 	and.w	r3, r3, #3
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	d107      	bne.n	8003a10 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a04:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8003a0c:	2301      	movs	r3, #1
 8003a0e:	e0d8      	b.n	8003bc2 <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	681a      	ldr	r2, [r3, #0]
 8003a14:	68bb      	ldr	r3, [r7, #8]
 8003a16:	331b      	adds	r3, #27
 8003a18:	011b      	lsls	r3, r3, #4
 8003a1a:	4413      	add	r3, r2
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	f003 0204 	and.w	r2, r3, #4
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	689b      	ldr	r3, [r3, #8]
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d10c      	bne.n	8003a48 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	681a      	ldr	r2, [r3, #0]
 8003a32:	68bb      	ldr	r3, [r7, #8]
 8003a34:	331b      	adds	r3, #27
 8003a36:	011b      	lsls	r3, r3, #4
 8003a38:	4413      	add	r3, r2
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	0d5b      	lsrs	r3, r3, #21
 8003a3e:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	601a      	str	r2, [r3, #0]
 8003a46:	e00b      	b.n	8003a60 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	681a      	ldr	r2, [r3, #0]
 8003a4c:	68bb      	ldr	r3, [r7, #8]
 8003a4e:	331b      	adds	r3, #27
 8003a50:	011b      	lsls	r3, r3, #4
 8003a52:	4413      	add	r3, r2
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	08db      	lsrs	r3, r3, #3
 8003a58:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	681a      	ldr	r2, [r3, #0]
 8003a64:	68bb      	ldr	r3, [r7, #8]
 8003a66:	331b      	adds	r3, #27
 8003a68:	011b      	lsls	r3, r3, #4
 8003a6a:	4413      	add	r3, r2
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	f003 0202 	and.w	r2, r3, #2
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	681a      	ldr	r2, [r3, #0]
 8003a7a:	68bb      	ldr	r3, [r7, #8]
 8003a7c:	331b      	adds	r3, #27
 8003a7e:	011b      	lsls	r3, r3, #4
 8003a80:	4413      	add	r3, r2
 8003a82:	3304      	adds	r3, #4
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	f003 020f 	and.w	r2, r3, #15
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	681a      	ldr	r2, [r3, #0]
 8003a92:	68bb      	ldr	r3, [r7, #8]
 8003a94:	331b      	adds	r3, #27
 8003a96:	011b      	lsls	r3, r3, #4
 8003a98:	4413      	add	r3, r2
 8003a9a:	3304      	adds	r3, #4
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	0a1b      	lsrs	r3, r3, #8
 8003aa0:	b2da      	uxtb	r2, r3
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	681a      	ldr	r2, [r3, #0]
 8003aaa:	68bb      	ldr	r3, [r7, #8]
 8003aac:	331b      	adds	r3, #27
 8003aae:	011b      	lsls	r3, r3, #4
 8003ab0:	4413      	add	r3, r2
 8003ab2:	3304      	adds	r3, #4
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	0c1b      	lsrs	r3, r3, #16
 8003ab8:	b29a      	uxth	r2, r3
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	681a      	ldr	r2, [r3, #0]
 8003ac2:	68bb      	ldr	r3, [r7, #8]
 8003ac4:	011b      	lsls	r3, r3, #4
 8003ac6:	4413      	add	r3, r2
 8003ac8:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	b2da      	uxtb	r2, r3
 8003ad0:	683b      	ldr	r3, [r7, #0]
 8003ad2:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	681a      	ldr	r2, [r3, #0]
 8003ad8:	68bb      	ldr	r3, [r7, #8]
 8003ada:	011b      	lsls	r3, r3, #4
 8003adc:	4413      	add	r3, r2
 8003ade:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	0a1a      	lsrs	r2, r3, #8
 8003ae6:	683b      	ldr	r3, [r7, #0]
 8003ae8:	3301      	adds	r3, #1
 8003aea:	b2d2      	uxtb	r2, r2
 8003aec:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	681a      	ldr	r2, [r3, #0]
 8003af2:	68bb      	ldr	r3, [r7, #8]
 8003af4:	011b      	lsls	r3, r3, #4
 8003af6:	4413      	add	r3, r2
 8003af8:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	0c1a      	lsrs	r2, r3, #16
 8003b00:	683b      	ldr	r3, [r7, #0]
 8003b02:	3302      	adds	r3, #2
 8003b04:	b2d2      	uxtb	r2, r2
 8003b06:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	681a      	ldr	r2, [r3, #0]
 8003b0c:	68bb      	ldr	r3, [r7, #8]
 8003b0e:	011b      	lsls	r3, r3, #4
 8003b10:	4413      	add	r3, r2
 8003b12:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	0e1a      	lsrs	r2, r3, #24
 8003b1a:	683b      	ldr	r3, [r7, #0]
 8003b1c:	3303      	adds	r3, #3
 8003b1e:	b2d2      	uxtb	r2, r2
 8003b20:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	681a      	ldr	r2, [r3, #0]
 8003b26:	68bb      	ldr	r3, [r7, #8]
 8003b28:	011b      	lsls	r3, r3, #4
 8003b2a:	4413      	add	r3, r2
 8003b2c:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8003b30:	681a      	ldr	r2, [r3, #0]
 8003b32:	683b      	ldr	r3, [r7, #0]
 8003b34:	3304      	adds	r3, #4
 8003b36:	b2d2      	uxtb	r2, r2
 8003b38:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	681a      	ldr	r2, [r3, #0]
 8003b3e:	68bb      	ldr	r3, [r7, #8]
 8003b40:	011b      	lsls	r3, r3, #4
 8003b42:	4413      	add	r3, r2
 8003b44:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	0a1a      	lsrs	r2, r3, #8
 8003b4c:	683b      	ldr	r3, [r7, #0]
 8003b4e:	3305      	adds	r3, #5
 8003b50:	b2d2      	uxtb	r2, r2
 8003b52:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	681a      	ldr	r2, [r3, #0]
 8003b58:	68bb      	ldr	r3, [r7, #8]
 8003b5a:	011b      	lsls	r3, r3, #4
 8003b5c:	4413      	add	r3, r2
 8003b5e:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	0c1a      	lsrs	r2, r3, #16
 8003b66:	683b      	ldr	r3, [r7, #0]
 8003b68:	3306      	adds	r3, #6
 8003b6a:	b2d2      	uxtb	r2, r2
 8003b6c:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	681a      	ldr	r2, [r3, #0]
 8003b72:	68bb      	ldr	r3, [r7, #8]
 8003b74:	011b      	lsls	r3, r3, #4
 8003b76:	4413      	add	r3, r2
 8003b78:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	0e1a      	lsrs	r2, r3, #24
 8003b80:	683b      	ldr	r3, [r7, #0]
 8003b82:	3307      	adds	r3, #7
 8003b84:	b2d2      	uxtb	r2, r2
 8003b86:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8003b88:	68bb      	ldr	r3, [r7, #8]
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d108      	bne.n	8003ba0 <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	68da      	ldr	r2, [r3, #12]
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	f042 0220 	orr.w	r2, r2, #32
 8003b9c:	60da      	str	r2, [r3, #12]
 8003b9e:	e007      	b.n	8003bb0 <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	691a      	ldr	r2, [r3, #16]
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	f042 0220 	orr.w	r2, r2, #32
 8003bae:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8003bb0:	2300      	movs	r3, #0
 8003bb2:	e006      	b.n	8003bc2 <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bb8:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8003bc0:	2301      	movs	r3, #1
  }
}
 8003bc2:	4618      	mov	r0, r3
 8003bc4:	371c      	adds	r7, #28
 8003bc6:	46bd      	mov	sp, r7
 8003bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bcc:	4770      	bx	lr

08003bce <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8003bce:	b480      	push	{r7}
 8003bd0:	b085      	sub	sp, #20
 8003bd2:	af00      	add	r7, sp, #0
 8003bd4:	6078      	str	r0, [r7, #4]
 8003bd6:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003bde:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8003be0:	7bfb      	ldrb	r3, [r7, #15]
 8003be2:	2b01      	cmp	r3, #1
 8003be4:	d002      	beq.n	8003bec <HAL_CAN_ActivateNotification+0x1e>
 8003be6:	7bfb      	ldrb	r3, [r7, #15]
 8003be8:	2b02      	cmp	r3, #2
 8003bea:	d109      	bne.n	8003c00 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	6959      	ldr	r1, [r3, #20]
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	683a      	ldr	r2, [r7, #0]
 8003bf8:	430a      	orrs	r2, r1
 8003bfa:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8003bfc:	2300      	movs	r3, #0
 8003bfe:	e006      	b.n	8003c0e <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c04:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8003c0c:	2301      	movs	r3, #1
  }
}
 8003c0e:	4618      	mov	r0, r3
 8003c10:	3714      	adds	r7, #20
 8003c12:	46bd      	mov	sp, r7
 8003c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c18:	4770      	bx	lr

08003c1a <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8003c1a:	b580      	push	{r7, lr}
 8003c1c:	b08a      	sub	sp, #40	; 0x28
 8003c1e:	af00      	add	r7, sp, #0
 8003c20:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8003c22:	2300      	movs	r3, #0
 8003c24:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	695b      	ldr	r3, [r3, #20]
 8003c2c:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	685b      	ldr	r3, [r3, #4]
 8003c34:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	689b      	ldr	r3, [r3, #8]
 8003c3c:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	68db      	ldr	r3, [r3, #12]
 8003c44:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	691b      	ldr	r3, [r3, #16]
 8003c4c:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	699b      	ldr	r3, [r3, #24]
 8003c54:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8003c56:	6a3b      	ldr	r3, [r7, #32]
 8003c58:	f003 0301 	and.w	r3, r3, #1
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	d07c      	beq.n	8003d5a <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8003c60:	69bb      	ldr	r3, [r7, #24]
 8003c62:	f003 0301 	and.w	r3, r3, #1
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d023      	beq.n	8003cb2 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	2201      	movs	r2, #1
 8003c70:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8003c72:	69bb      	ldr	r3, [r7, #24]
 8003c74:	f003 0302 	and.w	r3, r3, #2
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	d003      	beq.n	8003c84 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8003c7c:	6878      	ldr	r0, [r7, #4]
 8003c7e:	f000 f983 	bl	8003f88 <HAL_CAN_TxMailbox0CompleteCallback>
 8003c82:	e016      	b.n	8003cb2 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8003c84:	69bb      	ldr	r3, [r7, #24]
 8003c86:	f003 0304 	and.w	r3, r3, #4
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d004      	beq.n	8003c98 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8003c8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c90:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003c94:	627b      	str	r3, [r7, #36]	; 0x24
 8003c96:	e00c      	b.n	8003cb2 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8003c98:	69bb      	ldr	r3, [r7, #24]
 8003c9a:	f003 0308 	and.w	r3, r3, #8
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d004      	beq.n	8003cac <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8003ca2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ca4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003ca8:	627b      	str	r3, [r7, #36]	; 0x24
 8003caa:	e002      	b.n	8003cb2 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8003cac:	6878      	ldr	r0, [r7, #4]
 8003cae:	f000 f989 	bl	8003fc4 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8003cb2:	69bb      	ldr	r3, [r7, #24]
 8003cb4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	d024      	beq.n	8003d06 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003cc4:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8003cc6:	69bb      	ldr	r3, [r7, #24]
 8003cc8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003ccc:	2b00      	cmp	r3, #0
 8003cce:	d003      	beq.n	8003cd8 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8003cd0:	6878      	ldr	r0, [r7, #4]
 8003cd2:	f000 f963 	bl	8003f9c <HAL_CAN_TxMailbox1CompleteCallback>
 8003cd6:	e016      	b.n	8003d06 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8003cd8:	69bb      	ldr	r3, [r7, #24]
 8003cda:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d004      	beq.n	8003cec <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8003ce2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ce4:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8003ce8:	627b      	str	r3, [r7, #36]	; 0x24
 8003cea:	e00c      	b.n	8003d06 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8003cec:	69bb      	ldr	r3, [r7, #24]
 8003cee:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d004      	beq.n	8003d00 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8003cf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cf8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003cfc:	627b      	str	r3, [r7, #36]	; 0x24
 8003cfe:	e002      	b.n	8003d06 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8003d00:	6878      	ldr	r0, [r7, #4]
 8003d02:	f000 f969 	bl	8003fd8 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8003d06:	69bb      	ldr	r3, [r7, #24]
 8003d08:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003d0c:	2b00      	cmp	r3, #0
 8003d0e:	d024      	beq.n	8003d5a <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8003d18:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8003d1a:	69bb      	ldr	r3, [r7, #24]
 8003d1c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	d003      	beq.n	8003d2c <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8003d24:	6878      	ldr	r0, [r7, #4]
 8003d26:	f000 f943 	bl	8003fb0 <HAL_CAN_TxMailbox2CompleteCallback>
 8003d2a:	e016      	b.n	8003d5a <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8003d2c:	69bb      	ldr	r3, [r7, #24]
 8003d2e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d004      	beq.n	8003d40 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8003d36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d38:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003d3c:	627b      	str	r3, [r7, #36]	; 0x24
 8003d3e:	e00c      	b.n	8003d5a <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8003d40:	69bb      	ldr	r3, [r7, #24]
 8003d42:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d004      	beq.n	8003d54 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8003d4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d4c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003d50:	627b      	str	r3, [r7, #36]	; 0x24
 8003d52:	e002      	b.n	8003d5a <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8003d54:	6878      	ldr	r0, [r7, #4]
 8003d56:	f000 f949 	bl	8003fec <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8003d5a:	6a3b      	ldr	r3, [r7, #32]
 8003d5c:	f003 0308 	and.w	r3, r3, #8
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	d00c      	beq.n	8003d7e <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8003d64:	697b      	ldr	r3, [r7, #20]
 8003d66:	f003 0310 	and.w	r3, r3, #16
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d007      	beq.n	8003d7e <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8003d6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d70:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003d74:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	2210      	movs	r2, #16
 8003d7c:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8003d7e:	6a3b      	ldr	r3, [r7, #32]
 8003d80:	f003 0304 	and.w	r3, r3, #4
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	d00b      	beq.n	8003da0 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8003d88:	697b      	ldr	r3, [r7, #20]
 8003d8a:	f003 0308 	and.w	r3, r3, #8
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d006      	beq.n	8003da0 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	2208      	movs	r2, #8
 8003d98:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8003d9a:	6878      	ldr	r0, [r7, #4]
 8003d9c:	f000 f930 	bl	8004000 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8003da0:	6a3b      	ldr	r3, [r7, #32]
 8003da2:	f003 0302 	and.w	r3, r3, #2
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d009      	beq.n	8003dbe <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	68db      	ldr	r3, [r3, #12]
 8003db0:	f003 0303 	and.w	r3, r3, #3
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	d002      	beq.n	8003dbe <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8003db8:	6878      	ldr	r0, [r7, #4]
 8003dba:	f7fd ff9f 	bl	8001cfc <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8003dbe:	6a3b      	ldr	r3, [r7, #32]
 8003dc0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003dc4:	2b00      	cmp	r3, #0
 8003dc6:	d00c      	beq.n	8003de2 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8003dc8:	693b      	ldr	r3, [r7, #16]
 8003dca:	f003 0310 	and.w	r3, r3, #16
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d007      	beq.n	8003de2 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8003dd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dd4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003dd8:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	2210      	movs	r2, #16
 8003de0:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8003de2:	6a3b      	ldr	r3, [r7, #32]
 8003de4:	f003 0320 	and.w	r3, r3, #32
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	d00b      	beq.n	8003e04 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8003dec:	693b      	ldr	r3, [r7, #16]
 8003dee:	f003 0308 	and.w	r3, r3, #8
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d006      	beq.n	8003e04 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	2208      	movs	r2, #8
 8003dfc:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8003dfe:	6878      	ldr	r0, [r7, #4]
 8003e00:	f000 f912 	bl	8004028 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8003e04:	6a3b      	ldr	r3, [r7, #32]
 8003e06:	f003 0310 	and.w	r3, r3, #16
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d009      	beq.n	8003e22 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	691b      	ldr	r3, [r3, #16]
 8003e14:	f003 0303 	and.w	r3, r3, #3
 8003e18:	2b00      	cmp	r3, #0
 8003e1a:	d002      	beq.n	8003e22 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8003e1c:	6878      	ldr	r0, [r7, #4]
 8003e1e:	f000 f8f9 	bl	8004014 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8003e22:	6a3b      	ldr	r3, [r7, #32]
 8003e24:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	d00b      	beq.n	8003e44 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8003e2c:	69fb      	ldr	r3, [r7, #28]
 8003e2e:	f003 0310 	and.w	r3, r3, #16
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d006      	beq.n	8003e44 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	2210      	movs	r2, #16
 8003e3c:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8003e3e:	6878      	ldr	r0, [r7, #4]
 8003e40:	f000 f8fc 	bl	800403c <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8003e44:	6a3b      	ldr	r3, [r7, #32]
 8003e46:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d00b      	beq.n	8003e66 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8003e4e:	69fb      	ldr	r3, [r7, #28]
 8003e50:	f003 0308 	and.w	r3, r3, #8
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	d006      	beq.n	8003e66 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	2208      	movs	r2, #8
 8003e5e:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8003e60:	6878      	ldr	r0, [r7, #4]
 8003e62:	f000 f8f5 	bl	8004050 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8003e66:	6a3b      	ldr	r3, [r7, #32]
 8003e68:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	d07b      	beq.n	8003f68 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8003e70:	69fb      	ldr	r3, [r7, #28]
 8003e72:	f003 0304 	and.w	r3, r3, #4
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d072      	beq.n	8003f60 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8003e7a:	6a3b      	ldr	r3, [r7, #32]
 8003e7c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	d008      	beq.n	8003e96 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	d003      	beq.n	8003e96 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8003e8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e90:	f043 0301 	orr.w	r3, r3, #1
 8003e94:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8003e96:	6a3b      	ldr	r3, [r7, #32]
 8003e98:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	d008      	beq.n	8003eb2 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d003      	beq.n	8003eb2 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8003eaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003eac:	f043 0302 	orr.w	r3, r3, #2
 8003eb0:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8003eb2:	6a3b      	ldr	r3, [r7, #32]
 8003eb4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	d008      	beq.n	8003ece <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d003      	beq.n	8003ece <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8003ec6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ec8:	f043 0304 	orr.w	r3, r3, #4
 8003ecc:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8003ece:	6a3b      	ldr	r3, [r7, #32]
 8003ed0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	d043      	beq.n	8003f60 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	d03e      	beq.n	8003f60 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003ee8:	2b60      	cmp	r3, #96	; 0x60
 8003eea:	d02b      	beq.n	8003f44 <HAL_CAN_IRQHandler+0x32a>
 8003eec:	2b60      	cmp	r3, #96	; 0x60
 8003eee:	d82e      	bhi.n	8003f4e <HAL_CAN_IRQHandler+0x334>
 8003ef0:	2b50      	cmp	r3, #80	; 0x50
 8003ef2:	d022      	beq.n	8003f3a <HAL_CAN_IRQHandler+0x320>
 8003ef4:	2b50      	cmp	r3, #80	; 0x50
 8003ef6:	d82a      	bhi.n	8003f4e <HAL_CAN_IRQHandler+0x334>
 8003ef8:	2b40      	cmp	r3, #64	; 0x40
 8003efa:	d019      	beq.n	8003f30 <HAL_CAN_IRQHandler+0x316>
 8003efc:	2b40      	cmp	r3, #64	; 0x40
 8003efe:	d826      	bhi.n	8003f4e <HAL_CAN_IRQHandler+0x334>
 8003f00:	2b30      	cmp	r3, #48	; 0x30
 8003f02:	d010      	beq.n	8003f26 <HAL_CAN_IRQHandler+0x30c>
 8003f04:	2b30      	cmp	r3, #48	; 0x30
 8003f06:	d822      	bhi.n	8003f4e <HAL_CAN_IRQHandler+0x334>
 8003f08:	2b10      	cmp	r3, #16
 8003f0a:	d002      	beq.n	8003f12 <HAL_CAN_IRQHandler+0x2f8>
 8003f0c:	2b20      	cmp	r3, #32
 8003f0e:	d005      	beq.n	8003f1c <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8003f10:	e01d      	b.n	8003f4e <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8003f12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f14:	f043 0308 	orr.w	r3, r3, #8
 8003f18:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003f1a:	e019      	b.n	8003f50 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8003f1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f1e:	f043 0310 	orr.w	r3, r3, #16
 8003f22:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003f24:	e014      	b.n	8003f50 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8003f26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f28:	f043 0320 	orr.w	r3, r3, #32
 8003f2c:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003f2e:	e00f      	b.n	8003f50 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8003f30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f32:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003f36:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003f38:	e00a      	b.n	8003f50 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8003f3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f3c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003f40:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003f42:	e005      	b.n	8003f50 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8003f44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f46:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003f4a:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003f4c:	e000      	b.n	8003f50 <HAL_CAN_IRQHandler+0x336>
            break;
 8003f4e:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	699a      	ldr	r2, [r3, #24]
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8003f5e:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	2204      	movs	r2, #4
 8003f66:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8003f68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d008      	beq.n	8003f80 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003f72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f74:	431a      	orrs	r2, r3
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8003f7a:	6878      	ldr	r0, [r7, #4]
 8003f7c:	f000 f872 	bl	8004064 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8003f80:	bf00      	nop
 8003f82:	3728      	adds	r7, #40	; 0x28
 8003f84:	46bd      	mov	sp, r7
 8003f86:	bd80      	pop	{r7, pc}

08003f88 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8003f88:	b480      	push	{r7}
 8003f8a:	b083      	sub	sp, #12
 8003f8c:	af00      	add	r7, sp, #0
 8003f8e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8003f90:	bf00      	nop
 8003f92:	370c      	adds	r7, #12
 8003f94:	46bd      	mov	sp, r7
 8003f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f9a:	4770      	bx	lr

08003f9c <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8003f9c:	b480      	push	{r7}
 8003f9e:	b083      	sub	sp, #12
 8003fa0:	af00      	add	r7, sp, #0
 8003fa2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8003fa4:	bf00      	nop
 8003fa6:	370c      	adds	r7, #12
 8003fa8:	46bd      	mov	sp, r7
 8003faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fae:	4770      	bx	lr

08003fb0 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8003fb0:	b480      	push	{r7}
 8003fb2:	b083      	sub	sp, #12
 8003fb4:	af00      	add	r7, sp, #0
 8003fb6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8003fb8:	bf00      	nop
 8003fba:	370c      	adds	r7, #12
 8003fbc:	46bd      	mov	sp, r7
 8003fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fc2:	4770      	bx	lr

08003fc4 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8003fc4:	b480      	push	{r7}
 8003fc6:	b083      	sub	sp, #12
 8003fc8:	af00      	add	r7, sp, #0
 8003fca:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8003fcc:	bf00      	nop
 8003fce:	370c      	adds	r7, #12
 8003fd0:	46bd      	mov	sp, r7
 8003fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fd6:	4770      	bx	lr

08003fd8 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8003fd8:	b480      	push	{r7}
 8003fda:	b083      	sub	sp, #12
 8003fdc:	af00      	add	r7, sp, #0
 8003fde:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8003fe0:	bf00      	nop
 8003fe2:	370c      	adds	r7, #12
 8003fe4:	46bd      	mov	sp, r7
 8003fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fea:	4770      	bx	lr

08003fec <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8003fec:	b480      	push	{r7}
 8003fee:	b083      	sub	sp, #12
 8003ff0:	af00      	add	r7, sp, #0
 8003ff2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8003ff4:	bf00      	nop
 8003ff6:	370c      	adds	r7, #12
 8003ff8:	46bd      	mov	sp, r7
 8003ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ffe:	4770      	bx	lr

08004000 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8004000:	b480      	push	{r7}
 8004002:	b083      	sub	sp, #12
 8004004:	af00      	add	r7, sp, #0
 8004006:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8004008:	bf00      	nop
 800400a:	370c      	adds	r7, #12
 800400c:	46bd      	mov	sp, r7
 800400e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004012:	4770      	bx	lr

08004014 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8004014:	b480      	push	{r7}
 8004016:	b083      	sub	sp, #12
 8004018:	af00      	add	r7, sp, #0
 800401a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 800401c:	bf00      	nop
 800401e:	370c      	adds	r7, #12
 8004020:	46bd      	mov	sp, r7
 8004022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004026:	4770      	bx	lr

08004028 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8004028:	b480      	push	{r7}
 800402a:	b083      	sub	sp, #12
 800402c:	af00      	add	r7, sp, #0
 800402e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8004030:	bf00      	nop
 8004032:	370c      	adds	r7, #12
 8004034:	46bd      	mov	sp, r7
 8004036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800403a:	4770      	bx	lr

0800403c <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 800403c:	b480      	push	{r7}
 800403e:	b083      	sub	sp, #12
 8004040:	af00      	add	r7, sp, #0
 8004042:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8004044:	bf00      	nop
 8004046:	370c      	adds	r7, #12
 8004048:	46bd      	mov	sp, r7
 800404a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800404e:	4770      	bx	lr

08004050 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8004050:	b480      	push	{r7}
 8004052:	b083      	sub	sp, #12
 8004054:	af00      	add	r7, sp, #0
 8004056:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8004058:	bf00      	nop
 800405a:	370c      	adds	r7, #12
 800405c:	46bd      	mov	sp, r7
 800405e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004062:	4770      	bx	lr

08004064 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8004064:	b480      	push	{r7}
 8004066:	b083      	sub	sp, #12
 8004068:	af00      	add	r7, sp, #0
 800406a:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 800406c:	bf00      	nop
 800406e:	370c      	adds	r7, #12
 8004070:	46bd      	mov	sp, r7
 8004072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004076:	4770      	bx	lr

08004078 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004078:	b480      	push	{r7}
 800407a:	b085      	sub	sp, #20
 800407c:	af00      	add	r7, sp, #0
 800407e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	f003 0307 	and.w	r3, r3, #7
 8004086:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004088:	4b0c      	ldr	r3, [pc, #48]	; (80040bc <__NVIC_SetPriorityGrouping+0x44>)
 800408a:	68db      	ldr	r3, [r3, #12]
 800408c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800408e:	68ba      	ldr	r2, [r7, #8]
 8004090:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004094:	4013      	ands	r3, r2
 8004096:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800409c:	68bb      	ldr	r3, [r7, #8]
 800409e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80040a0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80040a4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80040a8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80040aa:	4a04      	ldr	r2, [pc, #16]	; (80040bc <__NVIC_SetPriorityGrouping+0x44>)
 80040ac:	68bb      	ldr	r3, [r7, #8]
 80040ae:	60d3      	str	r3, [r2, #12]
}
 80040b0:	bf00      	nop
 80040b2:	3714      	adds	r7, #20
 80040b4:	46bd      	mov	sp, r7
 80040b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ba:	4770      	bx	lr
 80040bc:	e000ed00 	.word	0xe000ed00

080040c0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80040c0:	b480      	push	{r7}
 80040c2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80040c4:	4b04      	ldr	r3, [pc, #16]	; (80040d8 <__NVIC_GetPriorityGrouping+0x18>)
 80040c6:	68db      	ldr	r3, [r3, #12]
 80040c8:	0a1b      	lsrs	r3, r3, #8
 80040ca:	f003 0307 	and.w	r3, r3, #7
}
 80040ce:	4618      	mov	r0, r3
 80040d0:	46bd      	mov	sp, r7
 80040d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040d6:	4770      	bx	lr
 80040d8:	e000ed00 	.word	0xe000ed00

080040dc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80040dc:	b480      	push	{r7}
 80040de:	b083      	sub	sp, #12
 80040e0:	af00      	add	r7, sp, #0
 80040e2:	4603      	mov	r3, r0
 80040e4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80040e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	db0b      	blt.n	8004106 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80040ee:	79fb      	ldrb	r3, [r7, #7]
 80040f0:	f003 021f 	and.w	r2, r3, #31
 80040f4:	4907      	ldr	r1, [pc, #28]	; (8004114 <__NVIC_EnableIRQ+0x38>)
 80040f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80040fa:	095b      	lsrs	r3, r3, #5
 80040fc:	2001      	movs	r0, #1
 80040fe:	fa00 f202 	lsl.w	r2, r0, r2
 8004102:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8004106:	bf00      	nop
 8004108:	370c      	adds	r7, #12
 800410a:	46bd      	mov	sp, r7
 800410c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004110:	4770      	bx	lr
 8004112:	bf00      	nop
 8004114:	e000e100 	.word	0xe000e100

08004118 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004118:	b480      	push	{r7}
 800411a:	b083      	sub	sp, #12
 800411c:	af00      	add	r7, sp, #0
 800411e:	4603      	mov	r3, r0
 8004120:	6039      	str	r1, [r7, #0]
 8004122:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004124:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004128:	2b00      	cmp	r3, #0
 800412a:	db0a      	blt.n	8004142 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800412c:	683b      	ldr	r3, [r7, #0]
 800412e:	b2da      	uxtb	r2, r3
 8004130:	490c      	ldr	r1, [pc, #48]	; (8004164 <__NVIC_SetPriority+0x4c>)
 8004132:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004136:	0112      	lsls	r2, r2, #4
 8004138:	b2d2      	uxtb	r2, r2
 800413a:	440b      	add	r3, r1
 800413c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004140:	e00a      	b.n	8004158 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004142:	683b      	ldr	r3, [r7, #0]
 8004144:	b2da      	uxtb	r2, r3
 8004146:	4908      	ldr	r1, [pc, #32]	; (8004168 <__NVIC_SetPriority+0x50>)
 8004148:	79fb      	ldrb	r3, [r7, #7]
 800414a:	f003 030f 	and.w	r3, r3, #15
 800414e:	3b04      	subs	r3, #4
 8004150:	0112      	lsls	r2, r2, #4
 8004152:	b2d2      	uxtb	r2, r2
 8004154:	440b      	add	r3, r1
 8004156:	761a      	strb	r2, [r3, #24]
}
 8004158:	bf00      	nop
 800415a:	370c      	adds	r7, #12
 800415c:	46bd      	mov	sp, r7
 800415e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004162:	4770      	bx	lr
 8004164:	e000e100 	.word	0xe000e100
 8004168:	e000ed00 	.word	0xe000ed00

0800416c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800416c:	b480      	push	{r7}
 800416e:	b089      	sub	sp, #36	; 0x24
 8004170:	af00      	add	r7, sp, #0
 8004172:	60f8      	str	r0, [r7, #12]
 8004174:	60b9      	str	r1, [r7, #8]
 8004176:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	f003 0307 	and.w	r3, r3, #7
 800417e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004180:	69fb      	ldr	r3, [r7, #28]
 8004182:	f1c3 0307 	rsb	r3, r3, #7
 8004186:	2b04      	cmp	r3, #4
 8004188:	bf28      	it	cs
 800418a:	2304      	movcs	r3, #4
 800418c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800418e:	69fb      	ldr	r3, [r7, #28]
 8004190:	3304      	adds	r3, #4
 8004192:	2b06      	cmp	r3, #6
 8004194:	d902      	bls.n	800419c <NVIC_EncodePriority+0x30>
 8004196:	69fb      	ldr	r3, [r7, #28]
 8004198:	3b03      	subs	r3, #3
 800419a:	e000      	b.n	800419e <NVIC_EncodePriority+0x32>
 800419c:	2300      	movs	r3, #0
 800419e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80041a0:	f04f 32ff 	mov.w	r2, #4294967295
 80041a4:	69bb      	ldr	r3, [r7, #24]
 80041a6:	fa02 f303 	lsl.w	r3, r2, r3
 80041aa:	43da      	mvns	r2, r3
 80041ac:	68bb      	ldr	r3, [r7, #8]
 80041ae:	401a      	ands	r2, r3
 80041b0:	697b      	ldr	r3, [r7, #20]
 80041b2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80041b4:	f04f 31ff 	mov.w	r1, #4294967295
 80041b8:	697b      	ldr	r3, [r7, #20]
 80041ba:	fa01 f303 	lsl.w	r3, r1, r3
 80041be:	43d9      	mvns	r1, r3
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80041c4:	4313      	orrs	r3, r2
         );
}
 80041c6:	4618      	mov	r0, r3
 80041c8:	3724      	adds	r7, #36	; 0x24
 80041ca:	46bd      	mov	sp, r7
 80041cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041d0:	4770      	bx	lr

080041d2 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80041d2:	b580      	push	{r7, lr}
 80041d4:	b082      	sub	sp, #8
 80041d6:	af00      	add	r7, sp, #0
 80041d8:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80041da:	6878      	ldr	r0, [r7, #4]
 80041dc:	f7ff ff4c 	bl	8004078 <__NVIC_SetPriorityGrouping>
}
 80041e0:	bf00      	nop
 80041e2:	3708      	adds	r7, #8
 80041e4:	46bd      	mov	sp, r7
 80041e6:	bd80      	pop	{r7, pc}

080041e8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80041e8:	b580      	push	{r7, lr}
 80041ea:	b086      	sub	sp, #24
 80041ec:	af00      	add	r7, sp, #0
 80041ee:	4603      	mov	r3, r0
 80041f0:	60b9      	str	r1, [r7, #8]
 80041f2:	607a      	str	r2, [r7, #4]
 80041f4:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80041f6:	2300      	movs	r3, #0
 80041f8:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80041fa:	f7ff ff61 	bl	80040c0 <__NVIC_GetPriorityGrouping>
 80041fe:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004200:	687a      	ldr	r2, [r7, #4]
 8004202:	68b9      	ldr	r1, [r7, #8]
 8004204:	6978      	ldr	r0, [r7, #20]
 8004206:	f7ff ffb1 	bl	800416c <NVIC_EncodePriority>
 800420a:	4602      	mov	r2, r0
 800420c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004210:	4611      	mov	r1, r2
 8004212:	4618      	mov	r0, r3
 8004214:	f7ff ff80 	bl	8004118 <__NVIC_SetPriority>
}
 8004218:	bf00      	nop
 800421a:	3718      	adds	r7, #24
 800421c:	46bd      	mov	sp, r7
 800421e:	bd80      	pop	{r7, pc}

08004220 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004220:	b580      	push	{r7, lr}
 8004222:	b082      	sub	sp, #8
 8004224:	af00      	add	r7, sp, #0
 8004226:	4603      	mov	r3, r0
 8004228:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800422a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800422e:	4618      	mov	r0, r3
 8004230:	f7ff ff54 	bl	80040dc <__NVIC_EnableIRQ>
}
 8004234:	bf00      	nop
 8004236:	3708      	adds	r7, #8
 8004238:	46bd      	mov	sp, r7
 800423a:	bd80      	pop	{r7, pc}

0800423c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800423c:	b580      	push	{r7, lr}
 800423e:	b086      	sub	sp, #24
 8004240:	af00      	add	r7, sp, #0
 8004242:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8004244:	2300      	movs	r3, #0
 8004246:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8004248:	f7ff f8a8 	bl	800339c <HAL_GetTick>
 800424c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	2b00      	cmp	r3, #0
 8004252:	d101      	bne.n	8004258 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8004254:	2301      	movs	r3, #1
 8004256:	e099      	b.n	800438c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	2202      	movs	r2, #2
 800425c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	2200      	movs	r2, #0
 8004264:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	681a      	ldr	r2, [r3, #0]
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	f022 0201 	bic.w	r2, r2, #1
 8004276:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004278:	e00f      	b.n	800429a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800427a:	f7ff f88f 	bl	800339c <HAL_GetTick>
 800427e:	4602      	mov	r2, r0
 8004280:	693b      	ldr	r3, [r7, #16]
 8004282:	1ad3      	subs	r3, r2, r3
 8004284:	2b05      	cmp	r3, #5
 8004286:	d908      	bls.n	800429a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	2220      	movs	r2, #32
 800428c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	2203      	movs	r2, #3
 8004292:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8004296:	2303      	movs	r3, #3
 8004298:	e078      	b.n	800438c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	f003 0301 	and.w	r3, r3, #1
 80042a4:	2b00      	cmp	r3, #0
 80042a6:	d1e8      	bne.n	800427a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80042b0:	697a      	ldr	r2, [r7, #20]
 80042b2:	4b38      	ldr	r3, [pc, #224]	; (8004394 <HAL_DMA_Init+0x158>)
 80042b4:	4013      	ands	r3, r2
 80042b6:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	685a      	ldr	r2, [r3, #4]
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	689b      	ldr	r3, [r3, #8]
 80042c0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80042c6:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	691b      	ldr	r3, [r3, #16]
 80042cc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80042d2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	699b      	ldr	r3, [r3, #24]
 80042d8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80042de:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	6a1b      	ldr	r3, [r3, #32]
 80042e4:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80042e6:	697a      	ldr	r2, [r7, #20]
 80042e8:	4313      	orrs	r3, r2
 80042ea:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042f0:	2b04      	cmp	r3, #4
 80042f2:	d107      	bne.n	8004304 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042fc:	4313      	orrs	r3, r2
 80042fe:	697a      	ldr	r2, [r7, #20]
 8004300:	4313      	orrs	r3, r2
 8004302:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	697a      	ldr	r2, [r7, #20]
 800430a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	695b      	ldr	r3, [r3, #20]
 8004312:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8004314:	697b      	ldr	r3, [r7, #20]
 8004316:	f023 0307 	bic.w	r3, r3, #7
 800431a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004320:	697a      	ldr	r2, [r7, #20]
 8004322:	4313      	orrs	r3, r2
 8004324:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800432a:	2b04      	cmp	r3, #4
 800432c:	d117      	bne.n	800435e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004332:	697a      	ldr	r2, [r7, #20]
 8004334:	4313      	orrs	r3, r2
 8004336:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800433c:	2b00      	cmp	r3, #0
 800433e:	d00e      	beq.n	800435e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8004340:	6878      	ldr	r0, [r7, #4]
 8004342:	f000 fa7b 	bl	800483c <DMA_CheckFifoParam>
 8004346:	4603      	mov	r3, r0
 8004348:	2b00      	cmp	r3, #0
 800434a:	d008      	beq.n	800435e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	2240      	movs	r2, #64	; 0x40
 8004350:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	2201      	movs	r2, #1
 8004356:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800435a:	2301      	movs	r3, #1
 800435c:	e016      	b.n	800438c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	697a      	ldr	r2, [r7, #20]
 8004364:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004366:	6878      	ldr	r0, [r7, #4]
 8004368:	f000 fa32 	bl	80047d0 <DMA_CalcBaseAndBitshift>
 800436c:	4603      	mov	r3, r0
 800436e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004374:	223f      	movs	r2, #63	; 0x3f
 8004376:	409a      	lsls	r2, r3
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	2200      	movs	r2, #0
 8004380:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	2201      	movs	r2, #1
 8004386:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800438a:	2300      	movs	r3, #0
}
 800438c:	4618      	mov	r0, r3
 800438e:	3718      	adds	r7, #24
 8004390:	46bd      	mov	sp, r7
 8004392:	bd80      	pop	{r7, pc}
 8004394:	f010803f 	.word	0xf010803f

08004398 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004398:	b580      	push	{r7, lr}
 800439a:	b084      	sub	sp, #16
 800439c:	af00      	add	r7, sp, #0
 800439e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80043a4:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80043a6:	f7fe fff9 	bl	800339c <HAL_GetTick>
 80043aa:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80043b2:	b2db      	uxtb	r3, r3
 80043b4:	2b02      	cmp	r3, #2
 80043b6:	d008      	beq.n	80043ca <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	2280      	movs	r2, #128	; 0x80
 80043bc:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	2200      	movs	r2, #0
 80043c2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80043c6:	2301      	movs	r3, #1
 80043c8:	e052      	b.n	8004470 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	681a      	ldr	r2, [r3, #0]
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	f022 0216 	bic.w	r2, r2, #22
 80043d8:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	695a      	ldr	r2, [r3, #20]
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80043e8:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d103      	bne.n	80043fa <HAL_DMA_Abort+0x62>
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d007      	beq.n	800440a <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	681a      	ldr	r2, [r3, #0]
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	f022 0208 	bic.w	r2, r2, #8
 8004408:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	681a      	ldr	r2, [r3, #0]
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	f022 0201 	bic.w	r2, r2, #1
 8004418:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800441a:	e013      	b.n	8004444 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800441c:	f7fe ffbe 	bl	800339c <HAL_GetTick>
 8004420:	4602      	mov	r2, r0
 8004422:	68bb      	ldr	r3, [r7, #8]
 8004424:	1ad3      	subs	r3, r2, r3
 8004426:	2b05      	cmp	r3, #5
 8004428:	d90c      	bls.n	8004444 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	2220      	movs	r2, #32
 800442e:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	2203      	movs	r2, #3
 8004434:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	2200      	movs	r2, #0
 800443c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8004440:	2303      	movs	r3, #3
 8004442:	e015      	b.n	8004470 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	f003 0301 	and.w	r3, r3, #1
 800444e:	2b00      	cmp	r3, #0
 8004450:	d1e4      	bne.n	800441c <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004456:	223f      	movs	r2, #63	; 0x3f
 8004458:	409a      	lsls	r2, r3
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	2201      	movs	r2, #1
 8004462:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	2200      	movs	r2, #0
 800446a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 800446e:	2300      	movs	r3, #0
}
 8004470:	4618      	mov	r0, r3
 8004472:	3710      	adds	r7, #16
 8004474:	46bd      	mov	sp, r7
 8004476:	bd80      	pop	{r7, pc}

08004478 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004478:	b480      	push	{r7}
 800447a:	b083      	sub	sp, #12
 800447c:	af00      	add	r7, sp, #0
 800447e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004486:	b2db      	uxtb	r3, r3
 8004488:	2b02      	cmp	r3, #2
 800448a:	d004      	beq.n	8004496 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	2280      	movs	r2, #128	; 0x80
 8004490:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8004492:	2301      	movs	r3, #1
 8004494:	e00c      	b.n	80044b0 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	2205      	movs	r2, #5
 800449a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	681a      	ldr	r2, [r3, #0]
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	f022 0201 	bic.w	r2, r2, #1
 80044ac:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80044ae:	2300      	movs	r3, #0
}
 80044b0:	4618      	mov	r0, r3
 80044b2:	370c      	adds	r7, #12
 80044b4:	46bd      	mov	sp, r7
 80044b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ba:	4770      	bx	lr

080044bc <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80044bc:	b580      	push	{r7, lr}
 80044be:	b086      	sub	sp, #24
 80044c0:	af00      	add	r7, sp, #0
 80044c2:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80044c4:	2300      	movs	r3, #0
 80044c6:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80044c8:	4b92      	ldr	r3, [pc, #584]	; (8004714 <HAL_DMA_IRQHandler+0x258>)
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	4a92      	ldr	r2, [pc, #584]	; (8004718 <HAL_DMA_IRQHandler+0x25c>)
 80044ce:	fba2 2303 	umull	r2, r3, r2, r3
 80044d2:	0a9b      	lsrs	r3, r3, #10
 80044d4:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80044da:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80044dc:	693b      	ldr	r3, [r7, #16]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80044e6:	2208      	movs	r2, #8
 80044e8:	409a      	lsls	r2, r3
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	4013      	ands	r3, r2
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	d01a      	beq.n	8004528 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	f003 0304 	and.w	r3, r3, #4
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	d013      	beq.n	8004528 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	681a      	ldr	r2, [r3, #0]
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	f022 0204 	bic.w	r2, r2, #4
 800450e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004514:	2208      	movs	r2, #8
 8004516:	409a      	lsls	r2, r3
 8004518:	693b      	ldr	r3, [r7, #16]
 800451a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004520:	f043 0201 	orr.w	r2, r3, #1
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800452c:	2201      	movs	r2, #1
 800452e:	409a      	lsls	r2, r3
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	4013      	ands	r3, r2
 8004534:	2b00      	cmp	r3, #0
 8004536:	d012      	beq.n	800455e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	695b      	ldr	r3, [r3, #20]
 800453e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004542:	2b00      	cmp	r3, #0
 8004544:	d00b      	beq.n	800455e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800454a:	2201      	movs	r2, #1
 800454c:	409a      	lsls	r2, r3
 800454e:	693b      	ldr	r3, [r7, #16]
 8004550:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004556:	f043 0202 	orr.w	r2, r3, #2
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004562:	2204      	movs	r2, #4
 8004564:	409a      	lsls	r2, r3
 8004566:	68fb      	ldr	r3, [r7, #12]
 8004568:	4013      	ands	r3, r2
 800456a:	2b00      	cmp	r3, #0
 800456c:	d012      	beq.n	8004594 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	f003 0302 	and.w	r3, r3, #2
 8004578:	2b00      	cmp	r3, #0
 800457a:	d00b      	beq.n	8004594 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004580:	2204      	movs	r2, #4
 8004582:	409a      	lsls	r2, r3
 8004584:	693b      	ldr	r3, [r7, #16]
 8004586:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800458c:	f043 0204 	orr.w	r2, r3, #4
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004598:	2210      	movs	r2, #16
 800459a:	409a      	lsls	r2, r3
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	4013      	ands	r3, r2
 80045a0:	2b00      	cmp	r3, #0
 80045a2:	d043      	beq.n	800462c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	f003 0308 	and.w	r3, r3, #8
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	d03c      	beq.n	800462c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80045b6:	2210      	movs	r2, #16
 80045b8:	409a      	lsls	r2, r3
 80045ba:	693b      	ldr	r3, [r7, #16]
 80045bc:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	d018      	beq.n	80045fe <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d108      	bne.n	80045ec <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045de:	2b00      	cmp	r3, #0
 80045e0:	d024      	beq.n	800462c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045e6:	6878      	ldr	r0, [r7, #4]
 80045e8:	4798      	blx	r3
 80045ea:	e01f      	b.n	800462c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80045f0:	2b00      	cmp	r3, #0
 80045f2:	d01b      	beq.n	800462c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80045f8:	6878      	ldr	r0, [r7, #4]
 80045fa:	4798      	blx	r3
 80045fc:	e016      	b.n	800462c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004608:	2b00      	cmp	r3, #0
 800460a:	d107      	bne.n	800461c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	681a      	ldr	r2, [r3, #0]
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	f022 0208 	bic.w	r2, r2, #8
 800461a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004620:	2b00      	cmp	r3, #0
 8004622:	d003      	beq.n	800462c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004628:	6878      	ldr	r0, [r7, #4]
 800462a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004630:	2220      	movs	r2, #32
 8004632:	409a      	lsls	r2, r3
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	4013      	ands	r3, r2
 8004638:	2b00      	cmp	r3, #0
 800463a:	f000 808e 	beq.w	800475a <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	f003 0310 	and.w	r3, r3, #16
 8004648:	2b00      	cmp	r3, #0
 800464a:	f000 8086 	beq.w	800475a <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004652:	2220      	movs	r2, #32
 8004654:	409a      	lsls	r2, r3
 8004656:	693b      	ldr	r3, [r7, #16]
 8004658:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004660:	b2db      	uxtb	r3, r3
 8004662:	2b05      	cmp	r3, #5
 8004664:	d136      	bne.n	80046d4 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	681a      	ldr	r2, [r3, #0]
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	f022 0216 	bic.w	r2, r2, #22
 8004674:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	695a      	ldr	r2, [r3, #20]
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004684:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800468a:	2b00      	cmp	r3, #0
 800468c:	d103      	bne.n	8004696 <HAL_DMA_IRQHandler+0x1da>
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004692:	2b00      	cmp	r3, #0
 8004694:	d007      	beq.n	80046a6 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	681a      	ldr	r2, [r3, #0]
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	f022 0208 	bic.w	r2, r2, #8
 80046a4:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80046aa:	223f      	movs	r2, #63	; 0x3f
 80046ac:	409a      	lsls	r2, r3
 80046ae:	693b      	ldr	r3, [r7, #16]
 80046b0:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	2201      	movs	r2, #1
 80046b6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	2200      	movs	r2, #0
 80046be:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	d07d      	beq.n	80047c6 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80046ce:	6878      	ldr	r0, [r7, #4]
 80046d0:	4798      	blx	r3
        }
        return;
 80046d2:	e078      	b.n	80047c6 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80046de:	2b00      	cmp	r3, #0
 80046e0:	d01c      	beq.n	800471c <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	d108      	bne.n	8004702 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80046f4:	2b00      	cmp	r3, #0
 80046f6:	d030      	beq.n	800475a <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80046fc:	6878      	ldr	r0, [r7, #4]
 80046fe:	4798      	blx	r3
 8004700:	e02b      	b.n	800475a <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004706:	2b00      	cmp	r3, #0
 8004708:	d027      	beq.n	800475a <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800470e:	6878      	ldr	r0, [r7, #4]
 8004710:	4798      	blx	r3
 8004712:	e022      	b.n	800475a <HAL_DMA_IRQHandler+0x29e>
 8004714:	20000000 	.word	0x20000000
 8004718:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004726:	2b00      	cmp	r3, #0
 8004728:	d10f      	bne.n	800474a <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	681a      	ldr	r2, [r3, #0]
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	f022 0210 	bic.w	r2, r2, #16
 8004738:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	2201      	movs	r2, #1
 800473e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	2200      	movs	r2, #0
 8004746:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800474e:	2b00      	cmp	r3, #0
 8004750:	d003      	beq.n	800475a <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004756:	6878      	ldr	r0, [r7, #4]
 8004758:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800475e:	2b00      	cmp	r3, #0
 8004760:	d032      	beq.n	80047c8 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004766:	f003 0301 	and.w	r3, r3, #1
 800476a:	2b00      	cmp	r3, #0
 800476c:	d022      	beq.n	80047b4 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	2205      	movs	r2, #5
 8004772:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	681a      	ldr	r2, [r3, #0]
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	f022 0201 	bic.w	r2, r2, #1
 8004784:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8004786:	68bb      	ldr	r3, [r7, #8]
 8004788:	3301      	adds	r3, #1
 800478a:	60bb      	str	r3, [r7, #8]
 800478c:	697a      	ldr	r2, [r7, #20]
 800478e:	429a      	cmp	r2, r3
 8004790:	d307      	bcc.n	80047a2 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	f003 0301 	and.w	r3, r3, #1
 800479c:	2b00      	cmp	r3, #0
 800479e:	d1f2      	bne.n	8004786 <HAL_DMA_IRQHandler+0x2ca>
 80047a0:	e000      	b.n	80047a4 <HAL_DMA_IRQHandler+0x2e8>
          break;
 80047a2:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	2201      	movs	r2, #1
 80047a8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	2200      	movs	r2, #0
 80047b0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80047b8:	2b00      	cmp	r3, #0
 80047ba:	d005      	beq.n	80047c8 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80047c0:	6878      	ldr	r0, [r7, #4]
 80047c2:	4798      	blx	r3
 80047c4:	e000      	b.n	80047c8 <HAL_DMA_IRQHandler+0x30c>
        return;
 80047c6:	bf00      	nop
    }
  }
}
 80047c8:	3718      	adds	r7, #24
 80047ca:	46bd      	mov	sp, r7
 80047cc:	bd80      	pop	{r7, pc}
 80047ce:	bf00      	nop

080047d0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80047d0:	b480      	push	{r7}
 80047d2:	b085      	sub	sp, #20
 80047d4:	af00      	add	r7, sp, #0
 80047d6:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	b2db      	uxtb	r3, r3
 80047de:	3b10      	subs	r3, #16
 80047e0:	4a14      	ldr	r2, [pc, #80]	; (8004834 <DMA_CalcBaseAndBitshift+0x64>)
 80047e2:	fba2 2303 	umull	r2, r3, r2, r3
 80047e6:	091b      	lsrs	r3, r3, #4
 80047e8:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80047ea:	4a13      	ldr	r2, [pc, #76]	; (8004838 <DMA_CalcBaseAndBitshift+0x68>)
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	4413      	add	r3, r2
 80047f0:	781b      	ldrb	r3, [r3, #0]
 80047f2:	461a      	mov	r2, r3
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	2b03      	cmp	r3, #3
 80047fc:	d909      	bls.n	8004812 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8004806:	f023 0303 	bic.w	r3, r3, #3
 800480a:	1d1a      	adds	r2, r3, #4
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	659a      	str	r2, [r3, #88]	; 0x58
 8004810:	e007      	b.n	8004822 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800481a:	f023 0303 	bic.w	r3, r3, #3
 800481e:	687a      	ldr	r2, [r7, #4]
 8004820:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8004826:	4618      	mov	r0, r3
 8004828:	3714      	adds	r7, #20
 800482a:	46bd      	mov	sp, r7
 800482c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004830:	4770      	bx	lr
 8004832:	bf00      	nop
 8004834:	aaaaaaab 	.word	0xaaaaaaab
 8004838:	0800faf0 	.word	0x0800faf0

0800483c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800483c:	b480      	push	{r7}
 800483e:	b085      	sub	sp, #20
 8004840:	af00      	add	r7, sp, #0
 8004842:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004844:	2300      	movs	r3, #0
 8004846:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800484c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	699b      	ldr	r3, [r3, #24]
 8004852:	2b00      	cmp	r3, #0
 8004854:	d11f      	bne.n	8004896 <DMA_CheckFifoParam+0x5a>
 8004856:	68bb      	ldr	r3, [r7, #8]
 8004858:	2b03      	cmp	r3, #3
 800485a:	d856      	bhi.n	800490a <DMA_CheckFifoParam+0xce>
 800485c:	a201      	add	r2, pc, #4	; (adr r2, 8004864 <DMA_CheckFifoParam+0x28>)
 800485e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004862:	bf00      	nop
 8004864:	08004875 	.word	0x08004875
 8004868:	08004887 	.word	0x08004887
 800486c:	08004875 	.word	0x08004875
 8004870:	0800490b 	.word	0x0800490b
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004878:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800487c:	2b00      	cmp	r3, #0
 800487e:	d046      	beq.n	800490e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8004880:	2301      	movs	r3, #1
 8004882:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004884:	e043      	b.n	800490e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800488a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800488e:	d140      	bne.n	8004912 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8004890:	2301      	movs	r3, #1
 8004892:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004894:	e03d      	b.n	8004912 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	699b      	ldr	r3, [r3, #24]
 800489a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800489e:	d121      	bne.n	80048e4 <DMA_CheckFifoParam+0xa8>
 80048a0:	68bb      	ldr	r3, [r7, #8]
 80048a2:	2b03      	cmp	r3, #3
 80048a4:	d837      	bhi.n	8004916 <DMA_CheckFifoParam+0xda>
 80048a6:	a201      	add	r2, pc, #4	; (adr r2, 80048ac <DMA_CheckFifoParam+0x70>)
 80048a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80048ac:	080048bd 	.word	0x080048bd
 80048b0:	080048c3 	.word	0x080048c3
 80048b4:	080048bd 	.word	0x080048bd
 80048b8:	080048d5 	.word	0x080048d5
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80048bc:	2301      	movs	r3, #1
 80048be:	73fb      	strb	r3, [r7, #15]
      break;
 80048c0:	e030      	b.n	8004924 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048c6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	d025      	beq.n	800491a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80048ce:	2301      	movs	r3, #1
 80048d0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80048d2:	e022      	b.n	800491a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048d8:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80048dc:	d11f      	bne.n	800491e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80048de:	2301      	movs	r3, #1
 80048e0:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80048e2:	e01c      	b.n	800491e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80048e4:	68bb      	ldr	r3, [r7, #8]
 80048e6:	2b02      	cmp	r3, #2
 80048e8:	d903      	bls.n	80048f2 <DMA_CheckFifoParam+0xb6>
 80048ea:	68bb      	ldr	r3, [r7, #8]
 80048ec:	2b03      	cmp	r3, #3
 80048ee:	d003      	beq.n	80048f8 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80048f0:	e018      	b.n	8004924 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80048f2:	2301      	movs	r3, #1
 80048f4:	73fb      	strb	r3, [r7, #15]
      break;
 80048f6:	e015      	b.n	8004924 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048fc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004900:	2b00      	cmp	r3, #0
 8004902:	d00e      	beq.n	8004922 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8004904:	2301      	movs	r3, #1
 8004906:	73fb      	strb	r3, [r7, #15]
      break;
 8004908:	e00b      	b.n	8004922 <DMA_CheckFifoParam+0xe6>
      break;
 800490a:	bf00      	nop
 800490c:	e00a      	b.n	8004924 <DMA_CheckFifoParam+0xe8>
      break;
 800490e:	bf00      	nop
 8004910:	e008      	b.n	8004924 <DMA_CheckFifoParam+0xe8>
      break;
 8004912:	bf00      	nop
 8004914:	e006      	b.n	8004924 <DMA_CheckFifoParam+0xe8>
      break;
 8004916:	bf00      	nop
 8004918:	e004      	b.n	8004924 <DMA_CheckFifoParam+0xe8>
      break;
 800491a:	bf00      	nop
 800491c:	e002      	b.n	8004924 <DMA_CheckFifoParam+0xe8>
      break;   
 800491e:	bf00      	nop
 8004920:	e000      	b.n	8004924 <DMA_CheckFifoParam+0xe8>
      break;
 8004922:	bf00      	nop
    }
  } 
  
  return status; 
 8004924:	7bfb      	ldrb	r3, [r7, #15]
}
 8004926:	4618      	mov	r0, r3
 8004928:	3714      	adds	r7, #20
 800492a:	46bd      	mov	sp, r7
 800492c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004930:	4770      	bx	lr
 8004932:	bf00      	nop

08004934 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004934:	b480      	push	{r7}
 8004936:	b089      	sub	sp, #36	; 0x24
 8004938:	af00      	add	r7, sp, #0
 800493a:	6078      	str	r0, [r7, #4]
 800493c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800493e:	2300      	movs	r3, #0
 8004940:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8004942:	2300      	movs	r3, #0
 8004944:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8004946:	2300      	movs	r3, #0
 8004948:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800494a:	2300      	movs	r3, #0
 800494c:	61fb      	str	r3, [r7, #28]
 800494e:	e16b      	b.n	8004c28 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004950:	2201      	movs	r2, #1
 8004952:	69fb      	ldr	r3, [r7, #28]
 8004954:	fa02 f303 	lsl.w	r3, r2, r3
 8004958:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800495a:	683b      	ldr	r3, [r7, #0]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	697a      	ldr	r2, [r7, #20]
 8004960:	4013      	ands	r3, r2
 8004962:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004964:	693a      	ldr	r2, [r7, #16]
 8004966:	697b      	ldr	r3, [r7, #20]
 8004968:	429a      	cmp	r2, r3
 800496a:	f040 815a 	bne.w	8004c22 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800496e:	683b      	ldr	r3, [r7, #0]
 8004970:	685b      	ldr	r3, [r3, #4]
 8004972:	f003 0303 	and.w	r3, r3, #3
 8004976:	2b01      	cmp	r3, #1
 8004978:	d005      	beq.n	8004986 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800497a:	683b      	ldr	r3, [r7, #0]
 800497c:	685b      	ldr	r3, [r3, #4]
 800497e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004982:	2b02      	cmp	r3, #2
 8004984:	d130      	bne.n	80049e8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	689b      	ldr	r3, [r3, #8]
 800498a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800498c:	69fb      	ldr	r3, [r7, #28]
 800498e:	005b      	lsls	r3, r3, #1
 8004990:	2203      	movs	r2, #3
 8004992:	fa02 f303 	lsl.w	r3, r2, r3
 8004996:	43db      	mvns	r3, r3
 8004998:	69ba      	ldr	r2, [r7, #24]
 800499a:	4013      	ands	r3, r2
 800499c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800499e:	683b      	ldr	r3, [r7, #0]
 80049a0:	68da      	ldr	r2, [r3, #12]
 80049a2:	69fb      	ldr	r3, [r7, #28]
 80049a4:	005b      	lsls	r3, r3, #1
 80049a6:	fa02 f303 	lsl.w	r3, r2, r3
 80049aa:	69ba      	ldr	r2, [r7, #24]
 80049ac:	4313      	orrs	r3, r2
 80049ae:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	69ba      	ldr	r2, [r7, #24]
 80049b4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	685b      	ldr	r3, [r3, #4]
 80049ba:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80049bc:	2201      	movs	r2, #1
 80049be:	69fb      	ldr	r3, [r7, #28]
 80049c0:	fa02 f303 	lsl.w	r3, r2, r3
 80049c4:	43db      	mvns	r3, r3
 80049c6:	69ba      	ldr	r2, [r7, #24]
 80049c8:	4013      	ands	r3, r2
 80049ca:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80049cc:	683b      	ldr	r3, [r7, #0]
 80049ce:	685b      	ldr	r3, [r3, #4]
 80049d0:	091b      	lsrs	r3, r3, #4
 80049d2:	f003 0201 	and.w	r2, r3, #1
 80049d6:	69fb      	ldr	r3, [r7, #28]
 80049d8:	fa02 f303 	lsl.w	r3, r2, r3
 80049dc:	69ba      	ldr	r2, [r7, #24]
 80049de:	4313      	orrs	r3, r2
 80049e0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	69ba      	ldr	r2, [r7, #24]
 80049e6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80049e8:	683b      	ldr	r3, [r7, #0]
 80049ea:	685b      	ldr	r3, [r3, #4]
 80049ec:	f003 0303 	and.w	r3, r3, #3
 80049f0:	2b03      	cmp	r3, #3
 80049f2:	d017      	beq.n	8004a24 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	68db      	ldr	r3, [r3, #12]
 80049f8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80049fa:	69fb      	ldr	r3, [r7, #28]
 80049fc:	005b      	lsls	r3, r3, #1
 80049fe:	2203      	movs	r2, #3
 8004a00:	fa02 f303 	lsl.w	r3, r2, r3
 8004a04:	43db      	mvns	r3, r3
 8004a06:	69ba      	ldr	r2, [r7, #24]
 8004a08:	4013      	ands	r3, r2
 8004a0a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004a0c:	683b      	ldr	r3, [r7, #0]
 8004a0e:	689a      	ldr	r2, [r3, #8]
 8004a10:	69fb      	ldr	r3, [r7, #28]
 8004a12:	005b      	lsls	r3, r3, #1
 8004a14:	fa02 f303 	lsl.w	r3, r2, r3
 8004a18:	69ba      	ldr	r2, [r7, #24]
 8004a1a:	4313      	orrs	r3, r2
 8004a1c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	69ba      	ldr	r2, [r7, #24]
 8004a22:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004a24:	683b      	ldr	r3, [r7, #0]
 8004a26:	685b      	ldr	r3, [r3, #4]
 8004a28:	f003 0303 	and.w	r3, r3, #3
 8004a2c:	2b02      	cmp	r3, #2
 8004a2e:	d123      	bne.n	8004a78 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004a30:	69fb      	ldr	r3, [r7, #28]
 8004a32:	08da      	lsrs	r2, r3, #3
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	3208      	adds	r2, #8
 8004a38:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004a3c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004a3e:	69fb      	ldr	r3, [r7, #28]
 8004a40:	f003 0307 	and.w	r3, r3, #7
 8004a44:	009b      	lsls	r3, r3, #2
 8004a46:	220f      	movs	r2, #15
 8004a48:	fa02 f303 	lsl.w	r3, r2, r3
 8004a4c:	43db      	mvns	r3, r3
 8004a4e:	69ba      	ldr	r2, [r7, #24]
 8004a50:	4013      	ands	r3, r2
 8004a52:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004a54:	683b      	ldr	r3, [r7, #0]
 8004a56:	691a      	ldr	r2, [r3, #16]
 8004a58:	69fb      	ldr	r3, [r7, #28]
 8004a5a:	f003 0307 	and.w	r3, r3, #7
 8004a5e:	009b      	lsls	r3, r3, #2
 8004a60:	fa02 f303 	lsl.w	r3, r2, r3
 8004a64:	69ba      	ldr	r2, [r7, #24]
 8004a66:	4313      	orrs	r3, r2
 8004a68:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004a6a:	69fb      	ldr	r3, [r7, #28]
 8004a6c:	08da      	lsrs	r2, r3, #3
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	3208      	adds	r2, #8
 8004a72:	69b9      	ldr	r1, [r7, #24]
 8004a74:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004a7e:	69fb      	ldr	r3, [r7, #28]
 8004a80:	005b      	lsls	r3, r3, #1
 8004a82:	2203      	movs	r2, #3
 8004a84:	fa02 f303 	lsl.w	r3, r2, r3
 8004a88:	43db      	mvns	r3, r3
 8004a8a:	69ba      	ldr	r2, [r7, #24]
 8004a8c:	4013      	ands	r3, r2
 8004a8e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004a90:	683b      	ldr	r3, [r7, #0]
 8004a92:	685b      	ldr	r3, [r3, #4]
 8004a94:	f003 0203 	and.w	r2, r3, #3
 8004a98:	69fb      	ldr	r3, [r7, #28]
 8004a9a:	005b      	lsls	r3, r3, #1
 8004a9c:	fa02 f303 	lsl.w	r3, r2, r3
 8004aa0:	69ba      	ldr	r2, [r7, #24]
 8004aa2:	4313      	orrs	r3, r2
 8004aa4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	69ba      	ldr	r2, [r7, #24]
 8004aaa:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004aac:	683b      	ldr	r3, [r7, #0]
 8004aae:	685b      	ldr	r3, [r3, #4]
 8004ab0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004ab4:	2b00      	cmp	r3, #0
 8004ab6:	f000 80b4 	beq.w	8004c22 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004aba:	2300      	movs	r3, #0
 8004abc:	60fb      	str	r3, [r7, #12]
 8004abe:	4b60      	ldr	r3, [pc, #384]	; (8004c40 <HAL_GPIO_Init+0x30c>)
 8004ac0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004ac2:	4a5f      	ldr	r2, [pc, #380]	; (8004c40 <HAL_GPIO_Init+0x30c>)
 8004ac4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004ac8:	6453      	str	r3, [r2, #68]	; 0x44
 8004aca:	4b5d      	ldr	r3, [pc, #372]	; (8004c40 <HAL_GPIO_Init+0x30c>)
 8004acc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004ace:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004ad2:	60fb      	str	r3, [r7, #12]
 8004ad4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004ad6:	4a5b      	ldr	r2, [pc, #364]	; (8004c44 <HAL_GPIO_Init+0x310>)
 8004ad8:	69fb      	ldr	r3, [r7, #28]
 8004ada:	089b      	lsrs	r3, r3, #2
 8004adc:	3302      	adds	r3, #2
 8004ade:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004ae2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004ae4:	69fb      	ldr	r3, [r7, #28]
 8004ae6:	f003 0303 	and.w	r3, r3, #3
 8004aea:	009b      	lsls	r3, r3, #2
 8004aec:	220f      	movs	r2, #15
 8004aee:	fa02 f303 	lsl.w	r3, r2, r3
 8004af2:	43db      	mvns	r3, r3
 8004af4:	69ba      	ldr	r2, [r7, #24]
 8004af6:	4013      	ands	r3, r2
 8004af8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	4a52      	ldr	r2, [pc, #328]	; (8004c48 <HAL_GPIO_Init+0x314>)
 8004afe:	4293      	cmp	r3, r2
 8004b00:	d02b      	beq.n	8004b5a <HAL_GPIO_Init+0x226>
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	4a51      	ldr	r2, [pc, #324]	; (8004c4c <HAL_GPIO_Init+0x318>)
 8004b06:	4293      	cmp	r3, r2
 8004b08:	d025      	beq.n	8004b56 <HAL_GPIO_Init+0x222>
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	4a50      	ldr	r2, [pc, #320]	; (8004c50 <HAL_GPIO_Init+0x31c>)
 8004b0e:	4293      	cmp	r3, r2
 8004b10:	d01f      	beq.n	8004b52 <HAL_GPIO_Init+0x21e>
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	4a4f      	ldr	r2, [pc, #316]	; (8004c54 <HAL_GPIO_Init+0x320>)
 8004b16:	4293      	cmp	r3, r2
 8004b18:	d019      	beq.n	8004b4e <HAL_GPIO_Init+0x21a>
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	4a4e      	ldr	r2, [pc, #312]	; (8004c58 <HAL_GPIO_Init+0x324>)
 8004b1e:	4293      	cmp	r3, r2
 8004b20:	d013      	beq.n	8004b4a <HAL_GPIO_Init+0x216>
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	4a4d      	ldr	r2, [pc, #308]	; (8004c5c <HAL_GPIO_Init+0x328>)
 8004b26:	4293      	cmp	r3, r2
 8004b28:	d00d      	beq.n	8004b46 <HAL_GPIO_Init+0x212>
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	4a4c      	ldr	r2, [pc, #304]	; (8004c60 <HAL_GPIO_Init+0x32c>)
 8004b2e:	4293      	cmp	r3, r2
 8004b30:	d007      	beq.n	8004b42 <HAL_GPIO_Init+0x20e>
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	4a4b      	ldr	r2, [pc, #300]	; (8004c64 <HAL_GPIO_Init+0x330>)
 8004b36:	4293      	cmp	r3, r2
 8004b38:	d101      	bne.n	8004b3e <HAL_GPIO_Init+0x20a>
 8004b3a:	2307      	movs	r3, #7
 8004b3c:	e00e      	b.n	8004b5c <HAL_GPIO_Init+0x228>
 8004b3e:	2308      	movs	r3, #8
 8004b40:	e00c      	b.n	8004b5c <HAL_GPIO_Init+0x228>
 8004b42:	2306      	movs	r3, #6
 8004b44:	e00a      	b.n	8004b5c <HAL_GPIO_Init+0x228>
 8004b46:	2305      	movs	r3, #5
 8004b48:	e008      	b.n	8004b5c <HAL_GPIO_Init+0x228>
 8004b4a:	2304      	movs	r3, #4
 8004b4c:	e006      	b.n	8004b5c <HAL_GPIO_Init+0x228>
 8004b4e:	2303      	movs	r3, #3
 8004b50:	e004      	b.n	8004b5c <HAL_GPIO_Init+0x228>
 8004b52:	2302      	movs	r3, #2
 8004b54:	e002      	b.n	8004b5c <HAL_GPIO_Init+0x228>
 8004b56:	2301      	movs	r3, #1
 8004b58:	e000      	b.n	8004b5c <HAL_GPIO_Init+0x228>
 8004b5a:	2300      	movs	r3, #0
 8004b5c:	69fa      	ldr	r2, [r7, #28]
 8004b5e:	f002 0203 	and.w	r2, r2, #3
 8004b62:	0092      	lsls	r2, r2, #2
 8004b64:	4093      	lsls	r3, r2
 8004b66:	69ba      	ldr	r2, [r7, #24]
 8004b68:	4313      	orrs	r3, r2
 8004b6a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004b6c:	4935      	ldr	r1, [pc, #212]	; (8004c44 <HAL_GPIO_Init+0x310>)
 8004b6e:	69fb      	ldr	r3, [r7, #28]
 8004b70:	089b      	lsrs	r3, r3, #2
 8004b72:	3302      	adds	r3, #2
 8004b74:	69ba      	ldr	r2, [r7, #24]
 8004b76:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004b7a:	4b3b      	ldr	r3, [pc, #236]	; (8004c68 <HAL_GPIO_Init+0x334>)
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004b80:	693b      	ldr	r3, [r7, #16]
 8004b82:	43db      	mvns	r3, r3
 8004b84:	69ba      	ldr	r2, [r7, #24]
 8004b86:	4013      	ands	r3, r2
 8004b88:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004b8a:	683b      	ldr	r3, [r7, #0]
 8004b8c:	685b      	ldr	r3, [r3, #4]
 8004b8e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004b92:	2b00      	cmp	r3, #0
 8004b94:	d003      	beq.n	8004b9e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8004b96:	69ba      	ldr	r2, [r7, #24]
 8004b98:	693b      	ldr	r3, [r7, #16]
 8004b9a:	4313      	orrs	r3, r2
 8004b9c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004b9e:	4a32      	ldr	r2, [pc, #200]	; (8004c68 <HAL_GPIO_Init+0x334>)
 8004ba0:	69bb      	ldr	r3, [r7, #24]
 8004ba2:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8004ba4:	4b30      	ldr	r3, [pc, #192]	; (8004c68 <HAL_GPIO_Init+0x334>)
 8004ba6:	685b      	ldr	r3, [r3, #4]
 8004ba8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004baa:	693b      	ldr	r3, [r7, #16]
 8004bac:	43db      	mvns	r3, r3
 8004bae:	69ba      	ldr	r2, [r7, #24]
 8004bb0:	4013      	ands	r3, r2
 8004bb2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004bb4:	683b      	ldr	r3, [r7, #0]
 8004bb6:	685b      	ldr	r3, [r3, #4]
 8004bb8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004bbc:	2b00      	cmp	r3, #0
 8004bbe:	d003      	beq.n	8004bc8 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8004bc0:	69ba      	ldr	r2, [r7, #24]
 8004bc2:	693b      	ldr	r3, [r7, #16]
 8004bc4:	4313      	orrs	r3, r2
 8004bc6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004bc8:	4a27      	ldr	r2, [pc, #156]	; (8004c68 <HAL_GPIO_Init+0x334>)
 8004bca:	69bb      	ldr	r3, [r7, #24]
 8004bcc:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004bce:	4b26      	ldr	r3, [pc, #152]	; (8004c68 <HAL_GPIO_Init+0x334>)
 8004bd0:	689b      	ldr	r3, [r3, #8]
 8004bd2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004bd4:	693b      	ldr	r3, [r7, #16]
 8004bd6:	43db      	mvns	r3, r3
 8004bd8:	69ba      	ldr	r2, [r7, #24]
 8004bda:	4013      	ands	r3, r2
 8004bdc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004bde:	683b      	ldr	r3, [r7, #0]
 8004be0:	685b      	ldr	r3, [r3, #4]
 8004be2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004be6:	2b00      	cmp	r3, #0
 8004be8:	d003      	beq.n	8004bf2 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8004bea:	69ba      	ldr	r2, [r7, #24]
 8004bec:	693b      	ldr	r3, [r7, #16]
 8004bee:	4313      	orrs	r3, r2
 8004bf0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004bf2:	4a1d      	ldr	r2, [pc, #116]	; (8004c68 <HAL_GPIO_Init+0x334>)
 8004bf4:	69bb      	ldr	r3, [r7, #24]
 8004bf6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004bf8:	4b1b      	ldr	r3, [pc, #108]	; (8004c68 <HAL_GPIO_Init+0x334>)
 8004bfa:	68db      	ldr	r3, [r3, #12]
 8004bfc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004bfe:	693b      	ldr	r3, [r7, #16]
 8004c00:	43db      	mvns	r3, r3
 8004c02:	69ba      	ldr	r2, [r7, #24]
 8004c04:	4013      	ands	r3, r2
 8004c06:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004c08:	683b      	ldr	r3, [r7, #0]
 8004c0a:	685b      	ldr	r3, [r3, #4]
 8004c0c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004c10:	2b00      	cmp	r3, #0
 8004c12:	d003      	beq.n	8004c1c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8004c14:	69ba      	ldr	r2, [r7, #24]
 8004c16:	693b      	ldr	r3, [r7, #16]
 8004c18:	4313      	orrs	r3, r2
 8004c1a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004c1c:	4a12      	ldr	r2, [pc, #72]	; (8004c68 <HAL_GPIO_Init+0x334>)
 8004c1e:	69bb      	ldr	r3, [r7, #24]
 8004c20:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004c22:	69fb      	ldr	r3, [r7, #28]
 8004c24:	3301      	adds	r3, #1
 8004c26:	61fb      	str	r3, [r7, #28]
 8004c28:	69fb      	ldr	r3, [r7, #28]
 8004c2a:	2b0f      	cmp	r3, #15
 8004c2c:	f67f ae90 	bls.w	8004950 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004c30:	bf00      	nop
 8004c32:	bf00      	nop
 8004c34:	3724      	adds	r7, #36	; 0x24
 8004c36:	46bd      	mov	sp, r7
 8004c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c3c:	4770      	bx	lr
 8004c3e:	bf00      	nop
 8004c40:	40023800 	.word	0x40023800
 8004c44:	40013800 	.word	0x40013800
 8004c48:	40020000 	.word	0x40020000
 8004c4c:	40020400 	.word	0x40020400
 8004c50:	40020800 	.word	0x40020800
 8004c54:	40020c00 	.word	0x40020c00
 8004c58:	40021000 	.word	0x40021000
 8004c5c:	40021400 	.word	0x40021400
 8004c60:	40021800 	.word	0x40021800
 8004c64:	40021c00 	.word	0x40021c00
 8004c68:	40013c00 	.word	0x40013c00

08004c6c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004c6c:	b480      	push	{r7}
 8004c6e:	b083      	sub	sp, #12
 8004c70:	af00      	add	r7, sp, #0
 8004c72:	6078      	str	r0, [r7, #4]
 8004c74:	460b      	mov	r3, r1
 8004c76:	807b      	strh	r3, [r7, #2]
 8004c78:	4613      	mov	r3, r2
 8004c7a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004c7c:	787b      	ldrb	r3, [r7, #1]
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	d003      	beq.n	8004c8a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004c82:	887a      	ldrh	r2, [r7, #2]
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004c88:	e003      	b.n	8004c92 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8004c8a:	887b      	ldrh	r3, [r7, #2]
 8004c8c:	041a      	lsls	r2, r3, #16
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	619a      	str	r2, [r3, #24]
}
 8004c92:	bf00      	nop
 8004c94:	370c      	adds	r7, #12
 8004c96:	46bd      	mov	sp, r7
 8004c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c9c:	4770      	bx	lr

08004c9e <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8004c9e:	b590      	push	{r4, r7, lr}
 8004ca0:	b08d      	sub	sp, #52	; 0x34
 8004ca2:	af00      	add	r7, sp, #0
 8004ca4:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004cac:	6a3b      	ldr	r3, [r7, #32]
 8004cae:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t temp;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	4618      	mov	r0, r3
 8004cb6:	f004 fb0d 	bl	80092d4 <USB_GetMode>
 8004cba:	4603      	mov	r3, r0
 8004cbc:	2b00      	cmp	r3, #0
 8004cbe:	f040 839d 	bne.w	80053fc <HAL_PCD_IRQHandler+0x75e>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	4618      	mov	r0, r3
 8004cc8:	f004 fa71 	bl	80091ae <USB_ReadInterrupts>
 8004ccc:	4603      	mov	r3, r0
 8004cce:	2b00      	cmp	r3, #0
 8004cd0:	f000 8393 	beq.w	80053fa <HAL_PCD_IRQHandler+0x75c>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	4618      	mov	r0, r3
 8004cda:	f004 fa68 	bl	80091ae <USB_ReadInterrupts>
 8004cde:	4603      	mov	r3, r0
 8004ce0:	f003 0302 	and.w	r3, r3, #2
 8004ce4:	2b02      	cmp	r3, #2
 8004ce6:	d107      	bne.n	8004cf8 <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	695a      	ldr	r2, [r3, #20]
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	f002 0202 	and.w	r2, r2, #2
 8004cf6:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	4618      	mov	r0, r3
 8004cfe:	f004 fa56 	bl	80091ae <USB_ReadInterrupts>
 8004d02:	4603      	mov	r3, r0
 8004d04:	f003 0310 	and.w	r3, r3, #16
 8004d08:	2b10      	cmp	r3, #16
 8004d0a:	d161      	bne.n	8004dd0 <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	699a      	ldr	r2, [r3, #24]
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	f022 0210 	bic.w	r2, r2, #16
 8004d1a:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 8004d1c:	6a3b      	ldr	r3, [r7, #32]
 8004d1e:	6a1b      	ldr	r3, [r3, #32]
 8004d20:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 8004d22:	69bb      	ldr	r3, [r7, #24]
 8004d24:	f003 020f 	and.w	r2, r3, #15
 8004d28:	4613      	mov	r3, r2
 8004d2a:	00db      	lsls	r3, r3, #3
 8004d2c:	1a9b      	subs	r3, r3, r2
 8004d2e:	009b      	lsls	r3, r3, #2
 8004d30:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8004d34:	687a      	ldr	r2, [r7, #4]
 8004d36:	4413      	add	r3, r2
 8004d38:	3304      	adds	r3, #4
 8004d3a:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8004d3c:	69bb      	ldr	r3, [r7, #24]
 8004d3e:	0c5b      	lsrs	r3, r3, #17
 8004d40:	f003 030f 	and.w	r3, r3, #15
 8004d44:	2b02      	cmp	r3, #2
 8004d46:	d124      	bne.n	8004d92 <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 8004d48:	69ba      	ldr	r2, [r7, #24]
 8004d4a:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8004d4e:	4013      	ands	r3, r2
 8004d50:	2b00      	cmp	r3, #0
 8004d52:	d035      	beq.n	8004dc0 <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8004d54:	697b      	ldr	r3, [r7, #20]
 8004d56:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 8004d58:	69bb      	ldr	r3, [r7, #24]
 8004d5a:	091b      	lsrs	r3, r3, #4
 8004d5c:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8004d5e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004d62:	b29b      	uxth	r3, r3
 8004d64:	461a      	mov	r2, r3
 8004d66:	6a38      	ldr	r0, [r7, #32]
 8004d68:	f004 f8cf 	bl	8008f0a <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8004d6c:	697b      	ldr	r3, [r7, #20]
 8004d6e:	68da      	ldr	r2, [r3, #12]
 8004d70:	69bb      	ldr	r3, [r7, #24]
 8004d72:	091b      	lsrs	r3, r3, #4
 8004d74:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004d78:	441a      	add	r2, r3
 8004d7a:	697b      	ldr	r3, [r7, #20]
 8004d7c:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8004d7e:	697b      	ldr	r3, [r7, #20]
 8004d80:	699a      	ldr	r2, [r3, #24]
 8004d82:	69bb      	ldr	r3, [r7, #24]
 8004d84:	091b      	lsrs	r3, r3, #4
 8004d86:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004d8a:	441a      	add	r2, r3
 8004d8c:	697b      	ldr	r3, [r7, #20]
 8004d8e:	619a      	str	r2, [r3, #24]
 8004d90:	e016      	b.n	8004dc0 <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 8004d92:	69bb      	ldr	r3, [r7, #24]
 8004d94:	0c5b      	lsrs	r3, r3, #17
 8004d96:	f003 030f 	and.w	r3, r3, #15
 8004d9a:	2b06      	cmp	r3, #6
 8004d9c:	d110      	bne.n	8004dc0 <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8004da4:	2208      	movs	r2, #8
 8004da6:	4619      	mov	r1, r3
 8004da8:	6a38      	ldr	r0, [r7, #32]
 8004daa:	f004 f8ae 	bl	8008f0a <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8004dae:	697b      	ldr	r3, [r7, #20]
 8004db0:	699a      	ldr	r2, [r3, #24]
 8004db2:	69bb      	ldr	r3, [r7, #24]
 8004db4:	091b      	lsrs	r3, r3, #4
 8004db6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004dba:	441a      	add	r2, r3
 8004dbc:	697b      	ldr	r3, [r7, #20]
 8004dbe:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	699a      	ldr	r2, [r3, #24]
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	f042 0210 	orr.w	r2, r2, #16
 8004dce:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	4618      	mov	r0, r3
 8004dd6:	f004 f9ea 	bl	80091ae <USB_ReadInterrupts>
 8004dda:	4603      	mov	r3, r0
 8004ddc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004de0:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8004de4:	d16e      	bne.n	8004ec4 <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 8004de6:	2300      	movs	r3, #0
 8004de8:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	4618      	mov	r0, r3
 8004df0:	f004 f9f0 	bl	80091d4 <USB_ReadDevAllOutEpInterrupt>
 8004df4:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8004df6:	e062      	b.n	8004ebe <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 8004df8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004dfa:	f003 0301 	and.w	r3, r3, #1
 8004dfe:	2b00      	cmp	r3, #0
 8004e00:	d057      	beq.n	8004eb2 <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004e08:	b2d2      	uxtb	r2, r2
 8004e0a:	4611      	mov	r1, r2
 8004e0c:	4618      	mov	r0, r3
 8004e0e:	f004 fa15 	bl	800923c <USB_ReadDevOutEPInterrupt>
 8004e12:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8004e14:	693b      	ldr	r3, [r7, #16]
 8004e16:	f003 0301 	and.w	r3, r3, #1
 8004e1a:	2b00      	cmp	r3, #0
 8004e1c:	d00c      	beq.n	8004e38 <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8004e1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e20:	015a      	lsls	r2, r3, #5
 8004e22:	69fb      	ldr	r3, [r7, #28]
 8004e24:	4413      	add	r3, r2
 8004e26:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e2a:	461a      	mov	r2, r3
 8004e2c:	2301      	movs	r3, #1
 8004e2e:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8004e30:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004e32:	6878      	ldr	r0, [r7, #4]
 8004e34:	f000 fd4e 	bl	80058d4 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8004e38:	693b      	ldr	r3, [r7, #16]
 8004e3a:	f003 0308 	and.w	r3, r3, #8
 8004e3e:	2b00      	cmp	r3, #0
 8004e40:	d00c      	beq.n	8004e5c <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8004e42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e44:	015a      	lsls	r2, r3, #5
 8004e46:	69fb      	ldr	r3, [r7, #28]
 8004e48:	4413      	add	r3, r2
 8004e4a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e4e:	461a      	mov	r2, r3
 8004e50:	2308      	movs	r3, #8
 8004e52:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8004e54:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004e56:	6878      	ldr	r0, [r7, #4]
 8004e58:	f000 fe48 	bl	8005aec <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8004e5c:	693b      	ldr	r3, [r7, #16]
 8004e5e:	f003 0310 	and.w	r3, r3, #16
 8004e62:	2b00      	cmp	r3, #0
 8004e64:	d008      	beq.n	8004e78 <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8004e66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e68:	015a      	lsls	r2, r3, #5
 8004e6a:	69fb      	ldr	r3, [r7, #28]
 8004e6c:	4413      	add	r3, r2
 8004e6e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e72:	461a      	mov	r2, r3
 8004e74:	2310      	movs	r3, #16
 8004e76:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8004e78:	693b      	ldr	r3, [r7, #16]
 8004e7a:	f003 0320 	and.w	r3, r3, #32
 8004e7e:	2b00      	cmp	r3, #0
 8004e80:	d008      	beq.n	8004e94 <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8004e82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e84:	015a      	lsls	r2, r3, #5
 8004e86:	69fb      	ldr	r3, [r7, #28]
 8004e88:	4413      	add	r3, r2
 8004e8a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e8e:	461a      	mov	r2, r3
 8004e90:	2320      	movs	r3, #32
 8004e92:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8004e94:	693b      	ldr	r3, [r7, #16]
 8004e96:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004e9a:	2b00      	cmp	r3, #0
 8004e9c:	d009      	beq.n	8004eb2 <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8004e9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ea0:	015a      	lsls	r2, r3, #5
 8004ea2:	69fb      	ldr	r3, [r7, #28]
 8004ea4:	4413      	add	r3, r2
 8004ea6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004eaa:	461a      	mov	r2, r3
 8004eac:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004eb0:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8004eb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004eb4:	3301      	adds	r3, #1
 8004eb6:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8004eb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004eba:	085b      	lsrs	r3, r3, #1
 8004ebc:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8004ebe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ec0:	2b00      	cmp	r3, #0
 8004ec2:	d199      	bne.n	8004df8 <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	4618      	mov	r0, r3
 8004eca:	f004 f970 	bl	80091ae <USB_ReadInterrupts>
 8004ece:	4603      	mov	r3, r0
 8004ed0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004ed4:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004ed8:	f040 80c0 	bne.w	800505c <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	4618      	mov	r0, r3
 8004ee2:	f004 f991 	bl	8009208 <USB_ReadDevAllInEpInterrupt>
 8004ee6:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8004ee8:	2300      	movs	r3, #0
 8004eea:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8004eec:	e0b2      	b.n	8005054 <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8004eee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ef0:	f003 0301 	and.w	r3, r3, #1
 8004ef4:	2b00      	cmp	r3, #0
 8004ef6:	f000 80a7 	beq.w	8005048 <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004f00:	b2d2      	uxtb	r2, r2
 8004f02:	4611      	mov	r1, r2
 8004f04:	4618      	mov	r0, r3
 8004f06:	f004 f9b7 	bl	8009278 <USB_ReadDevInEPInterrupt>
 8004f0a:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8004f0c:	693b      	ldr	r3, [r7, #16]
 8004f0e:	f003 0301 	and.w	r3, r3, #1
 8004f12:	2b00      	cmp	r3, #0
 8004f14:	d057      	beq.n	8004fc6 <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8004f16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f18:	f003 030f 	and.w	r3, r3, #15
 8004f1c:	2201      	movs	r2, #1
 8004f1e:	fa02 f303 	lsl.w	r3, r2, r3
 8004f22:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8004f24:	69fb      	ldr	r3, [r7, #28]
 8004f26:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004f2a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	43db      	mvns	r3, r3
 8004f30:	69f9      	ldr	r1, [r7, #28]
 8004f32:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004f36:	4013      	ands	r3, r2
 8004f38:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8004f3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f3c:	015a      	lsls	r2, r3, #5
 8004f3e:	69fb      	ldr	r3, [r7, #28]
 8004f40:	4413      	add	r3, r2
 8004f42:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004f46:	461a      	mov	r2, r3
 8004f48:	2301      	movs	r3, #1
 8004f4a:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	691b      	ldr	r3, [r3, #16]
 8004f50:	2b01      	cmp	r3, #1
 8004f52:	d132      	bne.n	8004fba <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8004f54:	6879      	ldr	r1, [r7, #4]
 8004f56:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004f58:	4613      	mov	r3, r2
 8004f5a:	00db      	lsls	r3, r3, #3
 8004f5c:	1a9b      	subs	r3, r3, r2
 8004f5e:	009b      	lsls	r3, r3, #2
 8004f60:	440b      	add	r3, r1
 8004f62:	3348      	adds	r3, #72	; 0x48
 8004f64:	6819      	ldr	r1, [r3, #0]
 8004f66:	6878      	ldr	r0, [r7, #4]
 8004f68:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004f6a:	4613      	mov	r3, r2
 8004f6c:	00db      	lsls	r3, r3, #3
 8004f6e:	1a9b      	subs	r3, r3, r2
 8004f70:	009b      	lsls	r3, r3, #2
 8004f72:	4403      	add	r3, r0
 8004f74:	3344      	adds	r3, #68	; 0x44
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	4419      	add	r1, r3
 8004f7a:	6878      	ldr	r0, [r7, #4]
 8004f7c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004f7e:	4613      	mov	r3, r2
 8004f80:	00db      	lsls	r3, r3, #3
 8004f82:	1a9b      	subs	r3, r3, r2
 8004f84:	009b      	lsls	r3, r3, #2
 8004f86:	4403      	add	r3, r0
 8004f88:	3348      	adds	r3, #72	; 0x48
 8004f8a:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8004f8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f8e:	2b00      	cmp	r3, #0
 8004f90:	d113      	bne.n	8004fba <HAL_PCD_IRQHandler+0x31c>
 8004f92:	6879      	ldr	r1, [r7, #4]
 8004f94:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004f96:	4613      	mov	r3, r2
 8004f98:	00db      	lsls	r3, r3, #3
 8004f9a:	1a9b      	subs	r3, r3, r2
 8004f9c:	009b      	lsls	r3, r3, #2
 8004f9e:	440b      	add	r3, r1
 8004fa0:	3350      	adds	r3, #80	; 0x50
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	2b00      	cmp	r3, #0
 8004fa6:	d108      	bne.n	8004fba <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	6818      	ldr	r0, [r3, #0]
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8004fb2:	461a      	mov	r2, r3
 8004fb4:	2101      	movs	r1, #1
 8004fb6:	f004 f9bf 	bl	8009338 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8004fba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fbc:	b2db      	uxtb	r3, r3
 8004fbe:	4619      	mov	r1, r3
 8004fc0:	6878      	ldr	r0, [r7, #4]
 8004fc2:	f008 f898 	bl	800d0f6 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8004fc6:	693b      	ldr	r3, [r7, #16]
 8004fc8:	f003 0308 	and.w	r3, r3, #8
 8004fcc:	2b00      	cmp	r3, #0
 8004fce:	d008      	beq.n	8004fe2 <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8004fd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fd2:	015a      	lsls	r2, r3, #5
 8004fd4:	69fb      	ldr	r3, [r7, #28]
 8004fd6:	4413      	add	r3, r2
 8004fd8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004fdc:	461a      	mov	r2, r3
 8004fde:	2308      	movs	r3, #8
 8004fe0:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8004fe2:	693b      	ldr	r3, [r7, #16]
 8004fe4:	f003 0310 	and.w	r3, r3, #16
 8004fe8:	2b00      	cmp	r3, #0
 8004fea:	d008      	beq.n	8004ffe <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8004fec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fee:	015a      	lsls	r2, r3, #5
 8004ff0:	69fb      	ldr	r3, [r7, #28]
 8004ff2:	4413      	add	r3, r2
 8004ff4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004ff8:	461a      	mov	r2, r3
 8004ffa:	2310      	movs	r3, #16
 8004ffc:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8004ffe:	693b      	ldr	r3, [r7, #16]
 8005000:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005004:	2b00      	cmp	r3, #0
 8005006:	d008      	beq.n	800501a <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8005008:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800500a:	015a      	lsls	r2, r3, #5
 800500c:	69fb      	ldr	r3, [r7, #28]
 800500e:	4413      	add	r3, r2
 8005010:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005014:	461a      	mov	r2, r3
 8005016:	2340      	movs	r3, #64	; 0x40
 8005018:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 800501a:	693b      	ldr	r3, [r7, #16]
 800501c:	f003 0302 	and.w	r3, r3, #2
 8005020:	2b00      	cmp	r3, #0
 8005022:	d008      	beq.n	8005036 <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8005024:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005026:	015a      	lsls	r2, r3, #5
 8005028:	69fb      	ldr	r3, [r7, #28]
 800502a:	4413      	add	r3, r2
 800502c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005030:	461a      	mov	r2, r3
 8005032:	2302      	movs	r3, #2
 8005034:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8005036:	693b      	ldr	r3, [r7, #16]
 8005038:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800503c:	2b00      	cmp	r3, #0
 800503e:	d003      	beq.n	8005048 <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8005040:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005042:	6878      	ldr	r0, [r7, #4]
 8005044:	f000 fbb9 	bl	80057ba <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8005048:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800504a:	3301      	adds	r3, #1
 800504c:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800504e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005050:	085b      	lsrs	r3, r3, #1
 8005052:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8005054:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005056:	2b00      	cmp	r3, #0
 8005058:	f47f af49 	bne.w	8004eee <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	4618      	mov	r0, r3
 8005062:	f004 f8a4 	bl	80091ae <USB_ReadInterrupts>
 8005066:	4603      	mov	r3, r0
 8005068:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800506c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005070:	d122      	bne.n	80050b8 <HAL_PCD_IRQHandler+0x41a>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8005072:	69fb      	ldr	r3, [r7, #28]
 8005074:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005078:	685b      	ldr	r3, [r3, #4]
 800507a:	69fa      	ldr	r2, [r7, #28]
 800507c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005080:	f023 0301 	bic.w	r3, r3, #1
 8005084:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 800508c:	2b01      	cmp	r3, #1
 800508e:	d108      	bne.n	80050a2 <HAL_PCD_IRQHandler+0x404>
      {
        hpcd->LPM_State = LPM_L0;
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	2200      	movs	r2, #0
 8005094:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8005098:	2100      	movs	r1, #0
 800509a:	6878      	ldr	r0, [r7, #4]
 800509c:	f000 fd6c 	bl	8005b78 <HAL_PCDEx_LPM_Callback>
 80050a0:	e002      	b.n	80050a8 <HAL_PCD_IRQHandler+0x40a>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 80050a2:	6878      	ldr	r0, [r7, #4]
 80050a4:	f008 f89e 	bl	800d1e4 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	695a      	ldr	r2, [r3, #20]
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 80050b6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	4618      	mov	r0, r3
 80050be:	f004 f876 	bl	80091ae <USB_ReadInterrupts>
 80050c2:	4603      	mov	r3, r0
 80050c4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80050c8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80050cc:	d112      	bne.n	80050f4 <HAL_PCD_IRQHandler+0x456>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 80050ce:	69fb      	ldr	r3, [r7, #28]
 80050d0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80050d4:	689b      	ldr	r3, [r3, #8]
 80050d6:	f003 0301 	and.w	r3, r3, #1
 80050da:	2b01      	cmp	r3, #1
 80050dc:	d102      	bne.n	80050e4 <HAL_PCD_IRQHandler+0x446>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80050de:	6878      	ldr	r0, [r7, #4]
 80050e0:	f008 f85a 	bl	800d198 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	695a      	ldr	r2, [r3, #20]
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 80050f2:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	4618      	mov	r0, r3
 80050fa:	f004 f858 	bl	80091ae <USB_ReadInterrupts>
 80050fe:	4603      	mov	r3, r0
 8005100:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005104:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005108:	f040 80c7 	bne.w	800529a <HAL_PCD_IRQHandler+0x5fc>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800510c:	69fb      	ldr	r3, [r7, #28]
 800510e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005112:	685b      	ldr	r3, [r3, #4]
 8005114:	69fa      	ldr	r2, [r7, #28]
 8005116:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800511a:	f023 0301 	bic.w	r3, r3, #1
 800511e:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	2110      	movs	r1, #16
 8005126:	4618      	mov	r0, r3
 8005128:	f003 fa4a 	bl	80085c0 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800512c:	2300      	movs	r3, #0
 800512e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005130:	e056      	b.n	80051e0 <HAL_PCD_IRQHandler+0x542>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8005132:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005134:	015a      	lsls	r2, r3, #5
 8005136:	69fb      	ldr	r3, [r7, #28]
 8005138:	4413      	add	r3, r2
 800513a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800513e:	461a      	mov	r2, r3
 8005140:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005144:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8005146:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005148:	015a      	lsls	r2, r3, #5
 800514a:	69fb      	ldr	r3, [r7, #28]
 800514c:	4413      	add	r3, r2
 800514e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005156:	0151      	lsls	r1, r2, #5
 8005158:	69fa      	ldr	r2, [r7, #28]
 800515a:	440a      	add	r2, r1
 800515c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005160:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005164:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8005166:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005168:	015a      	lsls	r2, r3, #5
 800516a:	69fb      	ldr	r3, [r7, #28]
 800516c:	4413      	add	r3, r2
 800516e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005176:	0151      	lsls	r1, r2, #5
 8005178:	69fa      	ldr	r2, [r7, #28]
 800517a:	440a      	add	r2, r1
 800517c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005180:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005184:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8005186:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005188:	015a      	lsls	r2, r3, #5
 800518a:	69fb      	ldr	r3, [r7, #28]
 800518c:	4413      	add	r3, r2
 800518e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005192:	461a      	mov	r2, r3
 8005194:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005198:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800519a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800519c:	015a      	lsls	r2, r3, #5
 800519e:	69fb      	ldr	r3, [r7, #28]
 80051a0:	4413      	add	r3, r2
 80051a2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80051aa:	0151      	lsls	r1, r2, #5
 80051ac:	69fa      	ldr	r2, [r7, #28]
 80051ae:	440a      	add	r2, r1
 80051b0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80051b4:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80051b8:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80051ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80051bc:	015a      	lsls	r2, r3, #5
 80051be:	69fb      	ldr	r3, [r7, #28]
 80051c0:	4413      	add	r3, r2
 80051c2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80051ca:	0151      	lsls	r1, r2, #5
 80051cc:	69fa      	ldr	r2, [r7, #28]
 80051ce:	440a      	add	r2, r1
 80051d0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80051d4:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80051d8:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80051da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80051dc:	3301      	adds	r3, #1
 80051de:	62fb      	str	r3, [r7, #44]	; 0x2c
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	685b      	ldr	r3, [r3, #4]
 80051e4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80051e6:	429a      	cmp	r2, r3
 80051e8:	d3a3      	bcc.n	8005132 <HAL_PCD_IRQHandler+0x494>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 80051ea:	69fb      	ldr	r3, [r7, #28]
 80051ec:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80051f0:	69db      	ldr	r3, [r3, #28]
 80051f2:	69fa      	ldr	r2, [r7, #28]
 80051f4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80051f8:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 80051fc:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005202:	2b00      	cmp	r3, #0
 8005204:	d016      	beq.n	8005234 <HAL_PCD_IRQHandler+0x596>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8005206:	69fb      	ldr	r3, [r7, #28]
 8005208:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800520c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005210:	69fa      	ldr	r2, [r7, #28]
 8005212:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005216:	f043 030b 	orr.w	r3, r3, #11
 800521a:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 800521e:	69fb      	ldr	r3, [r7, #28]
 8005220:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005224:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005226:	69fa      	ldr	r2, [r7, #28]
 8005228:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800522c:	f043 030b 	orr.w	r3, r3, #11
 8005230:	6453      	str	r3, [r2, #68]	; 0x44
 8005232:	e015      	b.n	8005260 <HAL_PCD_IRQHandler+0x5c2>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8005234:	69fb      	ldr	r3, [r7, #28]
 8005236:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800523a:	695b      	ldr	r3, [r3, #20]
 800523c:	69fa      	ldr	r2, [r7, #28]
 800523e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005242:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8005246:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 800524a:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 800524c:	69fb      	ldr	r3, [r7, #28]
 800524e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005252:	691b      	ldr	r3, [r3, #16]
 8005254:	69fa      	ldr	r2, [r7, #28]
 8005256:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800525a:	f043 030b 	orr.w	r3, r3, #11
 800525e:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8005260:	69fb      	ldr	r3, [r7, #28]
 8005262:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	69fa      	ldr	r2, [r7, #28]
 800526a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800526e:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8005272:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	6818      	ldr	r0, [r3, #0]
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	691b      	ldr	r3, [r3, #16]
 800527c:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8005284:	461a      	mov	r2, r3
 8005286:	f004 f857 	bl	8009338 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	695a      	ldr	r2, [r3, #20]
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8005298:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	4618      	mov	r0, r3
 80052a0:	f003 ff85 	bl	80091ae <USB_ReadInterrupts>
 80052a4:	4603      	mov	r3, r0
 80052a6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80052aa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80052ae:	d124      	bne.n	80052fa <HAL_PCD_IRQHandler+0x65c>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	4618      	mov	r0, r3
 80052b6:	f004 f81b 	bl	80092f0 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	4618      	mov	r0, r3
 80052c0:	f003 f9a2 	bl	8008608 <USB_GetDevSpeed>
 80052c4:	4603      	mov	r3, r0
 80052c6:	461a      	mov	r2, r3
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	681c      	ldr	r4, [r3, #0]
 80052d0:	f001 f872 	bl	80063b8 <HAL_RCC_GetHCLKFreq>
 80052d4:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80052da:	b2db      	uxtb	r3, r3
 80052dc:	461a      	mov	r2, r3
 80052de:	4620      	mov	r0, r4
 80052e0:	f003 f8cc 	bl	800847c <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 80052e4:	6878      	ldr	r0, [r7, #4]
 80052e6:	f007 ff2e 	bl	800d146 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	695a      	ldr	r2, [r3, #20]
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 80052f8:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	4618      	mov	r0, r3
 8005300:	f003 ff55 	bl	80091ae <USB_ReadInterrupts>
 8005304:	4603      	mov	r3, r0
 8005306:	f003 0308 	and.w	r3, r3, #8
 800530a:	2b08      	cmp	r3, #8
 800530c:	d10a      	bne.n	8005324 <HAL_PCD_IRQHandler+0x686>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 800530e:	6878      	ldr	r0, [r7, #4]
 8005310:	f007 ff0b 	bl	800d12a <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	695a      	ldr	r2, [r3, #20]
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	f002 0208 	and.w	r2, r2, #8
 8005322:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	4618      	mov	r0, r3
 800532a:	f003 ff40 	bl	80091ae <USB_ReadInterrupts>
 800532e:	4603      	mov	r3, r0
 8005330:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005334:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005338:	d10f      	bne.n	800535a <HAL_PCD_IRQHandler+0x6bc>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 800533a:	2300      	movs	r3, #0
 800533c:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 800533e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005340:	b2db      	uxtb	r3, r3
 8005342:	4619      	mov	r1, r3
 8005344:	6878      	ldr	r0, [r7, #4]
 8005346:	f007 ff6d 	bl	800d224 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	695a      	ldr	r2, [r3, #20]
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8005358:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	4618      	mov	r0, r3
 8005360:	f003 ff25 	bl	80091ae <USB_ReadInterrupts>
 8005364:	4603      	mov	r3, r0
 8005366:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800536a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800536e:	d10f      	bne.n	8005390 <HAL_PCD_IRQHandler+0x6f2>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8005370:	2300      	movs	r3, #0
 8005372:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8005374:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005376:	b2db      	uxtb	r3, r3
 8005378:	4619      	mov	r1, r3
 800537a:	6878      	ldr	r0, [r7, #4]
 800537c:	f007 ff40 	bl	800d200 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	695a      	ldr	r2, [r3, #20]
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 800538e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	4618      	mov	r0, r3
 8005396:	f003 ff0a 	bl	80091ae <USB_ReadInterrupts>
 800539a:	4603      	mov	r3, r0
 800539c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80053a0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80053a4:	d10a      	bne.n	80053bc <HAL_PCD_IRQHandler+0x71e>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 80053a6:	6878      	ldr	r0, [r7, #4]
 80053a8:	f007 ff4e 	bl	800d248 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	695a      	ldr	r2, [r3, #20]
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 80053ba:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	4618      	mov	r0, r3
 80053c2:	f003 fef4 	bl	80091ae <USB_ReadInterrupts>
 80053c6:	4603      	mov	r3, r0
 80053c8:	f003 0304 	and.w	r3, r3, #4
 80053cc:	2b04      	cmp	r3, #4
 80053ce:	d115      	bne.n	80053fc <HAL_PCD_IRQHandler+0x75e>
    {
      temp = hpcd->Instance->GOTGINT;
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	685b      	ldr	r3, [r3, #4]
 80053d6:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 80053d8:	69bb      	ldr	r3, [r7, #24]
 80053da:	f003 0304 	and.w	r3, r3, #4
 80053de:	2b00      	cmp	r3, #0
 80053e0:	d002      	beq.n	80053e8 <HAL_PCD_IRQHandler+0x74a>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 80053e2:	6878      	ldr	r0, [r7, #4]
 80053e4:	f007 ff3e 	bl	800d264 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	6859      	ldr	r1, [r3, #4]
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	69ba      	ldr	r2, [r7, #24]
 80053f4:	430a      	orrs	r2, r1
 80053f6:	605a      	str	r2, [r3, #4]
 80053f8:	e000      	b.n	80053fc <HAL_PCD_IRQHandler+0x75e>
      return;
 80053fa:	bf00      	nop
    }
  }
}
 80053fc:	3734      	adds	r7, #52	; 0x34
 80053fe:	46bd      	mov	sp, r7
 8005400:	bd90      	pop	{r4, r7, pc}

08005402 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8005402:	b580      	push	{r7, lr}
 8005404:	b082      	sub	sp, #8
 8005406:	af00      	add	r7, sp, #0
 8005408:	6078      	str	r0, [r7, #4]
 800540a:	460b      	mov	r3, r1
 800540c:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8005414:	2b01      	cmp	r3, #1
 8005416:	d101      	bne.n	800541c <HAL_PCD_SetAddress+0x1a>
 8005418:	2302      	movs	r3, #2
 800541a:	e013      	b.n	8005444 <HAL_PCD_SetAddress+0x42>
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	2201      	movs	r2, #1
 8005420:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	78fa      	ldrb	r2, [r7, #3]
 8005428:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	78fa      	ldrb	r2, [r7, #3]
 8005432:	4611      	mov	r1, r2
 8005434:	4618      	mov	r0, r3
 8005436:	f003 fe94 	bl	8009162 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	2200      	movs	r2, #0
 800543e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8005442:	2300      	movs	r3, #0
}
 8005444:	4618      	mov	r0, r3
 8005446:	3708      	adds	r7, #8
 8005448:	46bd      	mov	sp, r7
 800544a:	bd80      	pop	{r7, pc}

0800544c <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800544c:	b580      	push	{r7, lr}
 800544e:	b084      	sub	sp, #16
 8005450:	af00      	add	r7, sp, #0
 8005452:	6078      	str	r0, [r7, #4]
 8005454:	4608      	mov	r0, r1
 8005456:	4611      	mov	r1, r2
 8005458:	461a      	mov	r2, r3
 800545a:	4603      	mov	r3, r0
 800545c:	70fb      	strb	r3, [r7, #3]
 800545e:	460b      	mov	r3, r1
 8005460:	803b      	strh	r3, [r7, #0]
 8005462:	4613      	mov	r3, r2
 8005464:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8005466:	2300      	movs	r3, #0
 8005468:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800546a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800546e:	2b00      	cmp	r3, #0
 8005470:	da0f      	bge.n	8005492 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005472:	78fb      	ldrb	r3, [r7, #3]
 8005474:	f003 020f 	and.w	r2, r3, #15
 8005478:	4613      	mov	r3, r2
 800547a:	00db      	lsls	r3, r3, #3
 800547c:	1a9b      	subs	r3, r3, r2
 800547e:	009b      	lsls	r3, r3, #2
 8005480:	3338      	adds	r3, #56	; 0x38
 8005482:	687a      	ldr	r2, [r7, #4]
 8005484:	4413      	add	r3, r2
 8005486:	3304      	adds	r3, #4
 8005488:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800548a:	68fb      	ldr	r3, [r7, #12]
 800548c:	2201      	movs	r2, #1
 800548e:	705a      	strb	r2, [r3, #1]
 8005490:	e00f      	b.n	80054b2 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005492:	78fb      	ldrb	r3, [r7, #3]
 8005494:	f003 020f 	and.w	r2, r3, #15
 8005498:	4613      	mov	r3, r2
 800549a:	00db      	lsls	r3, r3, #3
 800549c:	1a9b      	subs	r3, r3, r2
 800549e:	009b      	lsls	r3, r3, #2
 80054a0:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80054a4:	687a      	ldr	r2, [r7, #4]
 80054a6:	4413      	add	r3, r2
 80054a8:	3304      	adds	r3, #4
 80054aa:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80054ac:	68fb      	ldr	r3, [r7, #12]
 80054ae:	2200      	movs	r2, #0
 80054b0:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80054b2:	78fb      	ldrb	r3, [r7, #3]
 80054b4:	f003 030f 	and.w	r3, r3, #15
 80054b8:	b2da      	uxtb	r2, r3
 80054ba:	68fb      	ldr	r3, [r7, #12]
 80054bc:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80054be:	883a      	ldrh	r2, [r7, #0]
 80054c0:	68fb      	ldr	r3, [r7, #12]
 80054c2:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 80054c4:	68fb      	ldr	r3, [r7, #12]
 80054c6:	78ba      	ldrb	r2, [r7, #2]
 80054c8:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 80054ca:	68fb      	ldr	r3, [r7, #12]
 80054cc:	785b      	ldrb	r3, [r3, #1]
 80054ce:	2b00      	cmp	r3, #0
 80054d0:	d004      	beq.n	80054dc <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80054d2:	68fb      	ldr	r3, [r7, #12]
 80054d4:	781b      	ldrb	r3, [r3, #0]
 80054d6:	b29a      	uxth	r2, r3
 80054d8:	68fb      	ldr	r3, [r7, #12]
 80054da:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80054dc:	78bb      	ldrb	r3, [r7, #2]
 80054de:	2b02      	cmp	r3, #2
 80054e0:	d102      	bne.n	80054e8 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 80054e2:	68fb      	ldr	r3, [r7, #12]
 80054e4:	2200      	movs	r2, #0
 80054e6:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80054ee:	2b01      	cmp	r3, #1
 80054f0:	d101      	bne.n	80054f6 <HAL_PCD_EP_Open+0xaa>
 80054f2:	2302      	movs	r3, #2
 80054f4:	e00e      	b.n	8005514 <HAL_PCD_EP_Open+0xc8>
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	2201      	movs	r2, #1
 80054fa:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	68f9      	ldr	r1, [r7, #12]
 8005504:	4618      	mov	r0, r3
 8005506:	f003 f8a4 	bl	8008652 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	2200      	movs	r2, #0
 800550e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 8005512:	7afb      	ldrb	r3, [r7, #11]
}
 8005514:	4618      	mov	r0, r3
 8005516:	3710      	adds	r7, #16
 8005518:	46bd      	mov	sp, r7
 800551a:	bd80      	pop	{r7, pc}

0800551c <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800551c:	b580      	push	{r7, lr}
 800551e:	b086      	sub	sp, #24
 8005520:	af00      	add	r7, sp, #0
 8005522:	60f8      	str	r0, [r7, #12]
 8005524:	607a      	str	r2, [r7, #4]
 8005526:	603b      	str	r3, [r7, #0]
 8005528:	460b      	mov	r3, r1
 800552a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800552c:	7afb      	ldrb	r3, [r7, #11]
 800552e:	f003 020f 	and.w	r2, r3, #15
 8005532:	4613      	mov	r3, r2
 8005534:	00db      	lsls	r3, r3, #3
 8005536:	1a9b      	subs	r3, r3, r2
 8005538:	009b      	lsls	r3, r3, #2
 800553a:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800553e:	68fa      	ldr	r2, [r7, #12]
 8005540:	4413      	add	r3, r2
 8005542:	3304      	adds	r3, #4
 8005544:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8005546:	697b      	ldr	r3, [r7, #20]
 8005548:	687a      	ldr	r2, [r7, #4]
 800554a:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800554c:	697b      	ldr	r3, [r7, #20]
 800554e:	683a      	ldr	r2, [r7, #0]
 8005550:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8005552:	697b      	ldr	r3, [r7, #20]
 8005554:	2200      	movs	r2, #0
 8005556:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 8005558:	697b      	ldr	r3, [r7, #20]
 800555a:	2200      	movs	r2, #0
 800555c:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800555e:	7afb      	ldrb	r3, [r7, #11]
 8005560:	f003 030f 	and.w	r3, r3, #15
 8005564:	b2da      	uxtb	r2, r3
 8005566:	697b      	ldr	r3, [r7, #20]
 8005568:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800556a:	68fb      	ldr	r3, [r7, #12]
 800556c:	691b      	ldr	r3, [r3, #16]
 800556e:	2b01      	cmp	r3, #1
 8005570:	d102      	bne.n	8005578 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8005572:	687a      	ldr	r2, [r7, #4]
 8005574:	697b      	ldr	r3, [r7, #20]
 8005576:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8005578:	7afb      	ldrb	r3, [r7, #11]
 800557a:	f003 030f 	and.w	r3, r3, #15
 800557e:	2b00      	cmp	r3, #0
 8005580:	d109      	bne.n	8005596 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8005582:	68fb      	ldr	r3, [r7, #12]
 8005584:	6818      	ldr	r0, [r3, #0]
 8005586:	68fb      	ldr	r3, [r7, #12]
 8005588:	691b      	ldr	r3, [r3, #16]
 800558a:	b2db      	uxtb	r3, r3
 800558c:	461a      	mov	r2, r3
 800558e:	6979      	ldr	r1, [r7, #20]
 8005590:	f003 fb2a 	bl	8008be8 <USB_EP0StartXfer>
 8005594:	e008      	b.n	80055a8 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8005596:	68fb      	ldr	r3, [r7, #12]
 8005598:	6818      	ldr	r0, [r3, #0]
 800559a:	68fb      	ldr	r3, [r7, #12]
 800559c:	691b      	ldr	r3, [r3, #16]
 800559e:	b2db      	uxtb	r3, r3
 80055a0:	461a      	mov	r2, r3
 80055a2:	6979      	ldr	r1, [r7, #20]
 80055a4:	f003 f8dc 	bl	8008760 <USB_EPStartXfer>
  }

  return HAL_OK;
 80055a8:	2300      	movs	r3, #0
}
 80055aa:	4618      	mov	r0, r3
 80055ac:	3718      	adds	r7, #24
 80055ae:	46bd      	mov	sp, r7
 80055b0:	bd80      	pop	{r7, pc}

080055b2 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80055b2:	b580      	push	{r7, lr}
 80055b4:	b086      	sub	sp, #24
 80055b6:	af00      	add	r7, sp, #0
 80055b8:	60f8      	str	r0, [r7, #12]
 80055ba:	607a      	str	r2, [r7, #4]
 80055bc:	603b      	str	r3, [r7, #0]
 80055be:	460b      	mov	r3, r1
 80055c0:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80055c2:	7afb      	ldrb	r3, [r7, #11]
 80055c4:	f003 020f 	and.w	r2, r3, #15
 80055c8:	4613      	mov	r3, r2
 80055ca:	00db      	lsls	r3, r3, #3
 80055cc:	1a9b      	subs	r3, r3, r2
 80055ce:	009b      	lsls	r3, r3, #2
 80055d0:	3338      	adds	r3, #56	; 0x38
 80055d2:	68fa      	ldr	r2, [r7, #12]
 80055d4:	4413      	add	r3, r2
 80055d6:	3304      	adds	r3, #4
 80055d8:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80055da:	697b      	ldr	r3, [r7, #20]
 80055dc:	687a      	ldr	r2, [r7, #4]
 80055de:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80055e0:	697b      	ldr	r3, [r7, #20]
 80055e2:	683a      	ldr	r2, [r7, #0]
 80055e4:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 80055e6:	697b      	ldr	r3, [r7, #20]
 80055e8:	2200      	movs	r2, #0
 80055ea:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 80055ec:	697b      	ldr	r3, [r7, #20]
 80055ee:	2201      	movs	r2, #1
 80055f0:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80055f2:	7afb      	ldrb	r3, [r7, #11]
 80055f4:	f003 030f 	and.w	r3, r3, #15
 80055f8:	b2da      	uxtb	r2, r3
 80055fa:	697b      	ldr	r3, [r7, #20]
 80055fc:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80055fe:	68fb      	ldr	r3, [r7, #12]
 8005600:	691b      	ldr	r3, [r3, #16]
 8005602:	2b01      	cmp	r3, #1
 8005604:	d102      	bne.n	800560c <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8005606:	687a      	ldr	r2, [r7, #4]
 8005608:	697b      	ldr	r3, [r7, #20]
 800560a:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800560c:	7afb      	ldrb	r3, [r7, #11]
 800560e:	f003 030f 	and.w	r3, r3, #15
 8005612:	2b00      	cmp	r3, #0
 8005614:	d109      	bne.n	800562a <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8005616:	68fb      	ldr	r3, [r7, #12]
 8005618:	6818      	ldr	r0, [r3, #0]
 800561a:	68fb      	ldr	r3, [r7, #12]
 800561c:	691b      	ldr	r3, [r3, #16]
 800561e:	b2db      	uxtb	r3, r3
 8005620:	461a      	mov	r2, r3
 8005622:	6979      	ldr	r1, [r7, #20]
 8005624:	f003 fae0 	bl	8008be8 <USB_EP0StartXfer>
 8005628:	e008      	b.n	800563c <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800562a:	68fb      	ldr	r3, [r7, #12]
 800562c:	6818      	ldr	r0, [r3, #0]
 800562e:	68fb      	ldr	r3, [r7, #12]
 8005630:	691b      	ldr	r3, [r3, #16]
 8005632:	b2db      	uxtb	r3, r3
 8005634:	461a      	mov	r2, r3
 8005636:	6979      	ldr	r1, [r7, #20]
 8005638:	f003 f892 	bl	8008760 <USB_EPStartXfer>
  }

  return HAL_OK;
 800563c:	2300      	movs	r3, #0
}
 800563e:	4618      	mov	r0, r3
 8005640:	3718      	adds	r7, #24
 8005642:	46bd      	mov	sp, r7
 8005644:	bd80      	pop	{r7, pc}

08005646 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005646:	b580      	push	{r7, lr}
 8005648:	b084      	sub	sp, #16
 800564a:	af00      	add	r7, sp, #0
 800564c:	6078      	str	r0, [r7, #4]
 800564e:	460b      	mov	r3, r1
 8005650:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8005652:	78fb      	ldrb	r3, [r7, #3]
 8005654:	f003 020f 	and.w	r2, r3, #15
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	685b      	ldr	r3, [r3, #4]
 800565c:	429a      	cmp	r2, r3
 800565e:	d901      	bls.n	8005664 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8005660:	2301      	movs	r3, #1
 8005662:	e050      	b.n	8005706 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8005664:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005668:	2b00      	cmp	r3, #0
 800566a:	da0f      	bge.n	800568c <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800566c:	78fb      	ldrb	r3, [r7, #3]
 800566e:	f003 020f 	and.w	r2, r3, #15
 8005672:	4613      	mov	r3, r2
 8005674:	00db      	lsls	r3, r3, #3
 8005676:	1a9b      	subs	r3, r3, r2
 8005678:	009b      	lsls	r3, r3, #2
 800567a:	3338      	adds	r3, #56	; 0x38
 800567c:	687a      	ldr	r2, [r7, #4]
 800567e:	4413      	add	r3, r2
 8005680:	3304      	adds	r3, #4
 8005682:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005684:	68fb      	ldr	r3, [r7, #12]
 8005686:	2201      	movs	r2, #1
 8005688:	705a      	strb	r2, [r3, #1]
 800568a:	e00d      	b.n	80056a8 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800568c:	78fa      	ldrb	r2, [r7, #3]
 800568e:	4613      	mov	r3, r2
 8005690:	00db      	lsls	r3, r3, #3
 8005692:	1a9b      	subs	r3, r3, r2
 8005694:	009b      	lsls	r3, r3, #2
 8005696:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800569a:	687a      	ldr	r2, [r7, #4]
 800569c:	4413      	add	r3, r2
 800569e:	3304      	adds	r3, #4
 80056a0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80056a2:	68fb      	ldr	r3, [r7, #12]
 80056a4:	2200      	movs	r2, #0
 80056a6:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80056a8:	68fb      	ldr	r3, [r7, #12]
 80056aa:	2201      	movs	r2, #1
 80056ac:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80056ae:	78fb      	ldrb	r3, [r7, #3]
 80056b0:	f003 030f 	and.w	r3, r3, #15
 80056b4:	b2da      	uxtb	r2, r3
 80056b6:	68fb      	ldr	r3, [r7, #12]
 80056b8:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80056c0:	2b01      	cmp	r3, #1
 80056c2:	d101      	bne.n	80056c8 <HAL_PCD_EP_SetStall+0x82>
 80056c4:	2302      	movs	r3, #2
 80056c6:	e01e      	b.n	8005706 <HAL_PCD_EP_SetStall+0xc0>
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	2201      	movs	r2, #1
 80056cc:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	68f9      	ldr	r1, [r7, #12]
 80056d6:	4618      	mov	r0, r3
 80056d8:	f003 fc6f 	bl	8008fba <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80056dc:	78fb      	ldrb	r3, [r7, #3]
 80056de:	f003 030f 	and.w	r3, r3, #15
 80056e2:	2b00      	cmp	r3, #0
 80056e4:	d10a      	bne.n	80056fc <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	6818      	ldr	r0, [r3, #0]
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	691b      	ldr	r3, [r3, #16]
 80056ee:	b2d9      	uxtb	r1, r3
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80056f6:	461a      	mov	r2, r3
 80056f8:	f003 fe1e 	bl	8009338 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	2200      	movs	r2, #0
 8005700:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8005704:	2300      	movs	r3, #0
}
 8005706:	4618      	mov	r0, r3
 8005708:	3710      	adds	r7, #16
 800570a:	46bd      	mov	sp, r7
 800570c:	bd80      	pop	{r7, pc}

0800570e <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800570e:	b580      	push	{r7, lr}
 8005710:	b084      	sub	sp, #16
 8005712:	af00      	add	r7, sp, #0
 8005714:	6078      	str	r0, [r7, #4]
 8005716:	460b      	mov	r3, r1
 8005718:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800571a:	78fb      	ldrb	r3, [r7, #3]
 800571c:	f003 020f 	and.w	r2, r3, #15
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	685b      	ldr	r3, [r3, #4]
 8005724:	429a      	cmp	r2, r3
 8005726:	d901      	bls.n	800572c <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8005728:	2301      	movs	r3, #1
 800572a:	e042      	b.n	80057b2 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800572c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005730:	2b00      	cmp	r3, #0
 8005732:	da0f      	bge.n	8005754 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005734:	78fb      	ldrb	r3, [r7, #3]
 8005736:	f003 020f 	and.w	r2, r3, #15
 800573a:	4613      	mov	r3, r2
 800573c:	00db      	lsls	r3, r3, #3
 800573e:	1a9b      	subs	r3, r3, r2
 8005740:	009b      	lsls	r3, r3, #2
 8005742:	3338      	adds	r3, #56	; 0x38
 8005744:	687a      	ldr	r2, [r7, #4]
 8005746:	4413      	add	r3, r2
 8005748:	3304      	adds	r3, #4
 800574a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800574c:	68fb      	ldr	r3, [r7, #12]
 800574e:	2201      	movs	r2, #1
 8005750:	705a      	strb	r2, [r3, #1]
 8005752:	e00f      	b.n	8005774 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005754:	78fb      	ldrb	r3, [r7, #3]
 8005756:	f003 020f 	and.w	r2, r3, #15
 800575a:	4613      	mov	r3, r2
 800575c:	00db      	lsls	r3, r3, #3
 800575e:	1a9b      	subs	r3, r3, r2
 8005760:	009b      	lsls	r3, r3, #2
 8005762:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8005766:	687a      	ldr	r2, [r7, #4]
 8005768:	4413      	add	r3, r2
 800576a:	3304      	adds	r3, #4
 800576c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800576e:	68fb      	ldr	r3, [r7, #12]
 8005770:	2200      	movs	r2, #0
 8005772:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8005774:	68fb      	ldr	r3, [r7, #12]
 8005776:	2200      	movs	r2, #0
 8005778:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800577a:	78fb      	ldrb	r3, [r7, #3]
 800577c:	f003 030f 	and.w	r3, r3, #15
 8005780:	b2da      	uxtb	r2, r3
 8005782:	68fb      	ldr	r3, [r7, #12]
 8005784:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800578c:	2b01      	cmp	r3, #1
 800578e:	d101      	bne.n	8005794 <HAL_PCD_EP_ClrStall+0x86>
 8005790:	2302      	movs	r3, #2
 8005792:	e00e      	b.n	80057b2 <HAL_PCD_EP_ClrStall+0xa4>
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	2201      	movs	r2, #1
 8005798:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	68f9      	ldr	r1, [r7, #12]
 80057a2:	4618      	mov	r0, r3
 80057a4:	f003 fc77 	bl	8009096 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	2200      	movs	r2, #0
 80057ac:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 80057b0:	2300      	movs	r3, #0
}
 80057b2:	4618      	mov	r0, r3
 80057b4:	3710      	adds	r7, #16
 80057b6:	46bd      	mov	sp, r7
 80057b8:	bd80      	pop	{r7, pc}

080057ba <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80057ba:	b580      	push	{r7, lr}
 80057bc:	b08a      	sub	sp, #40	; 0x28
 80057be:	af02      	add	r7, sp, #8
 80057c0:	6078      	str	r0, [r7, #4]
 80057c2:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80057ca:	697b      	ldr	r3, [r7, #20]
 80057cc:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 80057ce:	683a      	ldr	r2, [r7, #0]
 80057d0:	4613      	mov	r3, r2
 80057d2:	00db      	lsls	r3, r3, #3
 80057d4:	1a9b      	subs	r3, r3, r2
 80057d6:	009b      	lsls	r3, r3, #2
 80057d8:	3338      	adds	r3, #56	; 0x38
 80057da:	687a      	ldr	r2, [r7, #4]
 80057dc:	4413      	add	r3, r2
 80057de:	3304      	adds	r3, #4
 80057e0:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 80057e2:	68fb      	ldr	r3, [r7, #12]
 80057e4:	699a      	ldr	r2, [r3, #24]
 80057e6:	68fb      	ldr	r3, [r7, #12]
 80057e8:	695b      	ldr	r3, [r3, #20]
 80057ea:	429a      	cmp	r2, r3
 80057ec:	d901      	bls.n	80057f2 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 80057ee:	2301      	movs	r3, #1
 80057f0:	e06c      	b.n	80058cc <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 80057f2:	68fb      	ldr	r3, [r7, #12]
 80057f4:	695a      	ldr	r2, [r3, #20]
 80057f6:	68fb      	ldr	r3, [r7, #12]
 80057f8:	699b      	ldr	r3, [r3, #24]
 80057fa:	1ad3      	subs	r3, r2, r3
 80057fc:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 80057fe:	68fb      	ldr	r3, [r7, #12]
 8005800:	689b      	ldr	r3, [r3, #8]
 8005802:	69fa      	ldr	r2, [r7, #28]
 8005804:	429a      	cmp	r2, r3
 8005806:	d902      	bls.n	800580e <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8005808:	68fb      	ldr	r3, [r7, #12]
 800580a:	689b      	ldr	r3, [r3, #8]
 800580c:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 800580e:	69fb      	ldr	r3, [r7, #28]
 8005810:	3303      	adds	r3, #3
 8005812:	089b      	lsrs	r3, r3, #2
 8005814:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8005816:	e02b      	b.n	8005870 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8005818:	68fb      	ldr	r3, [r7, #12]
 800581a:	695a      	ldr	r2, [r3, #20]
 800581c:	68fb      	ldr	r3, [r7, #12]
 800581e:	699b      	ldr	r3, [r3, #24]
 8005820:	1ad3      	subs	r3, r2, r3
 8005822:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8005824:	68fb      	ldr	r3, [r7, #12]
 8005826:	689b      	ldr	r3, [r3, #8]
 8005828:	69fa      	ldr	r2, [r7, #28]
 800582a:	429a      	cmp	r2, r3
 800582c:	d902      	bls.n	8005834 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 800582e:	68fb      	ldr	r3, [r7, #12]
 8005830:	689b      	ldr	r3, [r3, #8]
 8005832:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8005834:	69fb      	ldr	r3, [r7, #28]
 8005836:	3303      	adds	r3, #3
 8005838:	089b      	lsrs	r3, r3, #2
 800583a:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800583c:	68fb      	ldr	r3, [r7, #12]
 800583e:	68d9      	ldr	r1, [r3, #12]
 8005840:	683b      	ldr	r3, [r7, #0]
 8005842:	b2da      	uxtb	r2, r3
 8005844:	69fb      	ldr	r3, [r7, #28]
 8005846:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800584c:	b2db      	uxtb	r3, r3
 800584e:	9300      	str	r3, [sp, #0]
 8005850:	4603      	mov	r3, r0
 8005852:	6978      	ldr	r0, [r7, #20]
 8005854:	f003 fb1b 	bl	8008e8e <USB_WritePacket>

    ep->xfer_buff  += len;
 8005858:	68fb      	ldr	r3, [r7, #12]
 800585a:	68da      	ldr	r2, [r3, #12]
 800585c:	69fb      	ldr	r3, [r7, #28]
 800585e:	441a      	add	r2, r3
 8005860:	68fb      	ldr	r3, [r7, #12]
 8005862:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8005864:	68fb      	ldr	r3, [r7, #12]
 8005866:	699a      	ldr	r2, [r3, #24]
 8005868:	69fb      	ldr	r3, [r7, #28]
 800586a:	441a      	add	r2, r3
 800586c:	68fb      	ldr	r3, [r7, #12]
 800586e:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8005870:	683b      	ldr	r3, [r7, #0]
 8005872:	015a      	lsls	r2, r3, #5
 8005874:	693b      	ldr	r3, [r7, #16]
 8005876:	4413      	add	r3, r2
 8005878:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800587c:	699b      	ldr	r3, [r3, #24]
 800587e:	b29b      	uxth	r3, r3
 8005880:	69ba      	ldr	r2, [r7, #24]
 8005882:	429a      	cmp	r2, r3
 8005884:	d809      	bhi.n	800589a <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8005886:	68fb      	ldr	r3, [r7, #12]
 8005888:	699a      	ldr	r2, [r3, #24]
 800588a:	68fb      	ldr	r3, [r7, #12]
 800588c:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800588e:	429a      	cmp	r2, r3
 8005890:	d203      	bcs.n	800589a <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8005892:	68fb      	ldr	r3, [r7, #12]
 8005894:	695b      	ldr	r3, [r3, #20]
 8005896:	2b00      	cmp	r3, #0
 8005898:	d1be      	bne.n	8005818 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 800589a:	68fb      	ldr	r3, [r7, #12]
 800589c:	695a      	ldr	r2, [r3, #20]
 800589e:	68fb      	ldr	r3, [r7, #12]
 80058a0:	699b      	ldr	r3, [r3, #24]
 80058a2:	429a      	cmp	r2, r3
 80058a4:	d811      	bhi.n	80058ca <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80058a6:	683b      	ldr	r3, [r7, #0]
 80058a8:	f003 030f 	and.w	r3, r3, #15
 80058ac:	2201      	movs	r2, #1
 80058ae:	fa02 f303 	lsl.w	r3, r2, r3
 80058b2:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80058b4:	693b      	ldr	r3, [r7, #16]
 80058b6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80058ba:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80058bc:	68bb      	ldr	r3, [r7, #8]
 80058be:	43db      	mvns	r3, r3
 80058c0:	6939      	ldr	r1, [r7, #16]
 80058c2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80058c6:	4013      	ands	r3, r2
 80058c8:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 80058ca:	2300      	movs	r3, #0
}
 80058cc:	4618      	mov	r0, r3
 80058ce:	3720      	adds	r7, #32
 80058d0:	46bd      	mov	sp, r7
 80058d2:	bd80      	pop	{r7, pc}

080058d4 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80058d4:	b580      	push	{r7, lr}
 80058d6:	b086      	sub	sp, #24
 80058d8:	af00      	add	r7, sp, #0
 80058da:	6078      	str	r0, [r7, #4]
 80058dc:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80058e4:	697b      	ldr	r3, [r7, #20]
 80058e6:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80058e8:	697b      	ldr	r3, [r7, #20]
 80058ea:	333c      	adds	r3, #60	; 0x3c
 80058ec:	3304      	adds	r3, #4
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80058f2:	683b      	ldr	r3, [r7, #0]
 80058f4:	015a      	lsls	r2, r3, #5
 80058f6:	693b      	ldr	r3, [r7, #16]
 80058f8:	4413      	add	r3, r2
 80058fa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80058fe:	689b      	ldr	r3, [r3, #8]
 8005900:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	691b      	ldr	r3, [r3, #16]
 8005906:	2b01      	cmp	r3, #1
 8005908:	f040 80a0 	bne.w	8005a4c <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 800590c:	68bb      	ldr	r3, [r7, #8]
 800590e:	f003 0308 	and.w	r3, r3, #8
 8005912:	2b00      	cmp	r3, #0
 8005914:	d015      	beq.n	8005942 <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005916:	68fb      	ldr	r3, [r7, #12]
 8005918:	4a72      	ldr	r2, [pc, #456]	; (8005ae4 <PCD_EP_OutXfrComplete_int+0x210>)
 800591a:	4293      	cmp	r3, r2
 800591c:	f240 80dd 	bls.w	8005ada <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8005920:	68bb      	ldr	r3, [r7, #8]
 8005922:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005926:	2b00      	cmp	r3, #0
 8005928:	f000 80d7 	beq.w	8005ada <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800592c:	683b      	ldr	r3, [r7, #0]
 800592e:	015a      	lsls	r2, r3, #5
 8005930:	693b      	ldr	r3, [r7, #16]
 8005932:	4413      	add	r3, r2
 8005934:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005938:	461a      	mov	r2, r3
 800593a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800593e:	6093      	str	r3, [r2, #8]
 8005940:	e0cb      	b.n	8005ada <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8005942:	68bb      	ldr	r3, [r7, #8]
 8005944:	f003 0320 	and.w	r3, r3, #32
 8005948:	2b00      	cmp	r3, #0
 800594a:	d009      	beq.n	8005960 <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800594c:	683b      	ldr	r3, [r7, #0]
 800594e:	015a      	lsls	r2, r3, #5
 8005950:	693b      	ldr	r3, [r7, #16]
 8005952:	4413      	add	r3, r2
 8005954:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005958:	461a      	mov	r2, r3
 800595a:	2320      	movs	r3, #32
 800595c:	6093      	str	r3, [r2, #8]
 800595e:	e0bc      	b.n	8005ada <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8005960:	68bb      	ldr	r3, [r7, #8]
 8005962:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8005966:	2b00      	cmp	r3, #0
 8005968:	f040 80b7 	bne.w	8005ada <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800596c:	68fb      	ldr	r3, [r7, #12]
 800596e:	4a5d      	ldr	r2, [pc, #372]	; (8005ae4 <PCD_EP_OutXfrComplete_int+0x210>)
 8005970:	4293      	cmp	r3, r2
 8005972:	d90f      	bls.n	8005994 <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8005974:	68bb      	ldr	r3, [r7, #8]
 8005976:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800597a:	2b00      	cmp	r3, #0
 800597c:	d00a      	beq.n	8005994 <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800597e:	683b      	ldr	r3, [r7, #0]
 8005980:	015a      	lsls	r2, r3, #5
 8005982:	693b      	ldr	r3, [r7, #16]
 8005984:	4413      	add	r3, r2
 8005986:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800598a:	461a      	mov	r2, r3
 800598c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005990:	6093      	str	r3, [r2, #8]
 8005992:	e0a2      	b.n	8005ada <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 8005994:	6879      	ldr	r1, [r7, #4]
 8005996:	683a      	ldr	r2, [r7, #0]
 8005998:	4613      	mov	r3, r2
 800599a:	00db      	lsls	r3, r3, #3
 800599c:	1a9b      	subs	r3, r3, r2
 800599e:	009b      	lsls	r3, r3, #2
 80059a0:	440b      	add	r3, r1
 80059a2:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80059a6:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 80059a8:	683b      	ldr	r3, [r7, #0]
 80059aa:	0159      	lsls	r1, r3, #5
 80059ac:	693b      	ldr	r3, [r7, #16]
 80059ae:	440b      	add	r3, r1
 80059b0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80059b4:	691b      	ldr	r3, [r3, #16]
 80059b6:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 80059ba:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 80059bc:	6878      	ldr	r0, [r7, #4]
 80059be:	683a      	ldr	r2, [r7, #0]
 80059c0:	4613      	mov	r3, r2
 80059c2:	00db      	lsls	r3, r3, #3
 80059c4:	1a9b      	subs	r3, r3, r2
 80059c6:	009b      	lsls	r3, r3, #2
 80059c8:	4403      	add	r3, r0
 80059ca:	f503 7305 	add.w	r3, r3, #532	; 0x214
 80059ce:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 80059d0:	6879      	ldr	r1, [r7, #4]
 80059d2:	683a      	ldr	r2, [r7, #0]
 80059d4:	4613      	mov	r3, r2
 80059d6:	00db      	lsls	r3, r3, #3
 80059d8:	1a9b      	subs	r3, r3, r2
 80059da:	009b      	lsls	r3, r3, #2
 80059dc:	440b      	add	r3, r1
 80059de:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80059e2:	6819      	ldr	r1, [r3, #0]
 80059e4:	6878      	ldr	r0, [r7, #4]
 80059e6:	683a      	ldr	r2, [r7, #0]
 80059e8:	4613      	mov	r3, r2
 80059ea:	00db      	lsls	r3, r3, #3
 80059ec:	1a9b      	subs	r3, r3, r2
 80059ee:	009b      	lsls	r3, r3, #2
 80059f0:	4403      	add	r3, r0
 80059f2:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	4419      	add	r1, r3
 80059fa:	6878      	ldr	r0, [r7, #4]
 80059fc:	683a      	ldr	r2, [r7, #0]
 80059fe:	4613      	mov	r3, r2
 8005a00:	00db      	lsls	r3, r3, #3
 8005a02:	1a9b      	subs	r3, r3, r2
 8005a04:	009b      	lsls	r3, r3, #2
 8005a06:	4403      	add	r3, r0
 8005a08:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8005a0c:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8005a0e:	683b      	ldr	r3, [r7, #0]
 8005a10:	2b00      	cmp	r3, #0
 8005a12:	d114      	bne.n	8005a3e <PCD_EP_OutXfrComplete_int+0x16a>
 8005a14:	6879      	ldr	r1, [r7, #4]
 8005a16:	683a      	ldr	r2, [r7, #0]
 8005a18:	4613      	mov	r3, r2
 8005a1a:	00db      	lsls	r3, r3, #3
 8005a1c:	1a9b      	subs	r3, r3, r2
 8005a1e:	009b      	lsls	r3, r3, #2
 8005a20:	440b      	add	r3, r1
 8005a22:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	2b00      	cmp	r3, #0
 8005a2a:	d108      	bne.n	8005a3e <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	6818      	ldr	r0, [r3, #0]
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8005a36:	461a      	mov	r2, r3
 8005a38:	2101      	movs	r1, #1
 8005a3a:	f003 fc7d 	bl	8009338 <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8005a3e:	683b      	ldr	r3, [r7, #0]
 8005a40:	b2db      	uxtb	r3, r3
 8005a42:	4619      	mov	r1, r3
 8005a44:	6878      	ldr	r0, [r7, #4]
 8005a46:	f007 fb3b 	bl	800d0c0 <HAL_PCD_DataOutStageCallback>
 8005a4a:	e046      	b.n	8005ada <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8005a4c:	68fb      	ldr	r3, [r7, #12]
 8005a4e:	4a26      	ldr	r2, [pc, #152]	; (8005ae8 <PCD_EP_OutXfrComplete_int+0x214>)
 8005a50:	4293      	cmp	r3, r2
 8005a52:	d124      	bne.n	8005a9e <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8005a54:	68bb      	ldr	r3, [r7, #8]
 8005a56:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005a5a:	2b00      	cmp	r3, #0
 8005a5c:	d00a      	beq.n	8005a74 <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8005a5e:	683b      	ldr	r3, [r7, #0]
 8005a60:	015a      	lsls	r2, r3, #5
 8005a62:	693b      	ldr	r3, [r7, #16]
 8005a64:	4413      	add	r3, r2
 8005a66:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a6a:	461a      	mov	r2, r3
 8005a6c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005a70:	6093      	str	r3, [r2, #8]
 8005a72:	e032      	b.n	8005ada <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8005a74:	68bb      	ldr	r3, [r7, #8]
 8005a76:	f003 0320 	and.w	r3, r3, #32
 8005a7a:	2b00      	cmp	r3, #0
 8005a7c:	d008      	beq.n	8005a90 <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8005a7e:	683b      	ldr	r3, [r7, #0]
 8005a80:	015a      	lsls	r2, r3, #5
 8005a82:	693b      	ldr	r3, [r7, #16]
 8005a84:	4413      	add	r3, r2
 8005a86:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a8a:	461a      	mov	r2, r3
 8005a8c:	2320      	movs	r3, #32
 8005a8e:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8005a90:	683b      	ldr	r3, [r7, #0]
 8005a92:	b2db      	uxtb	r3, r3
 8005a94:	4619      	mov	r1, r3
 8005a96:	6878      	ldr	r0, [r7, #4]
 8005a98:	f007 fb12 	bl	800d0c0 <HAL_PCD_DataOutStageCallback>
 8005a9c:	e01d      	b.n	8005ada <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8005a9e:	683b      	ldr	r3, [r7, #0]
 8005aa0:	2b00      	cmp	r3, #0
 8005aa2:	d114      	bne.n	8005ace <PCD_EP_OutXfrComplete_int+0x1fa>
 8005aa4:	6879      	ldr	r1, [r7, #4]
 8005aa6:	683a      	ldr	r2, [r7, #0]
 8005aa8:	4613      	mov	r3, r2
 8005aaa:	00db      	lsls	r3, r3, #3
 8005aac:	1a9b      	subs	r3, r3, r2
 8005aae:	009b      	lsls	r3, r3, #2
 8005ab0:	440b      	add	r3, r1
 8005ab2:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	2b00      	cmp	r3, #0
 8005aba:	d108      	bne.n	8005ace <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	6818      	ldr	r0, [r3, #0]
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8005ac6:	461a      	mov	r2, r3
 8005ac8:	2100      	movs	r1, #0
 8005aca:	f003 fc35 	bl	8009338 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8005ace:	683b      	ldr	r3, [r7, #0]
 8005ad0:	b2db      	uxtb	r3, r3
 8005ad2:	4619      	mov	r1, r3
 8005ad4:	6878      	ldr	r0, [r7, #4]
 8005ad6:	f007 faf3 	bl	800d0c0 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8005ada:	2300      	movs	r3, #0
}
 8005adc:	4618      	mov	r0, r3
 8005ade:	3718      	adds	r7, #24
 8005ae0:	46bd      	mov	sp, r7
 8005ae2:	bd80      	pop	{r7, pc}
 8005ae4:	4f54300a 	.word	0x4f54300a
 8005ae8:	4f54310a 	.word	0x4f54310a

08005aec <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8005aec:	b580      	push	{r7, lr}
 8005aee:	b086      	sub	sp, #24
 8005af0:	af00      	add	r7, sp, #0
 8005af2:	6078      	str	r0, [r7, #4]
 8005af4:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005afc:	697b      	ldr	r3, [r7, #20]
 8005afe:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8005b00:	697b      	ldr	r3, [r7, #20]
 8005b02:	333c      	adds	r3, #60	; 0x3c
 8005b04:	3304      	adds	r3, #4
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8005b0a:	683b      	ldr	r3, [r7, #0]
 8005b0c:	015a      	lsls	r2, r3, #5
 8005b0e:	693b      	ldr	r3, [r7, #16]
 8005b10:	4413      	add	r3, r2
 8005b12:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005b16:	689b      	ldr	r3, [r3, #8]
 8005b18:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005b1a:	68fb      	ldr	r3, [r7, #12]
 8005b1c:	4a15      	ldr	r2, [pc, #84]	; (8005b74 <PCD_EP_OutSetupPacket_int+0x88>)
 8005b1e:	4293      	cmp	r3, r2
 8005b20:	d90e      	bls.n	8005b40 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8005b22:	68bb      	ldr	r3, [r7, #8]
 8005b24:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005b28:	2b00      	cmp	r3, #0
 8005b2a:	d009      	beq.n	8005b40 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8005b2c:	683b      	ldr	r3, [r7, #0]
 8005b2e:	015a      	lsls	r2, r3, #5
 8005b30:	693b      	ldr	r3, [r7, #16]
 8005b32:	4413      	add	r3, r2
 8005b34:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005b38:	461a      	mov	r2, r3
 8005b3a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005b3e:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8005b40:	6878      	ldr	r0, [r7, #4]
 8005b42:	f007 faab 	bl	800d09c <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8005b46:	68fb      	ldr	r3, [r7, #12]
 8005b48:	4a0a      	ldr	r2, [pc, #40]	; (8005b74 <PCD_EP_OutSetupPacket_int+0x88>)
 8005b4a:	4293      	cmp	r3, r2
 8005b4c:	d90c      	bls.n	8005b68 <PCD_EP_OutSetupPacket_int+0x7c>
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	691b      	ldr	r3, [r3, #16]
 8005b52:	2b01      	cmp	r3, #1
 8005b54:	d108      	bne.n	8005b68 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	6818      	ldr	r0, [r3, #0]
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8005b60:	461a      	mov	r2, r3
 8005b62:	2101      	movs	r1, #1
 8005b64:	f003 fbe8 	bl	8009338 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8005b68:	2300      	movs	r3, #0
}
 8005b6a:	4618      	mov	r0, r3
 8005b6c:	3718      	adds	r7, #24
 8005b6e:	46bd      	mov	sp, r7
 8005b70:	bd80      	pop	{r7, pc}
 8005b72:	bf00      	nop
 8005b74:	4f54300a 	.word	0x4f54300a

08005b78 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8005b78:	b480      	push	{r7}
 8005b7a:	b083      	sub	sp, #12
 8005b7c:	af00      	add	r7, sp, #0
 8005b7e:	6078      	str	r0, [r7, #4]
 8005b80:	460b      	mov	r3, r1
 8005b82:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8005b84:	bf00      	nop
 8005b86:	370c      	adds	r7, #12
 8005b88:	46bd      	mov	sp, r7
 8005b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b8e:	4770      	bx	lr

08005b90 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005b90:	b580      	push	{r7, lr}
 8005b92:	b086      	sub	sp, #24
 8005b94:	af00      	add	r7, sp, #0
 8005b96:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	2b00      	cmp	r3, #0
 8005b9c:	d101      	bne.n	8005ba2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005b9e:	2301      	movs	r3, #1
 8005ba0:	e264      	b.n	800606c <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	f003 0301 	and.w	r3, r3, #1
 8005baa:	2b00      	cmp	r3, #0
 8005bac:	d075      	beq.n	8005c9a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005bae:	4ba3      	ldr	r3, [pc, #652]	; (8005e3c <HAL_RCC_OscConfig+0x2ac>)
 8005bb0:	689b      	ldr	r3, [r3, #8]
 8005bb2:	f003 030c 	and.w	r3, r3, #12
 8005bb6:	2b04      	cmp	r3, #4
 8005bb8:	d00c      	beq.n	8005bd4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005bba:	4ba0      	ldr	r3, [pc, #640]	; (8005e3c <HAL_RCC_OscConfig+0x2ac>)
 8005bbc:	689b      	ldr	r3, [r3, #8]
 8005bbe:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005bc2:	2b08      	cmp	r3, #8
 8005bc4:	d112      	bne.n	8005bec <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005bc6:	4b9d      	ldr	r3, [pc, #628]	; (8005e3c <HAL_RCC_OscConfig+0x2ac>)
 8005bc8:	685b      	ldr	r3, [r3, #4]
 8005bca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005bce:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005bd2:	d10b      	bne.n	8005bec <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005bd4:	4b99      	ldr	r3, [pc, #612]	; (8005e3c <HAL_RCC_OscConfig+0x2ac>)
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005bdc:	2b00      	cmp	r3, #0
 8005bde:	d05b      	beq.n	8005c98 <HAL_RCC_OscConfig+0x108>
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	685b      	ldr	r3, [r3, #4]
 8005be4:	2b00      	cmp	r3, #0
 8005be6:	d157      	bne.n	8005c98 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005be8:	2301      	movs	r3, #1
 8005bea:	e23f      	b.n	800606c <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	685b      	ldr	r3, [r3, #4]
 8005bf0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005bf4:	d106      	bne.n	8005c04 <HAL_RCC_OscConfig+0x74>
 8005bf6:	4b91      	ldr	r3, [pc, #580]	; (8005e3c <HAL_RCC_OscConfig+0x2ac>)
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	4a90      	ldr	r2, [pc, #576]	; (8005e3c <HAL_RCC_OscConfig+0x2ac>)
 8005bfc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005c00:	6013      	str	r3, [r2, #0]
 8005c02:	e01d      	b.n	8005c40 <HAL_RCC_OscConfig+0xb0>
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	685b      	ldr	r3, [r3, #4]
 8005c08:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005c0c:	d10c      	bne.n	8005c28 <HAL_RCC_OscConfig+0x98>
 8005c0e:	4b8b      	ldr	r3, [pc, #556]	; (8005e3c <HAL_RCC_OscConfig+0x2ac>)
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	4a8a      	ldr	r2, [pc, #552]	; (8005e3c <HAL_RCC_OscConfig+0x2ac>)
 8005c14:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005c18:	6013      	str	r3, [r2, #0]
 8005c1a:	4b88      	ldr	r3, [pc, #544]	; (8005e3c <HAL_RCC_OscConfig+0x2ac>)
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	4a87      	ldr	r2, [pc, #540]	; (8005e3c <HAL_RCC_OscConfig+0x2ac>)
 8005c20:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005c24:	6013      	str	r3, [r2, #0]
 8005c26:	e00b      	b.n	8005c40 <HAL_RCC_OscConfig+0xb0>
 8005c28:	4b84      	ldr	r3, [pc, #528]	; (8005e3c <HAL_RCC_OscConfig+0x2ac>)
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	4a83      	ldr	r2, [pc, #524]	; (8005e3c <HAL_RCC_OscConfig+0x2ac>)
 8005c2e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005c32:	6013      	str	r3, [r2, #0]
 8005c34:	4b81      	ldr	r3, [pc, #516]	; (8005e3c <HAL_RCC_OscConfig+0x2ac>)
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	4a80      	ldr	r2, [pc, #512]	; (8005e3c <HAL_RCC_OscConfig+0x2ac>)
 8005c3a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005c3e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	685b      	ldr	r3, [r3, #4]
 8005c44:	2b00      	cmp	r3, #0
 8005c46:	d013      	beq.n	8005c70 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005c48:	f7fd fba8 	bl	800339c <HAL_GetTick>
 8005c4c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005c4e:	e008      	b.n	8005c62 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005c50:	f7fd fba4 	bl	800339c <HAL_GetTick>
 8005c54:	4602      	mov	r2, r0
 8005c56:	693b      	ldr	r3, [r7, #16]
 8005c58:	1ad3      	subs	r3, r2, r3
 8005c5a:	2b64      	cmp	r3, #100	; 0x64
 8005c5c:	d901      	bls.n	8005c62 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8005c5e:	2303      	movs	r3, #3
 8005c60:	e204      	b.n	800606c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005c62:	4b76      	ldr	r3, [pc, #472]	; (8005e3c <HAL_RCC_OscConfig+0x2ac>)
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005c6a:	2b00      	cmp	r3, #0
 8005c6c:	d0f0      	beq.n	8005c50 <HAL_RCC_OscConfig+0xc0>
 8005c6e:	e014      	b.n	8005c9a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005c70:	f7fd fb94 	bl	800339c <HAL_GetTick>
 8005c74:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005c76:	e008      	b.n	8005c8a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005c78:	f7fd fb90 	bl	800339c <HAL_GetTick>
 8005c7c:	4602      	mov	r2, r0
 8005c7e:	693b      	ldr	r3, [r7, #16]
 8005c80:	1ad3      	subs	r3, r2, r3
 8005c82:	2b64      	cmp	r3, #100	; 0x64
 8005c84:	d901      	bls.n	8005c8a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005c86:	2303      	movs	r3, #3
 8005c88:	e1f0      	b.n	800606c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005c8a:	4b6c      	ldr	r3, [pc, #432]	; (8005e3c <HAL_RCC_OscConfig+0x2ac>)
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005c92:	2b00      	cmp	r3, #0
 8005c94:	d1f0      	bne.n	8005c78 <HAL_RCC_OscConfig+0xe8>
 8005c96:	e000      	b.n	8005c9a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005c98:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	f003 0302 	and.w	r3, r3, #2
 8005ca2:	2b00      	cmp	r3, #0
 8005ca4:	d063      	beq.n	8005d6e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005ca6:	4b65      	ldr	r3, [pc, #404]	; (8005e3c <HAL_RCC_OscConfig+0x2ac>)
 8005ca8:	689b      	ldr	r3, [r3, #8]
 8005caa:	f003 030c 	and.w	r3, r3, #12
 8005cae:	2b00      	cmp	r3, #0
 8005cb0:	d00b      	beq.n	8005cca <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005cb2:	4b62      	ldr	r3, [pc, #392]	; (8005e3c <HAL_RCC_OscConfig+0x2ac>)
 8005cb4:	689b      	ldr	r3, [r3, #8]
 8005cb6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005cba:	2b08      	cmp	r3, #8
 8005cbc:	d11c      	bne.n	8005cf8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005cbe:	4b5f      	ldr	r3, [pc, #380]	; (8005e3c <HAL_RCC_OscConfig+0x2ac>)
 8005cc0:	685b      	ldr	r3, [r3, #4]
 8005cc2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005cc6:	2b00      	cmp	r3, #0
 8005cc8:	d116      	bne.n	8005cf8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005cca:	4b5c      	ldr	r3, [pc, #368]	; (8005e3c <HAL_RCC_OscConfig+0x2ac>)
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	f003 0302 	and.w	r3, r3, #2
 8005cd2:	2b00      	cmp	r3, #0
 8005cd4:	d005      	beq.n	8005ce2 <HAL_RCC_OscConfig+0x152>
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	68db      	ldr	r3, [r3, #12]
 8005cda:	2b01      	cmp	r3, #1
 8005cdc:	d001      	beq.n	8005ce2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8005cde:	2301      	movs	r3, #1
 8005ce0:	e1c4      	b.n	800606c <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005ce2:	4b56      	ldr	r3, [pc, #344]	; (8005e3c <HAL_RCC_OscConfig+0x2ac>)
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	691b      	ldr	r3, [r3, #16]
 8005cee:	00db      	lsls	r3, r3, #3
 8005cf0:	4952      	ldr	r1, [pc, #328]	; (8005e3c <HAL_RCC_OscConfig+0x2ac>)
 8005cf2:	4313      	orrs	r3, r2
 8005cf4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005cf6:	e03a      	b.n	8005d6e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	68db      	ldr	r3, [r3, #12]
 8005cfc:	2b00      	cmp	r3, #0
 8005cfe:	d020      	beq.n	8005d42 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005d00:	4b4f      	ldr	r3, [pc, #316]	; (8005e40 <HAL_RCC_OscConfig+0x2b0>)
 8005d02:	2201      	movs	r2, #1
 8005d04:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005d06:	f7fd fb49 	bl	800339c <HAL_GetTick>
 8005d0a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005d0c:	e008      	b.n	8005d20 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005d0e:	f7fd fb45 	bl	800339c <HAL_GetTick>
 8005d12:	4602      	mov	r2, r0
 8005d14:	693b      	ldr	r3, [r7, #16]
 8005d16:	1ad3      	subs	r3, r2, r3
 8005d18:	2b02      	cmp	r3, #2
 8005d1a:	d901      	bls.n	8005d20 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8005d1c:	2303      	movs	r3, #3
 8005d1e:	e1a5      	b.n	800606c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005d20:	4b46      	ldr	r3, [pc, #280]	; (8005e3c <HAL_RCC_OscConfig+0x2ac>)
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	f003 0302 	and.w	r3, r3, #2
 8005d28:	2b00      	cmp	r3, #0
 8005d2a:	d0f0      	beq.n	8005d0e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005d2c:	4b43      	ldr	r3, [pc, #268]	; (8005e3c <HAL_RCC_OscConfig+0x2ac>)
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	691b      	ldr	r3, [r3, #16]
 8005d38:	00db      	lsls	r3, r3, #3
 8005d3a:	4940      	ldr	r1, [pc, #256]	; (8005e3c <HAL_RCC_OscConfig+0x2ac>)
 8005d3c:	4313      	orrs	r3, r2
 8005d3e:	600b      	str	r3, [r1, #0]
 8005d40:	e015      	b.n	8005d6e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005d42:	4b3f      	ldr	r3, [pc, #252]	; (8005e40 <HAL_RCC_OscConfig+0x2b0>)
 8005d44:	2200      	movs	r2, #0
 8005d46:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005d48:	f7fd fb28 	bl	800339c <HAL_GetTick>
 8005d4c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005d4e:	e008      	b.n	8005d62 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005d50:	f7fd fb24 	bl	800339c <HAL_GetTick>
 8005d54:	4602      	mov	r2, r0
 8005d56:	693b      	ldr	r3, [r7, #16]
 8005d58:	1ad3      	subs	r3, r2, r3
 8005d5a:	2b02      	cmp	r3, #2
 8005d5c:	d901      	bls.n	8005d62 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8005d5e:	2303      	movs	r3, #3
 8005d60:	e184      	b.n	800606c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005d62:	4b36      	ldr	r3, [pc, #216]	; (8005e3c <HAL_RCC_OscConfig+0x2ac>)
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	f003 0302 	and.w	r3, r3, #2
 8005d6a:	2b00      	cmp	r3, #0
 8005d6c:	d1f0      	bne.n	8005d50 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	f003 0308 	and.w	r3, r3, #8
 8005d76:	2b00      	cmp	r3, #0
 8005d78:	d030      	beq.n	8005ddc <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	695b      	ldr	r3, [r3, #20]
 8005d7e:	2b00      	cmp	r3, #0
 8005d80:	d016      	beq.n	8005db0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005d82:	4b30      	ldr	r3, [pc, #192]	; (8005e44 <HAL_RCC_OscConfig+0x2b4>)
 8005d84:	2201      	movs	r2, #1
 8005d86:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005d88:	f7fd fb08 	bl	800339c <HAL_GetTick>
 8005d8c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005d8e:	e008      	b.n	8005da2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005d90:	f7fd fb04 	bl	800339c <HAL_GetTick>
 8005d94:	4602      	mov	r2, r0
 8005d96:	693b      	ldr	r3, [r7, #16]
 8005d98:	1ad3      	subs	r3, r2, r3
 8005d9a:	2b02      	cmp	r3, #2
 8005d9c:	d901      	bls.n	8005da2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8005d9e:	2303      	movs	r3, #3
 8005da0:	e164      	b.n	800606c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005da2:	4b26      	ldr	r3, [pc, #152]	; (8005e3c <HAL_RCC_OscConfig+0x2ac>)
 8005da4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005da6:	f003 0302 	and.w	r3, r3, #2
 8005daa:	2b00      	cmp	r3, #0
 8005dac:	d0f0      	beq.n	8005d90 <HAL_RCC_OscConfig+0x200>
 8005dae:	e015      	b.n	8005ddc <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005db0:	4b24      	ldr	r3, [pc, #144]	; (8005e44 <HAL_RCC_OscConfig+0x2b4>)
 8005db2:	2200      	movs	r2, #0
 8005db4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005db6:	f7fd faf1 	bl	800339c <HAL_GetTick>
 8005dba:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005dbc:	e008      	b.n	8005dd0 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005dbe:	f7fd faed 	bl	800339c <HAL_GetTick>
 8005dc2:	4602      	mov	r2, r0
 8005dc4:	693b      	ldr	r3, [r7, #16]
 8005dc6:	1ad3      	subs	r3, r2, r3
 8005dc8:	2b02      	cmp	r3, #2
 8005dca:	d901      	bls.n	8005dd0 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8005dcc:	2303      	movs	r3, #3
 8005dce:	e14d      	b.n	800606c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005dd0:	4b1a      	ldr	r3, [pc, #104]	; (8005e3c <HAL_RCC_OscConfig+0x2ac>)
 8005dd2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005dd4:	f003 0302 	and.w	r3, r3, #2
 8005dd8:	2b00      	cmp	r3, #0
 8005dda:	d1f0      	bne.n	8005dbe <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	f003 0304 	and.w	r3, r3, #4
 8005de4:	2b00      	cmp	r3, #0
 8005de6:	f000 80a0 	beq.w	8005f2a <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005dea:	2300      	movs	r3, #0
 8005dec:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005dee:	4b13      	ldr	r3, [pc, #76]	; (8005e3c <HAL_RCC_OscConfig+0x2ac>)
 8005df0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005df2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005df6:	2b00      	cmp	r3, #0
 8005df8:	d10f      	bne.n	8005e1a <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005dfa:	2300      	movs	r3, #0
 8005dfc:	60bb      	str	r3, [r7, #8]
 8005dfe:	4b0f      	ldr	r3, [pc, #60]	; (8005e3c <HAL_RCC_OscConfig+0x2ac>)
 8005e00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e02:	4a0e      	ldr	r2, [pc, #56]	; (8005e3c <HAL_RCC_OscConfig+0x2ac>)
 8005e04:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005e08:	6413      	str	r3, [r2, #64]	; 0x40
 8005e0a:	4b0c      	ldr	r3, [pc, #48]	; (8005e3c <HAL_RCC_OscConfig+0x2ac>)
 8005e0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e0e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005e12:	60bb      	str	r3, [r7, #8]
 8005e14:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005e16:	2301      	movs	r3, #1
 8005e18:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005e1a:	4b0b      	ldr	r3, [pc, #44]	; (8005e48 <HAL_RCC_OscConfig+0x2b8>)
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005e22:	2b00      	cmp	r3, #0
 8005e24:	d121      	bne.n	8005e6a <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005e26:	4b08      	ldr	r3, [pc, #32]	; (8005e48 <HAL_RCC_OscConfig+0x2b8>)
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	4a07      	ldr	r2, [pc, #28]	; (8005e48 <HAL_RCC_OscConfig+0x2b8>)
 8005e2c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005e30:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005e32:	f7fd fab3 	bl	800339c <HAL_GetTick>
 8005e36:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005e38:	e011      	b.n	8005e5e <HAL_RCC_OscConfig+0x2ce>
 8005e3a:	bf00      	nop
 8005e3c:	40023800 	.word	0x40023800
 8005e40:	42470000 	.word	0x42470000
 8005e44:	42470e80 	.word	0x42470e80
 8005e48:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005e4c:	f7fd faa6 	bl	800339c <HAL_GetTick>
 8005e50:	4602      	mov	r2, r0
 8005e52:	693b      	ldr	r3, [r7, #16]
 8005e54:	1ad3      	subs	r3, r2, r3
 8005e56:	2b02      	cmp	r3, #2
 8005e58:	d901      	bls.n	8005e5e <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8005e5a:	2303      	movs	r3, #3
 8005e5c:	e106      	b.n	800606c <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005e5e:	4b85      	ldr	r3, [pc, #532]	; (8006074 <HAL_RCC_OscConfig+0x4e4>)
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005e66:	2b00      	cmp	r3, #0
 8005e68:	d0f0      	beq.n	8005e4c <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	689b      	ldr	r3, [r3, #8]
 8005e6e:	2b01      	cmp	r3, #1
 8005e70:	d106      	bne.n	8005e80 <HAL_RCC_OscConfig+0x2f0>
 8005e72:	4b81      	ldr	r3, [pc, #516]	; (8006078 <HAL_RCC_OscConfig+0x4e8>)
 8005e74:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005e76:	4a80      	ldr	r2, [pc, #512]	; (8006078 <HAL_RCC_OscConfig+0x4e8>)
 8005e78:	f043 0301 	orr.w	r3, r3, #1
 8005e7c:	6713      	str	r3, [r2, #112]	; 0x70
 8005e7e:	e01c      	b.n	8005eba <HAL_RCC_OscConfig+0x32a>
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	689b      	ldr	r3, [r3, #8]
 8005e84:	2b05      	cmp	r3, #5
 8005e86:	d10c      	bne.n	8005ea2 <HAL_RCC_OscConfig+0x312>
 8005e88:	4b7b      	ldr	r3, [pc, #492]	; (8006078 <HAL_RCC_OscConfig+0x4e8>)
 8005e8a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005e8c:	4a7a      	ldr	r2, [pc, #488]	; (8006078 <HAL_RCC_OscConfig+0x4e8>)
 8005e8e:	f043 0304 	orr.w	r3, r3, #4
 8005e92:	6713      	str	r3, [r2, #112]	; 0x70
 8005e94:	4b78      	ldr	r3, [pc, #480]	; (8006078 <HAL_RCC_OscConfig+0x4e8>)
 8005e96:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005e98:	4a77      	ldr	r2, [pc, #476]	; (8006078 <HAL_RCC_OscConfig+0x4e8>)
 8005e9a:	f043 0301 	orr.w	r3, r3, #1
 8005e9e:	6713      	str	r3, [r2, #112]	; 0x70
 8005ea0:	e00b      	b.n	8005eba <HAL_RCC_OscConfig+0x32a>
 8005ea2:	4b75      	ldr	r3, [pc, #468]	; (8006078 <HAL_RCC_OscConfig+0x4e8>)
 8005ea4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005ea6:	4a74      	ldr	r2, [pc, #464]	; (8006078 <HAL_RCC_OscConfig+0x4e8>)
 8005ea8:	f023 0301 	bic.w	r3, r3, #1
 8005eac:	6713      	str	r3, [r2, #112]	; 0x70
 8005eae:	4b72      	ldr	r3, [pc, #456]	; (8006078 <HAL_RCC_OscConfig+0x4e8>)
 8005eb0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005eb2:	4a71      	ldr	r2, [pc, #452]	; (8006078 <HAL_RCC_OscConfig+0x4e8>)
 8005eb4:	f023 0304 	bic.w	r3, r3, #4
 8005eb8:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	689b      	ldr	r3, [r3, #8]
 8005ebe:	2b00      	cmp	r3, #0
 8005ec0:	d015      	beq.n	8005eee <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005ec2:	f7fd fa6b 	bl	800339c <HAL_GetTick>
 8005ec6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005ec8:	e00a      	b.n	8005ee0 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005eca:	f7fd fa67 	bl	800339c <HAL_GetTick>
 8005ece:	4602      	mov	r2, r0
 8005ed0:	693b      	ldr	r3, [r7, #16]
 8005ed2:	1ad3      	subs	r3, r2, r3
 8005ed4:	f241 3288 	movw	r2, #5000	; 0x1388
 8005ed8:	4293      	cmp	r3, r2
 8005eda:	d901      	bls.n	8005ee0 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8005edc:	2303      	movs	r3, #3
 8005ede:	e0c5      	b.n	800606c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005ee0:	4b65      	ldr	r3, [pc, #404]	; (8006078 <HAL_RCC_OscConfig+0x4e8>)
 8005ee2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005ee4:	f003 0302 	and.w	r3, r3, #2
 8005ee8:	2b00      	cmp	r3, #0
 8005eea:	d0ee      	beq.n	8005eca <HAL_RCC_OscConfig+0x33a>
 8005eec:	e014      	b.n	8005f18 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005eee:	f7fd fa55 	bl	800339c <HAL_GetTick>
 8005ef2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005ef4:	e00a      	b.n	8005f0c <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005ef6:	f7fd fa51 	bl	800339c <HAL_GetTick>
 8005efa:	4602      	mov	r2, r0
 8005efc:	693b      	ldr	r3, [r7, #16]
 8005efe:	1ad3      	subs	r3, r2, r3
 8005f00:	f241 3288 	movw	r2, #5000	; 0x1388
 8005f04:	4293      	cmp	r3, r2
 8005f06:	d901      	bls.n	8005f0c <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8005f08:	2303      	movs	r3, #3
 8005f0a:	e0af      	b.n	800606c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005f0c:	4b5a      	ldr	r3, [pc, #360]	; (8006078 <HAL_RCC_OscConfig+0x4e8>)
 8005f0e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005f10:	f003 0302 	and.w	r3, r3, #2
 8005f14:	2b00      	cmp	r3, #0
 8005f16:	d1ee      	bne.n	8005ef6 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005f18:	7dfb      	ldrb	r3, [r7, #23]
 8005f1a:	2b01      	cmp	r3, #1
 8005f1c:	d105      	bne.n	8005f2a <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005f1e:	4b56      	ldr	r3, [pc, #344]	; (8006078 <HAL_RCC_OscConfig+0x4e8>)
 8005f20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f22:	4a55      	ldr	r2, [pc, #340]	; (8006078 <HAL_RCC_OscConfig+0x4e8>)
 8005f24:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005f28:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	699b      	ldr	r3, [r3, #24]
 8005f2e:	2b00      	cmp	r3, #0
 8005f30:	f000 809b 	beq.w	800606a <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005f34:	4b50      	ldr	r3, [pc, #320]	; (8006078 <HAL_RCC_OscConfig+0x4e8>)
 8005f36:	689b      	ldr	r3, [r3, #8]
 8005f38:	f003 030c 	and.w	r3, r3, #12
 8005f3c:	2b08      	cmp	r3, #8
 8005f3e:	d05c      	beq.n	8005ffa <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	699b      	ldr	r3, [r3, #24]
 8005f44:	2b02      	cmp	r3, #2
 8005f46:	d141      	bne.n	8005fcc <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005f48:	4b4c      	ldr	r3, [pc, #304]	; (800607c <HAL_RCC_OscConfig+0x4ec>)
 8005f4a:	2200      	movs	r2, #0
 8005f4c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005f4e:	f7fd fa25 	bl	800339c <HAL_GetTick>
 8005f52:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005f54:	e008      	b.n	8005f68 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005f56:	f7fd fa21 	bl	800339c <HAL_GetTick>
 8005f5a:	4602      	mov	r2, r0
 8005f5c:	693b      	ldr	r3, [r7, #16]
 8005f5e:	1ad3      	subs	r3, r2, r3
 8005f60:	2b02      	cmp	r3, #2
 8005f62:	d901      	bls.n	8005f68 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8005f64:	2303      	movs	r3, #3
 8005f66:	e081      	b.n	800606c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005f68:	4b43      	ldr	r3, [pc, #268]	; (8006078 <HAL_RCC_OscConfig+0x4e8>)
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005f70:	2b00      	cmp	r3, #0
 8005f72:	d1f0      	bne.n	8005f56 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	69da      	ldr	r2, [r3, #28]
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	6a1b      	ldr	r3, [r3, #32]
 8005f7c:	431a      	orrs	r2, r3
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f82:	019b      	lsls	r3, r3, #6
 8005f84:	431a      	orrs	r2, r3
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f8a:	085b      	lsrs	r3, r3, #1
 8005f8c:	3b01      	subs	r3, #1
 8005f8e:	041b      	lsls	r3, r3, #16
 8005f90:	431a      	orrs	r2, r3
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f96:	061b      	lsls	r3, r3, #24
 8005f98:	4937      	ldr	r1, [pc, #220]	; (8006078 <HAL_RCC_OscConfig+0x4e8>)
 8005f9a:	4313      	orrs	r3, r2
 8005f9c:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005f9e:	4b37      	ldr	r3, [pc, #220]	; (800607c <HAL_RCC_OscConfig+0x4ec>)
 8005fa0:	2201      	movs	r2, #1
 8005fa2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005fa4:	f7fd f9fa 	bl	800339c <HAL_GetTick>
 8005fa8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005faa:	e008      	b.n	8005fbe <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005fac:	f7fd f9f6 	bl	800339c <HAL_GetTick>
 8005fb0:	4602      	mov	r2, r0
 8005fb2:	693b      	ldr	r3, [r7, #16]
 8005fb4:	1ad3      	subs	r3, r2, r3
 8005fb6:	2b02      	cmp	r3, #2
 8005fb8:	d901      	bls.n	8005fbe <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8005fba:	2303      	movs	r3, #3
 8005fbc:	e056      	b.n	800606c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005fbe:	4b2e      	ldr	r3, [pc, #184]	; (8006078 <HAL_RCC_OscConfig+0x4e8>)
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005fc6:	2b00      	cmp	r3, #0
 8005fc8:	d0f0      	beq.n	8005fac <HAL_RCC_OscConfig+0x41c>
 8005fca:	e04e      	b.n	800606a <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005fcc:	4b2b      	ldr	r3, [pc, #172]	; (800607c <HAL_RCC_OscConfig+0x4ec>)
 8005fce:	2200      	movs	r2, #0
 8005fd0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005fd2:	f7fd f9e3 	bl	800339c <HAL_GetTick>
 8005fd6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005fd8:	e008      	b.n	8005fec <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005fda:	f7fd f9df 	bl	800339c <HAL_GetTick>
 8005fde:	4602      	mov	r2, r0
 8005fe0:	693b      	ldr	r3, [r7, #16]
 8005fe2:	1ad3      	subs	r3, r2, r3
 8005fe4:	2b02      	cmp	r3, #2
 8005fe6:	d901      	bls.n	8005fec <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8005fe8:	2303      	movs	r3, #3
 8005fea:	e03f      	b.n	800606c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005fec:	4b22      	ldr	r3, [pc, #136]	; (8006078 <HAL_RCC_OscConfig+0x4e8>)
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005ff4:	2b00      	cmp	r3, #0
 8005ff6:	d1f0      	bne.n	8005fda <HAL_RCC_OscConfig+0x44a>
 8005ff8:	e037      	b.n	800606a <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	699b      	ldr	r3, [r3, #24]
 8005ffe:	2b01      	cmp	r3, #1
 8006000:	d101      	bne.n	8006006 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8006002:	2301      	movs	r3, #1
 8006004:	e032      	b.n	800606c <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8006006:	4b1c      	ldr	r3, [pc, #112]	; (8006078 <HAL_RCC_OscConfig+0x4e8>)
 8006008:	685b      	ldr	r3, [r3, #4]
 800600a:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	699b      	ldr	r3, [r3, #24]
 8006010:	2b01      	cmp	r3, #1
 8006012:	d028      	beq.n	8006066 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006014:	68fb      	ldr	r3, [r7, #12]
 8006016:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800601e:	429a      	cmp	r2, r3
 8006020:	d121      	bne.n	8006066 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006022:	68fb      	ldr	r3, [r7, #12]
 8006024:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800602c:	429a      	cmp	r2, r3
 800602e:	d11a      	bne.n	8006066 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006030:	68fa      	ldr	r2, [r7, #12]
 8006032:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8006036:	4013      	ands	r3, r2
 8006038:	687a      	ldr	r2, [r7, #4]
 800603a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800603c:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800603e:	4293      	cmp	r3, r2
 8006040:	d111      	bne.n	8006066 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006042:	68fb      	ldr	r3, [r7, #12]
 8006044:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800604c:	085b      	lsrs	r3, r3, #1
 800604e:	3b01      	subs	r3, #1
 8006050:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006052:	429a      	cmp	r2, r3
 8006054:	d107      	bne.n	8006066 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8006056:	68fb      	ldr	r3, [r7, #12]
 8006058:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006060:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006062:	429a      	cmp	r2, r3
 8006064:	d001      	beq.n	800606a <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8006066:	2301      	movs	r3, #1
 8006068:	e000      	b.n	800606c <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 800606a:	2300      	movs	r3, #0
}
 800606c:	4618      	mov	r0, r3
 800606e:	3718      	adds	r7, #24
 8006070:	46bd      	mov	sp, r7
 8006072:	bd80      	pop	{r7, pc}
 8006074:	40007000 	.word	0x40007000
 8006078:	40023800 	.word	0x40023800
 800607c:	42470060 	.word	0x42470060

08006080 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006080:	b580      	push	{r7, lr}
 8006082:	b084      	sub	sp, #16
 8006084:	af00      	add	r7, sp, #0
 8006086:	6078      	str	r0, [r7, #4]
 8006088:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	2b00      	cmp	r3, #0
 800608e:	d101      	bne.n	8006094 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006090:	2301      	movs	r3, #1
 8006092:	e0cc      	b.n	800622e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006094:	4b68      	ldr	r3, [pc, #416]	; (8006238 <HAL_RCC_ClockConfig+0x1b8>)
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	f003 0307 	and.w	r3, r3, #7
 800609c:	683a      	ldr	r2, [r7, #0]
 800609e:	429a      	cmp	r2, r3
 80060a0:	d90c      	bls.n	80060bc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80060a2:	4b65      	ldr	r3, [pc, #404]	; (8006238 <HAL_RCC_ClockConfig+0x1b8>)
 80060a4:	683a      	ldr	r2, [r7, #0]
 80060a6:	b2d2      	uxtb	r2, r2
 80060a8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80060aa:	4b63      	ldr	r3, [pc, #396]	; (8006238 <HAL_RCC_ClockConfig+0x1b8>)
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	f003 0307 	and.w	r3, r3, #7
 80060b2:	683a      	ldr	r2, [r7, #0]
 80060b4:	429a      	cmp	r2, r3
 80060b6:	d001      	beq.n	80060bc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80060b8:	2301      	movs	r3, #1
 80060ba:	e0b8      	b.n	800622e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	f003 0302 	and.w	r3, r3, #2
 80060c4:	2b00      	cmp	r3, #0
 80060c6:	d020      	beq.n	800610a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	f003 0304 	and.w	r3, r3, #4
 80060d0:	2b00      	cmp	r3, #0
 80060d2:	d005      	beq.n	80060e0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80060d4:	4b59      	ldr	r3, [pc, #356]	; (800623c <HAL_RCC_ClockConfig+0x1bc>)
 80060d6:	689b      	ldr	r3, [r3, #8]
 80060d8:	4a58      	ldr	r2, [pc, #352]	; (800623c <HAL_RCC_ClockConfig+0x1bc>)
 80060da:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80060de:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	f003 0308 	and.w	r3, r3, #8
 80060e8:	2b00      	cmp	r3, #0
 80060ea:	d005      	beq.n	80060f8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80060ec:	4b53      	ldr	r3, [pc, #332]	; (800623c <HAL_RCC_ClockConfig+0x1bc>)
 80060ee:	689b      	ldr	r3, [r3, #8]
 80060f0:	4a52      	ldr	r2, [pc, #328]	; (800623c <HAL_RCC_ClockConfig+0x1bc>)
 80060f2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80060f6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80060f8:	4b50      	ldr	r3, [pc, #320]	; (800623c <HAL_RCC_ClockConfig+0x1bc>)
 80060fa:	689b      	ldr	r3, [r3, #8]
 80060fc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	689b      	ldr	r3, [r3, #8]
 8006104:	494d      	ldr	r1, [pc, #308]	; (800623c <HAL_RCC_ClockConfig+0x1bc>)
 8006106:	4313      	orrs	r3, r2
 8006108:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	f003 0301 	and.w	r3, r3, #1
 8006112:	2b00      	cmp	r3, #0
 8006114:	d044      	beq.n	80061a0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	685b      	ldr	r3, [r3, #4]
 800611a:	2b01      	cmp	r3, #1
 800611c:	d107      	bne.n	800612e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800611e:	4b47      	ldr	r3, [pc, #284]	; (800623c <HAL_RCC_ClockConfig+0x1bc>)
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006126:	2b00      	cmp	r3, #0
 8006128:	d119      	bne.n	800615e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800612a:	2301      	movs	r3, #1
 800612c:	e07f      	b.n	800622e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	685b      	ldr	r3, [r3, #4]
 8006132:	2b02      	cmp	r3, #2
 8006134:	d003      	beq.n	800613e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800613a:	2b03      	cmp	r3, #3
 800613c:	d107      	bne.n	800614e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800613e:	4b3f      	ldr	r3, [pc, #252]	; (800623c <HAL_RCC_ClockConfig+0x1bc>)
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006146:	2b00      	cmp	r3, #0
 8006148:	d109      	bne.n	800615e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800614a:	2301      	movs	r3, #1
 800614c:	e06f      	b.n	800622e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800614e:	4b3b      	ldr	r3, [pc, #236]	; (800623c <HAL_RCC_ClockConfig+0x1bc>)
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	f003 0302 	and.w	r3, r3, #2
 8006156:	2b00      	cmp	r3, #0
 8006158:	d101      	bne.n	800615e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800615a:	2301      	movs	r3, #1
 800615c:	e067      	b.n	800622e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800615e:	4b37      	ldr	r3, [pc, #220]	; (800623c <HAL_RCC_ClockConfig+0x1bc>)
 8006160:	689b      	ldr	r3, [r3, #8]
 8006162:	f023 0203 	bic.w	r2, r3, #3
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	685b      	ldr	r3, [r3, #4]
 800616a:	4934      	ldr	r1, [pc, #208]	; (800623c <HAL_RCC_ClockConfig+0x1bc>)
 800616c:	4313      	orrs	r3, r2
 800616e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006170:	f7fd f914 	bl	800339c <HAL_GetTick>
 8006174:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006176:	e00a      	b.n	800618e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006178:	f7fd f910 	bl	800339c <HAL_GetTick>
 800617c:	4602      	mov	r2, r0
 800617e:	68fb      	ldr	r3, [r7, #12]
 8006180:	1ad3      	subs	r3, r2, r3
 8006182:	f241 3288 	movw	r2, #5000	; 0x1388
 8006186:	4293      	cmp	r3, r2
 8006188:	d901      	bls.n	800618e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800618a:	2303      	movs	r3, #3
 800618c:	e04f      	b.n	800622e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800618e:	4b2b      	ldr	r3, [pc, #172]	; (800623c <HAL_RCC_ClockConfig+0x1bc>)
 8006190:	689b      	ldr	r3, [r3, #8]
 8006192:	f003 020c 	and.w	r2, r3, #12
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	685b      	ldr	r3, [r3, #4]
 800619a:	009b      	lsls	r3, r3, #2
 800619c:	429a      	cmp	r2, r3
 800619e:	d1eb      	bne.n	8006178 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80061a0:	4b25      	ldr	r3, [pc, #148]	; (8006238 <HAL_RCC_ClockConfig+0x1b8>)
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	f003 0307 	and.w	r3, r3, #7
 80061a8:	683a      	ldr	r2, [r7, #0]
 80061aa:	429a      	cmp	r2, r3
 80061ac:	d20c      	bcs.n	80061c8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80061ae:	4b22      	ldr	r3, [pc, #136]	; (8006238 <HAL_RCC_ClockConfig+0x1b8>)
 80061b0:	683a      	ldr	r2, [r7, #0]
 80061b2:	b2d2      	uxtb	r2, r2
 80061b4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80061b6:	4b20      	ldr	r3, [pc, #128]	; (8006238 <HAL_RCC_ClockConfig+0x1b8>)
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	f003 0307 	and.w	r3, r3, #7
 80061be:	683a      	ldr	r2, [r7, #0]
 80061c0:	429a      	cmp	r2, r3
 80061c2:	d001      	beq.n	80061c8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80061c4:	2301      	movs	r3, #1
 80061c6:	e032      	b.n	800622e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	f003 0304 	and.w	r3, r3, #4
 80061d0:	2b00      	cmp	r3, #0
 80061d2:	d008      	beq.n	80061e6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80061d4:	4b19      	ldr	r3, [pc, #100]	; (800623c <HAL_RCC_ClockConfig+0x1bc>)
 80061d6:	689b      	ldr	r3, [r3, #8]
 80061d8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	68db      	ldr	r3, [r3, #12]
 80061e0:	4916      	ldr	r1, [pc, #88]	; (800623c <HAL_RCC_ClockConfig+0x1bc>)
 80061e2:	4313      	orrs	r3, r2
 80061e4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	f003 0308 	and.w	r3, r3, #8
 80061ee:	2b00      	cmp	r3, #0
 80061f0:	d009      	beq.n	8006206 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80061f2:	4b12      	ldr	r3, [pc, #72]	; (800623c <HAL_RCC_ClockConfig+0x1bc>)
 80061f4:	689b      	ldr	r3, [r3, #8]
 80061f6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	691b      	ldr	r3, [r3, #16]
 80061fe:	00db      	lsls	r3, r3, #3
 8006200:	490e      	ldr	r1, [pc, #56]	; (800623c <HAL_RCC_ClockConfig+0x1bc>)
 8006202:	4313      	orrs	r3, r2
 8006204:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8006206:	f000 f821 	bl	800624c <HAL_RCC_GetSysClockFreq>
 800620a:	4602      	mov	r2, r0
 800620c:	4b0b      	ldr	r3, [pc, #44]	; (800623c <HAL_RCC_ClockConfig+0x1bc>)
 800620e:	689b      	ldr	r3, [r3, #8]
 8006210:	091b      	lsrs	r3, r3, #4
 8006212:	f003 030f 	and.w	r3, r3, #15
 8006216:	490a      	ldr	r1, [pc, #40]	; (8006240 <HAL_RCC_ClockConfig+0x1c0>)
 8006218:	5ccb      	ldrb	r3, [r1, r3]
 800621a:	fa22 f303 	lsr.w	r3, r2, r3
 800621e:	4a09      	ldr	r2, [pc, #36]	; (8006244 <HAL_RCC_ClockConfig+0x1c4>)
 8006220:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8006222:	4b09      	ldr	r3, [pc, #36]	; (8006248 <HAL_RCC_ClockConfig+0x1c8>)
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	4618      	mov	r0, r3
 8006228:	f7fc faf6 	bl	8002818 <HAL_InitTick>

  return HAL_OK;
 800622c:	2300      	movs	r3, #0
}
 800622e:	4618      	mov	r0, r3
 8006230:	3710      	adds	r7, #16
 8006232:	46bd      	mov	sp, r7
 8006234:	bd80      	pop	{r7, pc}
 8006236:	bf00      	nop
 8006238:	40023c00 	.word	0x40023c00
 800623c:	40023800 	.word	0x40023800
 8006240:	0800fad8 	.word	0x0800fad8
 8006244:	20000000 	.word	0x20000000
 8006248:	20000004 	.word	0x20000004

0800624c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800624c:	b5b0      	push	{r4, r5, r7, lr}
 800624e:	b084      	sub	sp, #16
 8006250:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8006252:	2100      	movs	r1, #0
 8006254:	6079      	str	r1, [r7, #4]
 8006256:	2100      	movs	r1, #0
 8006258:	60f9      	str	r1, [r7, #12]
 800625a:	2100      	movs	r1, #0
 800625c:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800625e:	2100      	movs	r1, #0
 8006260:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006262:	4952      	ldr	r1, [pc, #328]	; (80063ac <HAL_RCC_GetSysClockFreq+0x160>)
 8006264:	6889      	ldr	r1, [r1, #8]
 8006266:	f001 010c 	and.w	r1, r1, #12
 800626a:	2908      	cmp	r1, #8
 800626c:	d00d      	beq.n	800628a <HAL_RCC_GetSysClockFreq+0x3e>
 800626e:	2908      	cmp	r1, #8
 8006270:	f200 8094 	bhi.w	800639c <HAL_RCC_GetSysClockFreq+0x150>
 8006274:	2900      	cmp	r1, #0
 8006276:	d002      	beq.n	800627e <HAL_RCC_GetSysClockFreq+0x32>
 8006278:	2904      	cmp	r1, #4
 800627a:	d003      	beq.n	8006284 <HAL_RCC_GetSysClockFreq+0x38>
 800627c:	e08e      	b.n	800639c <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800627e:	4b4c      	ldr	r3, [pc, #304]	; (80063b0 <HAL_RCC_GetSysClockFreq+0x164>)
 8006280:	60bb      	str	r3, [r7, #8]
       break;
 8006282:	e08e      	b.n	80063a2 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8006284:	4b4b      	ldr	r3, [pc, #300]	; (80063b4 <HAL_RCC_GetSysClockFreq+0x168>)
 8006286:	60bb      	str	r3, [r7, #8]
      break;
 8006288:	e08b      	b.n	80063a2 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800628a:	4948      	ldr	r1, [pc, #288]	; (80063ac <HAL_RCC_GetSysClockFreq+0x160>)
 800628c:	6849      	ldr	r1, [r1, #4]
 800628e:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 8006292:	6079      	str	r1, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8006294:	4945      	ldr	r1, [pc, #276]	; (80063ac <HAL_RCC_GetSysClockFreq+0x160>)
 8006296:	6849      	ldr	r1, [r1, #4]
 8006298:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 800629c:	2900      	cmp	r1, #0
 800629e:	d024      	beq.n	80062ea <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80062a0:	4942      	ldr	r1, [pc, #264]	; (80063ac <HAL_RCC_GetSysClockFreq+0x160>)
 80062a2:	6849      	ldr	r1, [r1, #4]
 80062a4:	0989      	lsrs	r1, r1, #6
 80062a6:	4608      	mov	r0, r1
 80062a8:	f04f 0100 	mov.w	r1, #0
 80062ac:	f240 14ff 	movw	r4, #511	; 0x1ff
 80062b0:	f04f 0500 	mov.w	r5, #0
 80062b4:	ea00 0204 	and.w	r2, r0, r4
 80062b8:	ea01 0305 	and.w	r3, r1, r5
 80062bc:	493d      	ldr	r1, [pc, #244]	; (80063b4 <HAL_RCC_GetSysClockFreq+0x168>)
 80062be:	fb01 f003 	mul.w	r0, r1, r3
 80062c2:	2100      	movs	r1, #0
 80062c4:	fb01 f102 	mul.w	r1, r1, r2
 80062c8:	1844      	adds	r4, r0, r1
 80062ca:	493a      	ldr	r1, [pc, #232]	; (80063b4 <HAL_RCC_GetSysClockFreq+0x168>)
 80062cc:	fba2 0101 	umull	r0, r1, r2, r1
 80062d0:	1863      	adds	r3, r4, r1
 80062d2:	4619      	mov	r1, r3
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	461a      	mov	r2, r3
 80062d8:	f04f 0300 	mov.w	r3, #0
 80062dc:	f7fa fc5c 	bl	8000b98 <__aeabi_uldivmod>
 80062e0:	4602      	mov	r2, r0
 80062e2:	460b      	mov	r3, r1
 80062e4:	4613      	mov	r3, r2
 80062e6:	60fb      	str	r3, [r7, #12]
 80062e8:	e04a      	b.n	8006380 <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80062ea:	4b30      	ldr	r3, [pc, #192]	; (80063ac <HAL_RCC_GetSysClockFreq+0x160>)
 80062ec:	685b      	ldr	r3, [r3, #4]
 80062ee:	099b      	lsrs	r3, r3, #6
 80062f0:	461a      	mov	r2, r3
 80062f2:	f04f 0300 	mov.w	r3, #0
 80062f6:	f240 10ff 	movw	r0, #511	; 0x1ff
 80062fa:	f04f 0100 	mov.w	r1, #0
 80062fe:	ea02 0400 	and.w	r4, r2, r0
 8006302:	ea03 0501 	and.w	r5, r3, r1
 8006306:	4620      	mov	r0, r4
 8006308:	4629      	mov	r1, r5
 800630a:	f04f 0200 	mov.w	r2, #0
 800630e:	f04f 0300 	mov.w	r3, #0
 8006312:	014b      	lsls	r3, r1, #5
 8006314:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8006318:	0142      	lsls	r2, r0, #5
 800631a:	4610      	mov	r0, r2
 800631c:	4619      	mov	r1, r3
 800631e:	1b00      	subs	r0, r0, r4
 8006320:	eb61 0105 	sbc.w	r1, r1, r5
 8006324:	f04f 0200 	mov.w	r2, #0
 8006328:	f04f 0300 	mov.w	r3, #0
 800632c:	018b      	lsls	r3, r1, #6
 800632e:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8006332:	0182      	lsls	r2, r0, #6
 8006334:	1a12      	subs	r2, r2, r0
 8006336:	eb63 0301 	sbc.w	r3, r3, r1
 800633a:	f04f 0000 	mov.w	r0, #0
 800633e:	f04f 0100 	mov.w	r1, #0
 8006342:	00d9      	lsls	r1, r3, #3
 8006344:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8006348:	00d0      	lsls	r0, r2, #3
 800634a:	4602      	mov	r2, r0
 800634c:	460b      	mov	r3, r1
 800634e:	1912      	adds	r2, r2, r4
 8006350:	eb45 0303 	adc.w	r3, r5, r3
 8006354:	f04f 0000 	mov.w	r0, #0
 8006358:	f04f 0100 	mov.w	r1, #0
 800635c:	0299      	lsls	r1, r3, #10
 800635e:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8006362:	0290      	lsls	r0, r2, #10
 8006364:	4602      	mov	r2, r0
 8006366:	460b      	mov	r3, r1
 8006368:	4610      	mov	r0, r2
 800636a:	4619      	mov	r1, r3
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	461a      	mov	r2, r3
 8006370:	f04f 0300 	mov.w	r3, #0
 8006374:	f7fa fc10 	bl	8000b98 <__aeabi_uldivmod>
 8006378:	4602      	mov	r2, r0
 800637a:	460b      	mov	r3, r1
 800637c:	4613      	mov	r3, r2
 800637e:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8006380:	4b0a      	ldr	r3, [pc, #40]	; (80063ac <HAL_RCC_GetSysClockFreq+0x160>)
 8006382:	685b      	ldr	r3, [r3, #4]
 8006384:	0c1b      	lsrs	r3, r3, #16
 8006386:	f003 0303 	and.w	r3, r3, #3
 800638a:	3301      	adds	r3, #1
 800638c:	005b      	lsls	r3, r3, #1
 800638e:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8006390:	68fa      	ldr	r2, [r7, #12]
 8006392:	683b      	ldr	r3, [r7, #0]
 8006394:	fbb2 f3f3 	udiv	r3, r2, r3
 8006398:	60bb      	str	r3, [r7, #8]
      break;
 800639a:	e002      	b.n	80063a2 <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800639c:	4b04      	ldr	r3, [pc, #16]	; (80063b0 <HAL_RCC_GetSysClockFreq+0x164>)
 800639e:	60bb      	str	r3, [r7, #8]
      break;
 80063a0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80063a2:	68bb      	ldr	r3, [r7, #8]
}
 80063a4:	4618      	mov	r0, r3
 80063a6:	3710      	adds	r7, #16
 80063a8:	46bd      	mov	sp, r7
 80063aa:	bdb0      	pop	{r4, r5, r7, pc}
 80063ac:	40023800 	.word	0x40023800
 80063b0:	00f42400 	.word	0x00f42400
 80063b4:	00b71b00 	.word	0x00b71b00

080063b8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80063b8:	b480      	push	{r7}
 80063ba:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80063bc:	4b03      	ldr	r3, [pc, #12]	; (80063cc <HAL_RCC_GetHCLKFreq+0x14>)
 80063be:	681b      	ldr	r3, [r3, #0]
}
 80063c0:	4618      	mov	r0, r3
 80063c2:	46bd      	mov	sp, r7
 80063c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063c8:	4770      	bx	lr
 80063ca:	bf00      	nop
 80063cc:	20000000 	.word	0x20000000

080063d0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80063d0:	b580      	push	{r7, lr}
 80063d2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80063d4:	f7ff fff0 	bl	80063b8 <HAL_RCC_GetHCLKFreq>
 80063d8:	4602      	mov	r2, r0
 80063da:	4b05      	ldr	r3, [pc, #20]	; (80063f0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80063dc:	689b      	ldr	r3, [r3, #8]
 80063de:	0a9b      	lsrs	r3, r3, #10
 80063e0:	f003 0307 	and.w	r3, r3, #7
 80063e4:	4903      	ldr	r1, [pc, #12]	; (80063f4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80063e6:	5ccb      	ldrb	r3, [r1, r3]
 80063e8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80063ec:	4618      	mov	r0, r3
 80063ee:	bd80      	pop	{r7, pc}
 80063f0:	40023800 	.word	0x40023800
 80063f4:	0800fae8 	.word	0x0800fae8

080063f8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80063f8:	b580      	push	{r7, lr}
 80063fa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80063fc:	f7ff ffdc 	bl	80063b8 <HAL_RCC_GetHCLKFreq>
 8006400:	4602      	mov	r2, r0
 8006402:	4b05      	ldr	r3, [pc, #20]	; (8006418 <HAL_RCC_GetPCLK2Freq+0x20>)
 8006404:	689b      	ldr	r3, [r3, #8]
 8006406:	0b5b      	lsrs	r3, r3, #13
 8006408:	f003 0307 	and.w	r3, r3, #7
 800640c:	4903      	ldr	r1, [pc, #12]	; (800641c <HAL_RCC_GetPCLK2Freq+0x24>)
 800640e:	5ccb      	ldrb	r3, [r1, r3]
 8006410:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006414:	4618      	mov	r0, r3
 8006416:	bd80      	pop	{r7, pc}
 8006418:	40023800 	.word	0x40023800
 800641c:	0800fae8 	.word	0x0800fae8

08006420 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8006420:	b480      	push	{r7}
 8006422:	b083      	sub	sp, #12
 8006424:	af00      	add	r7, sp, #0
 8006426:	6078      	str	r0, [r7, #4]
 8006428:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	220f      	movs	r2, #15
 800642e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8006430:	4b12      	ldr	r3, [pc, #72]	; (800647c <HAL_RCC_GetClockConfig+0x5c>)
 8006432:	689b      	ldr	r3, [r3, #8]
 8006434:	f003 0203 	and.w	r2, r3, #3
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800643c:	4b0f      	ldr	r3, [pc, #60]	; (800647c <HAL_RCC_GetClockConfig+0x5c>)
 800643e:	689b      	ldr	r3, [r3, #8]
 8006440:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8006448:	4b0c      	ldr	r3, [pc, #48]	; (800647c <HAL_RCC_GetClockConfig+0x5c>)
 800644a:	689b      	ldr	r3, [r3, #8]
 800644c:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8006454:	4b09      	ldr	r3, [pc, #36]	; (800647c <HAL_RCC_GetClockConfig+0x5c>)
 8006456:	689b      	ldr	r3, [r3, #8]
 8006458:	08db      	lsrs	r3, r3, #3
 800645a:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8006462:	4b07      	ldr	r3, [pc, #28]	; (8006480 <HAL_RCC_GetClockConfig+0x60>)
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	f003 0207 	and.w	r2, r3, #7
 800646a:	683b      	ldr	r3, [r7, #0]
 800646c:	601a      	str	r2, [r3, #0]
}
 800646e:	bf00      	nop
 8006470:	370c      	adds	r7, #12
 8006472:	46bd      	mov	sp, r7
 8006474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006478:	4770      	bx	lr
 800647a:	bf00      	nop
 800647c:	40023800 	.word	0x40023800
 8006480:	40023c00 	.word	0x40023c00

08006484 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006484:	b580      	push	{r7, lr}
 8006486:	b086      	sub	sp, #24
 8006488:	af00      	add	r7, sp, #0
 800648a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800648c:	2300      	movs	r3, #0
 800648e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8006490:	2300      	movs	r3, #0
 8006492:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	f003 0301 	and.w	r3, r3, #1
 800649c:	2b00      	cmp	r3, #0
 800649e:	d105      	bne.n	80064ac <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80064a8:	2b00      	cmp	r3, #0
 80064aa:	d035      	beq.n	8006518 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80064ac:	4b62      	ldr	r3, [pc, #392]	; (8006638 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 80064ae:	2200      	movs	r2, #0
 80064b0:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80064b2:	f7fc ff73 	bl	800339c <HAL_GetTick>
 80064b6:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80064b8:	e008      	b.n	80064cc <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80064ba:	f7fc ff6f 	bl	800339c <HAL_GetTick>
 80064be:	4602      	mov	r2, r0
 80064c0:	697b      	ldr	r3, [r7, #20]
 80064c2:	1ad3      	subs	r3, r2, r3
 80064c4:	2b02      	cmp	r3, #2
 80064c6:	d901      	bls.n	80064cc <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80064c8:	2303      	movs	r3, #3
 80064ca:	e0b0      	b.n	800662e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80064cc:	4b5b      	ldr	r3, [pc, #364]	; (800663c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80064d4:	2b00      	cmp	r3, #0
 80064d6:	d1f0      	bne.n	80064ba <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	685b      	ldr	r3, [r3, #4]
 80064dc:	019a      	lsls	r2, r3, #6
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	689b      	ldr	r3, [r3, #8]
 80064e2:	071b      	lsls	r3, r3, #28
 80064e4:	4955      	ldr	r1, [pc, #340]	; (800663c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80064e6:	4313      	orrs	r3, r2
 80064e8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80064ec:	4b52      	ldr	r3, [pc, #328]	; (8006638 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 80064ee:	2201      	movs	r2, #1
 80064f0:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80064f2:	f7fc ff53 	bl	800339c <HAL_GetTick>
 80064f6:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80064f8:	e008      	b.n	800650c <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80064fa:	f7fc ff4f 	bl	800339c <HAL_GetTick>
 80064fe:	4602      	mov	r2, r0
 8006500:	697b      	ldr	r3, [r7, #20]
 8006502:	1ad3      	subs	r3, r2, r3
 8006504:	2b02      	cmp	r3, #2
 8006506:	d901      	bls.n	800650c <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006508:	2303      	movs	r3, #3
 800650a:	e090      	b.n	800662e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800650c:	4b4b      	ldr	r3, [pc, #300]	; (800663c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006514:	2b00      	cmp	r3, #0
 8006516:	d0f0      	beq.n	80064fa <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	f003 0302 	and.w	r3, r3, #2
 8006520:	2b00      	cmp	r3, #0
 8006522:	f000 8083 	beq.w	800662c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8006526:	2300      	movs	r3, #0
 8006528:	60fb      	str	r3, [r7, #12]
 800652a:	4b44      	ldr	r3, [pc, #272]	; (800663c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800652c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800652e:	4a43      	ldr	r2, [pc, #268]	; (800663c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006530:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006534:	6413      	str	r3, [r2, #64]	; 0x40
 8006536:	4b41      	ldr	r3, [pc, #260]	; (800663c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006538:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800653a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800653e:	60fb      	str	r3, [r7, #12]
 8006540:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8006542:	4b3f      	ldr	r3, [pc, #252]	; (8006640 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	4a3e      	ldr	r2, [pc, #248]	; (8006640 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8006548:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800654c:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800654e:	f7fc ff25 	bl	800339c <HAL_GetTick>
 8006552:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8006554:	e008      	b.n	8006568 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8006556:	f7fc ff21 	bl	800339c <HAL_GetTick>
 800655a:	4602      	mov	r2, r0
 800655c:	697b      	ldr	r3, [r7, #20]
 800655e:	1ad3      	subs	r3, r2, r3
 8006560:	2b02      	cmp	r3, #2
 8006562:	d901      	bls.n	8006568 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8006564:	2303      	movs	r3, #3
 8006566:	e062      	b.n	800662e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8006568:	4b35      	ldr	r3, [pc, #212]	; (8006640 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006570:	2b00      	cmp	r3, #0
 8006572:	d0f0      	beq.n	8006556 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8006574:	4b31      	ldr	r3, [pc, #196]	; (800663c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006576:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006578:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800657c:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800657e:	693b      	ldr	r3, [r7, #16]
 8006580:	2b00      	cmp	r3, #0
 8006582:	d02f      	beq.n	80065e4 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	68db      	ldr	r3, [r3, #12]
 8006588:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800658c:	693a      	ldr	r2, [r7, #16]
 800658e:	429a      	cmp	r2, r3
 8006590:	d028      	beq.n	80065e4 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006592:	4b2a      	ldr	r3, [pc, #168]	; (800663c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006594:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006596:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800659a:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800659c:	4b29      	ldr	r3, [pc, #164]	; (8006644 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800659e:	2201      	movs	r2, #1
 80065a0:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80065a2:	4b28      	ldr	r3, [pc, #160]	; (8006644 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80065a4:	2200      	movs	r2, #0
 80065a6:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 80065a8:	4a24      	ldr	r2, [pc, #144]	; (800663c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80065aa:	693b      	ldr	r3, [r7, #16]
 80065ac:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80065ae:	4b23      	ldr	r3, [pc, #140]	; (800663c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80065b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80065b2:	f003 0301 	and.w	r3, r3, #1
 80065b6:	2b01      	cmp	r3, #1
 80065b8:	d114      	bne.n	80065e4 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 80065ba:	f7fc feef 	bl	800339c <HAL_GetTick>
 80065be:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80065c0:	e00a      	b.n	80065d8 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80065c2:	f7fc feeb 	bl	800339c <HAL_GetTick>
 80065c6:	4602      	mov	r2, r0
 80065c8:	697b      	ldr	r3, [r7, #20]
 80065ca:	1ad3      	subs	r3, r2, r3
 80065cc:	f241 3288 	movw	r2, #5000	; 0x1388
 80065d0:	4293      	cmp	r3, r2
 80065d2:	d901      	bls.n	80065d8 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 80065d4:	2303      	movs	r3, #3
 80065d6:	e02a      	b.n	800662e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80065d8:	4b18      	ldr	r3, [pc, #96]	; (800663c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80065da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80065dc:	f003 0302 	and.w	r3, r3, #2
 80065e0:	2b00      	cmp	r3, #0
 80065e2:	d0ee      	beq.n	80065c2 <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	68db      	ldr	r3, [r3, #12]
 80065e8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80065ec:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80065f0:	d10d      	bne.n	800660e <HAL_RCCEx_PeriphCLKConfig+0x18a>
 80065f2:	4b12      	ldr	r3, [pc, #72]	; (800663c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80065f4:	689b      	ldr	r3, [r3, #8]
 80065f6:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	68db      	ldr	r3, [r3, #12]
 80065fe:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8006602:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006606:	490d      	ldr	r1, [pc, #52]	; (800663c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006608:	4313      	orrs	r3, r2
 800660a:	608b      	str	r3, [r1, #8]
 800660c:	e005      	b.n	800661a <HAL_RCCEx_PeriphCLKConfig+0x196>
 800660e:	4b0b      	ldr	r3, [pc, #44]	; (800663c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006610:	689b      	ldr	r3, [r3, #8]
 8006612:	4a0a      	ldr	r2, [pc, #40]	; (800663c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006614:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8006618:	6093      	str	r3, [r2, #8]
 800661a:	4b08      	ldr	r3, [pc, #32]	; (800663c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800661c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	68db      	ldr	r3, [r3, #12]
 8006622:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006626:	4905      	ldr	r1, [pc, #20]	; (800663c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006628:	4313      	orrs	r3, r2
 800662a:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 800662c:	2300      	movs	r3, #0
}
 800662e:	4618      	mov	r0, r3
 8006630:	3718      	adds	r7, #24
 8006632:	46bd      	mov	sp, r7
 8006634:	bd80      	pop	{r7, pc}
 8006636:	bf00      	nop
 8006638:	42470068 	.word	0x42470068
 800663c:	40023800 	.word	0x40023800
 8006640:	40007000 	.word	0x40007000
 8006644:	42470e40 	.word	0x42470e40

08006648 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8006648:	b580      	push	{r7, lr}
 800664a:	b082      	sub	sp, #8
 800664c:	af00      	add	r7, sp, #0
 800664e:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if(hrtc == NULL)
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	2b00      	cmp	r3, #0
 8006654:	d101      	bne.n	800665a <HAL_RTC_Init+0x12>
  {
     return HAL_ERROR;
 8006656:	2301      	movs	r3, #1
 8006658:	e083      	b.n	8006762 <HAL_RTC_Init+0x11a>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if(hrtc->State == HAL_RTC_STATE_RESET)
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	7f5b      	ldrb	r3, [r3, #29]
 800665e:	b2db      	uxtb	r3, r3
 8006660:	2b00      	cmp	r3, #0
 8006662:	d105      	bne.n	8006670 <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	2200      	movs	r2, #0
 8006668:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 800666a:	6878      	ldr	r0, [r7, #4]
 800666c:	f7fb ff8e 	bl	800258c <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	2202      	movs	r2, #2
 8006674:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	681b      	ldr	r3, [r3, #0]
 800667a:	22ca      	movs	r2, #202	; 0xca
 800667c:	625a      	str	r2, [r3, #36]	; 0x24
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	681b      	ldr	r3, [r3, #0]
 8006682:	2253      	movs	r2, #83	; 0x53
 8006684:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8006686:	6878      	ldr	r0, [r7, #4]
 8006688:	f000 f897 	bl	80067ba <RTC_EnterInitMode>
 800668c:	4603      	mov	r3, r0
 800668e:	2b00      	cmp	r3, #0
 8006690:	d008      	beq.n	80066a4 <HAL_RTC_Init+0x5c>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	681b      	ldr	r3, [r3, #0]
 8006696:	22ff      	movs	r2, #255	; 0xff
 8006698:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	2204      	movs	r2, #4
 800669e:	775a      	strb	r2, [r3, #29]

    return HAL_ERROR;
 80066a0:	2301      	movs	r3, #1
 80066a2:	e05e      	b.n	8006762 <HAL_RTC_Init+0x11a>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	689b      	ldr	r3, [r3, #8]
 80066aa:	687a      	ldr	r2, [r7, #4]
 80066ac:	6812      	ldr	r2, [r2, #0]
 80066ae:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80066b2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80066b6:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	6899      	ldr	r1, [r3, #8]
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	685a      	ldr	r2, [r3, #4]
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	691b      	ldr	r3, [r3, #16]
 80066c6:	431a      	orrs	r2, r3
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	695b      	ldr	r3, [r3, #20]
 80066cc:	431a      	orrs	r2, r3
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	430a      	orrs	r2, r1
 80066d4:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	681b      	ldr	r3, [r3, #0]
 80066da:	687a      	ldr	r2, [r7, #4]
 80066dc:	68d2      	ldr	r2, [r2, #12]
 80066de:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	681b      	ldr	r3, [r3, #0]
 80066e4:	6919      	ldr	r1, [r3, #16]
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	689b      	ldr	r3, [r3, #8]
 80066ea:	041a      	lsls	r2, r3, #16
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	430a      	orrs	r2, r1
 80066f2:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	681b      	ldr	r3, [r3, #0]
 80066f8:	68da      	ldr	r2, [r3, #12]
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006702:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	689b      	ldr	r3, [r3, #8]
 800670a:	f003 0320 	and.w	r3, r3, #32
 800670e:	2b00      	cmp	r3, #0
 8006710:	d10e      	bne.n	8006730 <HAL_RTC_Init+0xe8>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8006712:	6878      	ldr	r0, [r7, #4]
 8006714:	f000 f829 	bl	800676a <HAL_RTC_WaitForSynchro>
 8006718:	4603      	mov	r3, r0
 800671a:	2b00      	cmp	r3, #0
 800671c:	d008      	beq.n	8006730 <HAL_RTC_Init+0xe8>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	681b      	ldr	r3, [r3, #0]
 8006722:	22ff      	movs	r2, #255	; 0xff
 8006724:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	2204      	movs	r2, #4
 800672a:	775a      	strb	r2, [r3, #29]

        return HAL_ERROR;
 800672c:	2301      	movs	r3, #1
 800672e:	e018      	b.n	8006762 <HAL_RTC_Init+0x11a>
      }
    }

    hrtc->Instance->TAFCR &= (uint32_t)~RTC_TAFCR_ALARMOUTTYPE;
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	681b      	ldr	r3, [r3, #0]
 8006734:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	681b      	ldr	r3, [r3, #0]
 800673a:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800673e:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	699a      	ldr	r2, [r3, #24]
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	681b      	ldr	r3, [r3, #0]
 800674e:	430a      	orrs	r2, r1
 8006750:	641a      	str	r2, [r3, #64]	; 0x40

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	681b      	ldr	r3, [r3, #0]
 8006756:	22ff      	movs	r2, #255	; 0xff
 8006758:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	2201      	movs	r2, #1
 800675e:	775a      	strb	r2, [r3, #29]

    return HAL_OK;
 8006760:	2300      	movs	r3, #0
  }
}
 8006762:	4618      	mov	r0, r3
 8006764:	3708      	adds	r7, #8
 8006766:	46bd      	mov	sp, r7
 8006768:	bd80      	pop	{r7, pc}

0800676a <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 800676a:	b580      	push	{r7, lr}
 800676c:	b084      	sub	sp, #16
 800676e:	af00      	add	r7, sp, #0
 8006770:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8006772:	2300      	movs	r3, #0
 8006774:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	68da      	ldr	r2, [r3, #12]
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8006784:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8006786:	f7fc fe09 	bl	800339c <HAL_GetTick>
 800678a:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 800678c:	e009      	b.n	80067a2 <HAL_RTC_WaitForSynchro+0x38>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 800678e:	f7fc fe05 	bl	800339c <HAL_GetTick>
 8006792:	4602      	mov	r2, r0
 8006794:	68fb      	ldr	r3, [r7, #12]
 8006796:	1ad3      	subs	r3, r2, r3
 8006798:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800679c:	d901      	bls.n	80067a2 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 800679e:	2303      	movs	r3, #3
 80067a0:	e007      	b.n	80067b2 <HAL_RTC_WaitForSynchro+0x48>
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	681b      	ldr	r3, [r3, #0]
 80067a6:	68db      	ldr	r3, [r3, #12]
 80067a8:	f003 0320 	and.w	r3, r3, #32
 80067ac:	2b00      	cmp	r3, #0
 80067ae:	d0ee      	beq.n	800678e <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 80067b0:	2300      	movs	r3, #0
}
 80067b2:	4618      	mov	r0, r3
 80067b4:	3710      	adds	r7, #16
 80067b6:	46bd      	mov	sp, r7
 80067b8:	bd80      	pop	{r7, pc}

080067ba <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 80067ba:	b580      	push	{r7, lr}
 80067bc:	b084      	sub	sp, #16
 80067be:	af00      	add	r7, sp, #0
 80067c0:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80067c2:	2300      	movs	r3, #0
 80067c4:	60fb      	str	r3, [r7, #12]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	681b      	ldr	r3, [r3, #0]
 80067ca:	68db      	ldr	r3, [r3, #12]
 80067cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80067d0:	2b00      	cmp	r3, #0
 80067d2:	d119      	bne.n	8006808 <RTC_EnterInitMode+0x4e>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	681b      	ldr	r3, [r3, #0]
 80067d8:	f04f 32ff 	mov.w	r2, #4294967295
 80067dc:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 80067de:	f7fc fddd 	bl	800339c <HAL_GetTick>
 80067e2:	60f8      	str	r0, [r7, #12]

    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 80067e4:	e009      	b.n	80067fa <RTC_EnterInitMode+0x40>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 80067e6:	f7fc fdd9 	bl	800339c <HAL_GetTick>
 80067ea:	4602      	mov	r2, r0
 80067ec:	68fb      	ldr	r3, [r7, #12]
 80067ee:	1ad3      	subs	r3, r2, r3
 80067f0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80067f4:	d901      	bls.n	80067fa <RTC_EnterInitMode+0x40>
      {
        return HAL_TIMEOUT;
 80067f6:	2303      	movs	r3, #3
 80067f8:	e007      	b.n	800680a <RTC_EnterInitMode+0x50>
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	681b      	ldr	r3, [r3, #0]
 80067fe:	68db      	ldr	r3, [r3, #12]
 8006800:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006804:	2b00      	cmp	r3, #0
 8006806:	d0ee      	beq.n	80067e6 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return HAL_OK;
 8006808:	2300      	movs	r3, #0
}
 800680a:	4618      	mov	r0, r3
 800680c:	3710      	adds	r7, #16
 800680e:	46bd      	mov	sp, r7
 8006810:	bd80      	pop	{r7, pc}

08006812 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006812:	b580      	push	{r7, lr}
 8006814:	b082      	sub	sp, #8
 8006816:	af00      	add	r7, sp, #0
 8006818:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	2b00      	cmp	r3, #0
 800681e:	d101      	bne.n	8006824 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8006820:	2301      	movs	r3, #1
 8006822:	e07b      	b.n	800691c <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006828:	2b00      	cmp	r3, #0
 800682a:	d108      	bne.n	800683e <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	685b      	ldr	r3, [r3, #4]
 8006830:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006834:	d009      	beq.n	800684a <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	2200      	movs	r2, #0
 800683a:	61da      	str	r2, [r3, #28]
 800683c:	e005      	b.n	800684a <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	2200      	movs	r2, #0
 8006842:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	2200      	movs	r2, #0
 8006848:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	2200      	movs	r2, #0
 800684e:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006856:	b2db      	uxtb	r3, r3
 8006858:	2b00      	cmp	r3, #0
 800685a:	d106      	bne.n	800686a <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	2200      	movs	r2, #0
 8006860:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006864:	6878      	ldr	r0, [r7, #4]
 8006866:	f7fb fedd 	bl	8002624 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	2202      	movs	r2, #2
 800686e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	681b      	ldr	r3, [r3, #0]
 8006876:	681a      	ldr	r2, [r3, #0]
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	681b      	ldr	r3, [r3, #0]
 800687c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006880:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	685b      	ldr	r3, [r3, #4]
 8006886:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	689b      	ldr	r3, [r3, #8]
 800688e:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8006892:	431a      	orrs	r2, r3
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	68db      	ldr	r3, [r3, #12]
 8006898:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800689c:	431a      	orrs	r2, r3
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	691b      	ldr	r3, [r3, #16]
 80068a2:	f003 0302 	and.w	r3, r3, #2
 80068a6:	431a      	orrs	r2, r3
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	695b      	ldr	r3, [r3, #20]
 80068ac:	f003 0301 	and.w	r3, r3, #1
 80068b0:	431a      	orrs	r2, r3
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	699b      	ldr	r3, [r3, #24]
 80068b6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80068ba:	431a      	orrs	r2, r3
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	69db      	ldr	r3, [r3, #28]
 80068c0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80068c4:	431a      	orrs	r2, r3
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	6a1b      	ldr	r3, [r3, #32]
 80068ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80068ce:	ea42 0103 	orr.w	r1, r2, r3
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80068d6:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	681b      	ldr	r3, [r3, #0]
 80068de:	430a      	orrs	r2, r1
 80068e0:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	699b      	ldr	r3, [r3, #24]
 80068e6:	0c1b      	lsrs	r3, r3, #16
 80068e8:	f003 0104 	and.w	r1, r3, #4
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068f0:	f003 0210 	and.w	r2, r3, #16
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	681b      	ldr	r3, [r3, #0]
 80068f8:	430a      	orrs	r2, r1
 80068fa:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	681b      	ldr	r3, [r3, #0]
 8006900:	69da      	ldr	r2, [r3, #28]
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	681b      	ldr	r3, [r3, #0]
 8006906:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800690a:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	2200      	movs	r2, #0
 8006910:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	2201      	movs	r2, #1
 8006916:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800691a:	2300      	movs	r3, #0
}
 800691c:	4618      	mov	r0, r3
 800691e:	3708      	adds	r7, #8
 8006920:	46bd      	mov	sp, r7
 8006922:	bd80      	pop	{r7, pc}

08006924 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006924:	b580      	push	{r7, lr}
 8006926:	b082      	sub	sp, #8
 8006928:	af00      	add	r7, sp, #0
 800692a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	2b00      	cmp	r3, #0
 8006930:	d101      	bne.n	8006936 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006932:	2301      	movs	r3, #1
 8006934:	e041      	b.n	80069ba <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800693c:	b2db      	uxtb	r3, r3
 800693e:	2b00      	cmp	r3, #0
 8006940:	d106      	bne.n	8006950 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	2200      	movs	r2, #0
 8006946:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800694a:	6878      	ldr	r0, [r7, #4]
 800694c:	f7fc f9c8 	bl	8002ce0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	2202      	movs	r2, #2
 8006954:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	681a      	ldr	r2, [r3, #0]
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	3304      	adds	r3, #4
 8006960:	4619      	mov	r1, r3
 8006962:	4610      	mov	r0, r2
 8006964:	f000 fba8 	bl	80070b8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	2201      	movs	r2, #1
 800696c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	2201      	movs	r2, #1
 8006974:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	2201      	movs	r2, #1
 800697c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	2201      	movs	r2, #1
 8006984:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	2201      	movs	r2, #1
 800698c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	2201      	movs	r2, #1
 8006994:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	2201      	movs	r2, #1
 800699c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	2201      	movs	r2, #1
 80069a4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	2201      	movs	r2, #1
 80069ac:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	2201      	movs	r2, #1
 80069b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80069b8:	2300      	movs	r3, #0
}
 80069ba:	4618      	mov	r0, r3
 80069bc:	3708      	adds	r7, #8
 80069be:	46bd      	mov	sp, r7
 80069c0:	bd80      	pop	{r7, pc}
	...

080069c4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80069c4:	b480      	push	{r7}
 80069c6:	b085      	sub	sp, #20
 80069c8:	af00      	add	r7, sp, #0
 80069ca:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80069d2:	b2db      	uxtb	r3, r3
 80069d4:	2b01      	cmp	r3, #1
 80069d6:	d001      	beq.n	80069dc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80069d8:	2301      	movs	r3, #1
 80069da:	e04e      	b.n	8006a7a <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	2202      	movs	r2, #2
 80069e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	681b      	ldr	r3, [r3, #0]
 80069e8:	68da      	ldr	r2, [r3, #12]
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	681b      	ldr	r3, [r3, #0]
 80069ee:	f042 0201 	orr.w	r2, r2, #1
 80069f2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	681b      	ldr	r3, [r3, #0]
 80069f8:	4a23      	ldr	r2, [pc, #140]	; (8006a88 <HAL_TIM_Base_Start_IT+0xc4>)
 80069fa:	4293      	cmp	r3, r2
 80069fc:	d022      	beq.n	8006a44 <HAL_TIM_Base_Start_IT+0x80>
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	681b      	ldr	r3, [r3, #0]
 8006a02:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006a06:	d01d      	beq.n	8006a44 <HAL_TIM_Base_Start_IT+0x80>
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	681b      	ldr	r3, [r3, #0]
 8006a0c:	4a1f      	ldr	r2, [pc, #124]	; (8006a8c <HAL_TIM_Base_Start_IT+0xc8>)
 8006a0e:	4293      	cmp	r3, r2
 8006a10:	d018      	beq.n	8006a44 <HAL_TIM_Base_Start_IT+0x80>
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	681b      	ldr	r3, [r3, #0]
 8006a16:	4a1e      	ldr	r2, [pc, #120]	; (8006a90 <HAL_TIM_Base_Start_IT+0xcc>)
 8006a18:	4293      	cmp	r3, r2
 8006a1a:	d013      	beq.n	8006a44 <HAL_TIM_Base_Start_IT+0x80>
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	681b      	ldr	r3, [r3, #0]
 8006a20:	4a1c      	ldr	r2, [pc, #112]	; (8006a94 <HAL_TIM_Base_Start_IT+0xd0>)
 8006a22:	4293      	cmp	r3, r2
 8006a24:	d00e      	beq.n	8006a44 <HAL_TIM_Base_Start_IT+0x80>
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	681b      	ldr	r3, [r3, #0]
 8006a2a:	4a1b      	ldr	r2, [pc, #108]	; (8006a98 <HAL_TIM_Base_Start_IT+0xd4>)
 8006a2c:	4293      	cmp	r3, r2
 8006a2e:	d009      	beq.n	8006a44 <HAL_TIM_Base_Start_IT+0x80>
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	681b      	ldr	r3, [r3, #0]
 8006a34:	4a19      	ldr	r2, [pc, #100]	; (8006a9c <HAL_TIM_Base_Start_IT+0xd8>)
 8006a36:	4293      	cmp	r3, r2
 8006a38:	d004      	beq.n	8006a44 <HAL_TIM_Base_Start_IT+0x80>
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	681b      	ldr	r3, [r3, #0]
 8006a3e:	4a18      	ldr	r2, [pc, #96]	; (8006aa0 <HAL_TIM_Base_Start_IT+0xdc>)
 8006a40:	4293      	cmp	r3, r2
 8006a42:	d111      	bne.n	8006a68 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	681b      	ldr	r3, [r3, #0]
 8006a48:	689b      	ldr	r3, [r3, #8]
 8006a4a:	f003 0307 	and.w	r3, r3, #7
 8006a4e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006a50:	68fb      	ldr	r3, [r7, #12]
 8006a52:	2b06      	cmp	r3, #6
 8006a54:	d010      	beq.n	8006a78 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	681b      	ldr	r3, [r3, #0]
 8006a5a:	681a      	ldr	r2, [r3, #0]
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	681b      	ldr	r3, [r3, #0]
 8006a60:	f042 0201 	orr.w	r2, r2, #1
 8006a64:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006a66:	e007      	b.n	8006a78 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	681b      	ldr	r3, [r3, #0]
 8006a6c:	681a      	ldr	r2, [r3, #0]
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	681b      	ldr	r3, [r3, #0]
 8006a72:	f042 0201 	orr.w	r2, r2, #1
 8006a76:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006a78:	2300      	movs	r3, #0
}
 8006a7a:	4618      	mov	r0, r3
 8006a7c:	3714      	adds	r7, #20
 8006a7e:	46bd      	mov	sp, r7
 8006a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a84:	4770      	bx	lr
 8006a86:	bf00      	nop
 8006a88:	40010000 	.word	0x40010000
 8006a8c:	40000400 	.word	0x40000400
 8006a90:	40000800 	.word	0x40000800
 8006a94:	40000c00 	.word	0x40000c00
 8006a98:	40010400 	.word	0x40010400
 8006a9c:	40014000 	.word	0x40014000
 8006aa0:	40001800 	.word	0x40001800

08006aa4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8006aa4:	b580      	push	{r7, lr}
 8006aa6:	b082      	sub	sp, #8
 8006aa8:	af00      	add	r7, sp, #0
 8006aaa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	2b00      	cmp	r3, #0
 8006ab0:	d101      	bne.n	8006ab6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8006ab2:	2301      	movs	r3, #1
 8006ab4:	e041      	b.n	8006b3a <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006abc:	b2db      	uxtb	r3, r3
 8006abe:	2b00      	cmp	r3, #0
 8006ac0:	d106      	bne.n	8006ad0 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	2200      	movs	r2, #0
 8006ac6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8006aca:	6878      	ldr	r0, [r7, #4]
 8006acc:	f7fc f940 	bl	8002d50 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	2202      	movs	r2, #2
 8006ad4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	681a      	ldr	r2, [r3, #0]
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	3304      	adds	r3, #4
 8006ae0:	4619      	mov	r1, r3
 8006ae2:	4610      	mov	r0, r2
 8006ae4:	f000 fae8 	bl	80070b8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	2201      	movs	r2, #1
 8006aec:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	2201      	movs	r2, #1
 8006af4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	2201      	movs	r2, #1
 8006afc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	2201      	movs	r2, #1
 8006b04:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	2201      	movs	r2, #1
 8006b0c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	2201      	movs	r2, #1
 8006b14:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	2201      	movs	r2, #1
 8006b1c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	2201      	movs	r2, #1
 8006b24:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	2201      	movs	r2, #1
 8006b2c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	2201      	movs	r2, #1
 8006b34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006b38:	2300      	movs	r3, #0
}
 8006b3a:	4618      	mov	r0, r3
 8006b3c:	3708      	adds	r7, #8
 8006b3e:	46bd      	mov	sp, r7
 8006b40:	bd80      	pop	{r7, pc}

08006b42 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006b42:	b580      	push	{r7, lr}
 8006b44:	b082      	sub	sp, #8
 8006b46:	af00      	add	r7, sp, #0
 8006b48:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	681b      	ldr	r3, [r3, #0]
 8006b4e:	691b      	ldr	r3, [r3, #16]
 8006b50:	f003 0302 	and.w	r3, r3, #2
 8006b54:	2b02      	cmp	r3, #2
 8006b56:	d122      	bne.n	8006b9e <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	681b      	ldr	r3, [r3, #0]
 8006b5c:	68db      	ldr	r3, [r3, #12]
 8006b5e:	f003 0302 	and.w	r3, r3, #2
 8006b62:	2b02      	cmp	r3, #2
 8006b64:	d11b      	bne.n	8006b9e <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	681b      	ldr	r3, [r3, #0]
 8006b6a:	f06f 0202 	mvn.w	r2, #2
 8006b6e:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	2201      	movs	r2, #1
 8006b74:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	681b      	ldr	r3, [r3, #0]
 8006b7a:	699b      	ldr	r3, [r3, #24]
 8006b7c:	f003 0303 	and.w	r3, r3, #3
 8006b80:	2b00      	cmp	r3, #0
 8006b82:	d003      	beq.n	8006b8c <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006b84:	6878      	ldr	r0, [r7, #4]
 8006b86:	f000 fa78 	bl	800707a <HAL_TIM_IC_CaptureCallback>
 8006b8a:	e005      	b.n	8006b98 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006b8c:	6878      	ldr	r0, [r7, #4]
 8006b8e:	f000 fa6a 	bl	8007066 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006b92:	6878      	ldr	r0, [r7, #4]
 8006b94:	f000 fa7b 	bl	800708e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	2200      	movs	r2, #0
 8006b9c:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	681b      	ldr	r3, [r3, #0]
 8006ba2:	691b      	ldr	r3, [r3, #16]
 8006ba4:	f003 0304 	and.w	r3, r3, #4
 8006ba8:	2b04      	cmp	r3, #4
 8006baa:	d122      	bne.n	8006bf2 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	681b      	ldr	r3, [r3, #0]
 8006bb0:	68db      	ldr	r3, [r3, #12]
 8006bb2:	f003 0304 	and.w	r3, r3, #4
 8006bb6:	2b04      	cmp	r3, #4
 8006bb8:	d11b      	bne.n	8006bf2 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	681b      	ldr	r3, [r3, #0]
 8006bbe:	f06f 0204 	mvn.w	r2, #4
 8006bc2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	2202      	movs	r2, #2
 8006bc8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	681b      	ldr	r3, [r3, #0]
 8006bce:	699b      	ldr	r3, [r3, #24]
 8006bd0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006bd4:	2b00      	cmp	r3, #0
 8006bd6:	d003      	beq.n	8006be0 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006bd8:	6878      	ldr	r0, [r7, #4]
 8006bda:	f000 fa4e 	bl	800707a <HAL_TIM_IC_CaptureCallback>
 8006bde:	e005      	b.n	8006bec <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006be0:	6878      	ldr	r0, [r7, #4]
 8006be2:	f000 fa40 	bl	8007066 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006be6:	6878      	ldr	r0, [r7, #4]
 8006be8:	f000 fa51 	bl	800708e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	2200      	movs	r2, #0
 8006bf0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	681b      	ldr	r3, [r3, #0]
 8006bf6:	691b      	ldr	r3, [r3, #16]
 8006bf8:	f003 0308 	and.w	r3, r3, #8
 8006bfc:	2b08      	cmp	r3, #8
 8006bfe:	d122      	bne.n	8006c46 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	681b      	ldr	r3, [r3, #0]
 8006c04:	68db      	ldr	r3, [r3, #12]
 8006c06:	f003 0308 	and.w	r3, r3, #8
 8006c0a:	2b08      	cmp	r3, #8
 8006c0c:	d11b      	bne.n	8006c46 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	681b      	ldr	r3, [r3, #0]
 8006c12:	f06f 0208 	mvn.w	r2, #8
 8006c16:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	2204      	movs	r2, #4
 8006c1c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	681b      	ldr	r3, [r3, #0]
 8006c22:	69db      	ldr	r3, [r3, #28]
 8006c24:	f003 0303 	and.w	r3, r3, #3
 8006c28:	2b00      	cmp	r3, #0
 8006c2a:	d003      	beq.n	8006c34 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006c2c:	6878      	ldr	r0, [r7, #4]
 8006c2e:	f000 fa24 	bl	800707a <HAL_TIM_IC_CaptureCallback>
 8006c32:	e005      	b.n	8006c40 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006c34:	6878      	ldr	r0, [r7, #4]
 8006c36:	f000 fa16 	bl	8007066 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006c3a:	6878      	ldr	r0, [r7, #4]
 8006c3c:	f000 fa27 	bl	800708e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	2200      	movs	r2, #0
 8006c44:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	681b      	ldr	r3, [r3, #0]
 8006c4a:	691b      	ldr	r3, [r3, #16]
 8006c4c:	f003 0310 	and.w	r3, r3, #16
 8006c50:	2b10      	cmp	r3, #16
 8006c52:	d122      	bne.n	8006c9a <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	681b      	ldr	r3, [r3, #0]
 8006c58:	68db      	ldr	r3, [r3, #12]
 8006c5a:	f003 0310 	and.w	r3, r3, #16
 8006c5e:	2b10      	cmp	r3, #16
 8006c60:	d11b      	bne.n	8006c9a <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	681b      	ldr	r3, [r3, #0]
 8006c66:	f06f 0210 	mvn.w	r2, #16
 8006c6a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	2208      	movs	r2, #8
 8006c70:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	681b      	ldr	r3, [r3, #0]
 8006c76:	69db      	ldr	r3, [r3, #28]
 8006c78:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006c7c:	2b00      	cmp	r3, #0
 8006c7e:	d003      	beq.n	8006c88 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006c80:	6878      	ldr	r0, [r7, #4]
 8006c82:	f000 f9fa 	bl	800707a <HAL_TIM_IC_CaptureCallback>
 8006c86:	e005      	b.n	8006c94 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006c88:	6878      	ldr	r0, [r7, #4]
 8006c8a:	f000 f9ec 	bl	8007066 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006c8e:	6878      	ldr	r0, [r7, #4]
 8006c90:	f000 f9fd 	bl	800708e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	2200      	movs	r2, #0
 8006c98:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	681b      	ldr	r3, [r3, #0]
 8006c9e:	691b      	ldr	r3, [r3, #16]
 8006ca0:	f003 0301 	and.w	r3, r3, #1
 8006ca4:	2b01      	cmp	r3, #1
 8006ca6:	d10e      	bne.n	8006cc6 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	681b      	ldr	r3, [r3, #0]
 8006cac:	68db      	ldr	r3, [r3, #12]
 8006cae:	f003 0301 	and.w	r3, r3, #1
 8006cb2:	2b01      	cmp	r3, #1
 8006cb4:	d107      	bne.n	8006cc6 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	681b      	ldr	r3, [r3, #0]
 8006cba:	f06f 0201 	mvn.w	r2, #1
 8006cbe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006cc0:	6878      	ldr	r0, [r7, #4]
 8006cc2:	f7fb fc25 	bl	8002510 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	681b      	ldr	r3, [r3, #0]
 8006cca:	691b      	ldr	r3, [r3, #16]
 8006ccc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006cd0:	2b80      	cmp	r3, #128	; 0x80
 8006cd2:	d10e      	bne.n	8006cf2 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	681b      	ldr	r3, [r3, #0]
 8006cd8:	68db      	ldr	r3, [r3, #12]
 8006cda:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006cde:	2b80      	cmp	r3, #128	; 0x80
 8006ce0:	d107      	bne.n	8006cf2 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	681b      	ldr	r3, [r3, #0]
 8006ce6:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006cea:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006cec:	6878      	ldr	r0, [r7, #4]
 8006cee:	f000 fd53 	bl	8007798 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	681b      	ldr	r3, [r3, #0]
 8006cf6:	691b      	ldr	r3, [r3, #16]
 8006cf8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006cfc:	2b40      	cmp	r3, #64	; 0x40
 8006cfe:	d10e      	bne.n	8006d1e <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	681b      	ldr	r3, [r3, #0]
 8006d04:	68db      	ldr	r3, [r3, #12]
 8006d06:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006d0a:	2b40      	cmp	r3, #64	; 0x40
 8006d0c:	d107      	bne.n	8006d1e <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	681b      	ldr	r3, [r3, #0]
 8006d12:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006d16:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006d18:	6878      	ldr	r0, [r7, #4]
 8006d1a:	f000 f9c2 	bl	80070a2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	681b      	ldr	r3, [r3, #0]
 8006d22:	691b      	ldr	r3, [r3, #16]
 8006d24:	f003 0320 	and.w	r3, r3, #32
 8006d28:	2b20      	cmp	r3, #32
 8006d2a:	d10e      	bne.n	8006d4a <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	681b      	ldr	r3, [r3, #0]
 8006d30:	68db      	ldr	r3, [r3, #12]
 8006d32:	f003 0320 	and.w	r3, r3, #32
 8006d36:	2b20      	cmp	r3, #32
 8006d38:	d107      	bne.n	8006d4a <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	681b      	ldr	r3, [r3, #0]
 8006d3e:	f06f 0220 	mvn.w	r2, #32
 8006d42:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006d44:	6878      	ldr	r0, [r7, #4]
 8006d46:	f000 fd1d 	bl	8007784 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006d4a:	bf00      	nop
 8006d4c:	3708      	adds	r7, #8
 8006d4e:	46bd      	mov	sp, r7
 8006d50:	bd80      	pop	{r7, pc}
	...

08006d54 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006d54:	b580      	push	{r7, lr}
 8006d56:	b086      	sub	sp, #24
 8006d58:	af00      	add	r7, sp, #0
 8006d5a:	60f8      	str	r0, [r7, #12]
 8006d5c:	60b9      	str	r1, [r7, #8]
 8006d5e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006d60:	2300      	movs	r3, #0
 8006d62:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006d64:	68fb      	ldr	r3, [r7, #12]
 8006d66:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006d6a:	2b01      	cmp	r3, #1
 8006d6c:	d101      	bne.n	8006d72 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8006d6e:	2302      	movs	r3, #2
 8006d70:	e0ae      	b.n	8006ed0 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8006d72:	68fb      	ldr	r3, [r7, #12]
 8006d74:	2201      	movs	r2, #1
 8006d76:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	2b0c      	cmp	r3, #12
 8006d7e:	f200 809f 	bhi.w	8006ec0 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8006d82:	a201      	add	r2, pc, #4	; (adr r2, 8006d88 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8006d84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d88:	08006dbd 	.word	0x08006dbd
 8006d8c:	08006ec1 	.word	0x08006ec1
 8006d90:	08006ec1 	.word	0x08006ec1
 8006d94:	08006ec1 	.word	0x08006ec1
 8006d98:	08006dfd 	.word	0x08006dfd
 8006d9c:	08006ec1 	.word	0x08006ec1
 8006da0:	08006ec1 	.word	0x08006ec1
 8006da4:	08006ec1 	.word	0x08006ec1
 8006da8:	08006e3f 	.word	0x08006e3f
 8006dac:	08006ec1 	.word	0x08006ec1
 8006db0:	08006ec1 	.word	0x08006ec1
 8006db4:	08006ec1 	.word	0x08006ec1
 8006db8:	08006e7f 	.word	0x08006e7f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006dbc:	68fb      	ldr	r3, [r7, #12]
 8006dbe:	681b      	ldr	r3, [r3, #0]
 8006dc0:	68b9      	ldr	r1, [r7, #8]
 8006dc2:	4618      	mov	r0, r3
 8006dc4:	f000 fa18 	bl	80071f8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006dc8:	68fb      	ldr	r3, [r7, #12]
 8006dca:	681b      	ldr	r3, [r3, #0]
 8006dcc:	699a      	ldr	r2, [r3, #24]
 8006dce:	68fb      	ldr	r3, [r7, #12]
 8006dd0:	681b      	ldr	r3, [r3, #0]
 8006dd2:	f042 0208 	orr.w	r2, r2, #8
 8006dd6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006dd8:	68fb      	ldr	r3, [r7, #12]
 8006dda:	681b      	ldr	r3, [r3, #0]
 8006ddc:	699a      	ldr	r2, [r3, #24]
 8006dde:	68fb      	ldr	r3, [r7, #12]
 8006de0:	681b      	ldr	r3, [r3, #0]
 8006de2:	f022 0204 	bic.w	r2, r2, #4
 8006de6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006de8:	68fb      	ldr	r3, [r7, #12]
 8006dea:	681b      	ldr	r3, [r3, #0]
 8006dec:	6999      	ldr	r1, [r3, #24]
 8006dee:	68bb      	ldr	r3, [r7, #8]
 8006df0:	691a      	ldr	r2, [r3, #16]
 8006df2:	68fb      	ldr	r3, [r7, #12]
 8006df4:	681b      	ldr	r3, [r3, #0]
 8006df6:	430a      	orrs	r2, r1
 8006df8:	619a      	str	r2, [r3, #24]
      break;
 8006dfa:	e064      	b.n	8006ec6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006dfc:	68fb      	ldr	r3, [r7, #12]
 8006dfe:	681b      	ldr	r3, [r3, #0]
 8006e00:	68b9      	ldr	r1, [r7, #8]
 8006e02:	4618      	mov	r0, r3
 8006e04:	f000 fa68 	bl	80072d8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006e08:	68fb      	ldr	r3, [r7, #12]
 8006e0a:	681b      	ldr	r3, [r3, #0]
 8006e0c:	699a      	ldr	r2, [r3, #24]
 8006e0e:	68fb      	ldr	r3, [r7, #12]
 8006e10:	681b      	ldr	r3, [r3, #0]
 8006e12:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006e16:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006e18:	68fb      	ldr	r3, [r7, #12]
 8006e1a:	681b      	ldr	r3, [r3, #0]
 8006e1c:	699a      	ldr	r2, [r3, #24]
 8006e1e:	68fb      	ldr	r3, [r7, #12]
 8006e20:	681b      	ldr	r3, [r3, #0]
 8006e22:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006e26:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006e28:	68fb      	ldr	r3, [r7, #12]
 8006e2a:	681b      	ldr	r3, [r3, #0]
 8006e2c:	6999      	ldr	r1, [r3, #24]
 8006e2e:	68bb      	ldr	r3, [r7, #8]
 8006e30:	691b      	ldr	r3, [r3, #16]
 8006e32:	021a      	lsls	r2, r3, #8
 8006e34:	68fb      	ldr	r3, [r7, #12]
 8006e36:	681b      	ldr	r3, [r3, #0]
 8006e38:	430a      	orrs	r2, r1
 8006e3a:	619a      	str	r2, [r3, #24]
      break;
 8006e3c:	e043      	b.n	8006ec6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006e3e:	68fb      	ldr	r3, [r7, #12]
 8006e40:	681b      	ldr	r3, [r3, #0]
 8006e42:	68b9      	ldr	r1, [r7, #8]
 8006e44:	4618      	mov	r0, r3
 8006e46:	f000 fabd 	bl	80073c4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006e4a:	68fb      	ldr	r3, [r7, #12]
 8006e4c:	681b      	ldr	r3, [r3, #0]
 8006e4e:	69da      	ldr	r2, [r3, #28]
 8006e50:	68fb      	ldr	r3, [r7, #12]
 8006e52:	681b      	ldr	r3, [r3, #0]
 8006e54:	f042 0208 	orr.w	r2, r2, #8
 8006e58:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006e5a:	68fb      	ldr	r3, [r7, #12]
 8006e5c:	681b      	ldr	r3, [r3, #0]
 8006e5e:	69da      	ldr	r2, [r3, #28]
 8006e60:	68fb      	ldr	r3, [r7, #12]
 8006e62:	681b      	ldr	r3, [r3, #0]
 8006e64:	f022 0204 	bic.w	r2, r2, #4
 8006e68:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006e6a:	68fb      	ldr	r3, [r7, #12]
 8006e6c:	681b      	ldr	r3, [r3, #0]
 8006e6e:	69d9      	ldr	r1, [r3, #28]
 8006e70:	68bb      	ldr	r3, [r7, #8]
 8006e72:	691a      	ldr	r2, [r3, #16]
 8006e74:	68fb      	ldr	r3, [r7, #12]
 8006e76:	681b      	ldr	r3, [r3, #0]
 8006e78:	430a      	orrs	r2, r1
 8006e7a:	61da      	str	r2, [r3, #28]
      break;
 8006e7c:	e023      	b.n	8006ec6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006e7e:	68fb      	ldr	r3, [r7, #12]
 8006e80:	681b      	ldr	r3, [r3, #0]
 8006e82:	68b9      	ldr	r1, [r7, #8]
 8006e84:	4618      	mov	r0, r3
 8006e86:	f000 fb11 	bl	80074ac <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006e8a:	68fb      	ldr	r3, [r7, #12]
 8006e8c:	681b      	ldr	r3, [r3, #0]
 8006e8e:	69da      	ldr	r2, [r3, #28]
 8006e90:	68fb      	ldr	r3, [r7, #12]
 8006e92:	681b      	ldr	r3, [r3, #0]
 8006e94:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006e98:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006e9a:	68fb      	ldr	r3, [r7, #12]
 8006e9c:	681b      	ldr	r3, [r3, #0]
 8006e9e:	69da      	ldr	r2, [r3, #28]
 8006ea0:	68fb      	ldr	r3, [r7, #12]
 8006ea2:	681b      	ldr	r3, [r3, #0]
 8006ea4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006ea8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006eaa:	68fb      	ldr	r3, [r7, #12]
 8006eac:	681b      	ldr	r3, [r3, #0]
 8006eae:	69d9      	ldr	r1, [r3, #28]
 8006eb0:	68bb      	ldr	r3, [r7, #8]
 8006eb2:	691b      	ldr	r3, [r3, #16]
 8006eb4:	021a      	lsls	r2, r3, #8
 8006eb6:	68fb      	ldr	r3, [r7, #12]
 8006eb8:	681b      	ldr	r3, [r3, #0]
 8006eba:	430a      	orrs	r2, r1
 8006ebc:	61da      	str	r2, [r3, #28]
      break;
 8006ebe:	e002      	b.n	8006ec6 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8006ec0:	2301      	movs	r3, #1
 8006ec2:	75fb      	strb	r3, [r7, #23]
      break;
 8006ec4:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006ec6:	68fb      	ldr	r3, [r7, #12]
 8006ec8:	2200      	movs	r2, #0
 8006eca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006ece:	7dfb      	ldrb	r3, [r7, #23]
}
 8006ed0:	4618      	mov	r0, r3
 8006ed2:	3718      	adds	r7, #24
 8006ed4:	46bd      	mov	sp, r7
 8006ed6:	bd80      	pop	{r7, pc}

08006ed8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006ed8:	b580      	push	{r7, lr}
 8006eda:	b084      	sub	sp, #16
 8006edc:	af00      	add	r7, sp, #0
 8006ede:	6078      	str	r0, [r7, #4]
 8006ee0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006ee2:	2300      	movs	r3, #0
 8006ee4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006eec:	2b01      	cmp	r3, #1
 8006eee:	d101      	bne.n	8006ef4 <HAL_TIM_ConfigClockSource+0x1c>
 8006ef0:	2302      	movs	r3, #2
 8006ef2:	e0b4      	b.n	800705e <HAL_TIM_ConfigClockSource+0x186>
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	2201      	movs	r2, #1
 8006ef8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	2202      	movs	r2, #2
 8006f00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	681b      	ldr	r3, [r3, #0]
 8006f08:	689b      	ldr	r3, [r3, #8]
 8006f0a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006f0c:	68bb      	ldr	r3, [r7, #8]
 8006f0e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8006f12:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006f14:	68bb      	ldr	r3, [r7, #8]
 8006f16:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006f1a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	681b      	ldr	r3, [r3, #0]
 8006f20:	68ba      	ldr	r2, [r7, #8]
 8006f22:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006f24:	683b      	ldr	r3, [r7, #0]
 8006f26:	681b      	ldr	r3, [r3, #0]
 8006f28:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006f2c:	d03e      	beq.n	8006fac <HAL_TIM_ConfigClockSource+0xd4>
 8006f2e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006f32:	f200 8087 	bhi.w	8007044 <HAL_TIM_ConfigClockSource+0x16c>
 8006f36:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006f3a:	f000 8086 	beq.w	800704a <HAL_TIM_ConfigClockSource+0x172>
 8006f3e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006f42:	d87f      	bhi.n	8007044 <HAL_TIM_ConfigClockSource+0x16c>
 8006f44:	2b70      	cmp	r3, #112	; 0x70
 8006f46:	d01a      	beq.n	8006f7e <HAL_TIM_ConfigClockSource+0xa6>
 8006f48:	2b70      	cmp	r3, #112	; 0x70
 8006f4a:	d87b      	bhi.n	8007044 <HAL_TIM_ConfigClockSource+0x16c>
 8006f4c:	2b60      	cmp	r3, #96	; 0x60
 8006f4e:	d050      	beq.n	8006ff2 <HAL_TIM_ConfigClockSource+0x11a>
 8006f50:	2b60      	cmp	r3, #96	; 0x60
 8006f52:	d877      	bhi.n	8007044 <HAL_TIM_ConfigClockSource+0x16c>
 8006f54:	2b50      	cmp	r3, #80	; 0x50
 8006f56:	d03c      	beq.n	8006fd2 <HAL_TIM_ConfigClockSource+0xfa>
 8006f58:	2b50      	cmp	r3, #80	; 0x50
 8006f5a:	d873      	bhi.n	8007044 <HAL_TIM_ConfigClockSource+0x16c>
 8006f5c:	2b40      	cmp	r3, #64	; 0x40
 8006f5e:	d058      	beq.n	8007012 <HAL_TIM_ConfigClockSource+0x13a>
 8006f60:	2b40      	cmp	r3, #64	; 0x40
 8006f62:	d86f      	bhi.n	8007044 <HAL_TIM_ConfigClockSource+0x16c>
 8006f64:	2b30      	cmp	r3, #48	; 0x30
 8006f66:	d064      	beq.n	8007032 <HAL_TIM_ConfigClockSource+0x15a>
 8006f68:	2b30      	cmp	r3, #48	; 0x30
 8006f6a:	d86b      	bhi.n	8007044 <HAL_TIM_ConfigClockSource+0x16c>
 8006f6c:	2b20      	cmp	r3, #32
 8006f6e:	d060      	beq.n	8007032 <HAL_TIM_ConfigClockSource+0x15a>
 8006f70:	2b20      	cmp	r3, #32
 8006f72:	d867      	bhi.n	8007044 <HAL_TIM_ConfigClockSource+0x16c>
 8006f74:	2b00      	cmp	r3, #0
 8006f76:	d05c      	beq.n	8007032 <HAL_TIM_ConfigClockSource+0x15a>
 8006f78:	2b10      	cmp	r3, #16
 8006f7a:	d05a      	beq.n	8007032 <HAL_TIM_ConfigClockSource+0x15a>
 8006f7c:	e062      	b.n	8007044 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	6818      	ldr	r0, [r3, #0]
 8006f82:	683b      	ldr	r3, [r7, #0]
 8006f84:	6899      	ldr	r1, [r3, #8]
 8006f86:	683b      	ldr	r3, [r7, #0]
 8006f88:	685a      	ldr	r2, [r3, #4]
 8006f8a:	683b      	ldr	r3, [r7, #0]
 8006f8c:	68db      	ldr	r3, [r3, #12]
 8006f8e:	f000 fb5d 	bl	800764c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	681b      	ldr	r3, [r3, #0]
 8006f96:	689b      	ldr	r3, [r3, #8]
 8006f98:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006f9a:	68bb      	ldr	r3, [r7, #8]
 8006f9c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006fa0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	681b      	ldr	r3, [r3, #0]
 8006fa6:	68ba      	ldr	r2, [r7, #8]
 8006fa8:	609a      	str	r2, [r3, #8]
      break;
 8006faa:	e04f      	b.n	800704c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	6818      	ldr	r0, [r3, #0]
 8006fb0:	683b      	ldr	r3, [r7, #0]
 8006fb2:	6899      	ldr	r1, [r3, #8]
 8006fb4:	683b      	ldr	r3, [r7, #0]
 8006fb6:	685a      	ldr	r2, [r3, #4]
 8006fb8:	683b      	ldr	r3, [r7, #0]
 8006fba:	68db      	ldr	r3, [r3, #12]
 8006fbc:	f000 fb46 	bl	800764c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	681b      	ldr	r3, [r3, #0]
 8006fc4:	689a      	ldr	r2, [r3, #8]
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	681b      	ldr	r3, [r3, #0]
 8006fca:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006fce:	609a      	str	r2, [r3, #8]
      break;
 8006fd0:	e03c      	b.n	800704c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	6818      	ldr	r0, [r3, #0]
 8006fd6:	683b      	ldr	r3, [r7, #0]
 8006fd8:	6859      	ldr	r1, [r3, #4]
 8006fda:	683b      	ldr	r3, [r7, #0]
 8006fdc:	68db      	ldr	r3, [r3, #12]
 8006fde:	461a      	mov	r2, r3
 8006fe0:	f000 faba 	bl	8007558 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	681b      	ldr	r3, [r3, #0]
 8006fe8:	2150      	movs	r1, #80	; 0x50
 8006fea:	4618      	mov	r0, r3
 8006fec:	f000 fb13 	bl	8007616 <TIM_ITRx_SetConfig>
      break;
 8006ff0:	e02c      	b.n	800704c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	6818      	ldr	r0, [r3, #0]
 8006ff6:	683b      	ldr	r3, [r7, #0]
 8006ff8:	6859      	ldr	r1, [r3, #4]
 8006ffa:	683b      	ldr	r3, [r7, #0]
 8006ffc:	68db      	ldr	r3, [r3, #12]
 8006ffe:	461a      	mov	r2, r3
 8007000:	f000 fad9 	bl	80075b6 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	681b      	ldr	r3, [r3, #0]
 8007008:	2160      	movs	r1, #96	; 0x60
 800700a:	4618      	mov	r0, r3
 800700c:	f000 fb03 	bl	8007616 <TIM_ITRx_SetConfig>
      break;
 8007010:	e01c      	b.n	800704c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	6818      	ldr	r0, [r3, #0]
 8007016:	683b      	ldr	r3, [r7, #0]
 8007018:	6859      	ldr	r1, [r3, #4]
 800701a:	683b      	ldr	r3, [r7, #0]
 800701c:	68db      	ldr	r3, [r3, #12]
 800701e:	461a      	mov	r2, r3
 8007020:	f000 fa9a 	bl	8007558 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	681b      	ldr	r3, [r3, #0]
 8007028:	2140      	movs	r1, #64	; 0x40
 800702a:	4618      	mov	r0, r3
 800702c:	f000 faf3 	bl	8007616 <TIM_ITRx_SetConfig>
      break;
 8007030:	e00c      	b.n	800704c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	681a      	ldr	r2, [r3, #0]
 8007036:	683b      	ldr	r3, [r7, #0]
 8007038:	681b      	ldr	r3, [r3, #0]
 800703a:	4619      	mov	r1, r3
 800703c:	4610      	mov	r0, r2
 800703e:	f000 faea 	bl	8007616 <TIM_ITRx_SetConfig>
      break;
 8007042:	e003      	b.n	800704c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8007044:	2301      	movs	r3, #1
 8007046:	73fb      	strb	r3, [r7, #15]
      break;
 8007048:	e000      	b.n	800704c <HAL_TIM_ConfigClockSource+0x174>
      break;
 800704a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	2201      	movs	r2, #1
 8007050:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	2200      	movs	r2, #0
 8007058:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800705c:	7bfb      	ldrb	r3, [r7, #15]
}
 800705e:	4618      	mov	r0, r3
 8007060:	3710      	adds	r7, #16
 8007062:	46bd      	mov	sp, r7
 8007064:	bd80      	pop	{r7, pc}

08007066 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007066:	b480      	push	{r7}
 8007068:	b083      	sub	sp, #12
 800706a:	af00      	add	r7, sp, #0
 800706c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800706e:	bf00      	nop
 8007070:	370c      	adds	r7, #12
 8007072:	46bd      	mov	sp, r7
 8007074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007078:	4770      	bx	lr

0800707a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800707a:	b480      	push	{r7}
 800707c:	b083      	sub	sp, #12
 800707e:	af00      	add	r7, sp, #0
 8007080:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007082:	bf00      	nop
 8007084:	370c      	adds	r7, #12
 8007086:	46bd      	mov	sp, r7
 8007088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800708c:	4770      	bx	lr

0800708e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800708e:	b480      	push	{r7}
 8007090:	b083      	sub	sp, #12
 8007092:	af00      	add	r7, sp, #0
 8007094:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007096:	bf00      	nop
 8007098:	370c      	adds	r7, #12
 800709a:	46bd      	mov	sp, r7
 800709c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070a0:	4770      	bx	lr

080070a2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80070a2:	b480      	push	{r7}
 80070a4:	b083      	sub	sp, #12
 80070a6:	af00      	add	r7, sp, #0
 80070a8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80070aa:	bf00      	nop
 80070ac:	370c      	adds	r7, #12
 80070ae:	46bd      	mov	sp, r7
 80070b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070b4:	4770      	bx	lr
	...

080070b8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80070b8:	b480      	push	{r7}
 80070ba:	b085      	sub	sp, #20
 80070bc:	af00      	add	r7, sp, #0
 80070be:	6078      	str	r0, [r7, #4]
 80070c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	681b      	ldr	r3, [r3, #0]
 80070c6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	4a40      	ldr	r2, [pc, #256]	; (80071cc <TIM_Base_SetConfig+0x114>)
 80070cc:	4293      	cmp	r3, r2
 80070ce:	d013      	beq.n	80070f8 <TIM_Base_SetConfig+0x40>
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80070d6:	d00f      	beq.n	80070f8 <TIM_Base_SetConfig+0x40>
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	4a3d      	ldr	r2, [pc, #244]	; (80071d0 <TIM_Base_SetConfig+0x118>)
 80070dc:	4293      	cmp	r3, r2
 80070de:	d00b      	beq.n	80070f8 <TIM_Base_SetConfig+0x40>
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	4a3c      	ldr	r2, [pc, #240]	; (80071d4 <TIM_Base_SetConfig+0x11c>)
 80070e4:	4293      	cmp	r3, r2
 80070e6:	d007      	beq.n	80070f8 <TIM_Base_SetConfig+0x40>
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	4a3b      	ldr	r2, [pc, #236]	; (80071d8 <TIM_Base_SetConfig+0x120>)
 80070ec:	4293      	cmp	r3, r2
 80070ee:	d003      	beq.n	80070f8 <TIM_Base_SetConfig+0x40>
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	4a3a      	ldr	r2, [pc, #232]	; (80071dc <TIM_Base_SetConfig+0x124>)
 80070f4:	4293      	cmp	r3, r2
 80070f6:	d108      	bne.n	800710a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80070f8:	68fb      	ldr	r3, [r7, #12]
 80070fa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80070fe:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007100:	683b      	ldr	r3, [r7, #0]
 8007102:	685b      	ldr	r3, [r3, #4]
 8007104:	68fa      	ldr	r2, [r7, #12]
 8007106:	4313      	orrs	r3, r2
 8007108:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	4a2f      	ldr	r2, [pc, #188]	; (80071cc <TIM_Base_SetConfig+0x114>)
 800710e:	4293      	cmp	r3, r2
 8007110:	d02b      	beq.n	800716a <TIM_Base_SetConfig+0xb2>
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007118:	d027      	beq.n	800716a <TIM_Base_SetConfig+0xb2>
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	4a2c      	ldr	r2, [pc, #176]	; (80071d0 <TIM_Base_SetConfig+0x118>)
 800711e:	4293      	cmp	r3, r2
 8007120:	d023      	beq.n	800716a <TIM_Base_SetConfig+0xb2>
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	4a2b      	ldr	r2, [pc, #172]	; (80071d4 <TIM_Base_SetConfig+0x11c>)
 8007126:	4293      	cmp	r3, r2
 8007128:	d01f      	beq.n	800716a <TIM_Base_SetConfig+0xb2>
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	4a2a      	ldr	r2, [pc, #168]	; (80071d8 <TIM_Base_SetConfig+0x120>)
 800712e:	4293      	cmp	r3, r2
 8007130:	d01b      	beq.n	800716a <TIM_Base_SetConfig+0xb2>
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	4a29      	ldr	r2, [pc, #164]	; (80071dc <TIM_Base_SetConfig+0x124>)
 8007136:	4293      	cmp	r3, r2
 8007138:	d017      	beq.n	800716a <TIM_Base_SetConfig+0xb2>
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	4a28      	ldr	r2, [pc, #160]	; (80071e0 <TIM_Base_SetConfig+0x128>)
 800713e:	4293      	cmp	r3, r2
 8007140:	d013      	beq.n	800716a <TIM_Base_SetConfig+0xb2>
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	4a27      	ldr	r2, [pc, #156]	; (80071e4 <TIM_Base_SetConfig+0x12c>)
 8007146:	4293      	cmp	r3, r2
 8007148:	d00f      	beq.n	800716a <TIM_Base_SetConfig+0xb2>
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	4a26      	ldr	r2, [pc, #152]	; (80071e8 <TIM_Base_SetConfig+0x130>)
 800714e:	4293      	cmp	r3, r2
 8007150:	d00b      	beq.n	800716a <TIM_Base_SetConfig+0xb2>
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	4a25      	ldr	r2, [pc, #148]	; (80071ec <TIM_Base_SetConfig+0x134>)
 8007156:	4293      	cmp	r3, r2
 8007158:	d007      	beq.n	800716a <TIM_Base_SetConfig+0xb2>
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	4a24      	ldr	r2, [pc, #144]	; (80071f0 <TIM_Base_SetConfig+0x138>)
 800715e:	4293      	cmp	r3, r2
 8007160:	d003      	beq.n	800716a <TIM_Base_SetConfig+0xb2>
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	4a23      	ldr	r2, [pc, #140]	; (80071f4 <TIM_Base_SetConfig+0x13c>)
 8007166:	4293      	cmp	r3, r2
 8007168:	d108      	bne.n	800717c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800716a:	68fb      	ldr	r3, [r7, #12]
 800716c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007170:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007172:	683b      	ldr	r3, [r7, #0]
 8007174:	68db      	ldr	r3, [r3, #12]
 8007176:	68fa      	ldr	r2, [r7, #12]
 8007178:	4313      	orrs	r3, r2
 800717a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800717c:	68fb      	ldr	r3, [r7, #12]
 800717e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8007182:	683b      	ldr	r3, [r7, #0]
 8007184:	695b      	ldr	r3, [r3, #20]
 8007186:	4313      	orrs	r3, r2
 8007188:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	68fa      	ldr	r2, [r7, #12]
 800718e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007190:	683b      	ldr	r3, [r7, #0]
 8007192:	689a      	ldr	r2, [r3, #8]
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007198:	683b      	ldr	r3, [r7, #0]
 800719a:	681a      	ldr	r2, [r3, #0]
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	4a0a      	ldr	r2, [pc, #40]	; (80071cc <TIM_Base_SetConfig+0x114>)
 80071a4:	4293      	cmp	r3, r2
 80071a6:	d003      	beq.n	80071b0 <TIM_Base_SetConfig+0xf8>
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	4a0c      	ldr	r2, [pc, #48]	; (80071dc <TIM_Base_SetConfig+0x124>)
 80071ac:	4293      	cmp	r3, r2
 80071ae:	d103      	bne.n	80071b8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80071b0:	683b      	ldr	r3, [r7, #0]
 80071b2:	691a      	ldr	r2, [r3, #16]
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	2201      	movs	r2, #1
 80071bc:	615a      	str	r2, [r3, #20]
}
 80071be:	bf00      	nop
 80071c0:	3714      	adds	r7, #20
 80071c2:	46bd      	mov	sp, r7
 80071c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071c8:	4770      	bx	lr
 80071ca:	bf00      	nop
 80071cc:	40010000 	.word	0x40010000
 80071d0:	40000400 	.word	0x40000400
 80071d4:	40000800 	.word	0x40000800
 80071d8:	40000c00 	.word	0x40000c00
 80071dc:	40010400 	.word	0x40010400
 80071e0:	40014000 	.word	0x40014000
 80071e4:	40014400 	.word	0x40014400
 80071e8:	40014800 	.word	0x40014800
 80071ec:	40001800 	.word	0x40001800
 80071f0:	40001c00 	.word	0x40001c00
 80071f4:	40002000 	.word	0x40002000

080071f8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80071f8:	b480      	push	{r7}
 80071fa:	b087      	sub	sp, #28
 80071fc:	af00      	add	r7, sp, #0
 80071fe:	6078      	str	r0, [r7, #4]
 8007200:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	6a1b      	ldr	r3, [r3, #32]
 8007206:	f023 0201 	bic.w	r2, r3, #1
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	6a1b      	ldr	r3, [r3, #32]
 8007212:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	685b      	ldr	r3, [r3, #4]
 8007218:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	699b      	ldr	r3, [r3, #24]
 800721e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8007220:	68fb      	ldr	r3, [r7, #12]
 8007222:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007226:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8007228:	68fb      	ldr	r3, [r7, #12]
 800722a:	f023 0303 	bic.w	r3, r3, #3
 800722e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007230:	683b      	ldr	r3, [r7, #0]
 8007232:	681b      	ldr	r3, [r3, #0]
 8007234:	68fa      	ldr	r2, [r7, #12]
 8007236:	4313      	orrs	r3, r2
 8007238:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800723a:	697b      	ldr	r3, [r7, #20]
 800723c:	f023 0302 	bic.w	r3, r3, #2
 8007240:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8007242:	683b      	ldr	r3, [r7, #0]
 8007244:	689b      	ldr	r3, [r3, #8]
 8007246:	697a      	ldr	r2, [r7, #20]
 8007248:	4313      	orrs	r3, r2
 800724a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	4a20      	ldr	r2, [pc, #128]	; (80072d0 <TIM_OC1_SetConfig+0xd8>)
 8007250:	4293      	cmp	r3, r2
 8007252:	d003      	beq.n	800725c <TIM_OC1_SetConfig+0x64>
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	4a1f      	ldr	r2, [pc, #124]	; (80072d4 <TIM_OC1_SetConfig+0xdc>)
 8007258:	4293      	cmp	r3, r2
 800725a:	d10c      	bne.n	8007276 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800725c:	697b      	ldr	r3, [r7, #20]
 800725e:	f023 0308 	bic.w	r3, r3, #8
 8007262:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8007264:	683b      	ldr	r3, [r7, #0]
 8007266:	68db      	ldr	r3, [r3, #12]
 8007268:	697a      	ldr	r2, [r7, #20]
 800726a:	4313      	orrs	r3, r2
 800726c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800726e:	697b      	ldr	r3, [r7, #20]
 8007270:	f023 0304 	bic.w	r3, r3, #4
 8007274:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	4a15      	ldr	r2, [pc, #84]	; (80072d0 <TIM_OC1_SetConfig+0xd8>)
 800727a:	4293      	cmp	r3, r2
 800727c:	d003      	beq.n	8007286 <TIM_OC1_SetConfig+0x8e>
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	4a14      	ldr	r2, [pc, #80]	; (80072d4 <TIM_OC1_SetConfig+0xdc>)
 8007282:	4293      	cmp	r3, r2
 8007284:	d111      	bne.n	80072aa <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8007286:	693b      	ldr	r3, [r7, #16]
 8007288:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800728c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800728e:	693b      	ldr	r3, [r7, #16]
 8007290:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007294:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8007296:	683b      	ldr	r3, [r7, #0]
 8007298:	695b      	ldr	r3, [r3, #20]
 800729a:	693a      	ldr	r2, [r7, #16]
 800729c:	4313      	orrs	r3, r2
 800729e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80072a0:	683b      	ldr	r3, [r7, #0]
 80072a2:	699b      	ldr	r3, [r3, #24]
 80072a4:	693a      	ldr	r2, [r7, #16]
 80072a6:	4313      	orrs	r3, r2
 80072a8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	693a      	ldr	r2, [r7, #16]
 80072ae:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	68fa      	ldr	r2, [r7, #12]
 80072b4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80072b6:	683b      	ldr	r3, [r7, #0]
 80072b8:	685a      	ldr	r2, [r3, #4]
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	697a      	ldr	r2, [r7, #20]
 80072c2:	621a      	str	r2, [r3, #32]
}
 80072c4:	bf00      	nop
 80072c6:	371c      	adds	r7, #28
 80072c8:	46bd      	mov	sp, r7
 80072ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072ce:	4770      	bx	lr
 80072d0:	40010000 	.word	0x40010000
 80072d4:	40010400 	.word	0x40010400

080072d8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80072d8:	b480      	push	{r7}
 80072da:	b087      	sub	sp, #28
 80072dc:	af00      	add	r7, sp, #0
 80072de:	6078      	str	r0, [r7, #4]
 80072e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	6a1b      	ldr	r3, [r3, #32]
 80072e6:	f023 0210 	bic.w	r2, r3, #16
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	6a1b      	ldr	r3, [r3, #32]
 80072f2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	685b      	ldr	r3, [r3, #4]
 80072f8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	699b      	ldr	r3, [r3, #24]
 80072fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8007300:	68fb      	ldr	r3, [r7, #12]
 8007302:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007306:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007308:	68fb      	ldr	r3, [r7, #12]
 800730a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800730e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007310:	683b      	ldr	r3, [r7, #0]
 8007312:	681b      	ldr	r3, [r3, #0]
 8007314:	021b      	lsls	r3, r3, #8
 8007316:	68fa      	ldr	r2, [r7, #12]
 8007318:	4313      	orrs	r3, r2
 800731a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800731c:	697b      	ldr	r3, [r7, #20]
 800731e:	f023 0320 	bic.w	r3, r3, #32
 8007322:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007324:	683b      	ldr	r3, [r7, #0]
 8007326:	689b      	ldr	r3, [r3, #8]
 8007328:	011b      	lsls	r3, r3, #4
 800732a:	697a      	ldr	r2, [r7, #20]
 800732c:	4313      	orrs	r3, r2
 800732e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	4a22      	ldr	r2, [pc, #136]	; (80073bc <TIM_OC2_SetConfig+0xe4>)
 8007334:	4293      	cmp	r3, r2
 8007336:	d003      	beq.n	8007340 <TIM_OC2_SetConfig+0x68>
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	4a21      	ldr	r2, [pc, #132]	; (80073c0 <TIM_OC2_SetConfig+0xe8>)
 800733c:	4293      	cmp	r3, r2
 800733e:	d10d      	bne.n	800735c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8007340:	697b      	ldr	r3, [r7, #20]
 8007342:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007346:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007348:	683b      	ldr	r3, [r7, #0]
 800734a:	68db      	ldr	r3, [r3, #12]
 800734c:	011b      	lsls	r3, r3, #4
 800734e:	697a      	ldr	r2, [r7, #20]
 8007350:	4313      	orrs	r3, r2
 8007352:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8007354:	697b      	ldr	r3, [r7, #20]
 8007356:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800735a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	4a17      	ldr	r2, [pc, #92]	; (80073bc <TIM_OC2_SetConfig+0xe4>)
 8007360:	4293      	cmp	r3, r2
 8007362:	d003      	beq.n	800736c <TIM_OC2_SetConfig+0x94>
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	4a16      	ldr	r2, [pc, #88]	; (80073c0 <TIM_OC2_SetConfig+0xe8>)
 8007368:	4293      	cmp	r3, r2
 800736a:	d113      	bne.n	8007394 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800736c:	693b      	ldr	r3, [r7, #16]
 800736e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007372:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007374:	693b      	ldr	r3, [r7, #16]
 8007376:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800737a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800737c:	683b      	ldr	r3, [r7, #0]
 800737e:	695b      	ldr	r3, [r3, #20]
 8007380:	009b      	lsls	r3, r3, #2
 8007382:	693a      	ldr	r2, [r7, #16]
 8007384:	4313      	orrs	r3, r2
 8007386:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007388:	683b      	ldr	r3, [r7, #0]
 800738a:	699b      	ldr	r3, [r3, #24]
 800738c:	009b      	lsls	r3, r3, #2
 800738e:	693a      	ldr	r2, [r7, #16]
 8007390:	4313      	orrs	r3, r2
 8007392:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	693a      	ldr	r2, [r7, #16]
 8007398:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	68fa      	ldr	r2, [r7, #12]
 800739e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80073a0:	683b      	ldr	r3, [r7, #0]
 80073a2:	685a      	ldr	r2, [r3, #4]
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	697a      	ldr	r2, [r7, #20]
 80073ac:	621a      	str	r2, [r3, #32]
}
 80073ae:	bf00      	nop
 80073b0:	371c      	adds	r7, #28
 80073b2:	46bd      	mov	sp, r7
 80073b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073b8:	4770      	bx	lr
 80073ba:	bf00      	nop
 80073bc:	40010000 	.word	0x40010000
 80073c0:	40010400 	.word	0x40010400

080073c4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80073c4:	b480      	push	{r7}
 80073c6:	b087      	sub	sp, #28
 80073c8:	af00      	add	r7, sp, #0
 80073ca:	6078      	str	r0, [r7, #4]
 80073cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	6a1b      	ldr	r3, [r3, #32]
 80073d2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	6a1b      	ldr	r3, [r3, #32]
 80073de:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	685b      	ldr	r3, [r3, #4]
 80073e4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	69db      	ldr	r3, [r3, #28]
 80073ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80073ec:	68fb      	ldr	r3, [r7, #12]
 80073ee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80073f2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80073f4:	68fb      	ldr	r3, [r7, #12]
 80073f6:	f023 0303 	bic.w	r3, r3, #3
 80073fa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80073fc:	683b      	ldr	r3, [r7, #0]
 80073fe:	681b      	ldr	r3, [r3, #0]
 8007400:	68fa      	ldr	r2, [r7, #12]
 8007402:	4313      	orrs	r3, r2
 8007404:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8007406:	697b      	ldr	r3, [r7, #20]
 8007408:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800740c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800740e:	683b      	ldr	r3, [r7, #0]
 8007410:	689b      	ldr	r3, [r3, #8]
 8007412:	021b      	lsls	r3, r3, #8
 8007414:	697a      	ldr	r2, [r7, #20]
 8007416:	4313      	orrs	r3, r2
 8007418:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	4a21      	ldr	r2, [pc, #132]	; (80074a4 <TIM_OC3_SetConfig+0xe0>)
 800741e:	4293      	cmp	r3, r2
 8007420:	d003      	beq.n	800742a <TIM_OC3_SetConfig+0x66>
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	4a20      	ldr	r2, [pc, #128]	; (80074a8 <TIM_OC3_SetConfig+0xe4>)
 8007426:	4293      	cmp	r3, r2
 8007428:	d10d      	bne.n	8007446 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800742a:	697b      	ldr	r3, [r7, #20]
 800742c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007430:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8007432:	683b      	ldr	r3, [r7, #0]
 8007434:	68db      	ldr	r3, [r3, #12]
 8007436:	021b      	lsls	r3, r3, #8
 8007438:	697a      	ldr	r2, [r7, #20]
 800743a:	4313      	orrs	r3, r2
 800743c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800743e:	697b      	ldr	r3, [r7, #20]
 8007440:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007444:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	4a16      	ldr	r2, [pc, #88]	; (80074a4 <TIM_OC3_SetConfig+0xe0>)
 800744a:	4293      	cmp	r3, r2
 800744c:	d003      	beq.n	8007456 <TIM_OC3_SetConfig+0x92>
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	4a15      	ldr	r2, [pc, #84]	; (80074a8 <TIM_OC3_SetConfig+0xe4>)
 8007452:	4293      	cmp	r3, r2
 8007454:	d113      	bne.n	800747e <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8007456:	693b      	ldr	r3, [r7, #16]
 8007458:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800745c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800745e:	693b      	ldr	r3, [r7, #16]
 8007460:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007464:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8007466:	683b      	ldr	r3, [r7, #0]
 8007468:	695b      	ldr	r3, [r3, #20]
 800746a:	011b      	lsls	r3, r3, #4
 800746c:	693a      	ldr	r2, [r7, #16]
 800746e:	4313      	orrs	r3, r2
 8007470:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8007472:	683b      	ldr	r3, [r7, #0]
 8007474:	699b      	ldr	r3, [r3, #24]
 8007476:	011b      	lsls	r3, r3, #4
 8007478:	693a      	ldr	r2, [r7, #16]
 800747a:	4313      	orrs	r3, r2
 800747c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	693a      	ldr	r2, [r7, #16]
 8007482:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	68fa      	ldr	r2, [r7, #12]
 8007488:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800748a:	683b      	ldr	r3, [r7, #0]
 800748c:	685a      	ldr	r2, [r3, #4]
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	697a      	ldr	r2, [r7, #20]
 8007496:	621a      	str	r2, [r3, #32]
}
 8007498:	bf00      	nop
 800749a:	371c      	adds	r7, #28
 800749c:	46bd      	mov	sp, r7
 800749e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074a2:	4770      	bx	lr
 80074a4:	40010000 	.word	0x40010000
 80074a8:	40010400 	.word	0x40010400

080074ac <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80074ac:	b480      	push	{r7}
 80074ae:	b087      	sub	sp, #28
 80074b0:	af00      	add	r7, sp, #0
 80074b2:	6078      	str	r0, [r7, #4]
 80074b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	6a1b      	ldr	r3, [r3, #32]
 80074ba:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	6a1b      	ldr	r3, [r3, #32]
 80074c6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	685b      	ldr	r3, [r3, #4]
 80074cc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	69db      	ldr	r3, [r3, #28]
 80074d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80074d4:	68fb      	ldr	r3, [r7, #12]
 80074d6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80074da:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80074dc:	68fb      	ldr	r3, [r7, #12]
 80074de:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80074e2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80074e4:	683b      	ldr	r3, [r7, #0]
 80074e6:	681b      	ldr	r3, [r3, #0]
 80074e8:	021b      	lsls	r3, r3, #8
 80074ea:	68fa      	ldr	r2, [r7, #12]
 80074ec:	4313      	orrs	r3, r2
 80074ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80074f0:	693b      	ldr	r3, [r7, #16]
 80074f2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80074f6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80074f8:	683b      	ldr	r3, [r7, #0]
 80074fa:	689b      	ldr	r3, [r3, #8]
 80074fc:	031b      	lsls	r3, r3, #12
 80074fe:	693a      	ldr	r2, [r7, #16]
 8007500:	4313      	orrs	r3, r2
 8007502:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	4a12      	ldr	r2, [pc, #72]	; (8007550 <TIM_OC4_SetConfig+0xa4>)
 8007508:	4293      	cmp	r3, r2
 800750a:	d003      	beq.n	8007514 <TIM_OC4_SetConfig+0x68>
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	4a11      	ldr	r2, [pc, #68]	; (8007554 <TIM_OC4_SetConfig+0xa8>)
 8007510:	4293      	cmp	r3, r2
 8007512:	d109      	bne.n	8007528 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007514:	697b      	ldr	r3, [r7, #20]
 8007516:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800751a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800751c:	683b      	ldr	r3, [r7, #0]
 800751e:	695b      	ldr	r3, [r3, #20]
 8007520:	019b      	lsls	r3, r3, #6
 8007522:	697a      	ldr	r2, [r7, #20]
 8007524:	4313      	orrs	r3, r2
 8007526:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	697a      	ldr	r2, [r7, #20]
 800752c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	68fa      	ldr	r2, [r7, #12]
 8007532:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007534:	683b      	ldr	r3, [r7, #0]
 8007536:	685a      	ldr	r2, [r3, #4]
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	693a      	ldr	r2, [r7, #16]
 8007540:	621a      	str	r2, [r3, #32]
}
 8007542:	bf00      	nop
 8007544:	371c      	adds	r7, #28
 8007546:	46bd      	mov	sp, r7
 8007548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800754c:	4770      	bx	lr
 800754e:	bf00      	nop
 8007550:	40010000 	.word	0x40010000
 8007554:	40010400 	.word	0x40010400

08007558 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007558:	b480      	push	{r7}
 800755a:	b087      	sub	sp, #28
 800755c:	af00      	add	r7, sp, #0
 800755e:	60f8      	str	r0, [r7, #12]
 8007560:	60b9      	str	r1, [r7, #8]
 8007562:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007564:	68fb      	ldr	r3, [r7, #12]
 8007566:	6a1b      	ldr	r3, [r3, #32]
 8007568:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800756a:	68fb      	ldr	r3, [r7, #12]
 800756c:	6a1b      	ldr	r3, [r3, #32]
 800756e:	f023 0201 	bic.w	r2, r3, #1
 8007572:	68fb      	ldr	r3, [r7, #12]
 8007574:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007576:	68fb      	ldr	r3, [r7, #12]
 8007578:	699b      	ldr	r3, [r3, #24]
 800757a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800757c:	693b      	ldr	r3, [r7, #16]
 800757e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007582:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	011b      	lsls	r3, r3, #4
 8007588:	693a      	ldr	r2, [r7, #16]
 800758a:	4313      	orrs	r3, r2
 800758c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800758e:	697b      	ldr	r3, [r7, #20]
 8007590:	f023 030a 	bic.w	r3, r3, #10
 8007594:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007596:	697a      	ldr	r2, [r7, #20]
 8007598:	68bb      	ldr	r3, [r7, #8]
 800759a:	4313      	orrs	r3, r2
 800759c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800759e:	68fb      	ldr	r3, [r7, #12]
 80075a0:	693a      	ldr	r2, [r7, #16]
 80075a2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80075a4:	68fb      	ldr	r3, [r7, #12]
 80075a6:	697a      	ldr	r2, [r7, #20]
 80075a8:	621a      	str	r2, [r3, #32]
}
 80075aa:	bf00      	nop
 80075ac:	371c      	adds	r7, #28
 80075ae:	46bd      	mov	sp, r7
 80075b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075b4:	4770      	bx	lr

080075b6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80075b6:	b480      	push	{r7}
 80075b8:	b087      	sub	sp, #28
 80075ba:	af00      	add	r7, sp, #0
 80075bc:	60f8      	str	r0, [r7, #12]
 80075be:	60b9      	str	r1, [r7, #8]
 80075c0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80075c2:	68fb      	ldr	r3, [r7, #12]
 80075c4:	6a1b      	ldr	r3, [r3, #32]
 80075c6:	f023 0210 	bic.w	r2, r3, #16
 80075ca:	68fb      	ldr	r3, [r7, #12]
 80075cc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80075ce:	68fb      	ldr	r3, [r7, #12]
 80075d0:	699b      	ldr	r3, [r3, #24]
 80075d2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80075d4:	68fb      	ldr	r3, [r7, #12]
 80075d6:	6a1b      	ldr	r3, [r3, #32]
 80075d8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80075da:	697b      	ldr	r3, [r7, #20]
 80075dc:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80075e0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	031b      	lsls	r3, r3, #12
 80075e6:	697a      	ldr	r2, [r7, #20]
 80075e8:	4313      	orrs	r3, r2
 80075ea:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80075ec:	693b      	ldr	r3, [r7, #16]
 80075ee:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80075f2:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80075f4:	68bb      	ldr	r3, [r7, #8]
 80075f6:	011b      	lsls	r3, r3, #4
 80075f8:	693a      	ldr	r2, [r7, #16]
 80075fa:	4313      	orrs	r3, r2
 80075fc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80075fe:	68fb      	ldr	r3, [r7, #12]
 8007600:	697a      	ldr	r2, [r7, #20]
 8007602:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007604:	68fb      	ldr	r3, [r7, #12]
 8007606:	693a      	ldr	r2, [r7, #16]
 8007608:	621a      	str	r2, [r3, #32]
}
 800760a:	bf00      	nop
 800760c:	371c      	adds	r7, #28
 800760e:	46bd      	mov	sp, r7
 8007610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007614:	4770      	bx	lr

08007616 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8007616:	b480      	push	{r7}
 8007618:	b085      	sub	sp, #20
 800761a:	af00      	add	r7, sp, #0
 800761c:	6078      	str	r0, [r7, #4]
 800761e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	689b      	ldr	r3, [r3, #8]
 8007624:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007626:	68fb      	ldr	r3, [r7, #12]
 8007628:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800762c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800762e:	683a      	ldr	r2, [r7, #0]
 8007630:	68fb      	ldr	r3, [r7, #12]
 8007632:	4313      	orrs	r3, r2
 8007634:	f043 0307 	orr.w	r3, r3, #7
 8007638:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	68fa      	ldr	r2, [r7, #12]
 800763e:	609a      	str	r2, [r3, #8]
}
 8007640:	bf00      	nop
 8007642:	3714      	adds	r7, #20
 8007644:	46bd      	mov	sp, r7
 8007646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800764a:	4770      	bx	lr

0800764c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800764c:	b480      	push	{r7}
 800764e:	b087      	sub	sp, #28
 8007650:	af00      	add	r7, sp, #0
 8007652:	60f8      	str	r0, [r7, #12]
 8007654:	60b9      	str	r1, [r7, #8]
 8007656:	607a      	str	r2, [r7, #4]
 8007658:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800765a:	68fb      	ldr	r3, [r7, #12]
 800765c:	689b      	ldr	r3, [r3, #8]
 800765e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007660:	697b      	ldr	r3, [r7, #20]
 8007662:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007666:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007668:	683b      	ldr	r3, [r7, #0]
 800766a:	021a      	lsls	r2, r3, #8
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	431a      	orrs	r2, r3
 8007670:	68bb      	ldr	r3, [r7, #8]
 8007672:	4313      	orrs	r3, r2
 8007674:	697a      	ldr	r2, [r7, #20]
 8007676:	4313      	orrs	r3, r2
 8007678:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800767a:	68fb      	ldr	r3, [r7, #12]
 800767c:	697a      	ldr	r2, [r7, #20]
 800767e:	609a      	str	r2, [r3, #8]
}
 8007680:	bf00      	nop
 8007682:	371c      	adds	r7, #28
 8007684:	46bd      	mov	sp, r7
 8007686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800768a:	4770      	bx	lr

0800768c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800768c:	b480      	push	{r7}
 800768e:	b085      	sub	sp, #20
 8007690:	af00      	add	r7, sp, #0
 8007692:	6078      	str	r0, [r7, #4]
 8007694:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800769c:	2b01      	cmp	r3, #1
 800769e:	d101      	bne.n	80076a4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80076a0:	2302      	movs	r3, #2
 80076a2:	e05a      	b.n	800775a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	2201      	movs	r2, #1
 80076a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	2202      	movs	r2, #2
 80076b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	681b      	ldr	r3, [r3, #0]
 80076b8:	685b      	ldr	r3, [r3, #4]
 80076ba:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	681b      	ldr	r3, [r3, #0]
 80076c0:	689b      	ldr	r3, [r3, #8]
 80076c2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80076c4:	68fb      	ldr	r3, [r7, #12]
 80076c6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80076ca:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80076cc:	683b      	ldr	r3, [r7, #0]
 80076ce:	681b      	ldr	r3, [r3, #0]
 80076d0:	68fa      	ldr	r2, [r7, #12]
 80076d2:	4313      	orrs	r3, r2
 80076d4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	681b      	ldr	r3, [r3, #0]
 80076da:	68fa      	ldr	r2, [r7, #12]
 80076dc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	681b      	ldr	r3, [r3, #0]
 80076e2:	4a21      	ldr	r2, [pc, #132]	; (8007768 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80076e4:	4293      	cmp	r3, r2
 80076e6:	d022      	beq.n	800772e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	681b      	ldr	r3, [r3, #0]
 80076ec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80076f0:	d01d      	beq.n	800772e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	681b      	ldr	r3, [r3, #0]
 80076f6:	4a1d      	ldr	r2, [pc, #116]	; (800776c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80076f8:	4293      	cmp	r3, r2
 80076fa:	d018      	beq.n	800772e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	681b      	ldr	r3, [r3, #0]
 8007700:	4a1b      	ldr	r2, [pc, #108]	; (8007770 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8007702:	4293      	cmp	r3, r2
 8007704:	d013      	beq.n	800772e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	681b      	ldr	r3, [r3, #0]
 800770a:	4a1a      	ldr	r2, [pc, #104]	; (8007774 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800770c:	4293      	cmp	r3, r2
 800770e:	d00e      	beq.n	800772e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	681b      	ldr	r3, [r3, #0]
 8007714:	4a18      	ldr	r2, [pc, #96]	; (8007778 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8007716:	4293      	cmp	r3, r2
 8007718:	d009      	beq.n	800772e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	681b      	ldr	r3, [r3, #0]
 800771e:	4a17      	ldr	r2, [pc, #92]	; (800777c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8007720:	4293      	cmp	r3, r2
 8007722:	d004      	beq.n	800772e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	681b      	ldr	r3, [r3, #0]
 8007728:	4a15      	ldr	r2, [pc, #84]	; (8007780 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800772a:	4293      	cmp	r3, r2
 800772c:	d10c      	bne.n	8007748 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800772e:	68bb      	ldr	r3, [r7, #8]
 8007730:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007734:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007736:	683b      	ldr	r3, [r7, #0]
 8007738:	685b      	ldr	r3, [r3, #4]
 800773a:	68ba      	ldr	r2, [r7, #8]
 800773c:	4313      	orrs	r3, r2
 800773e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	681b      	ldr	r3, [r3, #0]
 8007744:	68ba      	ldr	r2, [r7, #8]
 8007746:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	2201      	movs	r2, #1
 800774c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	2200      	movs	r2, #0
 8007754:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007758:	2300      	movs	r3, #0
}
 800775a:	4618      	mov	r0, r3
 800775c:	3714      	adds	r7, #20
 800775e:	46bd      	mov	sp, r7
 8007760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007764:	4770      	bx	lr
 8007766:	bf00      	nop
 8007768:	40010000 	.word	0x40010000
 800776c:	40000400 	.word	0x40000400
 8007770:	40000800 	.word	0x40000800
 8007774:	40000c00 	.word	0x40000c00
 8007778:	40010400 	.word	0x40010400
 800777c:	40014000 	.word	0x40014000
 8007780:	40001800 	.word	0x40001800

08007784 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007784:	b480      	push	{r7}
 8007786:	b083      	sub	sp, #12
 8007788:	af00      	add	r7, sp, #0
 800778a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800778c:	bf00      	nop
 800778e:	370c      	adds	r7, #12
 8007790:	46bd      	mov	sp, r7
 8007792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007796:	4770      	bx	lr

08007798 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007798:	b480      	push	{r7}
 800779a:	b083      	sub	sp, #12
 800779c:	af00      	add	r7, sp, #0
 800779e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80077a0:	bf00      	nop
 80077a2:	370c      	adds	r7, #12
 80077a4:	46bd      	mov	sp, r7
 80077a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077aa:	4770      	bx	lr

080077ac <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80077ac:	b580      	push	{r7, lr}
 80077ae:	b082      	sub	sp, #8
 80077b0:	af00      	add	r7, sp, #0
 80077b2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	2b00      	cmp	r3, #0
 80077b8:	d101      	bne.n	80077be <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80077ba:	2301      	movs	r3, #1
 80077bc:	e03f      	b.n	800783e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80077c4:	b2db      	uxtb	r3, r3
 80077c6:	2b00      	cmp	r3, #0
 80077c8:	d106      	bne.n	80077d8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	2200      	movs	r2, #0
 80077ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80077d2:	6878      	ldr	r0, [r7, #4]
 80077d4:	f7fb fbe4 	bl	8002fa0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	2224      	movs	r2, #36	; 0x24
 80077dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	681b      	ldr	r3, [r3, #0]
 80077e4:	68da      	ldr	r2, [r3, #12]
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	681b      	ldr	r3, [r3, #0]
 80077ea:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80077ee:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80077f0:	6878      	ldr	r0, [r7, #4]
 80077f2:	f000 fc7b 	bl	80080ec <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	681b      	ldr	r3, [r3, #0]
 80077fa:	691a      	ldr	r2, [r3, #16]
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	681b      	ldr	r3, [r3, #0]
 8007800:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007804:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	681b      	ldr	r3, [r3, #0]
 800780a:	695a      	ldr	r2, [r3, #20]
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	681b      	ldr	r3, [r3, #0]
 8007810:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007814:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	681b      	ldr	r3, [r3, #0]
 800781a:	68da      	ldr	r2, [r3, #12]
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	681b      	ldr	r3, [r3, #0]
 8007820:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007824:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	2200      	movs	r2, #0
 800782a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	2220      	movs	r2, #32
 8007830:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	2220      	movs	r2, #32
 8007838:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800783c:	2300      	movs	r3, #0
}
 800783e:	4618      	mov	r0, r3
 8007840:	3708      	adds	r7, #8
 8007842:	46bd      	mov	sp, r7
 8007844:	bd80      	pop	{r7, pc}
	...

08007848 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007848:	b580      	push	{r7, lr}
 800784a:	b0ba      	sub	sp, #232	; 0xe8
 800784c:	af00      	add	r7, sp, #0
 800784e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	681b      	ldr	r3, [r3, #0]
 8007854:	681b      	ldr	r3, [r3, #0]
 8007856:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	681b      	ldr	r3, [r3, #0]
 800785e:	68db      	ldr	r3, [r3, #12]
 8007860:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	681b      	ldr	r3, [r3, #0]
 8007868:	695b      	ldr	r3, [r3, #20]
 800786a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800786e:	2300      	movs	r3, #0
 8007870:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8007874:	2300      	movs	r3, #0
 8007876:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800787a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800787e:	f003 030f 	and.w	r3, r3, #15
 8007882:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8007886:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800788a:	2b00      	cmp	r3, #0
 800788c:	d10f      	bne.n	80078ae <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800788e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007892:	f003 0320 	and.w	r3, r3, #32
 8007896:	2b00      	cmp	r3, #0
 8007898:	d009      	beq.n	80078ae <HAL_UART_IRQHandler+0x66>
 800789a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800789e:	f003 0320 	and.w	r3, r3, #32
 80078a2:	2b00      	cmp	r3, #0
 80078a4:	d003      	beq.n	80078ae <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80078a6:	6878      	ldr	r0, [r7, #4]
 80078a8:	f000 fb65 	bl	8007f76 <UART_Receive_IT>
      return;
 80078ac:	e256      	b.n	8007d5c <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80078ae:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80078b2:	2b00      	cmp	r3, #0
 80078b4:	f000 80de 	beq.w	8007a74 <HAL_UART_IRQHandler+0x22c>
 80078b8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80078bc:	f003 0301 	and.w	r3, r3, #1
 80078c0:	2b00      	cmp	r3, #0
 80078c2:	d106      	bne.n	80078d2 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80078c4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80078c8:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80078cc:	2b00      	cmp	r3, #0
 80078ce:	f000 80d1 	beq.w	8007a74 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80078d2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80078d6:	f003 0301 	and.w	r3, r3, #1
 80078da:	2b00      	cmp	r3, #0
 80078dc:	d00b      	beq.n	80078f6 <HAL_UART_IRQHandler+0xae>
 80078de:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80078e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80078e6:	2b00      	cmp	r3, #0
 80078e8:	d005      	beq.n	80078f6 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80078ee:	f043 0201 	orr.w	r2, r3, #1
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80078f6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80078fa:	f003 0304 	and.w	r3, r3, #4
 80078fe:	2b00      	cmp	r3, #0
 8007900:	d00b      	beq.n	800791a <HAL_UART_IRQHandler+0xd2>
 8007902:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007906:	f003 0301 	and.w	r3, r3, #1
 800790a:	2b00      	cmp	r3, #0
 800790c:	d005      	beq.n	800791a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007912:	f043 0202 	orr.w	r2, r3, #2
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800791a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800791e:	f003 0302 	and.w	r3, r3, #2
 8007922:	2b00      	cmp	r3, #0
 8007924:	d00b      	beq.n	800793e <HAL_UART_IRQHandler+0xf6>
 8007926:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800792a:	f003 0301 	and.w	r3, r3, #1
 800792e:	2b00      	cmp	r3, #0
 8007930:	d005      	beq.n	800793e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007936:	f043 0204 	orr.w	r2, r3, #4
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800793e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007942:	f003 0308 	and.w	r3, r3, #8
 8007946:	2b00      	cmp	r3, #0
 8007948:	d011      	beq.n	800796e <HAL_UART_IRQHandler+0x126>
 800794a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800794e:	f003 0320 	and.w	r3, r3, #32
 8007952:	2b00      	cmp	r3, #0
 8007954:	d105      	bne.n	8007962 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8007956:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800795a:	f003 0301 	and.w	r3, r3, #1
 800795e:	2b00      	cmp	r3, #0
 8007960:	d005      	beq.n	800796e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007966:	f043 0208 	orr.w	r2, r3, #8
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007972:	2b00      	cmp	r3, #0
 8007974:	f000 81ed 	beq.w	8007d52 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007978:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800797c:	f003 0320 	and.w	r3, r3, #32
 8007980:	2b00      	cmp	r3, #0
 8007982:	d008      	beq.n	8007996 <HAL_UART_IRQHandler+0x14e>
 8007984:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007988:	f003 0320 	and.w	r3, r3, #32
 800798c:	2b00      	cmp	r3, #0
 800798e:	d002      	beq.n	8007996 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8007990:	6878      	ldr	r0, [r7, #4]
 8007992:	f000 faf0 	bl	8007f76 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	681b      	ldr	r3, [r3, #0]
 800799a:	695b      	ldr	r3, [r3, #20]
 800799c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80079a0:	2b40      	cmp	r3, #64	; 0x40
 80079a2:	bf0c      	ite	eq
 80079a4:	2301      	moveq	r3, #1
 80079a6:	2300      	movne	r3, #0
 80079a8:	b2db      	uxtb	r3, r3
 80079aa:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80079b2:	f003 0308 	and.w	r3, r3, #8
 80079b6:	2b00      	cmp	r3, #0
 80079b8:	d103      	bne.n	80079c2 <HAL_UART_IRQHandler+0x17a>
 80079ba:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80079be:	2b00      	cmp	r3, #0
 80079c0:	d04f      	beq.n	8007a62 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80079c2:	6878      	ldr	r0, [r7, #4]
 80079c4:	f000 f9f8 	bl	8007db8 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	681b      	ldr	r3, [r3, #0]
 80079cc:	695b      	ldr	r3, [r3, #20]
 80079ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80079d2:	2b40      	cmp	r3, #64	; 0x40
 80079d4:	d141      	bne.n	8007a5a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	681b      	ldr	r3, [r3, #0]
 80079da:	3314      	adds	r3, #20
 80079dc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80079e0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80079e4:	e853 3f00 	ldrex	r3, [r3]
 80079e8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80079ec:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80079f0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80079f4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	681b      	ldr	r3, [r3, #0]
 80079fc:	3314      	adds	r3, #20
 80079fe:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8007a02:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8007a06:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a0a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8007a0e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8007a12:	e841 2300 	strex	r3, r2, [r1]
 8007a16:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8007a1a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8007a1e:	2b00      	cmp	r3, #0
 8007a20:	d1d9      	bne.n	80079d6 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a26:	2b00      	cmp	r3, #0
 8007a28:	d013      	beq.n	8007a52 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a2e:	4a7d      	ldr	r2, [pc, #500]	; (8007c24 <HAL_UART_IRQHandler+0x3dc>)
 8007a30:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a36:	4618      	mov	r0, r3
 8007a38:	f7fc fd1e 	bl	8004478 <HAL_DMA_Abort_IT>
 8007a3c:	4603      	mov	r3, r0
 8007a3e:	2b00      	cmp	r3, #0
 8007a40:	d016      	beq.n	8007a70 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a46:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007a48:	687a      	ldr	r2, [r7, #4]
 8007a4a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8007a4c:	4610      	mov	r0, r2
 8007a4e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007a50:	e00e      	b.n	8007a70 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8007a52:	6878      	ldr	r0, [r7, #4]
 8007a54:	f000 f99a 	bl	8007d8c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007a58:	e00a      	b.n	8007a70 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007a5a:	6878      	ldr	r0, [r7, #4]
 8007a5c:	f000 f996 	bl	8007d8c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007a60:	e006      	b.n	8007a70 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8007a62:	6878      	ldr	r0, [r7, #4]
 8007a64:	f000 f992 	bl	8007d8c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	2200      	movs	r2, #0
 8007a6c:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8007a6e:	e170      	b.n	8007d52 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007a70:	bf00      	nop
    return;
 8007a72:	e16e      	b.n	8007d52 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007a78:	2b01      	cmp	r3, #1
 8007a7a:	f040 814a 	bne.w	8007d12 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8007a7e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007a82:	f003 0310 	and.w	r3, r3, #16
 8007a86:	2b00      	cmp	r3, #0
 8007a88:	f000 8143 	beq.w	8007d12 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8007a8c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007a90:	f003 0310 	and.w	r3, r3, #16
 8007a94:	2b00      	cmp	r3, #0
 8007a96:	f000 813c 	beq.w	8007d12 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8007a9a:	2300      	movs	r3, #0
 8007a9c:	60bb      	str	r3, [r7, #8]
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	681b      	ldr	r3, [r3, #0]
 8007aa2:	681b      	ldr	r3, [r3, #0]
 8007aa4:	60bb      	str	r3, [r7, #8]
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	681b      	ldr	r3, [r3, #0]
 8007aaa:	685b      	ldr	r3, [r3, #4]
 8007aac:	60bb      	str	r3, [r7, #8]
 8007aae:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	681b      	ldr	r3, [r3, #0]
 8007ab4:	695b      	ldr	r3, [r3, #20]
 8007ab6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007aba:	2b40      	cmp	r3, #64	; 0x40
 8007abc:	f040 80b4 	bne.w	8007c28 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ac4:	681b      	ldr	r3, [r3, #0]
 8007ac6:	685b      	ldr	r3, [r3, #4]
 8007ac8:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8007acc:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8007ad0:	2b00      	cmp	r3, #0
 8007ad2:	f000 8140 	beq.w	8007d56 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8007ada:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8007ade:	429a      	cmp	r2, r3
 8007ae0:	f080 8139 	bcs.w	8007d56 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8007aea:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007af0:	69db      	ldr	r3, [r3, #28]
 8007af2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007af6:	f000 8088 	beq.w	8007c0a <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	681b      	ldr	r3, [r3, #0]
 8007afe:	330c      	adds	r3, #12
 8007b00:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b04:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007b08:	e853 3f00 	ldrex	r3, [r3]
 8007b0c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8007b10:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007b14:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007b18:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	681b      	ldr	r3, [r3, #0]
 8007b20:	330c      	adds	r3, #12
 8007b22:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8007b26:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8007b2a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b2e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8007b32:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8007b36:	e841 2300 	strex	r3, r2, [r1]
 8007b3a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8007b3e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007b42:	2b00      	cmp	r3, #0
 8007b44:	d1d9      	bne.n	8007afa <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	681b      	ldr	r3, [r3, #0]
 8007b4a:	3314      	adds	r3, #20
 8007b4c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b4e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007b50:	e853 3f00 	ldrex	r3, [r3]
 8007b54:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8007b56:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007b58:	f023 0301 	bic.w	r3, r3, #1
 8007b5c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	681b      	ldr	r3, [r3, #0]
 8007b64:	3314      	adds	r3, #20
 8007b66:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8007b6a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8007b6e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b70:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8007b72:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8007b76:	e841 2300 	strex	r3, r2, [r1]
 8007b7a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8007b7c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007b7e:	2b00      	cmp	r3, #0
 8007b80:	d1e1      	bne.n	8007b46 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	681b      	ldr	r3, [r3, #0]
 8007b86:	3314      	adds	r3, #20
 8007b88:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b8a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007b8c:	e853 3f00 	ldrex	r3, [r3]
 8007b90:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8007b92:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007b94:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007b98:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	681b      	ldr	r3, [r3, #0]
 8007ba0:	3314      	adds	r3, #20
 8007ba2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8007ba6:	66fa      	str	r2, [r7, #108]	; 0x6c
 8007ba8:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007baa:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8007bac:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8007bae:	e841 2300 	strex	r3, r2, [r1]
 8007bb2:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8007bb4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007bb6:	2b00      	cmp	r3, #0
 8007bb8:	d1e3      	bne.n	8007b82 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	2220      	movs	r2, #32
 8007bbe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	2200      	movs	r2, #0
 8007bc6:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	681b      	ldr	r3, [r3, #0]
 8007bcc:	330c      	adds	r3, #12
 8007bce:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007bd0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007bd2:	e853 3f00 	ldrex	r3, [r3]
 8007bd6:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8007bd8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007bda:	f023 0310 	bic.w	r3, r3, #16
 8007bde:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	681b      	ldr	r3, [r3, #0]
 8007be6:	330c      	adds	r3, #12
 8007be8:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8007bec:	65ba      	str	r2, [r7, #88]	; 0x58
 8007bee:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007bf0:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8007bf2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007bf4:	e841 2300 	strex	r3, r2, [r1]
 8007bf8:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8007bfa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007bfc:	2b00      	cmp	r3, #0
 8007bfe:	d1e3      	bne.n	8007bc8 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c04:	4618      	mov	r0, r3
 8007c06:	f7fc fbc7 	bl	8004398 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007c12:	b29b      	uxth	r3, r3
 8007c14:	1ad3      	subs	r3, r2, r3
 8007c16:	b29b      	uxth	r3, r3
 8007c18:	4619      	mov	r1, r3
 8007c1a:	6878      	ldr	r0, [r7, #4]
 8007c1c:	f000 f8c0 	bl	8007da0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8007c20:	e099      	b.n	8007d56 <HAL_UART_IRQHandler+0x50e>
 8007c22:	bf00      	nop
 8007c24:	08007e7f 	.word	0x08007e7f
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007c30:	b29b      	uxth	r3, r3
 8007c32:	1ad3      	subs	r3, r2, r3
 8007c34:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007c3c:	b29b      	uxth	r3, r3
 8007c3e:	2b00      	cmp	r3, #0
 8007c40:	f000 808b 	beq.w	8007d5a <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8007c44:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007c48:	2b00      	cmp	r3, #0
 8007c4a:	f000 8086 	beq.w	8007d5a <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	681b      	ldr	r3, [r3, #0]
 8007c52:	330c      	adds	r3, #12
 8007c54:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c58:	e853 3f00 	ldrex	r3, [r3]
 8007c5c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007c5e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007c60:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007c64:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	681b      	ldr	r3, [r3, #0]
 8007c6c:	330c      	adds	r3, #12
 8007c6e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8007c72:	647a      	str	r2, [r7, #68]	; 0x44
 8007c74:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c76:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007c78:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007c7a:	e841 2300 	strex	r3, r2, [r1]
 8007c7e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007c80:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007c82:	2b00      	cmp	r3, #0
 8007c84:	d1e3      	bne.n	8007c4e <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	681b      	ldr	r3, [r3, #0]
 8007c8a:	3314      	adds	r3, #20
 8007c8c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c90:	e853 3f00 	ldrex	r3, [r3]
 8007c94:	623b      	str	r3, [r7, #32]
   return(result);
 8007c96:	6a3b      	ldr	r3, [r7, #32]
 8007c98:	f023 0301 	bic.w	r3, r3, #1
 8007c9c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	681b      	ldr	r3, [r3, #0]
 8007ca4:	3314      	adds	r3, #20
 8007ca6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8007caa:	633a      	str	r2, [r7, #48]	; 0x30
 8007cac:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007cae:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007cb0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007cb2:	e841 2300 	strex	r3, r2, [r1]
 8007cb6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007cb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007cba:	2b00      	cmp	r3, #0
 8007cbc:	d1e3      	bne.n	8007c86 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	2220      	movs	r2, #32
 8007cc2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	2200      	movs	r2, #0
 8007cca:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	681b      	ldr	r3, [r3, #0]
 8007cd0:	330c      	adds	r3, #12
 8007cd2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007cd4:	693b      	ldr	r3, [r7, #16]
 8007cd6:	e853 3f00 	ldrex	r3, [r3]
 8007cda:	60fb      	str	r3, [r7, #12]
   return(result);
 8007cdc:	68fb      	ldr	r3, [r7, #12]
 8007cde:	f023 0310 	bic.w	r3, r3, #16
 8007ce2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	681b      	ldr	r3, [r3, #0]
 8007cea:	330c      	adds	r3, #12
 8007cec:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8007cf0:	61fa      	str	r2, [r7, #28]
 8007cf2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007cf4:	69b9      	ldr	r1, [r7, #24]
 8007cf6:	69fa      	ldr	r2, [r7, #28]
 8007cf8:	e841 2300 	strex	r3, r2, [r1]
 8007cfc:	617b      	str	r3, [r7, #20]
   return(result);
 8007cfe:	697b      	ldr	r3, [r7, #20]
 8007d00:	2b00      	cmp	r3, #0
 8007d02:	d1e3      	bne.n	8007ccc <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8007d04:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007d08:	4619      	mov	r1, r3
 8007d0a:	6878      	ldr	r0, [r7, #4]
 8007d0c:	f000 f848 	bl	8007da0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8007d10:	e023      	b.n	8007d5a <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8007d12:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007d16:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007d1a:	2b00      	cmp	r3, #0
 8007d1c:	d009      	beq.n	8007d32 <HAL_UART_IRQHandler+0x4ea>
 8007d1e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007d22:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007d26:	2b00      	cmp	r3, #0
 8007d28:	d003      	beq.n	8007d32 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8007d2a:	6878      	ldr	r0, [r7, #4]
 8007d2c:	f000 f8bb 	bl	8007ea6 <UART_Transmit_IT>
    return;
 8007d30:	e014      	b.n	8007d5c <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8007d32:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007d36:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007d3a:	2b00      	cmp	r3, #0
 8007d3c:	d00e      	beq.n	8007d5c <HAL_UART_IRQHandler+0x514>
 8007d3e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007d42:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007d46:	2b00      	cmp	r3, #0
 8007d48:	d008      	beq.n	8007d5c <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8007d4a:	6878      	ldr	r0, [r7, #4]
 8007d4c:	f000 f8fb 	bl	8007f46 <UART_EndTransmit_IT>
    return;
 8007d50:	e004      	b.n	8007d5c <HAL_UART_IRQHandler+0x514>
    return;
 8007d52:	bf00      	nop
 8007d54:	e002      	b.n	8007d5c <HAL_UART_IRQHandler+0x514>
      return;
 8007d56:	bf00      	nop
 8007d58:	e000      	b.n	8007d5c <HAL_UART_IRQHandler+0x514>
      return;
 8007d5a:	bf00      	nop
  }
}
 8007d5c:	37e8      	adds	r7, #232	; 0xe8
 8007d5e:	46bd      	mov	sp, r7
 8007d60:	bd80      	pop	{r7, pc}
 8007d62:	bf00      	nop

08007d64 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8007d64:	b480      	push	{r7}
 8007d66:	b083      	sub	sp, #12
 8007d68:	af00      	add	r7, sp, #0
 8007d6a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8007d6c:	bf00      	nop
 8007d6e:	370c      	adds	r7, #12
 8007d70:	46bd      	mov	sp, r7
 8007d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d76:	4770      	bx	lr

08007d78 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8007d78:	b480      	push	{r7}
 8007d7a:	b083      	sub	sp, #12
 8007d7c:	af00      	add	r7, sp, #0
 8007d7e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8007d80:	bf00      	nop
 8007d82:	370c      	adds	r7, #12
 8007d84:	46bd      	mov	sp, r7
 8007d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d8a:	4770      	bx	lr

08007d8c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007d8c:	b480      	push	{r7}
 8007d8e:	b083      	sub	sp, #12
 8007d90:	af00      	add	r7, sp, #0
 8007d92:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8007d94:	bf00      	nop
 8007d96:	370c      	adds	r7, #12
 8007d98:	46bd      	mov	sp, r7
 8007d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d9e:	4770      	bx	lr

08007da0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8007da0:	b480      	push	{r7}
 8007da2:	b083      	sub	sp, #12
 8007da4:	af00      	add	r7, sp, #0
 8007da6:	6078      	str	r0, [r7, #4]
 8007da8:	460b      	mov	r3, r1
 8007daa:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8007dac:	bf00      	nop
 8007dae:	370c      	adds	r7, #12
 8007db0:	46bd      	mov	sp, r7
 8007db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007db6:	4770      	bx	lr

08007db8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007db8:	b480      	push	{r7}
 8007dba:	b095      	sub	sp, #84	; 0x54
 8007dbc:	af00      	add	r7, sp, #0
 8007dbe:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	681b      	ldr	r3, [r3, #0]
 8007dc4:	330c      	adds	r3, #12
 8007dc6:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007dc8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007dca:	e853 3f00 	ldrex	r3, [r3]
 8007dce:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007dd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007dd2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007dd6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	681b      	ldr	r3, [r3, #0]
 8007ddc:	330c      	adds	r3, #12
 8007dde:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8007de0:	643a      	str	r2, [r7, #64]	; 0x40
 8007de2:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007de4:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007de6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007de8:	e841 2300 	strex	r3, r2, [r1]
 8007dec:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007dee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007df0:	2b00      	cmp	r3, #0
 8007df2:	d1e5      	bne.n	8007dc0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	681b      	ldr	r3, [r3, #0]
 8007df8:	3314      	adds	r3, #20
 8007dfa:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007dfc:	6a3b      	ldr	r3, [r7, #32]
 8007dfe:	e853 3f00 	ldrex	r3, [r3]
 8007e02:	61fb      	str	r3, [r7, #28]
   return(result);
 8007e04:	69fb      	ldr	r3, [r7, #28]
 8007e06:	f023 0301 	bic.w	r3, r3, #1
 8007e0a:	64bb      	str	r3, [r7, #72]	; 0x48
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	681b      	ldr	r3, [r3, #0]
 8007e10:	3314      	adds	r3, #20
 8007e12:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007e14:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007e16:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e18:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007e1a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007e1c:	e841 2300 	strex	r3, r2, [r1]
 8007e20:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007e22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e24:	2b00      	cmp	r3, #0
 8007e26:	d1e5      	bne.n	8007df4 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007e2c:	2b01      	cmp	r3, #1
 8007e2e:	d119      	bne.n	8007e64 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	681b      	ldr	r3, [r3, #0]
 8007e34:	330c      	adds	r3, #12
 8007e36:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e38:	68fb      	ldr	r3, [r7, #12]
 8007e3a:	e853 3f00 	ldrex	r3, [r3]
 8007e3e:	60bb      	str	r3, [r7, #8]
   return(result);
 8007e40:	68bb      	ldr	r3, [r7, #8]
 8007e42:	f023 0310 	bic.w	r3, r3, #16
 8007e46:	647b      	str	r3, [r7, #68]	; 0x44
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	681b      	ldr	r3, [r3, #0]
 8007e4c:	330c      	adds	r3, #12
 8007e4e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007e50:	61ba      	str	r2, [r7, #24]
 8007e52:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e54:	6979      	ldr	r1, [r7, #20]
 8007e56:	69ba      	ldr	r2, [r7, #24]
 8007e58:	e841 2300 	strex	r3, r2, [r1]
 8007e5c:	613b      	str	r3, [r7, #16]
   return(result);
 8007e5e:	693b      	ldr	r3, [r7, #16]
 8007e60:	2b00      	cmp	r3, #0
 8007e62:	d1e5      	bne.n	8007e30 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	2220      	movs	r2, #32
 8007e68:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	2200      	movs	r2, #0
 8007e70:	631a      	str	r2, [r3, #48]	; 0x30
}
 8007e72:	bf00      	nop
 8007e74:	3754      	adds	r7, #84	; 0x54
 8007e76:	46bd      	mov	sp, r7
 8007e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e7c:	4770      	bx	lr

08007e7e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007e7e:	b580      	push	{r7, lr}
 8007e80:	b084      	sub	sp, #16
 8007e82:	af00      	add	r7, sp, #0
 8007e84:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e8a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8007e8c:	68fb      	ldr	r3, [r7, #12]
 8007e8e:	2200      	movs	r2, #0
 8007e90:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8007e92:	68fb      	ldr	r3, [r7, #12]
 8007e94:	2200      	movs	r2, #0
 8007e96:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007e98:	68f8      	ldr	r0, [r7, #12]
 8007e9a:	f7ff ff77 	bl	8007d8c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007e9e:	bf00      	nop
 8007ea0:	3710      	adds	r7, #16
 8007ea2:	46bd      	mov	sp, r7
 8007ea4:	bd80      	pop	{r7, pc}

08007ea6 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8007ea6:	b480      	push	{r7}
 8007ea8:	b085      	sub	sp, #20
 8007eaa:	af00      	add	r7, sp, #0
 8007eac:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007eb4:	b2db      	uxtb	r3, r3
 8007eb6:	2b21      	cmp	r3, #33	; 0x21
 8007eb8:	d13e      	bne.n	8007f38 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	689b      	ldr	r3, [r3, #8]
 8007ebe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007ec2:	d114      	bne.n	8007eee <UART_Transmit_IT+0x48>
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	691b      	ldr	r3, [r3, #16]
 8007ec8:	2b00      	cmp	r3, #0
 8007eca:	d110      	bne.n	8007eee <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	6a1b      	ldr	r3, [r3, #32]
 8007ed0:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8007ed2:	68fb      	ldr	r3, [r7, #12]
 8007ed4:	881b      	ldrh	r3, [r3, #0]
 8007ed6:	461a      	mov	r2, r3
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	681b      	ldr	r3, [r3, #0]
 8007edc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007ee0:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	6a1b      	ldr	r3, [r3, #32]
 8007ee6:	1c9a      	adds	r2, r3, #2
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	621a      	str	r2, [r3, #32]
 8007eec:	e008      	b.n	8007f00 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	6a1b      	ldr	r3, [r3, #32]
 8007ef2:	1c59      	adds	r1, r3, #1
 8007ef4:	687a      	ldr	r2, [r7, #4]
 8007ef6:	6211      	str	r1, [r2, #32]
 8007ef8:	781a      	ldrb	r2, [r3, #0]
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	681b      	ldr	r3, [r3, #0]
 8007efe:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007f04:	b29b      	uxth	r3, r3
 8007f06:	3b01      	subs	r3, #1
 8007f08:	b29b      	uxth	r3, r3
 8007f0a:	687a      	ldr	r2, [r7, #4]
 8007f0c:	4619      	mov	r1, r3
 8007f0e:	84d1      	strh	r1, [r2, #38]	; 0x26
 8007f10:	2b00      	cmp	r3, #0
 8007f12:	d10f      	bne.n	8007f34 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	681b      	ldr	r3, [r3, #0]
 8007f18:	68da      	ldr	r2, [r3, #12]
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	681b      	ldr	r3, [r3, #0]
 8007f1e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007f22:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	681b      	ldr	r3, [r3, #0]
 8007f28:	68da      	ldr	r2, [r3, #12]
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	681b      	ldr	r3, [r3, #0]
 8007f2e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007f32:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8007f34:	2300      	movs	r3, #0
 8007f36:	e000      	b.n	8007f3a <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8007f38:	2302      	movs	r3, #2
  }
}
 8007f3a:	4618      	mov	r0, r3
 8007f3c:	3714      	adds	r7, #20
 8007f3e:	46bd      	mov	sp, r7
 8007f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f44:	4770      	bx	lr

08007f46 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007f46:	b580      	push	{r7, lr}
 8007f48:	b082      	sub	sp, #8
 8007f4a:	af00      	add	r7, sp, #0
 8007f4c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	681b      	ldr	r3, [r3, #0]
 8007f52:	68da      	ldr	r2, [r3, #12]
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	681b      	ldr	r3, [r3, #0]
 8007f58:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007f5c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	2220      	movs	r2, #32
 8007f62:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007f66:	6878      	ldr	r0, [r7, #4]
 8007f68:	f7ff fefc 	bl	8007d64 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8007f6c:	2300      	movs	r3, #0
}
 8007f6e:	4618      	mov	r0, r3
 8007f70:	3708      	adds	r7, #8
 8007f72:	46bd      	mov	sp, r7
 8007f74:	bd80      	pop	{r7, pc}

08007f76 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8007f76:	b580      	push	{r7, lr}
 8007f78:	b08c      	sub	sp, #48	; 0x30
 8007f7a:	af00      	add	r7, sp, #0
 8007f7c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007f84:	b2db      	uxtb	r3, r3
 8007f86:	2b22      	cmp	r3, #34	; 0x22
 8007f88:	f040 80ab 	bne.w	80080e2 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	689b      	ldr	r3, [r3, #8]
 8007f90:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007f94:	d117      	bne.n	8007fc6 <UART_Receive_IT+0x50>
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	691b      	ldr	r3, [r3, #16]
 8007f9a:	2b00      	cmp	r3, #0
 8007f9c:	d113      	bne.n	8007fc6 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8007f9e:	2300      	movs	r3, #0
 8007fa0:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007fa6:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	681b      	ldr	r3, [r3, #0]
 8007fac:	685b      	ldr	r3, [r3, #4]
 8007fae:	b29b      	uxth	r3, r3
 8007fb0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007fb4:	b29a      	uxth	r2, r3
 8007fb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007fb8:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007fbe:	1c9a      	adds	r2, r3, #2
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	629a      	str	r2, [r3, #40]	; 0x28
 8007fc4:	e026      	b.n	8008014 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007fca:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8007fcc:	2300      	movs	r3, #0
 8007fce:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	689b      	ldr	r3, [r3, #8]
 8007fd4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007fd8:	d007      	beq.n	8007fea <UART_Receive_IT+0x74>
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	689b      	ldr	r3, [r3, #8]
 8007fde:	2b00      	cmp	r3, #0
 8007fe0:	d10a      	bne.n	8007ff8 <UART_Receive_IT+0x82>
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	691b      	ldr	r3, [r3, #16]
 8007fe6:	2b00      	cmp	r3, #0
 8007fe8:	d106      	bne.n	8007ff8 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	681b      	ldr	r3, [r3, #0]
 8007fee:	685b      	ldr	r3, [r3, #4]
 8007ff0:	b2da      	uxtb	r2, r3
 8007ff2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ff4:	701a      	strb	r2, [r3, #0]
 8007ff6:	e008      	b.n	800800a <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	681b      	ldr	r3, [r3, #0]
 8007ffc:	685b      	ldr	r3, [r3, #4]
 8007ffe:	b2db      	uxtb	r3, r3
 8008000:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008004:	b2da      	uxtb	r2, r3
 8008006:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008008:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800800e:	1c5a      	adds	r2, r3, #1
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008018:	b29b      	uxth	r3, r3
 800801a:	3b01      	subs	r3, #1
 800801c:	b29b      	uxth	r3, r3
 800801e:	687a      	ldr	r2, [r7, #4]
 8008020:	4619      	mov	r1, r3
 8008022:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8008024:	2b00      	cmp	r3, #0
 8008026:	d15a      	bne.n	80080de <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	681b      	ldr	r3, [r3, #0]
 800802c:	68da      	ldr	r2, [r3, #12]
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	681b      	ldr	r3, [r3, #0]
 8008032:	f022 0220 	bic.w	r2, r2, #32
 8008036:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	681b      	ldr	r3, [r3, #0]
 800803c:	68da      	ldr	r2, [r3, #12]
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	681b      	ldr	r3, [r3, #0]
 8008042:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8008046:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	681b      	ldr	r3, [r3, #0]
 800804c:	695a      	ldr	r2, [r3, #20]
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	681b      	ldr	r3, [r3, #0]
 8008052:	f022 0201 	bic.w	r2, r2, #1
 8008056:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	2220      	movs	r2, #32
 800805c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008064:	2b01      	cmp	r3, #1
 8008066:	d135      	bne.n	80080d4 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	2200      	movs	r2, #0
 800806c:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	681b      	ldr	r3, [r3, #0]
 8008072:	330c      	adds	r3, #12
 8008074:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008076:	697b      	ldr	r3, [r7, #20]
 8008078:	e853 3f00 	ldrex	r3, [r3]
 800807c:	613b      	str	r3, [r7, #16]
   return(result);
 800807e:	693b      	ldr	r3, [r7, #16]
 8008080:	f023 0310 	bic.w	r3, r3, #16
 8008084:	627b      	str	r3, [r7, #36]	; 0x24
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	681b      	ldr	r3, [r3, #0]
 800808a:	330c      	adds	r3, #12
 800808c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800808e:	623a      	str	r2, [r7, #32]
 8008090:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008092:	69f9      	ldr	r1, [r7, #28]
 8008094:	6a3a      	ldr	r2, [r7, #32]
 8008096:	e841 2300 	strex	r3, r2, [r1]
 800809a:	61bb      	str	r3, [r7, #24]
   return(result);
 800809c:	69bb      	ldr	r3, [r7, #24]
 800809e:	2b00      	cmp	r3, #0
 80080a0:	d1e5      	bne.n	800806e <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	681b      	ldr	r3, [r3, #0]
 80080a6:	681b      	ldr	r3, [r3, #0]
 80080a8:	f003 0310 	and.w	r3, r3, #16
 80080ac:	2b10      	cmp	r3, #16
 80080ae:	d10a      	bne.n	80080c6 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80080b0:	2300      	movs	r3, #0
 80080b2:	60fb      	str	r3, [r7, #12]
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	681b      	ldr	r3, [r3, #0]
 80080b8:	681b      	ldr	r3, [r3, #0]
 80080ba:	60fb      	str	r3, [r7, #12]
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	681b      	ldr	r3, [r3, #0]
 80080c0:	685b      	ldr	r3, [r3, #4]
 80080c2:	60fb      	str	r3, [r7, #12]
 80080c4:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80080ca:	4619      	mov	r1, r3
 80080cc:	6878      	ldr	r0, [r7, #4]
 80080ce:	f7ff fe67 	bl	8007da0 <HAL_UARTEx_RxEventCallback>
 80080d2:	e002      	b.n	80080da <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80080d4:	6878      	ldr	r0, [r7, #4]
 80080d6:	f7ff fe4f 	bl	8007d78 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80080da:	2300      	movs	r3, #0
 80080dc:	e002      	b.n	80080e4 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 80080de:	2300      	movs	r3, #0
 80080e0:	e000      	b.n	80080e4 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 80080e2:	2302      	movs	r3, #2
  }
}
 80080e4:	4618      	mov	r0, r3
 80080e6:	3730      	adds	r7, #48	; 0x30
 80080e8:	46bd      	mov	sp, r7
 80080ea:	bd80      	pop	{r7, pc}

080080ec <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80080ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80080f0:	b09f      	sub	sp, #124	; 0x7c
 80080f2:	af00      	add	r7, sp, #0
 80080f4:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80080f6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80080f8:	681b      	ldr	r3, [r3, #0]
 80080fa:	691b      	ldr	r3, [r3, #16]
 80080fc:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8008100:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008102:	68d9      	ldr	r1, [r3, #12]
 8008104:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008106:	681a      	ldr	r2, [r3, #0]
 8008108:	ea40 0301 	orr.w	r3, r0, r1
 800810c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800810e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008110:	689a      	ldr	r2, [r3, #8]
 8008112:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008114:	691b      	ldr	r3, [r3, #16]
 8008116:	431a      	orrs	r2, r3
 8008118:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800811a:	695b      	ldr	r3, [r3, #20]
 800811c:	431a      	orrs	r2, r3
 800811e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008120:	69db      	ldr	r3, [r3, #28]
 8008122:	4313      	orrs	r3, r2
 8008124:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8008126:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008128:	681b      	ldr	r3, [r3, #0]
 800812a:	68db      	ldr	r3, [r3, #12]
 800812c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8008130:	f021 010c 	bic.w	r1, r1, #12
 8008134:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008136:	681a      	ldr	r2, [r3, #0]
 8008138:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800813a:	430b      	orrs	r3, r1
 800813c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800813e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008140:	681b      	ldr	r3, [r3, #0]
 8008142:	695b      	ldr	r3, [r3, #20]
 8008144:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8008148:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800814a:	6999      	ldr	r1, [r3, #24]
 800814c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800814e:	681a      	ldr	r2, [r3, #0]
 8008150:	ea40 0301 	orr.w	r3, r0, r1
 8008154:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8008156:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008158:	681a      	ldr	r2, [r3, #0]
 800815a:	4bc5      	ldr	r3, [pc, #788]	; (8008470 <UART_SetConfig+0x384>)
 800815c:	429a      	cmp	r2, r3
 800815e:	d004      	beq.n	800816a <UART_SetConfig+0x7e>
 8008160:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008162:	681a      	ldr	r2, [r3, #0]
 8008164:	4bc3      	ldr	r3, [pc, #780]	; (8008474 <UART_SetConfig+0x388>)
 8008166:	429a      	cmp	r2, r3
 8008168:	d103      	bne.n	8008172 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800816a:	f7fe f945 	bl	80063f8 <HAL_RCC_GetPCLK2Freq>
 800816e:	6778      	str	r0, [r7, #116]	; 0x74
 8008170:	e002      	b.n	8008178 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8008172:	f7fe f92d 	bl	80063d0 <HAL_RCC_GetPCLK1Freq>
 8008176:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008178:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800817a:	69db      	ldr	r3, [r3, #28]
 800817c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008180:	f040 80b6 	bne.w	80082f0 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8008184:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008186:	461c      	mov	r4, r3
 8008188:	f04f 0500 	mov.w	r5, #0
 800818c:	4622      	mov	r2, r4
 800818e:	462b      	mov	r3, r5
 8008190:	1891      	adds	r1, r2, r2
 8008192:	6439      	str	r1, [r7, #64]	; 0x40
 8008194:	415b      	adcs	r3, r3
 8008196:	647b      	str	r3, [r7, #68]	; 0x44
 8008198:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800819c:	1912      	adds	r2, r2, r4
 800819e:	eb45 0303 	adc.w	r3, r5, r3
 80081a2:	f04f 0000 	mov.w	r0, #0
 80081a6:	f04f 0100 	mov.w	r1, #0
 80081aa:	00d9      	lsls	r1, r3, #3
 80081ac:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80081b0:	00d0      	lsls	r0, r2, #3
 80081b2:	4602      	mov	r2, r0
 80081b4:	460b      	mov	r3, r1
 80081b6:	1911      	adds	r1, r2, r4
 80081b8:	6639      	str	r1, [r7, #96]	; 0x60
 80081ba:	416b      	adcs	r3, r5
 80081bc:	667b      	str	r3, [r7, #100]	; 0x64
 80081be:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80081c0:	685b      	ldr	r3, [r3, #4]
 80081c2:	461a      	mov	r2, r3
 80081c4:	f04f 0300 	mov.w	r3, #0
 80081c8:	1891      	adds	r1, r2, r2
 80081ca:	63b9      	str	r1, [r7, #56]	; 0x38
 80081cc:	415b      	adcs	r3, r3
 80081ce:	63fb      	str	r3, [r7, #60]	; 0x3c
 80081d0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80081d4:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 80081d8:	f7f8 fcde 	bl	8000b98 <__aeabi_uldivmod>
 80081dc:	4602      	mov	r2, r0
 80081de:	460b      	mov	r3, r1
 80081e0:	4ba5      	ldr	r3, [pc, #660]	; (8008478 <UART_SetConfig+0x38c>)
 80081e2:	fba3 2302 	umull	r2, r3, r3, r2
 80081e6:	095b      	lsrs	r3, r3, #5
 80081e8:	011e      	lsls	r6, r3, #4
 80081ea:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80081ec:	461c      	mov	r4, r3
 80081ee:	f04f 0500 	mov.w	r5, #0
 80081f2:	4622      	mov	r2, r4
 80081f4:	462b      	mov	r3, r5
 80081f6:	1891      	adds	r1, r2, r2
 80081f8:	6339      	str	r1, [r7, #48]	; 0x30
 80081fa:	415b      	adcs	r3, r3
 80081fc:	637b      	str	r3, [r7, #52]	; 0x34
 80081fe:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8008202:	1912      	adds	r2, r2, r4
 8008204:	eb45 0303 	adc.w	r3, r5, r3
 8008208:	f04f 0000 	mov.w	r0, #0
 800820c:	f04f 0100 	mov.w	r1, #0
 8008210:	00d9      	lsls	r1, r3, #3
 8008212:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8008216:	00d0      	lsls	r0, r2, #3
 8008218:	4602      	mov	r2, r0
 800821a:	460b      	mov	r3, r1
 800821c:	1911      	adds	r1, r2, r4
 800821e:	65b9      	str	r1, [r7, #88]	; 0x58
 8008220:	416b      	adcs	r3, r5
 8008222:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008224:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008226:	685b      	ldr	r3, [r3, #4]
 8008228:	461a      	mov	r2, r3
 800822a:	f04f 0300 	mov.w	r3, #0
 800822e:	1891      	adds	r1, r2, r2
 8008230:	62b9      	str	r1, [r7, #40]	; 0x28
 8008232:	415b      	adcs	r3, r3
 8008234:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008236:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800823a:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 800823e:	f7f8 fcab 	bl	8000b98 <__aeabi_uldivmod>
 8008242:	4602      	mov	r2, r0
 8008244:	460b      	mov	r3, r1
 8008246:	4b8c      	ldr	r3, [pc, #560]	; (8008478 <UART_SetConfig+0x38c>)
 8008248:	fba3 1302 	umull	r1, r3, r3, r2
 800824c:	095b      	lsrs	r3, r3, #5
 800824e:	2164      	movs	r1, #100	; 0x64
 8008250:	fb01 f303 	mul.w	r3, r1, r3
 8008254:	1ad3      	subs	r3, r2, r3
 8008256:	00db      	lsls	r3, r3, #3
 8008258:	3332      	adds	r3, #50	; 0x32
 800825a:	4a87      	ldr	r2, [pc, #540]	; (8008478 <UART_SetConfig+0x38c>)
 800825c:	fba2 2303 	umull	r2, r3, r2, r3
 8008260:	095b      	lsrs	r3, r3, #5
 8008262:	005b      	lsls	r3, r3, #1
 8008264:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8008268:	441e      	add	r6, r3
 800826a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800826c:	4618      	mov	r0, r3
 800826e:	f04f 0100 	mov.w	r1, #0
 8008272:	4602      	mov	r2, r0
 8008274:	460b      	mov	r3, r1
 8008276:	1894      	adds	r4, r2, r2
 8008278:	623c      	str	r4, [r7, #32]
 800827a:	415b      	adcs	r3, r3
 800827c:	627b      	str	r3, [r7, #36]	; 0x24
 800827e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8008282:	1812      	adds	r2, r2, r0
 8008284:	eb41 0303 	adc.w	r3, r1, r3
 8008288:	f04f 0400 	mov.w	r4, #0
 800828c:	f04f 0500 	mov.w	r5, #0
 8008290:	00dd      	lsls	r5, r3, #3
 8008292:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8008296:	00d4      	lsls	r4, r2, #3
 8008298:	4622      	mov	r2, r4
 800829a:	462b      	mov	r3, r5
 800829c:	1814      	adds	r4, r2, r0
 800829e:	653c      	str	r4, [r7, #80]	; 0x50
 80082a0:	414b      	adcs	r3, r1
 80082a2:	657b      	str	r3, [r7, #84]	; 0x54
 80082a4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80082a6:	685b      	ldr	r3, [r3, #4]
 80082a8:	461a      	mov	r2, r3
 80082aa:	f04f 0300 	mov.w	r3, #0
 80082ae:	1891      	adds	r1, r2, r2
 80082b0:	61b9      	str	r1, [r7, #24]
 80082b2:	415b      	adcs	r3, r3
 80082b4:	61fb      	str	r3, [r7, #28]
 80082b6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80082ba:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 80082be:	f7f8 fc6b 	bl	8000b98 <__aeabi_uldivmod>
 80082c2:	4602      	mov	r2, r0
 80082c4:	460b      	mov	r3, r1
 80082c6:	4b6c      	ldr	r3, [pc, #432]	; (8008478 <UART_SetConfig+0x38c>)
 80082c8:	fba3 1302 	umull	r1, r3, r3, r2
 80082cc:	095b      	lsrs	r3, r3, #5
 80082ce:	2164      	movs	r1, #100	; 0x64
 80082d0:	fb01 f303 	mul.w	r3, r1, r3
 80082d4:	1ad3      	subs	r3, r2, r3
 80082d6:	00db      	lsls	r3, r3, #3
 80082d8:	3332      	adds	r3, #50	; 0x32
 80082da:	4a67      	ldr	r2, [pc, #412]	; (8008478 <UART_SetConfig+0x38c>)
 80082dc:	fba2 2303 	umull	r2, r3, r2, r3
 80082e0:	095b      	lsrs	r3, r3, #5
 80082e2:	f003 0207 	and.w	r2, r3, #7
 80082e6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80082e8:	681b      	ldr	r3, [r3, #0]
 80082ea:	4432      	add	r2, r6
 80082ec:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80082ee:	e0b9      	b.n	8008464 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80082f0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80082f2:	461c      	mov	r4, r3
 80082f4:	f04f 0500 	mov.w	r5, #0
 80082f8:	4622      	mov	r2, r4
 80082fa:	462b      	mov	r3, r5
 80082fc:	1891      	adds	r1, r2, r2
 80082fe:	6139      	str	r1, [r7, #16]
 8008300:	415b      	adcs	r3, r3
 8008302:	617b      	str	r3, [r7, #20]
 8008304:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8008308:	1912      	adds	r2, r2, r4
 800830a:	eb45 0303 	adc.w	r3, r5, r3
 800830e:	f04f 0000 	mov.w	r0, #0
 8008312:	f04f 0100 	mov.w	r1, #0
 8008316:	00d9      	lsls	r1, r3, #3
 8008318:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800831c:	00d0      	lsls	r0, r2, #3
 800831e:	4602      	mov	r2, r0
 8008320:	460b      	mov	r3, r1
 8008322:	eb12 0804 	adds.w	r8, r2, r4
 8008326:	eb43 0905 	adc.w	r9, r3, r5
 800832a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800832c:	685b      	ldr	r3, [r3, #4]
 800832e:	4618      	mov	r0, r3
 8008330:	f04f 0100 	mov.w	r1, #0
 8008334:	f04f 0200 	mov.w	r2, #0
 8008338:	f04f 0300 	mov.w	r3, #0
 800833c:	008b      	lsls	r3, r1, #2
 800833e:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8008342:	0082      	lsls	r2, r0, #2
 8008344:	4640      	mov	r0, r8
 8008346:	4649      	mov	r1, r9
 8008348:	f7f8 fc26 	bl	8000b98 <__aeabi_uldivmod>
 800834c:	4602      	mov	r2, r0
 800834e:	460b      	mov	r3, r1
 8008350:	4b49      	ldr	r3, [pc, #292]	; (8008478 <UART_SetConfig+0x38c>)
 8008352:	fba3 2302 	umull	r2, r3, r3, r2
 8008356:	095b      	lsrs	r3, r3, #5
 8008358:	011e      	lsls	r6, r3, #4
 800835a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800835c:	4618      	mov	r0, r3
 800835e:	f04f 0100 	mov.w	r1, #0
 8008362:	4602      	mov	r2, r0
 8008364:	460b      	mov	r3, r1
 8008366:	1894      	adds	r4, r2, r2
 8008368:	60bc      	str	r4, [r7, #8]
 800836a:	415b      	adcs	r3, r3
 800836c:	60fb      	str	r3, [r7, #12]
 800836e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8008372:	1812      	adds	r2, r2, r0
 8008374:	eb41 0303 	adc.w	r3, r1, r3
 8008378:	f04f 0400 	mov.w	r4, #0
 800837c:	f04f 0500 	mov.w	r5, #0
 8008380:	00dd      	lsls	r5, r3, #3
 8008382:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8008386:	00d4      	lsls	r4, r2, #3
 8008388:	4622      	mov	r2, r4
 800838a:	462b      	mov	r3, r5
 800838c:	1814      	adds	r4, r2, r0
 800838e:	64bc      	str	r4, [r7, #72]	; 0x48
 8008390:	414b      	adcs	r3, r1
 8008392:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008394:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008396:	685b      	ldr	r3, [r3, #4]
 8008398:	4618      	mov	r0, r3
 800839a:	f04f 0100 	mov.w	r1, #0
 800839e:	f04f 0200 	mov.w	r2, #0
 80083a2:	f04f 0300 	mov.w	r3, #0
 80083a6:	008b      	lsls	r3, r1, #2
 80083a8:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80083ac:	0082      	lsls	r2, r0, #2
 80083ae:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 80083b2:	f7f8 fbf1 	bl	8000b98 <__aeabi_uldivmod>
 80083b6:	4602      	mov	r2, r0
 80083b8:	460b      	mov	r3, r1
 80083ba:	4b2f      	ldr	r3, [pc, #188]	; (8008478 <UART_SetConfig+0x38c>)
 80083bc:	fba3 1302 	umull	r1, r3, r3, r2
 80083c0:	095b      	lsrs	r3, r3, #5
 80083c2:	2164      	movs	r1, #100	; 0x64
 80083c4:	fb01 f303 	mul.w	r3, r1, r3
 80083c8:	1ad3      	subs	r3, r2, r3
 80083ca:	011b      	lsls	r3, r3, #4
 80083cc:	3332      	adds	r3, #50	; 0x32
 80083ce:	4a2a      	ldr	r2, [pc, #168]	; (8008478 <UART_SetConfig+0x38c>)
 80083d0:	fba2 2303 	umull	r2, r3, r2, r3
 80083d4:	095b      	lsrs	r3, r3, #5
 80083d6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80083da:	441e      	add	r6, r3
 80083dc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80083de:	4618      	mov	r0, r3
 80083e0:	f04f 0100 	mov.w	r1, #0
 80083e4:	4602      	mov	r2, r0
 80083e6:	460b      	mov	r3, r1
 80083e8:	1894      	adds	r4, r2, r2
 80083ea:	603c      	str	r4, [r7, #0]
 80083ec:	415b      	adcs	r3, r3
 80083ee:	607b      	str	r3, [r7, #4]
 80083f0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80083f4:	1812      	adds	r2, r2, r0
 80083f6:	eb41 0303 	adc.w	r3, r1, r3
 80083fa:	f04f 0400 	mov.w	r4, #0
 80083fe:	f04f 0500 	mov.w	r5, #0
 8008402:	00dd      	lsls	r5, r3, #3
 8008404:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8008408:	00d4      	lsls	r4, r2, #3
 800840a:	4622      	mov	r2, r4
 800840c:	462b      	mov	r3, r5
 800840e:	eb12 0a00 	adds.w	sl, r2, r0
 8008412:	eb43 0b01 	adc.w	fp, r3, r1
 8008416:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008418:	685b      	ldr	r3, [r3, #4]
 800841a:	4618      	mov	r0, r3
 800841c:	f04f 0100 	mov.w	r1, #0
 8008420:	f04f 0200 	mov.w	r2, #0
 8008424:	f04f 0300 	mov.w	r3, #0
 8008428:	008b      	lsls	r3, r1, #2
 800842a:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800842e:	0082      	lsls	r2, r0, #2
 8008430:	4650      	mov	r0, sl
 8008432:	4659      	mov	r1, fp
 8008434:	f7f8 fbb0 	bl	8000b98 <__aeabi_uldivmod>
 8008438:	4602      	mov	r2, r0
 800843a:	460b      	mov	r3, r1
 800843c:	4b0e      	ldr	r3, [pc, #56]	; (8008478 <UART_SetConfig+0x38c>)
 800843e:	fba3 1302 	umull	r1, r3, r3, r2
 8008442:	095b      	lsrs	r3, r3, #5
 8008444:	2164      	movs	r1, #100	; 0x64
 8008446:	fb01 f303 	mul.w	r3, r1, r3
 800844a:	1ad3      	subs	r3, r2, r3
 800844c:	011b      	lsls	r3, r3, #4
 800844e:	3332      	adds	r3, #50	; 0x32
 8008450:	4a09      	ldr	r2, [pc, #36]	; (8008478 <UART_SetConfig+0x38c>)
 8008452:	fba2 2303 	umull	r2, r3, r2, r3
 8008456:	095b      	lsrs	r3, r3, #5
 8008458:	f003 020f 	and.w	r2, r3, #15
 800845c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800845e:	681b      	ldr	r3, [r3, #0]
 8008460:	4432      	add	r2, r6
 8008462:	609a      	str	r2, [r3, #8]
}
 8008464:	bf00      	nop
 8008466:	377c      	adds	r7, #124	; 0x7c
 8008468:	46bd      	mov	sp, r7
 800846a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800846e:	bf00      	nop
 8008470:	40011000 	.word	0x40011000
 8008474:	40011400 	.word	0x40011400
 8008478:	51eb851f 	.word	0x51eb851f

0800847c <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 800847c:	b480      	push	{r7}
 800847e:	b087      	sub	sp, #28
 8008480:	af00      	add	r7, sp, #0
 8008482:	60f8      	str	r0, [r7, #12]
 8008484:	60b9      	str	r1, [r7, #8]
 8008486:	4613      	mov	r3, r2
 8008488:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800848a:	79fb      	ldrb	r3, [r7, #7]
 800848c:	2b02      	cmp	r3, #2
 800848e:	d165      	bne.n	800855c <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8008490:	68bb      	ldr	r3, [r7, #8]
 8008492:	4a41      	ldr	r2, [pc, #260]	; (8008598 <USB_SetTurnaroundTime+0x11c>)
 8008494:	4293      	cmp	r3, r2
 8008496:	d906      	bls.n	80084a6 <USB_SetTurnaroundTime+0x2a>
 8008498:	68bb      	ldr	r3, [r7, #8]
 800849a:	4a40      	ldr	r2, [pc, #256]	; (800859c <USB_SetTurnaroundTime+0x120>)
 800849c:	4293      	cmp	r3, r2
 800849e:	d202      	bcs.n	80084a6 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 80084a0:	230f      	movs	r3, #15
 80084a2:	617b      	str	r3, [r7, #20]
 80084a4:	e062      	b.n	800856c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 80084a6:	68bb      	ldr	r3, [r7, #8]
 80084a8:	4a3c      	ldr	r2, [pc, #240]	; (800859c <USB_SetTurnaroundTime+0x120>)
 80084aa:	4293      	cmp	r3, r2
 80084ac:	d306      	bcc.n	80084bc <USB_SetTurnaroundTime+0x40>
 80084ae:	68bb      	ldr	r3, [r7, #8]
 80084b0:	4a3b      	ldr	r2, [pc, #236]	; (80085a0 <USB_SetTurnaroundTime+0x124>)
 80084b2:	4293      	cmp	r3, r2
 80084b4:	d202      	bcs.n	80084bc <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 80084b6:	230e      	movs	r3, #14
 80084b8:	617b      	str	r3, [r7, #20]
 80084ba:	e057      	b.n	800856c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 80084bc:	68bb      	ldr	r3, [r7, #8]
 80084be:	4a38      	ldr	r2, [pc, #224]	; (80085a0 <USB_SetTurnaroundTime+0x124>)
 80084c0:	4293      	cmp	r3, r2
 80084c2:	d306      	bcc.n	80084d2 <USB_SetTurnaroundTime+0x56>
 80084c4:	68bb      	ldr	r3, [r7, #8]
 80084c6:	4a37      	ldr	r2, [pc, #220]	; (80085a4 <USB_SetTurnaroundTime+0x128>)
 80084c8:	4293      	cmp	r3, r2
 80084ca:	d202      	bcs.n	80084d2 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 80084cc:	230d      	movs	r3, #13
 80084ce:	617b      	str	r3, [r7, #20]
 80084d0:	e04c      	b.n	800856c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 80084d2:	68bb      	ldr	r3, [r7, #8]
 80084d4:	4a33      	ldr	r2, [pc, #204]	; (80085a4 <USB_SetTurnaroundTime+0x128>)
 80084d6:	4293      	cmp	r3, r2
 80084d8:	d306      	bcc.n	80084e8 <USB_SetTurnaroundTime+0x6c>
 80084da:	68bb      	ldr	r3, [r7, #8]
 80084dc:	4a32      	ldr	r2, [pc, #200]	; (80085a8 <USB_SetTurnaroundTime+0x12c>)
 80084de:	4293      	cmp	r3, r2
 80084e0:	d802      	bhi.n	80084e8 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 80084e2:	230c      	movs	r3, #12
 80084e4:	617b      	str	r3, [r7, #20]
 80084e6:	e041      	b.n	800856c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 80084e8:	68bb      	ldr	r3, [r7, #8]
 80084ea:	4a2f      	ldr	r2, [pc, #188]	; (80085a8 <USB_SetTurnaroundTime+0x12c>)
 80084ec:	4293      	cmp	r3, r2
 80084ee:	d906      	bls.n	80084fe <USB_SetTurnaroundTime+0x82>
 80084f0:	68bb      	ldr	r3, [r7, #8]
 80084f2:	4a2e      	ldr	r2, [pc, #184]	; (80085ac <USB_SetTurnaroundTime+0x130>)
 80084f4:	4293      	cmp	r3, r2
 80084f6:	d802      	bhi.n	80084fe <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 80084f8:	230b      	movs	r3, #11
 80084fa:	617b      	str	r3, [r7, #20]
 80084fc:	e036      	b.n	800856c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 80084fe:	68bb      	ldr	r3, [r7, #8]
 8008500:	4a2a      	ldr	r2, [pc, #168]	; (80085ac <USB_SetTurnaroundTime+0x130>)
 8008502:	4293      	cmp	r3, r2
 8008504:	d906      	bls.n	8008514 <USB_SetTurnaroundTime+0x98>
 8008506:	68bb      	ldr	r3, [r7, #8]
 8008508:	4a29      	ldr	r2, [pc, #164]	; (80085b0 <USB_SetTurnaroundTime+0x134>)
 800850a:	4293      	cmp	r3, r2
 800850c:	d802      	bhi.n	8008514 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800850e:	230a      	movs	r3, #10
 8008510:	617b      	str	r3, [r7, #20]
 8008512:	e02b      	b.n	800856c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8008514:	68bb      	ldr	r3, [r7, #8]
 8008516:	4a26      	ldr	r2, [pc, #152]	; (80085b0 <USB_SetTurnaroundTime+0x134>)
 8008518:	4293      	cmp	r3, r2
 800851a:	d906      	bls.n	800852a <USB_SetTurnaroundTime+0xae>
 800851c:	68bb      	ldr	r3, [r7, #8]
 800851e:	4a25      	ldr	r2, [pc, #148]	; (80085b4 <USB_SetTurnaroundTime+0x138>)
 8008520:	4293      	cmp	r3, r2
 8008522:	d202      	bcs.n	800852a <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8008524:	2309      	movs	r3, #9
 8008526:	617b      	str	r3, [r7, #20]
 8008528:	e020      	b.n	800856c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800852a:	68bb      	ldr	r3, [r7, #8]
 800852c:	4a21      	ldr	r2, [pc, #132]	; (80085b4 <USB_SetTurnaroundTime+0x138>)
 800852e:	4293      	cmp	r3, r2
 8008530:	d306      	bcc.n	8008540 <USB_SetTurnaroundTime+0xc4>
 8008532:	68bb      	ldr	r3, [r7, #8]
 8008534:	4a20      	ldr	r2, [pc, #128]	; (80085b8 <USB_SetTurnaroundTime+0x13c>)
 8008536:	4293      	cmp	r3, r2
 8008538:	d802      	bhi.n	8008540 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800853a:	2308      	movs	r3, #8
 800853c:	617b      	str	r3, [r7, #20]
 800853e:	e015      	b.n	800856c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8008540:	68bb      	ldr	r3, [r7, #8]
 8008542:	4a1d      	ldr	r2, [pc, #116]	; (80085b8 <USB_SetTurnaroundTime+0x13c>)
 8008544:	4293      	cmp	r3, r2
 8008546:	d906      	bls.n	8008556 <USB_SetTurnaroundTime+0xda>
 8008548:	68bb      	ldr	r3, [r7, #8]
 800854a:	4a1c      	ldr	r2, [pc, #112]	; (80085bc <USB_SetTurnaroundTime+0x140>)
 800854c:	4293      	cmp	r3, r2
 800854e:	d202      	bcs.n	8008556 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8008550:	2307      	movs	r3, #7
 8008552:	617b      	str	r3, [r7, #20]
 8008554:	e00a      	b.n	800856c <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8008556:	2306      	movs	r3, #6
 8008558:	617b      	str	r3, [r7, #20]
 800855a:	e007      	b.n	800856c <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 800855c:	79fb      	ldrb	r3, [r7, #7]
 800855e:	2b00      	cmp	r3, #0
 8008560:	d102      	bne.n	8008568 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8008562:	2309      	movs	r3, #9
 8008564:	617b      	str	r3, [r7, #20]
 8008566:	e001      	b.n	800856c <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8008568:	2309      	movs	r3, #9
 800856a:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800856c:	68fb      	ldr	r3, [r7, #12]
 800856e:	68db      	ldr	r3, [r3, #12]
 8008570:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8008574:	68fb      	ldr	r3, [r7, #12]
 8008576:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8008578:	68fb      	ldr	r3, [r7, #12]
 800857a:	68da      	ldr	r2, [r3, #12]
 800857c:	697b      	ldr	r3, [r7, #20]
 800857e:	029b      	lsls	r3, r3, #10
 8008580:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8008584:	431a      	orrs	r2, r3
 8008586:	68fb      	ldr	r3, [r7, #12]
 8008588:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800858a:	2300      	movs	r3, #0
}
 800858c:	4618      	mov	r0, r3
 800858e:	371c      	adds	r7, #28
 8008590:	46bd      	mov	sp, r7
 8008592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008596:	4770      	bx	lr
 8008598:	00d8acbf 	.word	0x00d8acbf
 800859c:	00e4e1c0 	.word	0x00e4e1c0
 80085a0:	00f42400 	.word	0x00f42400
 80085a4:	01067380 	.word	0x01067380
 80085a8:	011a499f 	.word	0x011a499f
 80085ac:	01312cff 	.word	0x01312cff
 80085b0:	014ca43f 	.word	0x014ca43f
 80085b4:	016e3600 	.word	0x016e3600
 80085b8:	01a6ab1f 	.word	0x01a6ab1f
 80085bc:	01e84800 	.word	0x01e84800

080085c0 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80085c0:	b480      	push	{r7}
 80085c2:	b085      	sub	sp, #20
 80085c4:	af00      	add	r7, sp, #0
 80085c6:	6078      	str	r0, [r7, #4]
 80085c8:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80085ca:	2300      	movs	r3, #0
 80085cc:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80085ce:	683b      	ldr	r3, [r7, #0]
 80085d0:	019b      	lsls	r3, r3, #6
 80085d2:	f043 0220 	orr.w	r2, r3, #32
 80085d6:	687b      	ldr	r3, [r7, #4]
 80085d8:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80085da:	68fb      	ldr	r3, [r7, #12]
 80085dc:	3301      	adds	r3, #1
 80085de:	60fb      	str	r3, [r7, #12]
 80085e0:	4a08      	ldr	r2, [pc, #32]	; (8008604 <USB_FlushTxFifo+0x44>)
 80085e2:	4293      	cmp	r3, r2
 80085e4:	d901      	bls.n	80085ea <USB_FlushTxFifo+0x2a>
    {
      return HAL_TIMEOUT;
 80085e6:	2303      	movs	r3, #3
 80085e8:	e006      	b.n	80085f8 <USB_FlushTxFifo+0x38>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80085ea:	687b      	ldr	r3, [r7, #4]
 80085ec:	691b      	ldr	r3, [r3, #16]
 80085ee:	f003 0320 	and.w	r3, r3, #32
 80085f2:	2b20      	cmp	r3, #32
 80085f4:	d0f1      	beq.n	80085da <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 80085f6:	2300      	movs	r3, #0
}
 80085f8:	4618      	mov	r0, r3
 80085fa:	3714      	adds	r7, #20
 80085fc:	46bd      	mov	sp, r7
 80085fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008602:	4770      	bx	lr
 8008604:	00030d40 	.word	0x00030d40

08008608 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8008608:	b480      	push	{r7}
 800860a:	b087      	sub	sp, #28
 800860c:	af00      	add	r7, sp, #0
 800860e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008610:	687b      	ldr	r3, [r7, #4]
 8008612:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8008614:	693b      	ldr	r3, [r7, #16]
 8008616:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800861a:	689b      	ldr	r3, [r3, #8]
 800861c:	f003 0306 	and.w	r3, r3, #6
 8008620:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8008622:	68fb      	ldr	r3, [r7, #12]
 8008624:	2b00      	cmp	r3, #0
 8008626:	d102      	bne.n	800862e <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8008628:	2300      	movs	r3, #0
 800862a:	75fb      	strb	r3, [r7, #23]
 800862c:	e00a      	b.n	8008644 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800862e:	68fb      	ldr	r3, [r7, #12]
 8008630:	2b02      	cmp	r3, #2
 8008632:	d002      	beq.n	800863a <USB_GetDevSpeed+0x32>
 8008634:	68fb      	ldr	r3, [r7, #12]
 8008636:	2b06      	cmp	r3, #6
 8008638:	d102      	bne.n	8008640 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 800863a:	2302      	movs	r3, #2
 800863c:	75fb      	strb	r3, [r7, #23]
 800863e:	e001      	b.n	8008644 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8008640:	230f      	movs	r3, #15
 8008642:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8008644:	7dfb      	ldrb	r3, [r7, #23]
}
 8008646:	4618      	mov	r0, r3
 8008648:	371c      	adds	r7, #28
 800864a:	46bd      	mov	sp, r7
 800864c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008650:	4770      	bx	lr

08008652 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8008652:	b480      	push	{r7}
 8008654:	b085      	sub	sp, #20
 8008656:	af00      	add	r7, sp, #0
 8008658:	6078      	str	r0, [r7, #4]
 800865a:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8008660:	683b      	ldr	r3, [r7, #0]
 8008662:	781b      	ldrb	r3, [r3, #0]
 8008664:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8008666:	683b      	ldr	r3, [r7, #0]
 8008668:	785b      	ldrb	r3, [r3, #1]
 800866a:	2b01      	cmp	r3, #1
 800866c:	d13a      	bne.n	80086e4 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800866e:	68fb      	ldr	r3, [r7, #12]
 8008670:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008674:	69da      	ldr	r2, [r3, #28]
 8008676:	683b      	ldr	r3, [r7, #0]
 8008678:	781b      	ldrb	r3, [r3, #0]
 800867a:	f003 030f 	and.w	r3, r3, #15
 800867e:	2101      	movs	r1, #1
 8008680:	fa01 f303 	lsl.w	r3, r1, r3
 8008684:	b29b      	uxth	r3, r3
 8008686:	68f9      	ldr	r1, [r7, #12]
 8008688:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800868c:	4313      	orrs	r3, r2
 800868e:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8008690:	68bb      	ldr	r3, [r7, #8]
 8008692:	015a      	lsls	r2, r3, #5
 8008694:	68fb      	ldr	r3, [r7, #12]
 8008696:	4413      	add	r3, r2
 8008698:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800869c:	681b      	ldr	r3, [r3, #0]
 800869e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80086a2:	2b00      	cmp	r3, #0
 80086a4:	d155      	bne.n	8008752 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80086a6:	68bb      	ldr	r3, [r7, #8]
 80086a8:	015a      	lsls	r2, r3, #5
 80086aa:	68fb      	ldr	r3, [r7, #12]
 80086ac:	4413      	add	r3, r2
 80086ae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80086b2:	681a      	ldr	r2, [r3, #0]
 80086b4:	683b      	ldr	r3, [r7, #0]
 80086b6:	689b      	ldr	r3, [r3, #8]
 80086b8:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80086bc:	683b      	ldr	r3, [r7, #0]
 80086be:	78db      	ldrb	r3, [r3, #3]
 80086c0:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80086c2:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80086c4:	68bb      	ldr	r3, [r7, #8]
 80086c6:	059b      	lsls	r3, r3, #22
 80086c8:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80086ca:	4313      	orrs	r3, r2
 80086cc:	68ba      	ldr	r2, [r7, #8]
 80086ce:	0151      	lsls	r1, r2, #5
 80086d0:	68fa      	ldr	r2, [r7, #12]
 80086d2:	440a      	add	r2, r1
 80086d4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80086d8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80086dc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80086e0:	6013      	str	r3, [r2, #0]
 80086e2:	e036      	b.n	8008752 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 80086e4:	68fb      	ldr	r3, [r7, #12]
 80086e6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80086ea:	69da      	ldr	r2, [r3, #28]
 80086ec:	683b      	ldr	r3, [r7, #0]
 80086ee:	781b      	ldrb	r3, [r3, #0]
 80086f0:	f003 030f 	and.w	r3, r3, #15
 80086f4:	2101      	movs	r1, #1
 80086f6:	fa01 f303 	lsl.w	r3, r1, r3
 80086fa:	041b      	lsls	r3, r3, #16
 80086fc:	68f9      	ldr	r1, [r7, #12]
 80086fe:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008702:	4313      	orrs	r3, r2
 8008704:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8008706:	68bb      	ldr	r3, [r7, #8]
 8008708:	015a      	lsls	r2, r3, #5
 800870a:	68fb      	ldr	r3, [r7, #12]
 800870c:	4413      	add	r3, r2
 800870e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008712:	681b      	ldr	r3, [r3, #0]
 8008714:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008718:	2b00      	cmp	r3, #0
 800871a:	d11a      	bne.n	8008752 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800871c:	68bb      	ldr	r3, [r7, #8]
 800871e:	015a      	lsls	r2, r3, #5
 8008720:	68fb      	ldr	r3, [r7, #12]
 8008722:	4413      	add	r3, r2
 8008724:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008728:	681a      	ldr	r2, [r3, #0]
 800872a:	683b      	ldr	r3, [r7, #0]
 800872c:	689b      	ldr	r3, [r3, #8]
 800872e:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8008732:	683b      	ldr	r3, [r7, #0]
 8008734:	78db      	ldrb	r3, [r3, #3]
 8008736:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8008738:	430b      	orrs	r3, r1
 800873a:	4313      	orrs	r3, r2
 800873c:	68ba      	ldr	r2, [r7, #8]
 800873e:	0151      	lsls	r1, r2, #5
 8008740:	68fa      	ldr	r2, [r7, #12]
 8008742:	440a      	add	r2, r1
 8008744:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008748:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800874c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008750:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8008752:	2300      	movs	r3, #0
}
 8008754:	4618      	mov	r0, r3
 8008756:	3714      	adds	r7, #20
 8008758:	46bd      	mov	sp, r7
 800875a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800875e:	4770      	bx	lr

08008760 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8008760:	b580      	push	{r7, lr}
 8008762:	b08a      	sub	sp, #40	; 0x28
 8008764:	af02      	add	r7, sp, #8
 8008766:	60f8      	str	r0, [r7, #12]
 8008768:	60b9      	str	r1, [r7, #8]
 800876a:	4613      	mov	r3, r2
 800876c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800876e:	68fb      	ldr	r3, [r7, #12]
 8008770:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8008772:	68bb      	ldr	r3, [r7, #8]
 8008774:	781b      	ldrb	r3, [r3, #0]
 8008776:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8008778:	68bb      	ldr	r3, [r7, #8]
 800877a:	785b      	ldrb	r3, [r3, #1]
 800877c:	2b01      	cmp	r3, #1
 800877e:	f040 815c 	bne.w	8008a3a <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8008782:	68bb      	ldr	r3, [r7, #8]
 8008784:	695b      	ldr	r3, [r3, #20]
 8008786:	2b00      	cmp	r3, #0
 8008788:	d132      	bne.n	80087f0 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800878a:	69bb      	ldr	r3, [r7, #24]
 800878c:	015a      	lsls	r2, r3, #5
 800878e:	69fb      	ldr	r3, [r7, #28]
 8008790:	4413      	add	r3, r2
 8008792:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008796:	691b      	ldr	r3, [r3, #16]
 8008798:	69ba      	ldr	r2, [r7, #24]
 800879a:	0151      	lsls	r1, r2, #5
 800879c:	69fa      	ldr	r2, [r7, #28]
 800879e:	440a      	add	r2, r1
 80087a0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80087a4:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80087a8:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80087ac:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80087ae:	69bb      	ldr	r3, [r7, #24]
 80087b0:	015a      	lsls	r2, r3, #5
 80087b2:	69fb      	ldr	r3, [r7, #28]
 80087b4:	4413      	add	r3, r2
 80087b6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80087ba:	691b      	ldr	r3, [r3, #16]
 80087bc:	69ba      	ldr	r2, [r7, #24]
 80087be:	0151      	lsls	r1, r2, #5
 80087c0:	69fa      	ldr	r2, [r7, #28]
 80087c2:	440a      	add	r2, r1
 80087c4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80087c8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80087cc:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80087ce:	69bb      	ldr	r3, [r7, #24]
 80087d0:	015a      	lsls	r2, r3, #5
 80087d2:	69fb      	ldr	r3, [r7, #28]
 80087d4:	4413      	add	r3, r2
 80087d6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80087da:	691b      	ldr	r3, [r3, #16]
 80087dc:	69ba      	ldr	r2, [r7, #24]
 80087de:	0151      	lsls	r1, r2, #5
 80087e0:	69fa      	ldr	r2, [r7, #28]
 80087e2:	440a      	add	r2, r1
 80087e4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80087e8:	0cdb      	lsrs	r3, r3, #19
 80087ea:	04db      	lsls	r3, r3, #19
 80087ec:	6113      	str	r3, [r2, #16]
 80087ee:	e074      	b.n	80088da <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80087f0:	69bb      	ldr	r3, [r7, #24]
 80087f2:	015a      	lsls	r2, r3, #5
 80087f4:	69fb      	ldr	r3, [r7, #28]
 80087f6:	4413      	add	r3, r2
 80087f8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80087fc:	691b      	ldr	r3, [r3, #16]
 80087fe:	69ba      	ldr	r2, [r7, #24]
 8008800:	0151      	lsls	r1, r2, #5
 8008802:	69fa      	ldr	r2, [r7, #28]
 8008804:	440a      	add	r2, r1
 8008806:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800880a:	0cdb      	lsrs	r3, r3, #19
 800880c:	04db      	lsls	r3, r3, #19
 800880e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8008810:	69bb      	ldr	r3, [r7, #24]
 8008812:	015a      	lsls	r2, r3, #5
 8008814:	69fb      	ldr	r3, [r7, #28]
 8008816:	4413      	add	r3, r2
 8008818:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800881c:	691b      	ldr	r3, [r3, #16]
 800881e:	69ba      	ldr	r2, [r7, #24]
 8008820:	0151      	lsls	r1, r2, #5
 8008822:	69fa      	ldr	r2, [r7, #28]
 8008824:	440a      	add	r2, r1
 8008826:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800882a:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800882e:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8008832:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8008834:	69bb      	ldr	r3, [r7, #24]
 8008836:	015a      	lsls	r2, r3, #5
 8008838:	69fb      	ldr	r3, [r7, #28]
 800883a:	4413      	add	r3, r2
 800883c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008840:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8008842:	68bb      	ldr	r3, [r7, #8]
 8008844:	6959      	ldr	r1, [r3, #20]
 8008846:	68bb      	ldr	r3, [r7, #8]
 8008848:	689b      	ldr	r3, [r3, #8]
 800884a:	440b      	add	r3, r1
 800884c:	1e59      	subs	r1, r3, #1
 800884e:	68bb      	ldr	r3, [r7, #8]
 8008850:	689b      	ldr	r3, [r3, #8]
 8008852:	fbb1 f3f3 	udiv	r3, r1, r3
 8008856:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8008858:	4b9d      	ldr	r3, [pc, #628]	; (8008ad0 <USB_EPStartXfer+0x370>)
 800885a:	400b      	ands	r3, r1
 800885c:	69b9      	ldr	r1, [r7, #24]
 800885e:	0148      	lsls	r0, r1, #5
 8008860:	69f9      	ldr	r1, [r7, #28]
 8008862:	4401      	add	r1, r0
 8008864:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8008868:	4313      	orrs	r3, r2
 800886a:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800886c:	69bb      	ldr	r3, [r7, #24]
 800886e:	015a      	lsls	r2, r3, #5
 8008870:	69fb      	ldr	r3, [r7, #28]
 8008872:	4413      	add	r3, r2
 8008874:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008878:	691a      	ldr	r2, [r3, #16]
 800887a:	68bb      	ldr	r3, [r7, #8]
 800887c:	695b      	ldr	r3, [r3, #20]
 800887e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008882:	69b9      	ldr	r1, [r7, #24]
 8008884:	0148      	lsls	r0, r1, #5
 8008886:	69f9      	ldr	r1, [r7, #28]
 8008888:	4401      	add	r1, r0
 800888a:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800888e:	4313      	orrs	r3, r2
 8008890:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8008892:	68bb      	ldr	r3, [r7, #8]
 8008894:	78db      	ldrb	r3, [r3, #3]
 8008896:	2b01      	cmp	r3, #1
 8008898:	d11f      	bne.n	80088da <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800889a:	69bb      	ldr	r3, [r7, #24]
 800889c:	015a      	lsls	r2, r3, #5
 800889e:	69fb      	ldr	r3, [r7, #28]
 80088a0:	4413      	add	r3, r2
 80088a2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80088a6:	691b      	ldr	r3, [r3, #16]
 80088a8:	69ba      	ldr	r2, [r7, #24]
 80088aa:	0151      	lsls	r1, r2, #5
 80088ac:	69fa      	ldr	r2, [r7, #28]
 80088ae:	440a      	add	r2, r1
 80088b0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80088b4:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 80088b8:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 80088ba:	69bb      	ldr	r3, [r7, #24]
 80088bc:	015a      	lsls	r2, r3, #5
 80088be:	69fb      	ldr	r3, [r7, #28]
 80088c0:	4413      	add	r3, r2
 80088c2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80088c6:	691b      	ldr	r3, [r3, #16]
 80088c8:	69ba      	ldr	r2, [r7, #24]
 80088ca:	0151      	lsls	r1, r2, #5
 80088cc:	69fa      	ldr	r2, [r7, #28]
 80088ce:	440a      	add	r2, r1
 80088d0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80088d4:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80088d8:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 80088da:	79fb      	ldrb	r3, [r7, #7]
 80088dc:	2b01      	cmp	r3, #1
 80088de:	d14b      	bne.n	8008978 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80088e0:	68bb      	ldr	r3, [r7, #8]
 80088e2:	691b      	ldr	r3, [r3, #16]
 80088e4:	2b00      	cmp	r3, #0
 80088e6:	d009      	beq.n	80088fc <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80088e8:	69bb      	ldr	r3, [r7, #24]
 80088ea:	015a      	lsls	r2, r3, #5
 80088ec:	69fb      	ldr	r3, [r7, #28]
 80088ee:	4413      	add	r3, r2
 80088f0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80088f4:	461a      	mov	r2, r3
 80088f6:	68bb      	ldr	r3, [r7, #8]
 80088f8:	691b      	ldr	r3, [r3, #16]
 80088fa:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 80088fc:	68bb      	ldr	r3, [r7, #8]
 80088fe:	78db      	ldrb	r3, [r3, #3]
 8008900:	2b01      	cmp	r3, #1
 8008902:	d128      	bne.n	8008956 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8008904:	69fb      	ldr	r3, [r7, #28]
 8008906:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800890a:	689b      	ldr	r3, [r3, #8]
 800890c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008910:	2b00      	cmp	r3, #0
 8008912:	d110      	bne.n	8008936 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8008914:	69bb      	ldr	r3, [r7, #24]
 8008916:	015a      	lsls	r2, r3, #5
 8008918:	69fb      	ldr	r3, [r7, #28]
 800891a:	4413      	add	r3, r2
 800891c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008920:	681b      	ldr	r3, [r3, #0]
 8008922:	69ba      	ldr	r2, [r7, #24]
 8008924:	0151      	lsls	r1, r2, #5
 8008926:	69fa      	ldr	r2, [r7, #28]
 8008928:	440a      	add	r2, r1
 800892a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800892e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8008932:	6013      	str	r3, [r2, #0]
 8008934:	e00f      	b.n	8008956 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8008936:	69bb      	ldr	r3, [r7, #24]
 8008938:	015a      	lsls	r2, r3, #5
 800893a:	69fb      	ldr	r3, [r7, #28]
 800893c:	4413      	add	r3, r2
 800893e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008942:	681b      	ldr	r3, [r3, #0]
 8008944:	69ba      	ldr	r2, [r7, #24]
 8008946:	0151      	lsls	r1, r2, #5
 8008948:	69fa      	ldr	r2, [r7, #28]
 800894a:	440a      	add	r2, r1
 800894c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008950:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008954:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8008956:	69bb      	ldr	r3, [r7, #24]
 8008958:	015a      	lsls	r2, r3, #5
 800895a:	69fb      	ldr	r3, [r7, #28]
 800895c:	4413      	add	r3, r2
 800895e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008962:	681b      	ldr	r3, [r3, #0]
 8008964:	69ba      	ldr	r2, [r7, #24]
 8008966:	0151      	lsls	r1, r2, #5
 8008968:	69fa      	ldr	r2, [r7, #28]
 800896a:	440a      	add	r2, r1
 800896c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008970:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8008974:	6013      	str	r3, [r2, #0]
 8008976:	e12f      	b.n	8008bd8 <USB_EPStartXfer+0x478>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8008978:	69bb      	ldr	r3, [r7, #24]
 800897a:	015a      	lsls	r2, r3, #5
 800897c:	69fb      	ldr	r3, [r7, #28]
 800897e:	4413      	add	r3, r2
 8008980:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008984:	681b      	ldr	r3, [r3, #0]
 8008986:	69ba      	ldr	r2, [r7, #24]
 8008988:	0151      	lsls	r1, r2, #5
 800898a:	69fa      	ldr	r2, [r7, #28]
 800898c:	440a      	add	r2, r1
 800898e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008992:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8008996:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8008998:	68bb      	ldr	r3, [r7, #8]
 800899a:	78db      	ldrb	r3, [r3, #3]
 800899c:	2b01      	cmp	r3, #1
 800899e:	d015      	beq.n	80089cc <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 80089a0:	68bb      	ldr	r3, [r7, #8]
 80089a2:	695b      	ldr	r3, [r3, #20]
 80089a4:	2b00      	cmp	r3, #0
 80089a6:	f000 8117 	beq.w	8008bd8 <USB_EPStartXfer+0x478>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80089aa:	69fb      	ldr	r3, [r7, #28]
 80089ac:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80089b0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80089b2:	68bb      	ldr	r3, [r7, #8]
 80089b4:	781b      	ldrb	r3, [r3, #0]
 80089b6:	f003 030f 	and.w	r3, r3, #15
 80089ba:	2101      	movs	r1, #1
 80089bc:	fa01 f303 	lsl.w	r3, r1, r3
 80089c0:	69f9      	ldr	r1, [r7, #28]
 80089c2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80089c6:	4313      	orrs	r3, r2
 80089c8:	634b      	str	r3, [r1, #52]	; 0x34
 80089ca:	e105      	b.n	8008bd8 <USB_EPStartXfer+0x478>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80089cc:	69fb      	ldr	r3, [r7, #28]
 80089ce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80089d2:	689b      	ldr	r3, [r3, #8]
 80089d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80089d8:	2b00      	cmp	r3, #0
 80089da:	d110      	bne.n	80089fe <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80089dc:	69bb      	ldr	r3, [r7, #24]
 80089de:	015a      	lsls	r2, r3, #5
 80089e0:	69fb      	ldr	r3, [r7, #28]
 80089e2:	4413      	add	r3, r2
 80089e4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80089e8:	681b      	ldr	r3, [r3, #0]
 80089ea:	69ba      	ldr	r2, [r7, #24]
 80089ec:	0151      	lsls	r1, r2, #5
 80089ee:	69fa      	ldr	r2, [r7, #28]
 80089f0:	440a      	add	r2, r1
 80089f2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80089f6:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80089fa:	6013      	str	r3, [r2, #0]
 80089fc:	e00f      	b.n	8008a1e <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80089fe:	69bb      	ldr	r3, [r7, #24]
 8008a00:	015a      	lsls	r2, r3, #5
 8008a02:	69fb      	ldr	r3, [r7, #28]
 8008a04:	4413      	add	r3, r2
 8008a06:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008a0a:	681b      	ldr	r3, [r3, #0]
 8008a0c:	69ba      	ldr	r2, [r7, #24]
 8008a0e:	0151      	lsls	r1, r2, #5
 8008a10:	69fa      	ldr	r2, [r7, #28]
 8008a12:	440a      	add	r2, r1
 8008a14:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008a18:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008a1c:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8008a1e:	68bb      	ldr	r3, [r7, #8]
 8008a20:	68d9      	ldr	r1, [r3, #12]
 8008a22:	68bb      	ldr	r3, [r7, #8]
 8008a24:	781a      	ldrb	r2, [r3, #0]
 8008a26:	68bb      	ldr	r3, [r7, #8]
 8008a28:	695b      	ldr	r3, [r3, #20]
 8008a2a:	b298      	uxth	r0, r3
 8008a2c:	79fb      	ldrb	r3, [r7, #7]
 8008a2e:	9300      	str	r3, [sp, #0]
 8008a30:	4603      	mov	r3, r0
 8008a32:	68f8      	ldr	r0, [r7, #12]
 8008a34:	f000 fa2b 	bl	8008e8e <USB_WritePacket>
 8008a38:	e0ce      	b.n	8008bd8 <USB_EPStartXfer+0x478>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8008a3a:	69bb      	ldr	r3, [r7, #24]
 8008a3c:	015a      	lsls	r2, r3, #5
 8008a3e:	69fb      	ldr	r3, [r7, #28]
 8008a40:	4413      	add	r3, r2
 8008a42:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008a46:	691b      	ldr	r3, [r3, #16]
 8008a48:	69ba      	ldr	r2, [r7, #24]
 8008a4a:	0151      	lsls	r1, r2, #5
 8008a4c:	69fa      	ldr	r2, [r7, #28]
 8008a4e:	440a      	add	r2, r1
 8008a50:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008a54:	0cdb      	lsrs	r3, r3, #19
 8008a56:	04db      	lsls	r3, r3, #19
 8008a58:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8008a5a:	69bb      	ldr	r3, [r7, #24]
 8008a5c:	015a      	lsls	r2, r3, #5
 8008a5e:	69fb      	ldr	r3, [r7, #28]
 8008a60:	4413      	add	r3, r2
 8008a62:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008a66:	691b      	ldr	r3, [r3, #16]
 8008a68:	69ba      	ldr	r2, [r7, #24]
 8008a6a:	0151      	lsls	r1, r2, #5
 8008a6c:	69fa      	ldr	r2, [r7, #28]
 8008a6e:	440a      	add	r2, r1
 8008a70:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008a74:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8008a78:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8008a7c:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 8008a7e:	68bb      	ldr	r3, [r7, #8]
 8008a80:	695b      	ldr	r3, [r3, #20]
 8008a82:	2b00      	cmp	r3, #0
 8008a84:	d126      	bne.n	8008ad4 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8008a86:	69bb      	ldr	r3, [r7, #24]
 8008a88:	015a      	lsls	r2, r3, #5
 8008a8a:	69fb      	ldr	r3, [r7, #28]
 8008a8c:	4413      	add	r3, r2
 8008a8e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008a92:	691a      	ldr	r2, [r3, #16]
 8008a94:	68bb      	ldr	r3, [r7, #8]
 8008a96:	689b      	ldr	r3, [r3, #8]
 8008a98:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008a9c:	69b9      	ldr	r1, [r7, #24]
 8008a9e:	0148      	lsls	r0, r1, #5
 8008aa0:	69f9      	ldr	r1, [r7, #28]
 8008aa2:	4401      	add	r1, r0
 8008aa4:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8008aa8:	4313      	orrs	r3, r2
 8008aaa:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8008aac:	69bb      	ldr	r3, [r7, #24]
 8008aae:	015a      	lsls	r2, r3, #5
 8008ab0:	69fb      	ldr	r3, [r7, #28]
 8008ab2:	4413      	add	r3, r2
 8008ab4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008ab8:	691b      	ldr	r3, [r3, #16]
 8008aba:	69ba      	ldr	r2, [r7, #24]
 8008abc:	0151      	lsls	r1, r2, #5
 8008abe:	69fa      	ldr	r2, [r7, #28]
 8008ac0:	440a      	add	r2, r1
 8008ac2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008ac6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8008aca:	6113      	str	r3, [r2, #16]
 8008acc:	e036      	b.n	8008b3c <USB_EPStartXfer+0x3dc>
 8008ace:	bf00      	nop
 8008ad0:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8008ad4:	68bb      	ldr	r3, [r7, #8]
 8008ad6:	695a      	ldr	r2, [r3, #20]
 8008ad8:	68bb      	ldr	r3, [r7, #8]
 8008ada:	689b      	ldr	r3, [r3, #8]
 8008adc:	4413      	add	r3, r2
 8008ade:	1e5a      	subs	r2, r3, #1
 8008ae0:	68bb      	ldr	r3, [r7, #8]
 8008ae2:	689b      	ldr	r3, [r3, #8]
 8008ae4:	fbb2 f3f3 	udiv	r3, r2, r3
 8008ae8:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8008aea:	69bb      	ldr	r3, [r7, #24]
 8008aec:	015a      	lsls	r2, r3, #5
 8008aee:	69fb      	ldr	r3, [r7, #28]
 8008af0:	4413      	add	r3, r2
 8008af2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008af6:	691a      	ldr	r2, [r3, #16]
 8008af8:	8afb      	ldrh	r3, [r7, #22]
 8008afa:	04d9      	lsls	r1, r3, #19
 8008afc:	4b39      	ldr	r3, [pc, #228]	; (8008be4 <USB_EPStartXfer+0x484>)
 8008afe:	400b      	ands	r3, r1
 8008b00:	69b9      	ldr	r1, [r7, #24]
 8008b02:	0148      	lsls	r0, r1, #5
 8008b04:	69f9      	ldr	r1, [r7, #28]
 8008b06:	4401      	add	r1, r0
 8008b08:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8008b0c:	4313      	orrs	r3, r2
 8008b0e:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 8008b10:	69bb      	ldr	r3, [r7, #24]
 8008b12:	015a      	lsls	r2, r3, #5
 8008b14:	69fb      	ldr	r3, [r7, #28]
 8008b16:	4413      	add	r3, r2
 8008b18:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008b1c:	691a      	ldr	r2, [r3, #16]
 8008b1e:	68bb      	ldr	r3, [r7, #8]
 8008b20:	689b      	ldr	r3, [r3, #8]
 8008b22:	8af9      	ldrh	r1, [r7, #22]
 8008b24:	fb01 f303 	mul.w	r3, r1, r3
 8008b28:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008b2c:	69b9      	ldr	r1, [r7, #24]
 8008b2e:	0148      	lsls	r0, r1, #5
 8008b30:	69f9      	ldr	r1, [r7, #28]
 8008b32:	4401      	add	r1, r0
 8008b34:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8008b38:	4313      	orrs	r3, r2
 8008b3a:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8008b3c:	79fb      	ldrb	r3, [r7, #7]
 8008b3e:	2b01      	cmp	r3, #1
 8008b40:	d10d      	bne.n	8008b5e <USB_EPStartXfer+0x3fe>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8008b42:	68bb      	ldr	r3, [r7, #8]
 8008b44:	68db      	ldr	r3, [r3, #12]
 8008b46:	2b00      	cmp	r3, #0
 8008b48:	d009      	beq.n	8008b5e <USB_EPStartXfer+0x3fe>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8008b4a:	68bb      	ldr	r3, [r7, #8]
 8008b4c:	68d9      	ldr	r1, [r3, #12]
 8008b4e:	69bb      	ldr	r3, [r7, #24]
 8008b50:	015a      	lsls	r2, r3, #5
 8008b52:	69fb      	ldr	r3, [r7, #28]
 8008b54:	4413      	add	r3, r2
 8008b56:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008b5a:	460a      	mov	r2, r1
 8008b5c:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8008b5e:	68bb      	ldr	r3, [r7, #8]
 8008b60:	78db      	ldrb	r3, [r3, #3]
 8008b62:	2b01      	cmp	r3, #1
 8008b64:	d128      	bne.n	8008bb8 <USB_EPStartXfer+0x458>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8008b66:	69fb      	ldr	r3, [r7, #28]
 8008b68:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008b6c:	689b      	ldr	r3, [r3, #8]
 8008b6e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008b72:	2b00      	cmp	r3, #0
 8008b74:	d110      	bne.n	8008b98 <USB_EPStartXfer+0x438>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8008b76:	69bb      	ldr	r3, [r7, #24]
 8008b78:	015a      	lsls	r2, r3, #5
 8008b7a:	69fb      	ldr	r3, [r7, #28]
 8008b7c:	4413      	add	r3, r2
 8008b7e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008b82:	681b      	ldr	r3, [r3, #0]
 8008b84:	69ba      	ldr	r2, [r7, #24]
 8008b86:	0151      	lsls	r1, r2, #5
 8008b88:	69fa      	ldr	r2, [r7, #28]
 8008b8a:	440a      	add	r2, r1
 8008b8c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008b90:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8008b94:	6013      	str	r3, [r2, #0]
 8008b96:	e00f      	b.n	8008bb8 <USB_EPStartXfer+0x458>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8008b98:	69bb      	ldr	r3, [r7, #24]
 8008b9a:	015a      	lsls	r2, r3, #5
 8008b9c:	69fb      	ldr	r3, [r7, #28]
 8008b9e:	4413      	add	r3, r2
 8008ba0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008ba4:	681b      	ldr	r3, [r3, #0]
 8008ba6:	69ba      	ldr	r2, [r7, #24]
 8008ba8:	0151      	lsls	r1, r2, #5
 8008baa:	69fa      	ldr	r2, [r7, #28]
 8008bac:	440a      	add	r2, r1
 8008bae:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008bb2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008bb6:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8008bb8:	69bb      	ldr	r3, [r7, #24]
 8008bba:	015a      	lsls	r2, r3, #5
 8008bbc:	69fb      	ldr	r3, [r7, #28]
 8008bbe:	4413      	add	r3, r2
 8008bc0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008bc4:	681b      	ldr	r3, [r3, #0]
 8008bc6:	69ba      	ldr	r2, [r7, #24]
 8008bc8:	0151      	lsls	r1, r2, #5
 8008bca:	69fa      	ldr	r2, [r7, #28]
 8008bcc:	440a      	add	r2, r1
 8008bce:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008bd2:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8008bd6:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8008bd8:	2300      	movs	r3, #0
}
 8008bda:	4618      	mov	r0, r3
 8008bdc:	3720      	adds	r7, #32
 8008bde:	46bd      	mov	sp, r7
 8008be0:	bd80      	pop	{r7, pc}
 8008be2:	bf00      	nop
 8008be4:	1ff80000 	.word	0x1ff80000

08008be8 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8008be8:	b480      	push	{r7}
 8008bea:	b087      	sub	sp, #28
 8008bec:	af00      	add	r7, sp, #0
 8008bee:	60f8      	str	r0, [r7, #12]
 8008bf0:	60b9      	str	r1, [r7, #8]
 8008bf2:	4613      	mov	r3, r2
 8008bf4:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008bf6:	68fb      	ldr	r3, [r7, #12]
 8008bf8:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8008bfa:	68bb      	ldr	r3, [r7, #8]
 8008bfc:	781b      	ldrb	r3, [r3, #0]
 8008bfe:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8008c00:	68bb      	ldr	r3, [r7, #8]
 8008c02:	785b      	ldrb	r3, [r3, #1]
 8008c04:	2b01      	cmp	r3, #1
 8008c06:	f040 80cd 	bne.w	8008da4 <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8008c0a:	68bb      	ldr	r3, [r7, #8]
 8008c0c:	695b      	ldr	r3, [r3, #20]
 8008c0e:	2b00      	cmp	r3, #0
 8008c10:	d132      	bne.n	8008c78 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8008c12:	693b      	ldr	r3, [r7, #16]
 8008c14:	015a      	lsls	r2, r3, #5
 8008c16:	697b      	ldr	r3, [r7, #20]
 8008c18:	4413      	add	r3, r2
 8008c1a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008c1e:	691b      	ldr	r3, [r3, #16]
 8008c20:	693a      	ldr	r2, [r7, #16]
 8008c22:	0151      	lsls	r1, r2, #5
 8008c24:	697a      	ldr	r2, [r7, #20]
 8008c26:	440a      	add	r2, r1
 8008c28:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008c2c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8008c30:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8008c34:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8008c36:	693b      	ldr	r3, [r7, #16]
 8008c38:	015a      	lsls	r2, r3, #5
 8008c3a:	697b      	ldr	r3, [r7, #20]
 8008c3c:	4413      	add	r3, r2
 8008c3e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008c42:	691b      	ldr	r3, [r3, #16]
 8008c44:	693a      	ldr	r2, [r7, #16]
 8008c46:	0151      	lsls	r1, r2, #5
 8008c48:	697a      	ldr	r2, [r7, #20]
 8008c4a:	440a      	add	r2, r1
 8008c4c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008c50:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8008c54:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8008c56:	693b      	ldr	r3, [r7, #16]
 8008c58:	015a      	lsls	r2, r3, #5
 8008c5a:	697b      	ldr	r3, [r7, #20]
 8008c5c:	4413      	add	r3, r2
 8008c5e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008c62:	691b      	ldr	r3, [r3, #16]
 8008c64:	693a      	ldr	r2, [r7, #16]
 8008c66:	0151      	lsls	r1, r2, #5
 8008c68:	697a      	ldr	r2, [r7, #20]
 8008c6a:	440a      	add	r2, r1
 8008c6c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008c70:	0cdb      	lsrs	r3, r3, #19
 8008c72:	04db      	lsls	r3, r3, #19
 8008c74:	6113      	str	r3, [r2, #16]
 8008c76:	e04e      	b.n	8008d16 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8008c78:	693b      	ldr	r3, [r7, #16]
 8008c7a:	015a      	lsls	r2, r3, #5
 8008c7c:	697b      	ldr	r3, [r7, #20]
 8008c7e:	4413      	add	r3, r2
 8008c80:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008c84:	691b      	ldr	r3, [r3, #16]
 8008c86:	693a      	ldr	r2, [r7, #16]
 8008c88:	0151      	lsls	r1, r2, #5
 8008c8a:	697a      	ldr	r2, [r7, #20]
 8008c8c:	440a      	add	r2, r1
 8008c8e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008c92:	0cdb      	lsrs	r3, r3, #19
 8008c94:	04db      	lsls	r3, r3, #19
 8008c96:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8008c98:	693b      	ldr	r3, [r7, #16]
 8008c9a:	015a      	lsls	r2, r3, #5
 8008c9c:	697b      	ldr	r3, [r7, #20]
 8008c9e:	4413      	add	r3, r2
 8008ca0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008ca4:	691b      	ldr	r3, [r3, #16]
 8008ca6:	693a      	ldr	r2, [r7, #16]
 8008ca8:	0151      	lsls	r1, r2, #5
 8008caa:	697a      	ldr	r2, [r7, #20]
 8008cac:	440a      	add	r2, r1
 8008cae:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008cb2:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8008cb6:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8008cba:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8008cbc:	68bb      	ldr	r3, [r7, #8]
 8008cbe:	695a      	ldr	r2, [r3, #20]
 8008cc0:	68bb      	ldr	r3, [r7, #8]
 8008cc2:	689b      	ldr	r3, [r3, #8]
 8008cc4:	429a      	cmp	r2, r3
 8008cc6:	d903      	bls.n	8008cd0 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8008cc8:	68bb      	ldr	r3, [r7, #8]
 8008cca:	689a      	ldr	r2, [r3, #8]
 8008ccc:	68bb      	ldr	r3, [r7, #8]
 8008cce:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8008cd0:	693b      	ldr	r3, [r7, #16]
 8008cd2:	015a      	lsls	r2, r3, #5
 8008cd4:	697b      	ldr	r3, [r7, #20]
 8008cd6:	4413      	add	r3, r2
 8008cd8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008cdc:	691b      	ldr	r3, [r3, #16]
 8008cde:	693a      	ldr	r2, [r7, #16]
 8008ce0:	0151      	lsls	r1, r2, #5
 8008ce2:	697a      	ldr	r2, [r7, #20]
 8008ce4:	440a      	add	r2, r1
 8008ce6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008cea:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8008cee:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8008cf0:	693b      	ldr	r3, [r7, #16]
 8008cf2:	015a      	lsls	r2, r3, #5
 8008cf4:	697b      	ldr	r3, [r7, #20]
 8008cf6:	4413      	add	r3, r2
 8008cf8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008cfc:	691a      	ldr	r2, [r3, #16]
 8008cfe:	68bb      	ldr	r3, [r7, #8]
 8008d00:	695b      	ldr	r3, [r3, #20]
 8008d02:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008d06:	6939      	ldr	r1, [r7, #16]
 8008d08:	0148      	lsls	r0, r1, #5
 8008d0a:	6979      	ldr	r1, [r7, #20]
 8008d0c:	4401      	add	r1, r0
 8008d0e:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8008d12:	4313      	orrs	r3, r2
 8008d14:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8008d16:	79fb      	ldrb	r3, [r7, #7]
 8008d18:	2b01      	cmp	r3, #1
 8008d1a:	d11e      	bne.n	8008d5a <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8008d1c:	68bb      	ldr	r3, [r7, #8]
 8008d1e:	691b      	ldr	r3, [r3, #16]
 8008d20:	2b00      	cmp	r3, #0
 8008d22:	d009      	beq.n	8008d38 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8008d24:	693b      	ldr	r3, [r7, #16]
 8008d26:	015a      	lsls	r2, r3, #5
 8008d28:	697b      	ldr	r3, [r7, #20]
 8008d2a:	4413      	add	r3, r2
 8008d2c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008d30:	461a      	mov	r2, r3
 8008d32:	68bb      	ldr	r3, [r7, #8]
 8008d34:	691b      	ldr	r3, [r3, #16]
 8008d36:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8008d38:	693b      	ldr	r3, [r7, #16]
 8008d3a:	015a      	lsls	r2, r3, #5
 8008d3c:	697b      	ldr	r3, [r7, #20]
 8008d3e:	4413      	add	r3, r2
 8008d40:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008d44:	681b      	ldr	r3, [r3, #0]
 8008d46:	693a      	ldr	r2, [r7, #16]
 8008d48:	0151      	lsls	r1, r2, #5
 8008d4a:	697a      	ldr	r2, [r7, #20]
 8008d4c:	440a      	add	r2, r1
 8008d4e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008d52:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8008d56:	6013      	str	r3, [r2, #0]
 8008d58:	e092      	b.n	8008e80 <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8008d5a:	693b      	ldr	r3, [r7, #16]
 8008d5c:	015a      	lsls	r2, r3, #5
 8008d5e:	697b      	ldr	r3, [r7, #20]
 8008d60:	4413      	add	r3, r2
 8008d62:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008d66:	681b      	ldr	r3, [r3, #0]
 8008d68:	693a      	ldr	r2, [r7, #16]
 8008d6a:	0151      	lsls	r1, r2, #5
 8008d6c:	697a      	ldr	r2, [r7, #20]
 8008d6e:	440a      	add	r2, r1
 8008d70:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008d74:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8008d78:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8008d7a:	68bb      	ldr	r3, [r7, #8]
 8008d7c:	695b      	ldr	r3, [r3, #20]
 8008d7e:	2b00      	cmp	r3, #0
 8008d80:	d07e      	beq.n	8008e80 <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8008d82:	697b      	ldr	r3, [r7, #20]
 8008d84:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008d88:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008d8a:	68bb      	ldr	r3, [r7, #8]
 8008d8c:	781b      	ldrb	r3, [r3, #0]
 8008d8e:	f003 030f 	and.w	r3, r3, #15
 8008d92:	2101      	movs	r1, #1
 8008d94:	fa01 f303 	lsl.w	r3, r1, r3
 8008d98:	6979      	ldr	r1, [r7, #20]
 8008d9a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008d9e:	4313      	orrs	r3, r2
 8008da0:	634b      	str	r3, [r1, #52]	; 0x34
 8008da2:	e06d      	b.n	8008e80 <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8008da4:	693b      	ldr	r3, [r7, #16]
 8008da6:	015a      	lsls	r2, r3, #5
 8008da8:	697b      	ldr	r3, [r7, #20]
 8008daa:	4413      	add	r3, r2
 8008dac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008db0:	691b      	ldr	r3, [r3, #16]
 8008db2:	693a      	ldr	r2, [r7, #16]
 8008db4:	0151      	lsls	r1, r2, #5
 8008db6:	697a      	ldr	r2, [r7, #20]
 8008db8:	440a      	add	r2, r1
 8008dba:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008dbe:	0cdb      	lsrs	r3, r3, #19
 8008dc0:	04db      	lsls	r3, r3, #19
 8008dc2:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8008dc4:	693b      	ldr	r3, [r7, #16]
 8008dc6:	015a      	lsls	r2, r3, #5
 8008dc8:	697b      	ldr	r3, [r7, #20]
 8008dca:	4413      	add	r3, r2
 8008dcc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008dd0:	691b      	ldr	r3, [r3, #16]
 8008dd2:	693a      	ldr	r2, [r7, #16]
 8008dd4:	0151      	lsls	r1, r2, #5
 8008dd6:	697a      	ldr	r2, [r7, #20]
 8008dd8:	440a      	add	r2, r1
 8008dda:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008dde:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8008de2:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8008de6:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8008de8:	68bb      	ldr	r3, [r7, #8]
 8008dea:	695b      	ldr	r3, [r3, #20]
 8008dec:	2b00      	cmp	r3, #0
 8008dee:	d003      	beq.n	8008df8 <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 8008df0:	68bb      	ldr	r3, [r7, #8]
 8008df2:	689a      	ldr	r2, [r3, #8]
 8008df4:	68bb      	ldr	r3, [r7, #8]
 8008df6:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8008df8:	693b      	ldr	r3, [r7, #16]
 8008dfa:	015a      	lsls	r2, r3, #5
 8008dfc:	697b      	ldr	r3, [r7, #20]
 8008dfe:	4413      	add	r3, r2
 8008e00:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008e04:	691b      	ldr	r3, [r3, #16]
 8008e06:	693a      	ldr	r2, [r7, #16]
 8008e08:	0151      	lsls	r1, r2, #5
 8008e0a:	697a      	ldr	r2, [r7, #20]
 8008e0c:	440a      	add	r2, r1
 8008e0e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008e12:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8008e16:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 8008e18:	693b      	ldr	r3, [r7, #16]
 8008e1a:	015a      	lsls	r2, r3, #5
 8008e1c:	697b      	ldr	r3, [r7, #20]
 8008e1e:	4413      	add	r3, r2
 8008e20:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008e24:	691a      	ldr	r2, [r3, #16]
 8008e26:	68bb      	ldr	r3, [r7, #8]
 8008e28:	689b      	ldr	r3, [r3, #8]
 8008e2a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008e2e:	6939      	ldr	r1, [r7, #16]
 8008e30:	0148      	lsls	r0, r1, #5
 8008e32:	6979      	ldr	r1, [r7, #20]
 8008e34:	4401      	add	r1, r0
 8008e36:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8008e3a:	4313      	orrs	r3, r2
 8008e3c:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8008e3e:	79fb      	ldrb	r3, [r7, #7]
 8008e40:	2b01      	cmp	r3, #1
 8008e42:	d10d      	bne.n	8008e60 <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8008e44:	68bb      	ldr	r3, [r7, #8]
 8008e46:	68db      	ldr	r3, [r3, #12]
 8008e48:	2b00      	cmp	r3, #0
 8008e4a:	d009      	beq.n	8008e60 <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8008e4c:	68bb      	ldr	r3, [r7, #8]
 8008e4e:	68d9      	ldr	r1, [r3, #12]
 8008e50:	693b      	ldr	r3, [r7, #16]
 8008e52:	015a      	lsls	r2, r3, #5
 8008e54:	697b      	ldr	r3, [r7, #20]
 8008e56:	4413      	add	r3, r2
 8008e58:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008e5c:	460a      	mov	r2, r1
 8008e5e:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8008e60:	693b      	ldr	r3, [r7, #16]
 8008e62:	015a      	lsls	r2, r3, #5
 8008e64:	697b      	ldr	r3, [r7, #20]
 8008e66:	4413      	add	r3, r2
 8008e68:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008e6c:	681b      	ldr	r3, [r3, #0]
 8008e6e:	693a      	ldr	r2, [r7, #16]
 8008e70:	0151      	lsls	r1, r2, #5
 8008e72:	697a      	ldr	r2, [r7, #20]
 8008e74:	440a      	add	r2, r1
 8008e76:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008e7a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8008e7e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8008e80:	2300      	movs	r3, #0
}
 8008e82:	4618      	mov	r0, r3
 8008e84:	371c      	adds	r7, #28
 8008e86:	46bd      	mov	sp, r7
 8008e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e8c:	4770      	bx	lr

08008e8e <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8008e8e:	b480      	push	{r7}
 8008e90:	b089      	sub	sp, #36	; 0x24
 8008e92:	af00      	add	r7, sp, #0
 8008e94:	60f8      	str	r0, [r7, #12]
 8008e96:	60b9      	str	r1, [r7, #8]
 8008e98:	4611      	mov	r1, r2
 8008e9a:	461a      	mov	r2, r3
 8008e9c:	460b      	mov	r3, r1
 8008e9e:	71fb      	strb	r3, [r7, #7]
 8008ea0:	4613      	mov	r3, r2
 8008ea2:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008ea4:	68fb      	ldr	r3, [r7, #12]
 8008ea6:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8008ea8:	68bb      	ldr	r3, [r7, #8]
 8008eaa:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8008eac:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8008eb0:	2b00      	cmp	r3, #0
 8008eb2:	d123      	bne.n	8008efc <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8008eb4:	88bb      	ldrh	r3, [r7, #4]
 8008eb6:	3303      	adds	r3, #3
 8008eb8:	089b      	lsrs	r3, r3, #2
 8008eba:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8008ebc:	2300      	movs	r3, #0
 8008ebe:	61bb      	str	r3, [r7, #24]
 8008ec0:	e018      	b.n	8008ef4 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8008ec2:	79fb      	ldrb	r3, [r7, #7]
 8008ec4:	031a      	lsls	r2, r3, #12
 8008ec6:	697b      	ldr	r3, [r7, #20]
 8008ec8:	4413      	add	r3, r2
 8008eca:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008ece:	461a      	mov	r2, r3
 8008ed0:	69fb      	ldr	r3, [r7, #28]
 8008ed2:	681b      	ldr	r3, [r3, #0]
 8008ed4:	6013      	str	r3, [r2, #0]
      pSrc++;
 8008ed6:	69fb      	ldr	r3, [r7, #28]
 8008ed8:	3301      	adds	r3, #1
 8008eda:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8008edc:	69fb      	ldr	r3, [r7, #28]
 8008ede:	3301      	adds	r3, #1
 8008ee0:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8008ee2:	69fb      	ldr	r3, [r7, #28]
 8008ee4:	3301      	adds	r3, #1
 8008ee6:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8008ee8:	69fb      	ldr	r3, [r7, #28]
 8008eea:	3301      	adds	r3, #1
 8008eec:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8008eee:	69bb      	ldr	r3, [r7, #24]
 8008ef0:	3301      	adds	r3, #1
 8008ef2:	61bb      	str	r3, [r7, #24]
 8008ef4:	69ba      	ldr	r2, [r7, #24]
 8008ef6:	693b      	ldr	r3, [r7, #16]
 8008ef8:	429a      	cmp	r2, r3
 8008efa:	d3e2      	bcc.n	8008ec2 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8008efc:	2300      	movs	r3, #0
}
 8008efe:	4618      	mov	r0, r3
 8008f00:	3724      	adds	r7, #36	; 0x24
 8008f02:	46bd      	mov	sp, r7
 8008f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f08:	4770      	bx	lr

08008f0a <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8008f0a:	b480      	push	{r7}
 8008f0c:	b08b      	sub	sp, #44	; 0x2c
 8008f0e:	af00      	add	r7, sp, #0
 8008f10:	60f8      	str	r0, [r7, #12]
 8008f12:	60b9      	str	r1, [r7, #8]
 8008f14:	4613      	mov	r3, r2
 8008f16:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008f18:	68fb      	ldr	r3, [r7, #12]
 8008f1a:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8008f1c:	68bb      	ldr	r3, [r7, #8]
 8008f1e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8008f20:	88fb      	ldrh	r3, [r7, #6]
 8008f22:	089b      	lsrs	r3, r3, #2
 8008f24:	b29b      	uxth	r3, r3
 8008f26:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8008f28:	88fb      	ldrh	r3, [r7, #6]
 8008f2a:	f003 0303 	and.w	r3, r3, #3
 8008f2e:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8008f30:	2300      	movs	r3, #0
 8008f32:	623b      	str	r3, [r7, #32]
 8008f34:	e014      	b.n	8008f60 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8008f36:	69bb      	ldr	r3, [r7, #24]
 8008f38:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008f3c:	681a      	ldr	r2, [r3, #0]
 8008f3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f40:	601a      	str	r2, [r3, #0]
    pDest++;
 8008f42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f44:	3301      	adds	r3, #1
 8008f46:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8008f48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f4a:	3301      	adds	r3, #1
 8008f4c:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8008f4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f50:	3301      	adds	r3, #1
 8008f52:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8008f54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f56:	3301      	adds	r3, #1
 8008f58:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8008f5a:	6a3b      	ldr	r3, [r7, #32]
 8008f5c:	3301      	adds	r3, #1
 8008f5e:	623b      	str	r3, [r7, #32]
 8008f60:	6a3a      	ldr	r2, [r7, #32]
 8008f62:	697b      	ldr	r3, [r7, #20]
 8008f64:	429a      	cmp	r2, r3
 8008f66:	d3e6      	bcc.n	8008f36 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8008f68:	8bfb      	ldrh	r3, [r7, #30]
 8008f6a:	2b00      	cmp	r3, #0
 8008f6c:	d01e      	beq.n	8008fac <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8008f6e:	2300      	movs	r3, #0
 8008f70:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8008f72:	69bb      	ldr	r3, [r7, #24]
 8008f74:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008f78:	461a      	mov	r2, r3
 8008f7a:	f107 0310 	add.w	r3, r7, #16
 8008f7e:	6812      	ldr	r2, [r2, #0]
 8008f80:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8008f82:	693a      	ldr	r2, [r7, #16]
 8008f84:	6a3b      	ldr	r3, [r7, #32]
 8008f86:	b2db      	uxtb	r3, r3
 8008f88:	00db      	lsls	r3, r3, #3
 8008f8a:	fa22 f303 	lsr.w	r3, r2, r3
 8008f8e:	b2da      	uxtb	r2, r3
 8008f90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f92:	701a      	strb	r2, [r3, #0]
      i++;
 8008f94:	6a3b      	ldr	r3, [r7, #32]
 8008f96:	3301      	adds	r3, #1
 8008f98:	623b      	str	r3, [r7, #32]
      pDest++;
 8008f9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f9c:	3301      	adds	r3, #1
 8008f9e:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8008fa0:	8bfb      	ldrh	r3, [r7, #30]
 8008fa2:	3b01      	subs	r3, #1
 8008fa4:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8008fa6:	8bfb      	ldrh	r3, [r7, #30]
 8008fa8:	2b00      	cmp	r3, #0
 8008faa:	d1ea      	bne.n	8008f82 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8008fac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8008fae:	4618      	mov	r0, r3
 8008fb0:	372c      	adds	r7, #44	; 0x2c
 8008fb2:	46bd      	mov	sp, r7
 8008fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fb8:	4770      	bx	lr

08008fba <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8008fba:	b480      	push	{r7}
 8008fbc:	b085      	sub	sp, #20
 8008fbe:	af00      	add	r7, sp, #0
 8008fc0:	6078      	str	r0, [r7, #4]
 8008fc2:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008fc4:	687b      	ldr	r3, [r7, #4]
 8008fc6:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8008fc8:	683b      	ldr	r3, [r7, #0]
 8008fca:	781b      	ldrb	r3, [r3, #0]
 8008fcc:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8008fce:	683b      	ldr	r3, [r7, #0]
 8008fd0:	785b      	ldrb	r3, [r3, #1]
 8008fd2:	2b01      	cmp	r3, #1
 8008fd4:	d12c      	bne.n	8009030 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8008fd6:	68bb      	ldr	r3, [r7, #8]
 8008fd8:	015a      	lsls	r2, r3, #5
 8008fda:	68fb      	ldr	r3, [r7, #12]
 8008fdc:	4413      	add	r3, r2
 8008fde:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008fe2:	681b      	ldr	r3, [r3, #0]
 8008fe4:	2b00      	cmp	r3, #0
 8008fe6:	db12      	blt.n	800900e <USB_EPSetStall+0x54>
 8008fe8:	68bb      	ldr	r3, [r7, #8]
 8008fea:	2b00      	cmp	r3, #0
 8008fec:	d00f      	beq.n	800900e <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8008fee:	68bb      	ldr	r3, [r7, #8]
 8008ff0:	015a      	lsls	r2, r3, #5
 8008ff2:	68fb      	ldr	r3, [r7, #12]
 8008ff4:	4413      	add	r3, r2
 8008ff6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008ffa:	681b      	ldr	r3, [r3, #0]
 8008ffc:	68ba      	ldr	r2, [r7, #8]
 8008ffe:	0151      	lsls	r1, r2, #5
 8009000:	68fa      	ldr	r2, [r7, #12]
 8009002:	440a      	add	r2, r1
 8009004:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009008:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800900c:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800900e:	68bb      	ldr	r3, [r7, #8]
 8009010:	015a      	lsls	r2, r3, #5
 8009012:	68fb      	ldr	r3, [r7, #12]
 8009014:	4413      	add	r3, r2
 8009016:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800901a:	681b      	ldr	r3, [r3, #0]
 800901c:	68ba      	ldr	r2, [r7, #8]
 800901e:	0151      	lsls	r1, r2, #5
 8009020:	68fa      	ldr	r2, [r7, #12]
 8009022:	440a      	add	r2, r1
 8009024:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009028:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800902c:	6013      	str	r3, [r2, #0]
 800902e:	e02b      	b.n	8009088 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8009030:	68bb      	ldr	r3, [r7, #8]
 8009032:	015a      	lsls	r2, r3, #5
 8009034:	68fb      	ldr	r3, [r7, #12]
 8009036:	4413      	add	r3, r2
 8009038:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800903c:	681b      	ldr	r3, [r3, #0]
 800903e:	2b00      	cmp	r3, #0
 8009040:	db12      	blt.n	8009068 <USB_EPSetStall+0xae>
 8009042:	68bb      	ldr	r3, [r7, #8]
 8009044:	2b00      	cmp	r3, #0
 8009046:	d00f      	beq.n	8009068 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8009048:	68bb      	ldr	r3, [r7, #8]
 800904a:	015a      	lsls	r2, r3, #5
 800904c:	68fb      	ldr	r3, [r7, #12]
 800904e:	4413      	add	r3, r2
 8009050:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009054:	681b      	ldr	r3, [r3, #0]
 8009056:	68ba      	ldr	r2, [r7, #8]
 8009058:	0151      	lsls	r1, r2, #5
 800905a:	68fa      	ldr	r2, [r7, #12]
 800905c:	440a      	add	r2, r1
 800905e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009062:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8009066:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8009068:	68bb      	ldr	r3, [r7, #8]
 800906a:	015a      	lsls	r2, r3, #5
 800906c:	68fb      	ldr	r3, [r7, #12]
 800906e:	4413      	add	r3, r2
 8009070:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009074:	681b      	ldr	r3, [r3, #0]
 8009076:	68ba      	ldr	r2, [r7, #8]
 8009078:	0151      	lsls	r1, r2, #5
 800907a:	68fa      	ldr	r2, [r7, #12]
 800907c:	440a      	add	r2, r1
 800907e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009082:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8009086:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8009088:	2300      	movs	r3, #0
}
 800908a:	4618      	mov	r0, r3
 800908c:	3714      	adds	r7, #20
 800908e:	46bd      	mov	sp, r7
 8009090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009094:	4770      	bx	lr

08009096 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8009096:	b480      	push	{r7}
 8009098:	b085      	sub	sp, #20
 800909a:	af00      	add	r7, sp, #0
 800909c:	6078      	str	r0, [r7, #4]
 800909e:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80090a0:	687b      	ldr	r3, [r7, #4]
 80090a2:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80090a4:	683b      	ldr	r3, [r7, #0]
 80090a6:	781b      	ldrb	r3, [r3, #0]
 80090a8:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80090aa:	683b      	ldr	r3, [r7, #0]
 80090ac:	785b      	ldrb	r3, [r3, #1]
 80090ae:	2b01      	cmp	r3, #1
 80090b0:	d128      	bne.n	8009104 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80090b2:	68bb      	ldr	r3, [r7, #8]
 80090b4:	015a      	lsls	r2, r3, #5
 80090b6:	68fb      	ldr	r3, [r7, #12]
 80090b8:	4413      	add	r3, r2
 80090ba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80090be:	681b      	ldr	r3, [r3, #0]
 80090c0:	68ba      	ldr	r2, [r7, #8]
 80090c2:	0151      	lsls	r1, r2, #5
 80090c4:	68fa      	ldr	r2, [r7, #12]
 80090c6:	440a      	add	r2, r1
 80090c8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80090cc:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80090d0:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80090d2:	683b      	ldr	r3, [r7, #0]
 80090d4:	78db      	ldrb	r3, [r3, #3]
 80090d6:	2b03      	cmp	r3, #3
 80090d8:	d003      	beq.n	80090e2 <USB_EPClearStall+0x4c>
 80090da:	683b      	ldr	r3, [r7, #0]
 80090dc:	78db      	ldrb	r3, [r3, #3]
 80090de:	2b02      	cmp	r3, #2
 80090e0:	d138      	bne.n	8009154 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80090e2:	68bb      	ldr	r3, [r7, #8]
 80090e4:	015a      	lsls	r2, r3, #5
 80090e6:	68fb      	ldr	r3, [r7, #12]
 80090e8:	4413      	add	r3, r2
 80090ea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80090ee:	681b      	ldr	r3, [r3, #0]
 80090f0:	68ba      	ldr	r2, [r7, #8]
 80090f2:	0151      	lsls	r1, r2, #5
 80090f4:	68fa      	ldr	r2, [r7, #12]
 80090f6:	440a      	add	r2, r1
 80090f8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80090fc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009100:	6013      	str	r3, [r2, #0]
 8009102:	e027      	b.n	8009154 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8009104:	68bb      	ldr	r3, [r7, #8]
 8009106:	015a      	lsls	r2, r3, #5
 8009108:	68fb      	ldr	r3, [r7, #12]
 800910a:	4413      	add	r3, r2
 800910c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009110:	681b      	ldr	r3, [r3, #0]
 8009112:	68ba      	ldr	r2, [r7, #8]
 8009114:	0151      	lsls	r1, r2, #5
 8009116:	68fa      	ldr	r2, [r7, #12]
 8009118:	440a      	add	r2, r1
 800911a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800911e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8009122:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8009124:	683b      	ldr	r3, [r7, #0]
 8009126:	78db      	ldrb	r3, [r3, #3]
 8009128:	2b03      	cmp	r3, #3
 800912a:	d003      	beq.n	8009134 <USB_EPClearStall+0x9e>
 800912c:	683b      	ldr	r3, [r7, #0]
 800912e:	78db      	ldrb	r3, [r3, #3]
 8009130:	2b02      	cmp	r3, #2
 8009132:	d10f      	bne.n	8009154 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8009134:	68bb      	ldr	r3, [r7, #8]
 8009136:	015a      	lsls	r2, r3, #5
 8009138:	68fb      	ldr	r3, [r7, #12]
 800913a:	4413      	add	r3, r2
 800913c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009140:	681b      	ldr	r3, [r3, #0]
 8009142:	68ba      	ldr	r2, [r7, #8]
 8009144:	0151      	lsls	r1, r2, #5
 8009146:	68fa      	ldr	r2, [r7, #12]
 8009148:	440a      	add	r2, r1
 800914a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800914e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009152:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8009154:	2300      	movs	r3, #0
}
 8009156:	4618      	mov	r0, r3
 8009158:	3714      	adds	r7, #20
 800915a:	46bd      	mov	sp, r7
 800915c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009160:	4770      	bx	lr

08009162 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8009162:	b480      	push	{r7}
 8009164:	b085      	sub	sp, #20
 8009166:	af00      	add	r7, sp, #0
 8009168:	6078      	str	r0, [r7, #4]
 800916a:	460b      	mov	r3, r1
 800916c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800916e:	687b      	ldr	r3, [r7, #4]
 8009170:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8009172:	68fb      	ldr	r3, [r7, #12]
 8009174:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009178:	681b      	ldr	r3, [r3, #0]
 800917a:	68fa      	ldr	r2, [r7, #12]
 800917c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009180:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8009184:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8009186:	68fb      	ldr	r3, [r7, #12]
 8009188:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800918c:	681a      	ldr	r2, [r3, #0]
 800918e:	78fb      	ldrb	r3, [r7, #3]
 8009190:	011b      	lsls	r3, r3, #4
 8009192:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8009196:	68f9      	ldr	r1, [r7, #12]
 8009198:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800919c:	4313      	orrs	r3, r2
 800919e:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 80091a0:	2300      	movs	r3, #0
}
 80091a2:	4618      	mov	r0, r3
 80091a4:	3714      	adds	r7, #20
 80091a6:	46bd      	mov	sp, r7
 80091a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091ac:	4770      	bx	lr

080091ae <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 80091ae:	b480      	push	{r7}
 80091b0:	b085      	sub	sp, #20
 80091b2:	af00      	add	r7, sp, #0
 80091b4:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80091b6:	687b      	ldr	r3, [r7, #4]
 80091b8:	695b      	ldr	r3, [r3, #20]
 80091ba:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80091bc:	687b      	ldr	r3, [r7, #4]
 80091be:	699b      	ldr	r3, [r3, #24]
 80091c0:	68fa      	ldr	r2, [r7, #12]
 80091c2:	4013      	ands	r3, r2
 80091c4:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80091c6:	68fb      	ldr	r3, [r7, #12]
}
 80091c8:	4618      	mov	r0, r3
 80091ca:	3714      	adds	r7, #20
 80091cc:	46bd      	mov	sp, r7
 80091ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091d2:	4770      	bx	lr

080091d4 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80091d4:	b480      	push	{r7}
 80091d6:	b085      	sub	sp, #20
 80091d8:	af00      	add	r7, sp, #0
 80091da:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80091dc:	687b      	ldr	r3, [r7, #4]
 80091de:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80091e0:	68fb      	ldr	r3, [r7, #12]
 80091e2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80091e6:	699b      	ldr	r3, [r3, #24]
 80091e8:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80091ea:	68fb      	ldr	r3, [r7, #12]
 80091ec:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80091f0:	69db      	ldr	r3, [r3, #28]
 80091f2:	68ba      	ldr	r2, [r7, #8]
 80091f4:	4013      	ands	r3, r2
 80091f6:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 80091f8:	68bb      	ldr	r3, [r7, #8]
 80091fa:	0c1b      	lsrs	r3, r3, #16
}
 80091fc:	4618      	mov	r0, r3
 80091fe:	3714      	adds	r7, #20
 8009200:	46bd      	mov	sp, r7
 8009202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009206:	4770      	bx	lr

08009208 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8009208:	b480      	push	{r7}
 800920a:	b085      	sub	sp, #20
 800920c:	af00      	add	r7, sp, #0
 800920e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009210:	687b      	ldr	r3, [r7, #4]
 8009212:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8009214:	68fb      	ldr	r3, [r7, #12]
 8009216:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800921a:	699b      	ldr	r3, [r3, #24]
 800921c:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800921e:	68fb      	ldr	r3, [r7, #12]
 8009220:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009224:	69db      	ldr	r3, [r3, #28]
 8009226:	68ba      	ldr	r2, [r7, #8]
 8009228:	4013      	ands	r3, r2
 800922a:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800922c:	68bb      	ldr	r3, [r7, #8]
 800922e:	b29b      	uxth	r3, r3
}
 8009230:	4618      	mov	r0, r3
 8009232:	3714      	adds	r7, #20
 8009234:	46bd      	mov	sp, r7
 8009236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800923a:	4770      	bx	lr

0800923c <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800923c:	b480      	push	{r7}
 800923e:	b085      	sub	sp, #20
 8009240:	af00      	add	r7, sp, #0
 8009242:	6078      	str	r0, [r7, #4]
 8009244:	460b      	mov	r3, r1
 8009246:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009248:	687b      	ldr	r3, [r7, #4]
 800924a:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800924c:	78fb      	ldrb	r3, [r7, #3]
 800924e:	015a      	lsls	r2, r3, #5
 8009250:	68fb      	ldr	r3, [r7, #12]
 8009252:	4413      	add	r3, r2
 8009254:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009258:	689b      	ldr	r3, [r3, #8]
 800925a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800925c:	68fb      	ldr	r3, [r7, #12]
 800925e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009262:	695b      	ldr	r3, [r3, #20]
 8009264:	68ba      	ldr	r2, [r7, #8]
 8009266:	4013      	ands	r3, r2
 8009268:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800926a:	68bb      	ldr	r3, [r7, #8]
}
 800926c:	4618      	mov	r0, r3
 800926e:	3714      	adds	r7, #20
 8009270:	46bd      	mov	sp, r7
 8009272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009276:	4770      	bx	lr

08009278 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8009278:	b480      	push	{r7}
 800927a:	b087      	sub	sp, #28
 800927c:	af00      	add	r7, sp, #0
 800927e:	6078      	str	r0, [r7, #4]
 8009280:	460b      	mov	r3, r1
 8009282:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009284:	687b      	ldr	r3, [r7, #4]
 8009286:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8009288:	697b      	ldr	r3, [r7, #20]
 800928a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800928e:	691b      	ldr	r3, [r3, #16]
 8009290:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8009292:	697b      	ldr	r3, [r7, #20]
 8009294:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009298:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800929a:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800929c:	78fb      	ldrb	r3, [r7, #3]
 800929e:	f003 030f 	and.w	r3, r3, #15
 80092a2:	68fa      	ldr	r2, [r7, #12]
 80092a4:	fa22 f303 	lsr.w	r3, r2, r3
 80092a8:	01db      	lsls	r3, r3, #7
 80092aa:	b2db      	uxtb	r3, r3
 80092ac:	693a      	ldr	r2, [r7, #16]
 80092ae:	4313      	orrs	r3, r2
 80092b0:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 80092b2:	78fb      	ldrb	r3, [r7, #3]
 80092b4:	015a      	lsls	r2, r3, #5
 80092b6:	697b      	ldr	r3, [r7, #20]
 80092b8:	4413      	add	r3, r2
 80092ba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80092be:	689b      	ldr	r3, [r3, #8]
 80092c0:	693a      	ldr	r2, [r7, #16]
 80092c2:	4013      	ands	r3, r2
 80092c4:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80092c6:	68bb      	ldr	r3, [r7, #8]
}
 80092c8:	4618      	mov	r0, r3
 80092ca:	371c      	adds	r7, #28
 80092cc:	46bd      	mov	sp, r7
 80092ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092d2:	4770      	bx	lr

080092d4 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80092d4:	b480      	push	{r7}
 80092d6:	b083      	sub	sp, #12
 80092d8:	af00      	add	r7, sp, #0
 80092da:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80092dc:	687b      	ldr	r3, [r7, #4]
 80092de:	695b      	ldr	r3, [r3, #20]
 80092e0:	f003 0301 	and.w	r3, r3, #1
}
 80092e4:	4618      	mov	r0, r3
 80092e6:	370c      	adds	r7, #12
 80092e8:	46bd      	mov	sp, r7
 80092ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092ee:	4770      	bx	lr

080092f0 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 80092f0:	b480      	push	{r7}
 80092f2:	b085      	sub	sp, #20
 80092f4:	af00      	add	r7, sp, #0
 80092f6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80092f8:	687b      	ldr	r3, [r7, #4]
 80092fa:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 80092fc:	68fb      	ldr	r3, [r7, #12]
 80092fe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009302:	681b      	ldr	r3, [r3, #0]
 8009304:	68fa      	ldr	r2, [r7, #12]
 8009306:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800930a:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800930e:	f023 0307 	bic.w	r3, r3, #7
 8009312:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8009314:	68fb      	ldr	r3, [r7, #12]
 8009316:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800931a:	685b      	ldr	r3, [r3, #4]
 800931c:	68fa      	ldr	r2, [r7, #12]
 800931e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009322:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009326:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8009328:	2300      	movs	r3, #0
}
 800932a:	4618      	mov	r0, r3
 800932c:	3714      	adds	r7, #20
 800932e:	46bd      	mov	sp, r7
 8009330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009334:	4770      	bx	lr
	...

08009338 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8009338:	b480      	push	{r7}
 800933a:	b087      	sub	sp, #28
 800933c:	af00      	add	r7, sp, #0
 800933e:	60f8      	str	r0, [r7, #12]
 8009340:	460b      	mov	r3, r1
 8009342:	607a      	str	r2, [r7, #4]
 8009344:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009346:	68fb      	ldr	r3, [r7, #12]
 8009348:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800934a:	68fb      	ldr	r3, [r7, #12]
 800934c:	333c      	adds	r3, #60	; 0x3c
 800934e:	3304      	adds	r3, #4
 8009350:	681b      	ldr	r3, [r3, #0]
 8009352:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8009354:	693b      	ldr	r3, [r7, #16]
 8009356:	4a26      	ldr	r2, [pc, #152]	; (80093f0 <USB_EP0_OutStart+0xb8>)
 8009358:	4293      	cmp	r3, r2
 800935a:	d90a      	bls.n	8009372 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800935c:	697b      	ldr	r3, [r7, #20]
 800935e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009362:	681b      	ldr	r3, [r3, #0]
 8009364:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009368:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800936c:	d101      	bne.n	8009372 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800936e:	2300      	movs	r3, #0
 8009370:	e037      	b.n	80093e2 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8009372:	697b      	ldr	r3, [r7, #20]
 8009374:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009378:	461a      	mov	r2, r3
 800937a:	2300      	movs	r3, #0
 800937c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800937e:	697b      	ldr	r3, [r7, #20]
 8009380:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009384:	691b      	ldr	r3, [r3, #16]
 8009386:	697a      	ldr	r2, [r7, #20]
 8009388:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800938c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8009390:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8009392:	697b      	ldr	r3, [r7, #20]
 8009394:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009398:	691b      	ldr	r3, [r3, #16]
 800939a:	697a      	ldr	r2, [r7, #20]
 800939c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80093a0:	f043 0318 	orr.w	r3, r3, #24
 80093a4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 80093a6:	697b      	ldr	r3, [r7, #20]
 80093a8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80093ac:	691b      	ldr	r3, [r3, #16]
 80093ae:	697a      	ldr	r2, [r7, #20]
 80093b0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80093b4:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 80093b8:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 80093ba:	7afb      	ldrb	r3, [r7, #11]
 80093bc:	2b01      	cmp	r3, #1
 80093be:	d10f      	bne.n	80093e0 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 80093c0:	697b      	ldr	r3, [r7, #20]
 80093c2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80093c6:	461a      	mov	r2, r3
 80093c8:	687b      	ldr	r3, [r7, #4]
 80093ca:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 80093cc:	697b      	ldr	r3, [r7, #20]
 80093ce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80093d2:	681b      	ldr	r3, [r3, #0]
 80093d4:	697a      	ldr	r2, [r7, #20]
 80093d6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80093da:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 80093de:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80093e0:	2300      	movs	r3, #0
}
 80093e2:	4618      	mov	r0, r3
 80093e4:	371c      	adds	r7, #28
 80093e6:	46bd      	mov	sp, r7
 80093e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093ec:	4770      	bx	lr
 80093ee:	bf00      	nop
 80093f0:	4f54300a 	.word	0x4f54300a

080093f4 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 80093f4:	b480      	push	{r7}
 80093f6:	b083      	sub	sp, #12
 80093f8:	af00      	add	r7, sp, #0
 80093fa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80093fc:	2300      	movs	r3, #0
}
 80093fe:	4618      	mov	r0, r3
 8009400:	370c      	adds	r7, #12
 8009402:	46bd      	mov	sp, r7
 8009404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009408:	4770      	bx	lr

0800940a <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800940a:	b580      	push	{r7, lr}
 800940c:	b084      	sub	sp, #16
 800940e:	af00      	add	r7, sp, #0
 8009410:	6078      	str	r0, [r7, #4]
 8009412:	460b      	mov	r3, r1
 8009414:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8009416:	2303      	movs	r3, #3
 8009418:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 800941a:	687b      	ldr	r3, [r7, #4]
 800941c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009420:	2b00      	cmp	r3, #0
 8009422:	d009      	beq.n	8009438 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 8009424:	687b      	ldr	r3, [r7, #4]
 8009426:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800942a:	681b      	ldr	r3, [r3, #0]
 800942c:	78fa      	ldrb	r2, [r7, #3]
 800942e:	4611      	mov	r1, r2
 8009430:	6878      	ldr	r0, [r7, #4]
 8009432:	4798      	blx	r3
 8009434:	4603      	mov	r3, r0
 8009436:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8009438:	7bfb      	ldrb	r3, [r7, #15]
}
 800943a:	4618      	mov	r0, r3
 800943c:	3710      	adds	r7, #16
 800943e:	46bd      	mov	sp, r7
 8009440:	bd80      	pop	{r7, pc}

08009442 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009442:	b580      	push	{r7, lr}
 8009444:	b082      	sub	sp, #8
 8009446:	af00      	add	r7, sp, #0
 8009448:	6078      	str	r0, [r7, #4]
 800944a:	460b      	mov	r3, r1
 800944c:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 800944e:	687b      	ldr	r3, [r7, #4]
 8009450:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009454:	2b00      	cmp	r3, #0
 8009456:	d007      	beq.n	8009468 <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 8009458:	687b      	ldr	r3, [r7, #4]
 800945a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800945e:	685b      	ldr	r3, [r3, #4]
 8009460:	78fa      	ldrb	r2, [r7, #3]
 8009462:	4611      	mov	r1, r2
 8009464:	6878      	ldr	r0, [r7, #4]
 8009466:	4798      	blx	r3
  }

  return USBD_OK;
 8009468:	2300      	movs	r3, #0
}
 800946a:	4618      	mov	r0, r3
 800946c:	3708      	adds	r7, #8
 800946e:	46bd      	mov	sp, r7
 8009470:	bd80      	pop	{r7, pc}

08009472 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8009472:	b580      	push	{r7, lr}
 8009474:	b084      	sub	sp, #16
 8009476:	af00      	add	r7, sp, #0
 8009478:	6078      	str	r0, [r7, #4]
 800947a:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800947c:	687b      	ldr	r3, [r7, #4]
 800947e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8009482:	6839      	ldr	r1, [r7, #0]
 8009484:	4618      	mov	r0, r3
 8009486:	f000 ff8f 	bl	800a3a8 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800948a:	687b      	ldr	r3, [r7, #4]
 800948c:	2201      	movs	r2, #1
 800948e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8009492:	687b      	ldr	r3, [r7, #4]
 8009494:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8009498:	461a      	mov	r2, r3
 800949a:	687b      	ldr	r3, [r7, #4]
 800949c:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 80094a0:	687b      	ldr	r3, [r7, #4]
 80094a2:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80094a6:	f003 031f 	and.w	r3, r3, #31
 80094aa:	2b02      	cmp	r3, #2
 80094ac:	d01a      	beq.n	80094e4 <USBD_LL_SetupStage+0x72>
 80094ae:	2b02      	cmp	r3, #2
 80094b0:	d822      	bhi.n	80094f8 <USBD_LL_SetupStage+0x86>
 80094b2:	2b00      	cmp	r3, #0
 80094b4:	d002      	beq.n	80094bc <USBD_LL_SetupStage+0x4a>
 80094b6:	2b01      	cmp	r3, #1
 80094b8:	d00a      	beq.n	80094d0 <USBD_LL_SetupStage+0x5e>
 80094ba:	e01d      	b.n	80094f8 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 80094bc:	687b      	ldr	r3, [r7, #4]
 80094be:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80094c2:	4619      	mov	r1, r3
 80094c4:	6878      	ldr	r0, [r7, #4]
 80094c6:	f000 fa61 	bl	800998c <USBD_StdDevReq>
 80094ca:	4603      	mov	r3, r0
 80094cc:	73fb      	strb	r3, [r7, #15]
      break;
 80094ce:	e020      	b.n	8009512 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 80094d0:	687b      	ldr	r3, [r7, #4]
 80094d2:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80094d6:	4619      	mov	r1, r3
 80094d8:	6878      	ldr	r0, [r7, #4]
 80094da:	f000 fac5 	bl	8009a68 <USBD_StdItfReq>
 80094de:	4603      	mov	r3, r0
 80094e0:	73fb      	strb	r3, [r7, #15]
      break;
 80094e2:	e016      	b.n	8009512 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 80094e4:	687b      	ldr	r3, [r7, #4]
 80094e6:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80094ea:	4619      	mov	r1, r3
 80094ec:	6878      	ldr	r0, [r7, #4]
 80094ee:	f000 fb04 	bl	8009afa <USBD_StdEPReq>
 80094f2:	4603      	mov	r3, r0
 80094f4:	73fb      	strb	r3, [r7, #15]
      break;
 80094f6:	e00c      	b.n	8009512 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80094f8:	687b      	ldr	r3, [r7, #4]
 80094fa:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80094fe:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8009502:	b2db      	uxtb	r3, r3
 8009504:	4619      	mov	r1, r3
 8009506:	6878      	ldr	r0, [r7, #4]
 8009508:	f003 fee0 	bl	800d2cc <USBD_LL_StallEP>
 800950c:	4603      	mov	r3, r0
 800950e:	73fb      	strb	r3, [r7, #15]
      break;
 8009510:	bf00      	nop
  }

  return ret;
 8009512:	7bfb      	ldrb	r3, [r7, #15]
}
 8009514:	4618      	mov	r0, r3
 8009516:	3710      	adds	r7, #16
 8009518:	46bd      	mov	sp, r7
 800951a:	bd80      	pop	{r7, pc}

0800951c <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800951c:	b580      	push	{r7, lr}
 800951e:	b086      	sub	sp, #24
 8009520:	af00      	add	r7, sp, #0
 8009522:	60f8      	str	r0, [r7, #12]
 8009524:	460b      	mov	r3, r1
 8009526:	607a      	str	r2, [r7, #4]
 8009528:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800952a:	7afb      	ldrb	r3, [r7, #11]
 800952c:	2b00      	cmp	r3, #0
 800952e:	d138      	bne.n	80095a2 <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 8009530:	68fb      	ldr	r3, [r7, #12]
 8009532:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8009536:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8009538:	68fb      	ldr	r3, [r7, #12]
 800953a:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800953e:	2b03      	cmp	r3, #3
 8009540:	d14a      	bne.n	80095d8 <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 8009542:	693b      	ldr	r3, [r7, #16]
 8009544:	689a      	ldr	r2, [r3, #8]
 8009546:	693b      	ldr	r3, [r7, #16]
 8009548:	68db      	ldr	r3, [r3, #12]
 800954a:	429a      	cmp	r2, r3
 800954c:	d913      	bls.n	8009576 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800954e:	693b      	ldr	r3, [r7, #16]
 8009550:	689a      	ldr	r2, [r3, #8]
 8009552:	693b      	ldr	r3, [r7, #16]
 8009554:	68db      	ldr	r3, [r3, #12]
 8009556:	1ad2      	subs	r2, r2, r3
 8009558:	693b      	ldr	r3, [r7, #16]
 800955a:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800955c:	693b      	ldr	r3, [r7, #16]
 800955e:	68da      	ldr	r2, [r3, #12]
 8009560:	693b      	ldr	r3, [r7, #16]
 8009562:	689b      	ldr	r3, [r3, #8]
 8009564:	4293      	cmp	r3, r2
 8009566:	bf28      	it	cs
 8009568:	4613      	movcs	r3, r2
 800956a:	461a      	mov	r2, r3
 800956c:	6879      	ldr	r1, [r7, #4]
 800956e:	68f8      	ldr	r0, [r7, #12]
 8009570:	f000 ff91 	bl	800a496 <USBD_CtlContinueRx>
 8009574:	e030      	b.n	80095d8 <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009576:	68fb      	ldr	r3, [r7, #12]
 8009578:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800957c:	b2db      	uxtb	r3, r3
 800957e:	2b03      	cmp	r3, #3
 8009580:	d10b      	bne.n	800959a <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 8009582:	68fb      	ldr	r3, [r7, #12]
 8009584:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009588:	691b      	ldr	r3, [r3, #16]
 800958a:	2b00      	cmp	r3, #0
 800958c:	d005      	beq.n	800959a <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 800958e:	68fb      	ldr	r3, [r7, #12]
 8009590:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009594:	691b      	ldr	r3, [r3, #16]
 8009596:	68f8      	ldr	r0, [r7, #12]
 8009598:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800959a:	68f8      	ldr	r0, [r7, #12]
 800959c:	f000 ff8c 	bl	800a4b8 <USBD_CtlSendStatus>
 80095a0:	e01a      	b.n	80095d8 <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80095a2:	68fb      	ldr	r3, [r7, #12]
 80095a4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80095a8:	b2db      	uxtb	r3, r3
 80095aa:	2b03      	cmp	r3, #3
 80095ac:	d114      	bne.n	80095d8 <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 80095ae:	68fb      	ldr	r3, [r7, #12]
 80095b0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80095b4:	699b      	ldr	r3, [r3, #24]
 80095b6:	2b00      	cmp	r3, #0
 80095b8:	d00e      	beq.n	80095d8 <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 80095ba:	68fb      	ldr	r3, [r7, #12]
 80095bc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80095c0:	699b      	ldr	r3, [r3, #24]
 80095c2:	7afa      	ldrb	r2, [r7, #11]
 80095c4:	4611      	mov	r1, r2
 80095c6:	68f8      	ldr	r0, [r7, #12]
 80095c8:	4798      	blx	r3
 80095ca:	4603      	mov	r3, r0
 80095cc:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 80095ce:	7dfb      	ldrb	r3, [r7, #23]
 80095d0:	2b00      	cmp	r3, #0
 80095d2:	d001      	beq.n	80095d8 <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 80095d4:	7dfb      	ldrb	r3, [r7, #23]
 80095d6:	e000      	b.n	80095da <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 80095d8:	2300      	movs	r3, #0
}
 80095da:	4618      	mov	r0, r3
 80095dc:	3718      	adds	r7, #24
 80095de:	46bd      	mov	sp, r7
 80095e0:	bd80      	pop	{r7, pc}

080095e2 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80095e2:	b580      	push	{r7, lr}
 80095e4:	b086      	sub	sp, #24
 80095e6:	af00      	add	r7, sp, #0
 80095e8:	60f8      	str	r0, [r7, #12]
 80095ea:	460b      	mov	r3, r1
 80095ec:	607a      	str	r2, [r7, #4]
 80095ee:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 80095f0:	7afb      	ldrb	r3, [r7, #11]
 80095f2:	2b00      	cmp	r3, #0
 80095f4:	d16b      	bne.n	80096ce <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 80095f6:	68fb      	ldr	r3, [r7, #12]
 80095f8:	3314      	adds	r3, #20
 80095fa:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80095fc:	68fb      	ldr	r3, [r7, #12]
 80095fe:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8009602:	2b02      	cmp	r3, #2
 8009604:	d156      	bne.n	80096b4 <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 8009606:	693b      	ldr	r3, [r7, #16]
 8009608:	689a      	ldr	r2, [r3, #8]
 800960a:	693b      	ldr	r3, [r7, #16]
 800960c:	68db      	ldr	r3, [r3, #12]
 800960e:	429a      	cmp	r2, r3
 8009610:	d914      	bls.n	800963c <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8009612:	693b      	ldr	r3, [r7, #16]
 8009614:	689a      	ldr	r2, [r3, #8]
 8009616:	693b      	ldr	r3, [r7, #16]
 8009618:	68db      	ldr	r3, [r3, #12]
 800961a:	1ad2      	subs	r2, r2, r3
 800961c:	693b      	ldr	r3, [r7, #16]
 800961e:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8009620:	693b      	ldr	r3, [r7, #16]
 8009622:	689b      	ldr	r3, [r3, #8]
 8009624:	461a      	mov	r2, r3
 8009626:	6879      	ldr	r1, [r7, #4]
 8009628:	68f8      	ldr	r0, [r7, #12]
 800962a:	f000 ff23 	bl	800a474 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800962e:	2300      	movs	r3, #0
 8009630:	2200      	movs	r2, #0
 8009632:	2100      	movs	r1, #0
 8009634:	68f8      	ldr	r0, [r7, #12]
 8009636:	f003 fef3 	bl	800d420 <USBD_LL_PrepareReceive>
 800963a:	e03b      	b.n	80096b4 <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800963c:	693b      	ldr	r3, [r7, #16]
 800963e:	68da      	ldr	r2, [r3, #12]
 8009640:	693b      	ldr	r3, [r7, #16]
 8009642:	689b      	ldr	r3, [r3, #8]
 8009644:	429a      	cmp	r2, r3
 8009646:	d11c      	bne.n	8009682 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8009648:	693b      	ldr	r3, [r7, #16]
 800964a:	685a      	ldr	r2, [r3, #4]
 800964c:	693b      	ldr	r3, [r7, #16]
 800964e:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8009650:	429a      	cmp	r2, r3
 8009652:	d316      	bcc.n	8009682 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8009654:	693b      	ldr	r3, [r7, #16]
 8009656:	685a      	ldr	r2, [r3, #4]
 8009658:	68fb      	ldr	r3, [r7, #12]
 800965a:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800965e:	429a      	cmp	r2, r3
 8009660:	d20f      	bcs.n	8009682 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8009662:	2200      	movs	r2, #0
 8009664:	2100      	movs	r1, #0
 8009666:	68f8      	ldr	r0, [r7, #12]
 8009668:	f000 ff04 	bl	800a474 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800966c:	68fb      	ldr	r3, [r7, #12]
 800966e:	2200      	movs	r2, #0
 8009670:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009674:	2300      	movs	r3, #0
 8009676:	2200      	movs	r2, #0
 8009678:	2100      	movs	r1, #0
 800967a:	68f8      	ldr	r0, [r7, #12]
 800967c:	f003 fed0 	bl	800d420 <USBD_LL_PrepareReceive>
 8009680:	e018      	b.n	80096b4 <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009682:	68fb      	ldr	r3, [r7, #12]
 8009684:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009688:	b2db      	uxtb	r3, r3
 800968a:	2b03      	cmp	r3, #3
 800968c:	d10b      	bne.n	80096a6 <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 800968e:	68fb      	ldr	r3, [r7, #12]
 8009690:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009694:	68db      	ldr	r3, [r3, #12]
 8009696:	2b00      	cmp	r3, #0
 8009698:	d005      	beq.n	80096a6 <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 800969a:	68fb      	ldr	r3, [r7, #12]
 800969c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80096a0:	68db      	ldr	r3, [r3, #12]
 80096a2:	68f8      	ldr	r0, [r7, #12]
 80096a4:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 80096a6:	2180      	movs	r1, #128	; 0x80
 80096a8:	68f8      	ldr	r0, [r7, #12]
 80096aa:	f003 fe0f 	bl	800d2cc <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 80096ae:	68f8      	ldr	r0, [r7, #12]
 80096b0:	f000 ff15 	bl	800a4de <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 80096b4:	68fb      	ldr	r3, [r7, #12]
 80096b6:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 80096ba:	2b01      	cmp	r3, #1
 80096bc:	d122      	bne.n	8009704 <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 80096be:	68f8      	ldr	r0, [r7, #12]
 80096c0:	f7ff fe98 	bl	80093f4 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80096c4:	68fb      	ldr	r3, [r7, #12]
 80096c6:	2200      	movs	r2, #0
 80096c8:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 80096cc:	e01a      	b.n	8009704 <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80096ce:	68fb      	ldr	r3, [r7, #12]
 80096d0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80096d4:	b2db      	uxtb	r3, r3
 80096d6:	2b03      	cmp	r3, #3
 80096d8:	d114      	bne.n	8009704 <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 80096da:	68fb      	ldr	r3, [r7, #12]
 80096dc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80096e0:	695b      	ldr	r3, [r3, #20]
 80096e2:	2b00      	cmp	r3, #0
 80096e4:	d00e      	beq.n	8009704 <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 80096e6:	68fb      	ldr	r3, [r7, #12]
 80096e8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80096ec:	695b      	ldr	r3, [r3, #20]
 80096ee:	7afa      	ldrb	r2, [r7, #11]
 80096f0:	4611      	mov	r1, r2
 80096f2:	68f8      	ldr	r0, [r7, #12]
 80096f4:	4798      	blx	r3
 80096f6:	4603      	mov	r3, r0
 80096f8:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 80096fa:	7dfb      	ldrb	r3, [r7, #23]
 80096fc:	2b00      	cmp	r3, #0
 80096fe:	d001      	beq.n	8009704 <USBD_LL_DataInStage+0x122>
        {
          return ret;
 8009700:	7dfb      	ldrb	r3, [r7, #23]
 8009702:	e000      	b.n	8009706 <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 8009704:	2300      	movs	r3, #0
}
 8009706:	4618      	mov	r0, r3
 8009708:	3718      	adds	r7, #24
 800970a:	46bd      	mov	sp, r7
 800970c:	bd80      	pop	{r7, pc}

0800970e <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800970e:	b580      	push	{r7, lr}
 8009710:	b082      	sub	sp, #8
 8009712:	af00      	add	r7, sp, #0
 8009714:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8009716:	687b      	ldr	r3, [r7, #4]
 8009718:	2201      	movs	r2, #1
 800971a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800971e:	687b      	ldr	r3, [r7, #4]
 8009720:	2200      	movs	r2, #0
 8009722:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8009726:	687b      	ldr	r3, [r7, #4]
 8009728:	2200      	movs	r2, #0
 800972a:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800972c:	687b      	ldr	r3, [r7, #4]
 800972e:	2200      	movs	r2, #0
 8009730:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 8009734:	687b      	ldr	r3, [r7, #4]
 8009736:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800973a:	2b00      	cmp	r3, #0
 800973c:	d101      	bne.n	8009742 <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 800973e:	2303      	movs	r3, #3
 8009740:	e02f      	b.n	80097a2 <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 8009742:	687b      	ldr	r3, [r7, #4]
 8009744:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009748:	2b00      	cmp	r3, #0
 800974a:	d00f      	beq.n	800976c <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 800974c:	687b      	ldr	r3, [r7, #4]
 800974e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009752:	685b      	ldr	r3, [r3, #4]
 8009754:	2b00      	cmp	r3, #0
 8009756:	d009      	beq.n	800976c <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8009758:	687b      	ldr	r3, [r7, #4]
 800975a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800975e:	685b      	ldr	r3, [r3, #4]
 8009760:	687a      	ldr	r2, [r7, #4]
 8009762:	6852      	ldr	r2, [r2, #4]
 8009764:	b2d2      	uxtb	r2, r2
 8009766:	4611      	mov	r1, r2
 8009768:	6878      	ldr	r0, [r7, #4]
 800976a:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800976c:	2340      	movs	r3, #64	; 0x40
 800976e:	2200      	movs	r2, #0
 8009770:	2100      	movs	r1, #0
 8009772:	6878      	ldr	r0, [r7, #4]
 8009774:	f003 fd84 	bl	800d280 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8009778:	687b      	ldr	r3, [r7, #4]
 800977a:	2201      	movs	r2, #1
 800977c:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8009780:	687b      	ldr	r3, [r7, #4]
 8009782:	2240      	movs	r2, #64	; 0x40
 8009784:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8009788:	2340      	movs	r3, #64	; 0x40
 800978a:	2200      	movs	r2, #0
 800978c:	2180      	movs	r1, #128	; 0x80
 800978e:	6878      	ldr	r0, [r7, #4]
 8009790:	f003 fd76 	bl	800d280 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8009794:	687b      	ldr	r3, [r7, #4]
 8009796:	2201      	movs	r2, #1
 8009798:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800979a:	687b      	ldr	r3, [r7, #4]
 800979c:	2240      	movs	r2, #64	; 0x40
 800979e:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 80097a0:	2300      	movs	r3, #0
}
 80097a2:	4618      	mov	r0, r3
 80097a4:	3708      	adds	r7, #8
 80097a6:	46bd      	mov	sp, r7
 80097a8:	bd80      	pop	{r7, pc}

080097aa <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80097aa:	b480      	push	{r7}
 80097ac:	b083      	sub	sp, #12
 80097ae:	af00      	add	r7, sp, #0
 80097b0:	6078      	str	r0, [r7, #4]
 80097b2:	460b      	mov	r3, r1
 80097b4:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80097b6:	687b      	ldr	r3, [r7, #4]
 80097b8:	78fa      	ldrb	r2, [r7, #3]
 80097ba:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 80097bc:	2300      	movs	r3, #0
}
 80097be:	4618      	mov	r0, r3
 80097c0:	370c      	adds	r7, #12
 80097c2:	46bd      	mov	sp, r7
 80097c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097c8:	4770      	bx	lr

080097ca <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 80097ca:	b480      	push	{r7}
 80097cc:	b083      	sub	sp, #12
 80097ce:	af00      	add	r7, sp, #0
 80097d0:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 80097d2:	687b      	ldr	r3, [r7, #4]
 80097d4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80097d8:	b2da      	uxtb	r2, r3
 80097da:	687b      	ldr	r3, [r7, #4]
 80097dc:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 80097e0:	687b      	ldr	r3, [r7, #4]
 80097e2:	2204      	movs	r2, #4
 80097e4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 80097e8:	2300      	movs	r3, #0
}
 80097ea:	4618      	mov	r0, r3
 80097ec:	370c      	adds	r7, #12
 80097ee:	46bd      	mov	sp, r7
 80097f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097f4:	4770      	bx	lr

080097f6 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 80097f6:	b480      	push	{r7}
 80097f8:	b083      	sub	sp, #12
 80097fa:	af00      	add	r7, sp, #0
 80097fc:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 80097fe:	687b      	ldr	r3, [r7, #4]
 8009800:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009804:	b2db      	uxtb	r3, r3
 8009806:	2b04      	cmp	r3, #4
 8009808:	d106      	bne.n	8009818 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800980a:	687b      	ldr	r3, [r7, #4]
 800980c:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8009810:	b2da      	uxtb	r2, r3
 8009812:	687b      	ldr	r3, [r7, #4]
 8009814:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8009818:	2300      	movs	r3, #0
}
 800981a:	4618      	mov	r0, r3
 800981c:	370c      	adds	r7, #12
 800981e:	46bd      	mov	sp, r7
 8009820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009824:	4770      	bx	lr

08009826 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8009826:	b580      	push	{r7, lr}
 8009828:	b082      	sub	sp, #8
 800982a:	af00      	add	r7, sp, #0
 800982c:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 800982e:	687b      	ldr	r3, [r7, #4]
 8009830:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009834:	2b00      	cmp	r3, #0
 8009836:	d101      	bne.n	800983c <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 8009838:	2303      	movs	r3, #3
 800983a:	e012      	b.n	8009862 <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800983c:	687b      	ldr	r3, [r7, #4]
 800983e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009842:	b2db      	uxtb	r3, r3
 8009844:	2b03      	cmp	r3, #3
 8009846:	d10b      	bne.n	8009860 <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 8009848:	687b      	ldr	r3, [r7, #4]
 800984a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800984e:	69db      	ldr	r3, [r3, #28]
 8009850:	2b00      	cmp	r3, #0
 8009852:	d005      	beq.n	8009860 <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 8009854:	687b      	ldr	r3, [r7, #4]
 8009856:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800985a:	69db      	ldr	r3, [r3, #28]
 800985c:	6878      	ldr	r0, [r7, #4]
 800985e:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8009860:	2300      	movs	r3, #0
}
 8009862:	4618      	mov	r0, r3
 8009864:	3708      	adds	r7, #8
 8009866:	46bd      	mov	sp, r7
 8009868:	bd80      	pop	{r7, pc}

0800986a <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800986a:	b580      	push	{r7, lr}
 800986c:	b082      	sub	sp, #8
 800986e:	af00      	add	r7, sp, #0
 8009870:	6078      	str	r0, [r7, #4]
 8009872:	460b      	mov	r3, r1
 8009874:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 8009876:	687b      	ldr	r3, [r7, #4]
 8009878:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800987c:	2b00      	cmp	r3, #0
 800987e:	d101      	bne.n	8009884 <USBD_LL_IsoINIncomplete+0x1a>
  {
    return USBD_FAIL;
 8009880:	2303      	movs	r3, #3
 8009882:	e014      	b.n	80098ae <USBD_LL_IsoINIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009884:	687b      	ldr	r3, [r7, #4]
 8009886:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800988a:	b2db      	uxtb	r3, r3
 800988c:	2b03      	cmp	r3, #3
 800988e:	d10d      	bne.n	80098ac <USBD_LL_IsoINIncomplete+0x42>
  {
    if (pdev->pClass->IsoINIncomplete != NULL)
 8009890:	687b      	ldr	r3, [r7, #4]
 8009892:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009896:	6a1b      	ldr	r3, [r3, #32]
 8009898:	2b00      	cmp	r3, #0
 800989a:	d007      	beq.n	80098ac <USBD_LL_IsoINIncomplete+0x42>
    {
      (void)pdev->pClass->IsoINIncomplete(pdev, epnum);
 800989c:	687b      	ldr	r3, [r7, #4]
 800989e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80098a2:	6a1b      	ldr	r3, [r3, #32]
 80098a4:	78fa      	ldrb	r2, [r7, #3]
 80098a6:	4611      	mov	r1, r2
 80098a8:	6878      	ldr	r0, [r7, #4]
 80098aa:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80098ac:	2300      	movs	r3, #0
}
 80098ae:	4618      	mov	r0, r3
 80098b0:	3708      	adds	r7, #8
 80098b2:	46bd      	mov	sp, r7
 80098b4:	bd80      	pop	{r7, pc}

080098b6 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 80098b6:	b580      	push	{r7, lr}
 80098b8:	b082      	sub	sp, #8
 80098ba:	af00      	add	r7, sp, #0
 80098bc:	6078      	str	r0, [r7, #4]
 80098be:	460b      	mov	r3, r1
 80098c0:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 80098c2:	687b      	ldr	r3, [r7, #4]
 80098c4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80098c8:	2b00      	cmp	r3, #0
 80098ca:	d101      	bne.n	80098d0 <USBD_LL_IsoOUTIncomplete+0x1a>
  {
    return USBD_FAIL;
 80098cc:	2303      	movs	r3, #3
 80098ce:	e014      	b.n	80098fa <USBD_LL_IsoOUTIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80098d0:	687b      	ldr	r3, [r7, #4]
 80098d2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80098d6:	b2db      	uxtb	r3, r3
 80098d8:	2b03      	cmp	r3, #3
 80098da:	d10d      	bne.n	80098f8 <USBD_LL_IsoOUTIncomplete+0x42>
  {
    if (pdev->pClass->IsoOUTIncomplete != NULL)
 80098dc:	687b      	ldr	r3, [r7, #4]
 80098de:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80098e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80098e4:	2b00      	cmp	r3, #0
 80098e6:	d007      	beq.n	80098f8 <USBD_LL_IsoOUTIncomplete+0x42>
    {
      (void)pdev->pClass->IsoOUTIncomplete(pdev, epnum);
 80098e8:	687b      	ldr	r3, [r7, #4]
 80098ea:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80098ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80098f0:	78fa      	ldrb	r2, [r7, #3]
 80098f2:	4611      	mov	r1, r2
 80098f4:	6878      	ldr	r0, [r7, #4]
 80098f6:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80098f8:	2300      	movs	r3, #0
}
 80098fa:	4618      	mov	r0, r3
 80098fc:	3708      	adds	r7, #8
 80098fe:	46bd      	mov	sp, r7
 8009900:	bd80      	pop	{r7, pc}

08009902 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8009902:	b480      	push	{r7}
 8009904:	b083      	sub	sp, #12
 8009906:	af00      	add	r7, sp, #0
 8009908:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800990a:	2300      	movs	r3, #0
}
 800990c:	4618      	mov	r0, r3
 800990e:	370c      	adds	r7, #12
 8009910:	46bd      	mov	sp, r7
 8009912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009916:	4770      	bx	lr

08009918 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8009918:	b580      	push	{r7, lr}
 800991a:	b082      	sub	sp, #8
 800991c:	af00      	add	r7, sp, #0
 800991e:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8009920:	687b      	ldr	r3, [r7, #4]
 8009922:	2201      	movs	r2, #1
 8009924:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 8009928:	687b      	ldr	r3, [r7, #4]
 800992a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800992e:	2b00      	cmp	r3, #0
 8009930:	d009      	beq.n	8009946 <USBD_LL_DevDisconnected+0x2e>
  {
    (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8009932:	687b      	ldr	r3, [r7, #4]
 8009934:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009938:	685b      	ldr	r3, [r3, #4]
 800993a:	687a      	ldr	r2, [r7, #4]
 800993c:	6852      	ldr	r2, [r2, #4]
 800993e:	b2d2      	uxtb	r2, r2
 8009940:	4611      	mov	r1, r2
 8009942:	6878      	ldr	r0, [r7, #4]
 8009944:	4798      	blx	r3
  }

  return USBD_OK;
 8009946:	2300      	movs	r3, #0
}
 8009948:	4618      	mov	r0, r3
 800994a:	3708      	adds	r7, #8
 800994c:	46bd      	mov	sp, r7
 800994e:	bd80      	pop	{r7, pc}

08009950 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8009950:	b480      	push	{r7}
 8009952:	b087      	sub	sp, #28
 8009954:	af00      	add	r7, sp, #0
 8009956:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8009958:	687b      	ldr	r3, [r7, #4]
 800995a:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800995c:	697b      	ldr	r3, [r7, #20]
 800995e:	781b      	ldrb	r3, [r3, #0]
 8009960:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8009962:	697b      	ldr	r3, [r7, #20]
 8009964:	3301      	adds	r3, #1
 8009966:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8009968:	697b      	ldr	r3, [r7, #20]
 800996a:	781b      	ldrb	r3, [r3, #0]
 800996c:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800996e:	8a3b      	ldrh	r3, [r7, #16]
 8009970:	021b      	lsls	r3, r3, #8
 8009972:	b21a      	sxth	r2, r3
 8009974:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8009978:	4313      	orrs	r3, r2
 800997a:	b21b      	sxth	r3, r3
 800997c:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800997e:	89fb      	ldrh	r3, [r7, #14]
}
 8009980:	4618      	mov	r0, r3
 8009982:	371c      	adds	r7, #28
 8009984:	46bd      	mov	sp, r7
 8009986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800998a:	4770      	bx	lr

0800998c <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800998c:	b580      	push	{r7, lr}
 800998e:	b084      	sub	sp, #16
 8009990:	af00      	add	r7, sp, #0
 8009992:	6078      	str	r0, [r7, #4]
 8009994:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8009996:	2300      	movs	r3, #0
 8009998:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800999a:	683b      	ldr	r3, [r7, #0]
 800999c:	781b      	ldrb	r3, [r3, #0]
 800999e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80099a2:	2b40      	cmp	r3, #64	; 0x40
 80099a4:	d005      	beq.n	80099b2 <USBD_StdDevReq+0x26>
 80099a6:	2b40      	cmp	r3, #64	; 0x40
 80099a8:	d853      	bhi.n	8009a52 <USBD_StdDevReq+0xc6>
 80099aa:	2b00      	cmp	r3, #0
 80099ac:	d00b      	beq.n	80099c6 <USBD_StdDevReq+0x3a>
 80099ae:	2b20      	cmp	r3, #32
 80099b0:	d14f      	bne.n	8009a52 <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80099b2:	687b      	ldr	r3, [r7, #4]
 80099b4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80099b8:	689b      	ldr	r3, [r3, #8]
 80099ba:	6839      	ldr	r1, [r7, #0]
 80099bc:	6878      	ldr	r0, [r7, #4]
 80099be:	4798      	blx	r3
 80099c0:	4603      	mov	r3, r0
 80099c2:	73fb      	strb	r3, [r7, #15]
      break;
 80099c4:	e04a      	b.n	8009a5c <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80099c6:	683b      	ldr	r3, [r7, #0]
 80099c8:	785b      	ldrb	r3, [r3, #1]
 80099ca:	2b09      	cmp	r3, #9
 80099cc:	d83b      	bhi.n	8009a46 <USBD_StdDevReq+0xba>
 80099ce:	a201      	add	r2, pc, #4	; (adr r2, 80099d4 <USBD_StdDevReq+0x48>)
 80099d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80099d4:	08009a29 	.word	0x08009a29
 80099d8:	08009a3d 	.word	0x08009a3d
 80099dc:	08009a47 	.word	0x08009a47
 80099e0:	08009a33 	.word	0x08009a33
 80099e4:	08009a47 	.word	0x08009a47
 80099e8:	08009a07 	.word	0x08009a07
 80099ec:	080099fd 	.word	0x080099fd
 80099f0:	08009a47 	.word	0x08009a47
 80099f4:	08009a1f 	.word	0x08009a1f
 80099f8:	08009a11 	.word	0x08009a11
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 80099fc:	6839      	ldr	r1, [r7, #0]
 80099fe:	6878      	ldr	r0, [r7, #4]
 8009a00:	f000 f9de 	bl	8009dc0 <USBD_GetDescriptor>
          break;
 8009a04:	e024      	b.n	8009a50 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8009a06:	6839      	ldr	r1, [r7, #0]
 8009a08:	6878      	ldr	r0, [r7, #4]
 8009a0a:	f000 fb43 	bl	800a094 <USBD_SetAddress>
          break;
 8009a0e:	e01f      	b.n	8009a50 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8009a10:	6839      	ldr	r1, [r7, #0]
 8009a12:	6878      	ldr	r0, [r7, #4]
 8009a14:	f000 fb82 	bl	800a11c <USBD_SetConfig>
 8009a18:	4603      	mov	r3, r0
 8009a1a:	73fb      	strb	r3, [r7, #15]
          break;
 8009a1c:	e018      	b.n	8009a50 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8009a1e:	6839      	ldr	r1, [r7, #0]
 8009a20:	6878      	ldr	r0, [r7, #4]
 8009a22:	f000 fc21 	bl	800a268 <USBD_GetConfig>
          break;
 8009a26:	e013      	b.n	8009a50 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8009a28:	6839      	ldr	r1, [r7, #0]
 8009a2a:	6878      	ldr	r0, [r7, #4]
 8009a2c:	f000 fc52 	bl	800a2d4 <USBD_GetStatus>
          break;
 8009a30:	e00e      	b.n	8009a50 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8009a32:	6839      	ldr	r1, [r7, #0]
 8009a34:	6878      	ldr	r0, [r7, #4]
 8009a36:	f000 fc81 	bl	800a33c <USBD_SetFeature>
          break;
 8009a3a:	e009      	b.n	8009a50 <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8009a3c:	6839      	ldr	r1, [r7, #0]
 8009a3e:	6878      	ldr	r0, [r7, #4]
 8009a40:	f000 fc90 	bl	800a364 <USBD_ClrFeature>
          break;
 8009a44:	e004      	b.n	8009a50 <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 8009a46:	6839      	ldr	r1, [r7, #0]
 8009a48:	6878      	ldr	r0, [r7, #4]
 8009a4a:	f000 fce7 	bl	800a41c <USBD_CtlError>
          break;
 8009a4e:	bf00      	nop
      }
      break;
 8009a50:	e004      	b.n	8009a5c <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 8009a52:	6839      	ldr	r1, [r7, #0]
 8009a54:	6878      	ldr	r0, [r7, #4]
 8009a56:	f000 fce1 	bl	800a41c <USBD_CtlError>
      break;
 8009a5a:	bf00      	nop
  }

  return ret;
 8009a5c:	7bfb      	ldrb	r3, [r7, #15]
}
 8009a5e:	4618      	mov	r0, r3
 8009a60:	3710      	adds	r7, #16
 8009a62:	46bd      	mov	sp, r7
 8009a64:	bd80      	pop	{r7, pc}
 8009a66:	bf00      	nop

08009a68 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009a68:	b580      	push	{r7, lr}
 8009a6a:	b084      	sub	sp, #16
 8009a6c:	af00      	add	r7, sp, #0
 8009a6e:	6078      	str	r0, [r7, #4]
 8009a70:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8009a72:	2300      	movs	r3, #0
 8009a74:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009a76:	683b      	ldr	r3, [r7, #0]
 8009a78:	781b      	ldrb	r3, [r3, #0]
 8009a7a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8009a7e:	2b40      	cmp	r3, #64	; 0x40
 8009a80:	d005      	beq.n	8009a8e <USBD_StdItfReq+0x26>
 8009a82:	2b40      	cmp	r3, #64	; 0x40
 8009a84:	d82f      	bhi.n	8009ae6 <USBD_StdItfReq+0x7e>
 8009a86:	2b00      	cmp	r3, #0
 8009a88:	d001      	beq.n	8009a8e <USBD_StdItfReq+0x26>
 8009a8a:	2b20      	cmp	r3, #32
 8009a8c:	d12b      	bne.n	8009ae6 <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8009a8e:	687b      	ldr	r3, [r7, #4]
 8009a90:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009a94:	b2db      	uxtb	r3, r3
 8009a96:	3b01      	subs	r3, #1
 8009a98:	2b02      	cmp	r3, #2
 8009a9a:	d81d      	bhi.n	8009ad8 <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8009a9c:	683b      	ldr	r3, [r7, #0]
 8009a9e:	889b      	ldrh	r3, [r3, #4]
 8009aa0:	b2db      	uxtb	r3, r3
 8009aa2:	2b01      	cmp	r3, #1
 8009aa4:	d813      	bhi.n	8009ace <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8009aa6:	687b      	ldr	r3, [r7, #4]
 8009aa8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009aac:	689b      	ldr	r3, [r3, #8]
 8009aae:	6839      	ldr	r1, [r7, #0]
 8009ab0:	6878      	ldr	r0, [r7, #4]
 8009ab2:	4798      	blx	r3
 8009ab4:	4603      	mov	r3, r0
 8009ab6:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8009ab8:	683b      	ldr	r3, [r7, #0]
 8009aba:	88db      	ldrh	r3, [r3, #6]
 8009abc:	2b00      	cmp	r3, #0
 8009abe:	d110      	bne.n	8009ae2 <USBD_StdItfReq+0x7a>
 8009ac0:	7bfb      	ldrb	r3, [r7, #15]
 8009ac2:	2b00      	cmp	r3, #0
 8009ac4:	d10d      	bne.n	8009ae2 <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 8009ac6:	6878      	ldr	r0, [r7, #4]
 8009ac8:	f000 fcf6 	bl	800a4b8 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8009acc:	e009      	b.n	8009ae2 <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 8009ace:	6839      	ldr	r1, [r7, #0]
 8009ad0:	6878      	ldr	r0, [r7, #4]
 8009ad2:	f000 fca3 	bl	800a41c <USBD_CtlError>
          break;
 8009ad6:	e004      	b.n	8009ae2 <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 8009ad8:	6839      	ldr	r1, [r7, #0]
 8009ada:	6878      	ldr	r0, [r7, #4]
 8009adc:	f000 fc9e 	bl	800a41c <USBD_CtlError>
          break;
 8009ae0:	e000      	b.n	8009ae4 <USBD_StdItfReq+0x7c>
          break;
 8009ae2:	bf00      	nop
      }
      break;
 8009ae4:	e004      	b.n	8009af0 <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 8009ae6:	6839      	ldr	r1, [r7, #0]
 8009ae8:	6878      	ldr	r0, [r7, #4]
 8009aea:	f000 fc97 	bl	800a41c <USBD_CtlError>
      break;
 8009aee:	bf00      	nop
  }

  return ret;
 8009af0:	7bfb      	ldrb	r3, [r7, #15]
}
 8009af2:	4618      	mov	r0, r3
 8009af4:	3710      	adds	r7, #16
 8009af6:	46bd      	mov	sp, r7
 8009af8:	bd80      	pop	{r7, pc}

08009afa <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009afa:	b580      	push	{r7, lr}
 8009afc:	b084      	sub	sp, #16
 8009afe:	af00      	add	r7, sp, #0
 8009b00:	6078      	str	r0, [r7, #4]
 8009b02:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8009b04:	2300      	movs	r3, #0
 8009b06:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 8009b08:	683b      	ldr	r3, [r7, #0]
 8009b0a:	889b      	ldrh	r3, [r3, #4]
 8009b0c:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009b0e:	683b      	ldr	r3, [r7, #0]
 8009b10:	781b      	ldrb	r3, [r3, #0]
 8009b12:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8009b16:	2b40      	cmp	r3, #64	; 0x40
 8009b18:	d007      	beq.n	8009b2a <USBD_StdEPReq+0x30>
 8009b1a:	2b40      	cmp	r3, #64	; 0x40
 8009b1c:	f200 8145 	bhi.w	8009daa <USBD_StdEPReq+0x2b0>
 8009b20:	2b00      	cmp	r3, #0
 8009b22:	d00c      	beq.n	8009b3e <USBD_StdEPReq+0x44>
 8009b24:	2b20      	cmp	r3, #32
 8009b26:	f040 8140 	bne.w	8009daa <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8009b2a:	687b      	ldr	r3, [r7, #4]
 8009b2c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009b30:	689b      	ldr	r3, [r3, #8]
 8009b32:	6839      	ldr	r1, [r7, #0]
 8009b34:	6878      	ldr	r0, [r7, #4]
 8009b36:	4798      	blx	r3
 8009b38:	4603      	mov	r3, r0
 8009b3a:	73fb      	strb	r3, [r7, #15]
      break;
 8009b3c:	e13a      	b.n	8009db4 <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8009b3e:	683b      	ldr	r3, [r7, #0]
 8009b40:	785b      	ldrb	r3, [r3, #1]
 8009b42:	2b03      	cmp	r3, #3
 8009b44:	d007      	beq.n	8009b56 <USBD_StdEPReq+0x5c>
 8009b46:	2b03      	cmp	r3, #3
 8009b48:	f300 8129 	bgt.w	8009d9e <USBD_StdEPReq+0x2a4>
 8009b4c:	2b00      	cmp	r3, #0
 8009b4e:	d07f      	beq.n	8009c50 <USBD_StdEPReq+0x156>
 8009b50:	2b01      	cmp	r3, #1
 8009b52:	d03c      	beq.n	8009bce <USBD_StdEPReq+0xd4>
 8009b54:	e123      	b.n	8009d9e <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8009b56:	687b      	ldr	r3, [r7, #4]
 8009b58:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009b5c:	b2db      	uxtb	r3, r3
 8009b5e:	2b02      	cmp	r3, #2
 8009b60:	d002      	beq.n	8009b68 <USBD_StdEPReq+0x6e>
 8009b62:	2b03      	cmp	r3, #3
 8009b64:	d016      	beq.n	8009b94 <USBD_StdEPReq+0x9a>
 8009b66:	e02c      	b.n	8009bc2 <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009b68:	7bbb      	ldrb	r3, [r7, #14]
 8009b6a:	2b00      	cmp	r3, #0
 8009b6c:	d00d      	beq.n	8009b8a <USBD_StdEPReq+0x90>
 8009b6e:	7bbb      	ldrb	r3, [r7, #14]
 8009b70:	2b80      	cmp	r3, #128	; 0x80
 8009b72:	d00a      	beq.n	8009b8a <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8009b74:	7bbb      	ldrb	r3, [r7, #14]
 8009b76:	4619      	mov	r1, r3
 8009b78:	6878      	ldr	r0, [r7, #4]
 8009b7a:	f003 fba7 	bl	800d2cc <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8009b7e:	2180      	movs	r1, #128	; 0x80
 8009b80:	6878      	ldr	r0, [r7, #4]
 8009b82:	f003 fba3 	bl	800d2cc <USBD_LL_StallEP>
 8009b86:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8009b88:	e020      	b.n	8009bcc <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 8009b8a:	6839      	ldr	r1, [r7, #0]
 8009b8c:	6878      	ldr	r0, [r7, #4]
 8009b8e:	f000 fc45 	bl	800a41c <USBD_CtlError>
              break;
 8009b92:	e01b      	b.n	8009bcc <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8009b94:	683b      	ldr	r3, [r7, #0]
 8009b96:	885b      	ldrh	r3, [r3, #2]
 8009b98:	2b00      	cmp	r3, #0
 8009b9a:	d10e      	bne.n	8009bba <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8009b9c:	7bbb      	ldrb	r3, [r7, #14]
 8009b9e:	2b00      	cmp	r3, #0
 8009ba0:	d00b      	beq.n	8009bba <USBD_StdEPReq+0xc0>
 8009ba2:	7bbb      	ldrb	r3, [r7, #14]
 8009ba4:	2b80      	cmp	r3, #128	; 0x80
 8009ba6:	d008      	beq.n	8009bba <USBD_StdEPReq+0xc0>
 8009ba8:	683b      	ldr	r3, [r7, #0]
 8009baa:	88db      	ldrh	r3, [r3, #6]
 8009bac:	2b00      	cmp	r3, #0
 8009bae:	d104      	bne.n	8009bba <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8009bb0:	7bbb      	ldrb	r3, [r7, #14]
 8009bb2:	4619      	mov	r1, r3
 8009bb4:	6878      	ldr	r0, [r7, #4]
 8009bb6:	f003 fb89 	bl	800d2cc <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8009bba:	6878      	ldr	r0, [r7, #4]
 8009bbc:	f000 fc7c 	bl	800a4b8 <USBD_CtlSendStatus>

              break;
 8009bc0:	e004      	b.n	8009bcc <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 8009bc2:	6839      	ldr	r1, [r7, #0]
 8009bc4:	6878      	ldr	r0, [r7, #4]
 8009bc6:	f000 fc29 	bl	800a41c <USBD_CtlError>
              break;
 8009bca:	bf00      	nop
          }
          break;
 8009bcc:	e0ec      	b.n	8009da8 <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8009bce:	687b      	ldr	r3, [r7, #4]
 8009bd0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009bd4:	b2db      	uxtb	r3, r3
 8009bd6:	2b02      	cmp	r3, #2
 8009bd8:	d002      	beq.n	8009be0 <USBD_StdEPReq+0xe6>
 8009bda:	2b03      	cmp	r3, #3
 8009bdc:	d016      	beq.n	8009c0c <USBD_StdEPReq+0x112>
 8009bde:	e030      	b.n	8009c42 <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009be0:	7bbb      	ldrb	r3, [r7, #14]
 8009be2:	2b00      	cmp	r3, #0
 8009be4:	d00d      	beq.n	8009c02 <USBD_StdEPReq+0x108>
 8009be6:	7bbb      	ldrb	r3, [r7, #14]
 8009be8:	2b80      	cmp	r3, #128	; 0x80
 8009bea:	d00a      	beq.n	8009c02 <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8009bec:	7bbb      	ldrb	r3, [r7, #14]
 8009bee:	4619      	mov	r1, r3
 8009bf0:	6878      	ldr	r0, [r7, #4]
 8009bf2:	f003 fb6b 	bl	800d2cc <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8009bf6:	2180      	movs	r1, #128	; 0x80
 8009bf8:	6878      	ldr	r0, [r7, #4]
 8009bfa:	f003 fb67 	bl	800d2cc <USBD_LL_StallEP>
 8009bfe:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8009c00:	e025      	b.n	8009c4e <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 8009c02:	6839      	ldr	r1, [r7, #0]
 8009c04:	6878      	ldr	r0, [r7, #4]
 8009c06:	f000 fc09 	bl	800a41c <USBD_CtlError>
              break;
 8009c0a:	e020      	b.n	8009c4e <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8009c0c:	683b      	ldr	r3, [r7, #0]
 8009c0e:	885b      	ldrh	r3, [r3, #2]
 8009c10:	2b00      	cmp	r3, #0
 8009c12:	d11b      	bne.n	8009c4c <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8009c14:	7bbb      	ldrb	r3, [r7, #14]
 8009c16:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009c1a:	2b00      	cmp	r3, #0
 8009c1c:	d004      	beq.n	8009c28 <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8009c1e:	7bbb      	ldrb	r3, [r7, #14]
 8009c20:	4619      	mov	r1, r3
 8009c22:	6878      	ldr	r0, [r7, #4]
 8009c24:	f003 fb71 	bl	800d30a <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8009c28:	6878      	ldr	r0, [r7, #4]
 8009c2a:	f000 fc45 	bl	800a4b8 <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8009c2e:	687b      	ldr	r3, [r7, #4]
 8009c30:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009c34:	689b      	ldr	r3, [r3, #8]
 8009c36:	6839      	ldr	r1, [r7, #0]
 8009c38:	6878      	ldr	r0, [r7, #4]
 8009c3a:	4798      	blx	r3
 8009c3c:	4603      	mov	r3, r0
 8009c3e:	73fb      	strb	r3, [r7, #15]
              }
              break;
 8009c40:	e004      	b.n	8009c4c <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 8009c42:	6839      	ldr	r1, [r7, #0]
 8009c44:	6878      	ldr	r0, [r7, #4]
 8009c46:	f000 fbe9 	bl	800a41c <USBD_CtlError>
              break;
 8009c4a:	e000      	b.n	8009c4e <USBD_StdEPReq+0x154>
              break;
 8009c4c:	bf00      	nop
          }
          break;
 8009c4e:	e0ab      	b.n	8009da8 <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8009c50:	687b      	ldr	r3, [r7, #4]
 8009c52:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009c56:	b2db      	uxtb	r3, r3
 8009c58:	2b02      	cmp	r3, #2
 8009c5a:	d002      	beq.n	8009c62 <USBD_StdEPReq+0x168>
 8009c5c:	2b03      	cmp	r3, #3
 8009c5e:	d032      	beq.n	8009cc6 <USBD_StdEPReq+0x1cc>
 8009c60:	e097      	b.n	8009d92 <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009c62:	7bbb      	ldrb	r3, [r7, #14]
 8009c64:	2b00      	cmp	r3, #0
 8009c66:	d007      	beq.n	8009c78 <USBD_StdEPReq+0x17e>
 8009c68:	7bbb      	ldrb	r3, [r7, #14]
 8009c6a:	2b80      	cmp	r3, #128	; 0x80
 8009c6c:	d004      	beq.n	8009c78 <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 8009c6e:	6839      	ldr	r1, [r7, #0]
 8009c70:	6878      	ldr	r0, [r7, #4]
 8009c72:	f000 fbd3 	bl	800a41c <USBD_CtlError>
                break;
 8009c76:	e091      	b.n	8009d9c <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009c78:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009c7c:	2b00      	cmp	r3, #0
 8009c7e:	da0b      	bge.n	8009c98 <USBD_StdEPReq+0x19e>
 8009c80:	7bbb      	ldrb	r3, [r7, #14]
 8009c82:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009c86:	4613      	mov	r3, r2
 8009c88:	009b      	lsls	r3, r3, #2
 8009c8a:	4413      	add	r3, r2
 8009c8c:	009b      	lsls	r3, r3, #2
 8009c8e:	3310      	adds	r3, #16
 8009c90:	687a      	ldr	r2, [r7, #4]
 8009c92:	4413      	add	r3, r2
 8009c94:	3304      	adds	r3, #4
 8009c96:	e00b      	b.n	8009cb0 <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8009c98:	7bbb      	ldrb	r3, [r7, #14]
 8009c9a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009c9e:	4613      	mov	r3, r2
 8009ca0:	009b      	lsls	r3, r3, #2
 8009ca2:	4413      	add	r3, r2
 8009ca4:	009b      	lsls	r3, r3, #2
 8009ca6:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8009caa:	687a      	ldr	r2, [r7, #4]
 8009cac:	4413      	add	r3, r2
 8009cae:	3304      	adds	r3, #4
 8009cb0:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8009cb2:	68bb      	ldr	r3, [r7, #8]
 8009cb4:	2200      	movs	r2, #0
 8009cb6:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8009cb8:	68bb      	ldr	r3, [r7, #8]
 8009cba:	2202      	movs	r2, #2
 8009cbc:	4619      	mov	r1, r3
 8009cbe:	6878      	ldr	r0, [r7, #4]
 8009cc0:	f000 fbbd 	bl	800a43e <USBD_CtlSendData>
              break;
 8009cc4:	e06a      	b.n	8009d9c <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8009cc6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009cca:	2b00      	cmp	r3, #0
 8009ccc:	da11      	bge.n	8009cf2 <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8009cce:	7bbb      	ldrb	r3, [r7, #14]
 8009cd0:	f003 020f 	and.w	r2, r3, #15
 8009cd4:	6879      	ldr	r1, [r7, #4]
 8009cd6:	4613      	mov	r3, r2
 8009cd8:	009b      	lsls	r3, r3, #2
 8009cda:	4413      	add	r3, r2
 8009cdc:	009b      	lsls	r3, r3, #2
 8009cde:	440b      	add	r3, r1
 8009ce0:	3324      	adds	r3, #36	; 0x24
 8009ce2:	881b      	ldrh	r3, [r3, #0]
 8009ce4:	2b00      	cmp	r3, #0
 8009ce6:	d117      	bne.n	8009d18 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 8009ce8:	6839      	ldr	r1, [r7, #0]
 8009cea:	6878      	ldr	r0, [r7, #4]
 8009cec:	f000 fb96 	bl	800a41c <USBD_CtlError>
                  break;
 8009cf0:	e054      	b.n	8009d9c <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8009cf2:	7bbb      	ldrb	r3, [r7, #14]
 8009cf4:	f003 020f 	and.w	r2, r3, #15
 8009cf8:	6879      	ldr	r1, [r7, #4]
 8009cfa:	4613      	mov	r3, r2
 8009cfc:	009b      	lsls	r3, r3, #2
 8009cfe:	4413      	add	r3, r2
 8009d00:	009b      	lsls	r3, r3, #2
 8009d02:	440b      	add	r3, r1
 8009d04:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8009d08:	881b      	ldrh	r3, [r3, #0]
 8009d0a:	2b00      	cmp	r3, #0
 8009d0c:	d104      	bne.n	8009d18 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 8009d0e:	6839      	ldr	r1, [r7, #0]
 8009d10:	6878      	ldr	r0, [r7, #4]
 8009d12:	f000 fb83 	bl	800a41c <USBD_CtlError>
                  break;
 8009d16:	e041      	b.n	8009d9c <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009d18:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009d1c:	2b00      	cmp	r3, #0
 8009d1e:	da0b      	bge.n	8009d38 <USBD_StdEPReq+0x23e>
 8009d20:	7bbb      	ldrb	r3, [r7, #14]
 8009d22:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009d26:	4613      	mov	r3, r2
 8009d28:	009b      	lsls	r3, r3, #2
 8009d2a:	4413      	add	r3, r2
 8009d2c:	009b      	lsls	r3, r3, #2
 8009d2e:	3310      	adds	r3, #16
 8009d30:	687a      	ldr	r2, [r7, #4]
 8009d32:	4413      	add	r3, r2
 8009d34:	3304      	adds	r3, #4
 8009d36:	e00b      	b.n	8009d50 <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8009d38:	7bbb      	ldrb	r3, [r7, #14]
 8009d3a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009d3e:	4613      	mov	r3, r2
 8009d40:	009b      	lsls	r3, r3, #2
 8009d42:	4413      	add	r3, r2
 8009d44:	009b      	lsls	r3, r3, #2
 8009d46:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8009d4a:	687a      	ldr	r2, [r7, #4]
 8009d4c:	4413      	add	r3, r2
 8009d4e:	3304      	adds	r3, #4
 8009d50:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8009d52:	7bbb      	ldrb	r3, [r7, #14]
 8009d54:	2b00      	cmp	r3, #0
 8009d56:	d002      	beq.n	8009d5e <USBD_StdEPReq+0x264>
 8009d58:	7bbb      	ldrb	r3, [r7, #14]
 8009d5a:	2b80      	cmp	r3, #128	; 0x80
 8009d5c:	d103      	bne.n	8009d66 <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 8009d5e:	68bb      	ldr	r3, [r7, #8]
 8009d60:	2200      	movs	r2, #0
 8009d62:	601a      	str	r2, [r3, #0]
 8009d64:	e00e      	b.n	8009d84 <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8009d66:	7bbb      	ldrb	r3, [r7, #14]
 8009d68:	4619      	mov	r1, r3
 8009d6a:	6878      	ldr	r0, [r7, #4]
 8009d6c:	f003 faec 	bl	800d348 <USBD_LL_IsStallEP>
 8009d70:	4603      	mov	r3, r0
 8009d72:	2b00      	cmp	r3, #0
 8009d74:	d003      	beq.n	8009d7e <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 8009d76:	68bb      	ldr	r3, [r7, #8]
 8009d78:	2201      	movs	r2, #1
 8009d7a:	601a      	str	r2, [r3, #0]
 8009d7c:	e002      	b.n	8009d84 <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 8009d7e:	68bb      	ldr	r3, [r7, #8]
 8009d80:	2200      	movs	r2, #0
 8009d82:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8009d84:	68bb      	ldr	r3, [r7, #8]
 8009d86:	2202      	movs	r2, #2
 8009d88:	4619      	mov	r1, r3
 8009d8a:	6878      	ldr	r0, [r7, #4]
 8009d8c:	f000 fb57 	bl	800a43e <USBD_CtlSendData>
              break;
 8009d90:	e004      	b.n	8009d9c <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 8009d92:	6839      	ldr	r1, [r7, #0]
 8009d94:	6878      	ldr	r0, [r7, #4]
 8009d96:	f000 fb41 	bl	800a41c <USBD_CtlError>
              break;
 8009d9a:	bf00      	nop
          }
          break;
 8009d9c:	e004      	b.n	8009da8 <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 8009d9e:	6839      	ldr	r1, [r7, #0]
 8009da0:	6878      	ldr	r0, [r7, #4]
 8009da2:	f000 fb3b 	bl	800a41c <USBD_CtlError>
          break;
 8009da6:	bf00      	nop
      }
      break;
 8009da8:	e004      	b.n	8009db4 <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 8009daa:	6839      	ldr	r1, [r7, #0]
 8009dac:	6878      	ldr	r0, [r7, #4]
 8009dae:	f000 fb35 	bl	800a41c <USBD_CtlError>
      break;
 8009db2:	bf00      	nop
  }

  return ret;
 8009db4:	7bfb      	ldrb	r3, [r7, #15]
}
 8009db6:	4618      	mov	r0, r3
 8009db8:	3710      	adds	r7, #16
 8009dba:	46bd      	mov	sp, r7
 8009dbc:	bd80      	pop	{r7, pc}
	...

08009dc0 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009dc0:	b580      	push	{r7, lr}
 8009dc2:	b084      	sub	sp, #16
 8009dc4:	af00      	add	r7, sp, #0
 8009dc6:	6078      	str	r0, [r7, #4]
 8009dc8:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8009dca:	2300      	movs	r3, #0
 8009dcc:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8009dce:	2300      	movs	r3, #0
 8009dd0:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8009dd2:	2300      	movs	r3, #0
 8009dd4:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8009dd6:	683b      	ldr	r3, [r7, #0]
 8009dd8:	885b      	ldrh	r3, [r3, #2]
 8009dda:	0a1b      	lsrs	r3, r3, #8
 8009ddc:	b29b      	uxth	r3, r3
 8009dde:	3b01      	subs	r3, #1
 8009de0:	2b06      	cmp	r3, #6
 8009de2:	f200 8128 	bhi.w	800a036 <USBD_GetDescriptor+0x276>
 8009de6:	a201      	add	r2, pc, #4	; (adr r2, 8009dec <USBD_GetDescriptor+0x2c>)
 8009de8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009dec:	08009e09 	.word	0x08009e09
 8009df0:	08009e21 	.word	0x08009e21
 8009df4:	08009e61 	.word	0x08009e61
 8009df8:	0800a037 	.word	0x0800a037
 8009dfc:	0800a037 	.word	0x0800a037
 8009e00:	08009fd7 	.word	0x08009fd7
 8009e04:	0800a003 	.word	0x0800a003
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8009e08:	687b      	ldr	r3, [r7, #4]
 8009e0a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009e0e:	681b      	ldr	r3, [r3, #0]
 8009e10:	687a      	ldr	r2, [r7, #4]
 8009e12:	7c12      	ldrb	r2, [r2, #16]
 8009e14:	f107 0108 	add.w	r1, r7, #8
 8009e18:	4610      	mov	r0, r2
 8009e1a:	4798      	blx	r3
 8009e1c:	60f8      	str	r0, [r7, #12]
      break;
 8009e1e:	e112      	b.n	800a046 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009e20:	687b      	ldr	r3, [r7, #4]
 8009e22:	7c1b      	ldrb	r3, [r3, #16]
 8009e24:	2b00      	cmp	r3, #0
 8009e26:	d10d      	bne.n	8009e44 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8009e28:	687b      	ldr	r3, [r7, #4]
 8009e2a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009e2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009e30:	f107 0208 	add.w	r2, r7, #8
 8009e34:	4610      	mov	r0, r2
 8009e36:	4798      	blx	r3
 8009e38:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8009e3a:	68fb      	ldr	r3, [r7, #12]
 8009e3c:	3301      	adds	r3, #1
 8009e3e:	2202      	movs	r2, #2
 8009e40:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8009e42:	e100      	b.n	800a046 <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8009e44:	687b      	ldr	r3, [r7, #4]
 8009e46:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009e4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009e4c:	f107 0208 	add.w	r2, r7, #8
 8009e50:	4610      	mov	r0, r2
 8009e52:	4798      	blx	r3
 8009e54:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8009e56:	68fb      	ldr	r3, [r7, #12]
 8009e58:	3301      	adds	r3, #1
 8009e5a:	2202      	movs	r2, #2
 8009e5c:	701a      	strb	r2, [r3, #0]
      break;
 8009e5e:	e0f2      	b.n	800a046 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8009e60:	683b      	ldr	r3, [r7, #0]
 8009e62:	885b      	ldrh	r3, [r3, #2]
 8009e64:	b2db      	uxtb	r3, r3
 8009e66:	2b05      	cmp	r3, #5
 8009e68:	f200 80ac 	bhi.w	8009fc4 <USBD_GetDescriptor+0x204>
 8009e6c:	a201      	add	r2, pc, #4	; (adr r2, 8009e74 <USBD_GetDescriptor+0xb4>)
 8009e6e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009e72:	bf00      	nop
 8009e74:	08009e8d 	.word	0x08009e8d
 8009e78:	08009ec1 	.word	0x08009ec1
 8009e7c:	08009ef5 	.word	0x08009ef5
 8009e80:	08009f29 	.word	0x08009f29
 8009e84:	08009f5d 	.word	0x08009f5d
 8009e88:	08009f91 	.word	0x08009f91
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8009e8c:	687b      	ldr	r3, [r7, #4]
 8009e8e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009e92:	685b      	ldr	r3, [r3, #4]
 8009e94:	2b00      	cmp	r3, #0
 8009e96:	d00b      	beq.n	8009eb0 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8009e98:	687b      	ldr	r3, [r7, #4]
 8009e9a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009e9e:	685b      	ldr	r3, [r3, #4]
 8009ea0:	687a      	ldr	r2, [r7, #4]
 8009ea2:	7c12      	ldrb	r2, [r2, #16]
 8009ea4:	f107 0108 	add.w	r1, r7, #8
 8009ea8:	4610      	mov	r0, r2
 8009eaa:	4798      	blx	r3
 8009eac:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009eae:	e091      	b.n	8009fd4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009eb0:	6839      	ldr	r1, [r7, #0]
 8009eb2:	6878      	ldr	r0, [r7, #4]
 8009eb4:	f000 fab2 	bl	800a41c <USBD_CtlError>
            err++;
 8009eb8:	7afb      	ldrb	r3, [r7, #11]
 8009eba:	3301      	adds	r3, #1
 8009ebc:	72fb      	strb	r3, [r7, #11]
          break;
 8009ebe:	e089      	b.n	8009fd4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8009ec0:	687b      	ldr	r3, [r7, #4]
 8009ec2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009ec6:	689b      	ldr	r3, [r3, #8]
 8009ec8:	2b00      	cmp	r3, #0
 8009eca:	d00b      	beq.n	8009ee4 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8009ecc:	687b      	ldr	r3, [r7, #4]
 8009ece:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009ed2:	689b      	ldr	r3, [r3, #8]
 8009ed4:	687a      	ldr	r2, [r7, #4]
 8009ed6:	7c12      	ldrb	r2, [r2, #16]
 8009ed8:	f107 0108 	add.w	r1, r7, #8
 8009edc:	4610      	mov	r0, r2
 8009ede:	4798      	blx	r3
 8009ee0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009ee2:	e077      	b.n	8009fd4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009ee4:	6839      	ldr	r1, [r7, #0]
 8009ee6:	6878      	ldr	r0, [r7, #4]
 8009ee8:	f000 fa98 	bl	800a41c <USBD_CtlError>
            err++;
 8009eec:	7afb      	ldrb	r3, [r7, #11]
 8009eee:	3301      	adds	r3, #1
 8009ef0:	72fb      	strb	r3, [r7, #11]
          break;
 8009ef2:	e06f      	b.n	8009fd4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8009ef4:	687b      	ldr	r3, [r7, #4]
 8009ef6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009efa:	68db      	ldr	r3, [r3, #12]
 8009efc:	2b00      	cmp	r3, #0
 8009efe:	d00b      	beq.n	8009f18 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8009f00:	687b      	ldr	r3, [r7, #4]
 8009f02:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009f06:	68db      	ldr	r3, [r3, #12]
 8009f08:	687a      	ldr	r2, [r7, #4]
 8009f0a:	7c12      	ldrb	r2, [r2, #16]
 8009f0c:	f107 0108 	add.w	r1, r7, #8
 8009f10:	4610      	mov	r0, r2
 8009f12:	4798      	blx	r3
 8009f14:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009f16:	e05d      	b.n	8009fd4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009f18:	6839      	ldr	r1, [r7, #0]
 8009f1a:	6878      	ldr	r0, [r7, #4]
 8009f1c:	f000 fa7e 	bl	800a41c <USBD_CtlError>
            err++;
 8009f20:	7afb      	ldrb	r3, [r7, #11]
 8009f22:	3301      	adds	r3, #1
 8009f24:	72fb      	strb	r3, [r7, #11]
          break;
 8009f26:	e055      	b.n	8009fd4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8009f28:	687b      	ldr	r3, [r7, #4]
 8009f2a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009f2e:	691b      	ldr	r3, [r3, #16]
 8009f30:	2b00      	cmp	r3, #0
 8009f32:	d00b      	beq.n	8009f4c <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8009f34:	687b      	ldr	r3, [r7, #4]
 8009f36:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009f3a:	691b      	ldr	r3, [r3, #16]
 8009f3c:	687a      	ldr	r2, [r7, #4]
 8009f3e:	7c12      	ldrb	r2, [r2, #16]
 8009f40:	f107 0108 	add.w	r1, r7, #8
 8009f44:	4610      	mov	r0, r2
 8009f46:	4798      	blx	r3
 8009f48:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009f4a:	e043      	b.n	8009fd4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009f4c:	6839      	ldr	r1, [r7, #0]
 8009f4e:	6878      	ldr	r0, [r7, #4]
 8009f50:	f000 fa64 	bl	800a41c <USBD_CtlError>
            err++;
 8009f54:	7afb      	ldrb	r3, [r7, #11]
 8009f56:	3301      	adds	r3, #1
 8009f58:	72fb      	strb	r3, [r7, #11]
          break;
 8009f5a:	e03b      	b.n	8009fd4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8009f5c:	687b      	ldr	r3, [r7, #4]
 8009f5e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009f62:	695b      	ldr	r3, [r3, #20]
 8009f64:	2b00      	cmp	r3, #0
 8009f66:	d00b      	beq.n	8009f80 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8009f68:	687b      	ldr	r3, [r7, #4]
 8009f6a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009f6e:	695b      	ldr	r3, [r3, #20]
 8009f70:	687a      	ldr	r2, [r7, #4]
 8009f72:	7c12      	ldrb	r2, [r2, #16]
 8009f74:	f107 0108 	add.w	r1, r7, #8
 8009f78:	4610      	mov	r0, r2
 8009f7a:	4798      	blx	r3
 8009f7c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009f7e:	e029      	b.n	8009fd4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009f80:	6839      	ldr	r1, [r7, #0]
 8009f82:	6878      	ldr	r0, [r7, #4]
 8009f84:	f000 fa4a 	bl	800a41c <USBD_CtlError>
            err++;
 8009f88:	7afb      	ldrb	r3, [r7, #11]
 8009f8a:	3301      	adds	r3, #1
 8009f8c:	72fb      	strb	r3, [r7, #11]
          break;
 8009f8e:	e021      	b.n	8009fd4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8009f90:	687b      	ldr	r3, [r7, #4]
 8009f92:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009f96:	699b      	ldr	r3, [r3, #24]
 8009f98:	2b00      	cmp	r3, #0
 8009f9a:	d00b      	beq.n	8009fb4 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8009f9c:	687b      	ldr	r3, [r7, #4]
 8009f9e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009fa2:	699b      	ldr	r3, [r3, #24]
 8009fa4:	687a      	ldr	r2, [r7, #4]
 8009fa6:	7c12      	ldrb	r2, [r2, #16]
 8009fa8:	f107 0108 	add.w	r1, r7, #8
 8009fac:	4610      	mov	r0, r2
 8009fae:	4798      	blx	r3
 8009fb0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009fb2:	e00f      	b.n	8009fd4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009fb4:	6839      	ldr	r1, [r7, #0]
 8009fb6:	6878      	ldr	r0, [r7, #4]
 8009fb8:	f000 fa30 	bl	800a41c <USBD_CtlError>
            err++;
 8009fbc:	7afb      	ldrb	r3, [r7, #11]
 8009fbe:	3301      	adds	r3, #1
 8009fc0:	72fb      	strb	r3, [r7, #11]
          break;
 8009fc2:	e007      	b.n	8009fd4 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8009fc4:	6839      	ldr	r1, [r7, #0]
 8009fc6:	6878      	ldr	r0, [r7, #4]
 8009fc8:	f000 fa28 	bl	800a41c <USBD_CtlError>
          err++;
 8009fcc:	7afb      	ldrb	r3, [r7, #11]
 8009fce:	3301      	adds	r3, #1
 8009fd0:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 8009fd2:	bf00      	nop
      }
      break;
 8009fd4:	e037      	b.n	800a046 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009fd6:	687b      	ldr	r3, [r7, #4]
 8009fd8:	7c1b      	ldrb	r3, [r3, #16]
 8009fda:	2b00      	cmp	r3, #0
 8009fdc:	d109      	bne.n	8009ff2 <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8009fde:	687b      	ldr	r3, [r7, #4]
 8009fe0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009fe4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009fe6:	f107 0208 	add.w	r2, r7, #8
 8009fea:	4610      	mov	r0, r2
 8009fec:	4798      	blx	r3
 8009fee:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009ff0:	e029      	b.n	800a046 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8009ff2:	6839      	ldr	r1, [r7, #0]
 8009ff4:	6878      	ldr	r0, [r7, #4]
 8009ff6:	f000 fa11 	bl	800a41c <USBD_CtlError>
        err++;
 8009ffa:	7afb      	ldrb	r3, [r7, #11]
 8009ffc:	3301      	adds	r3, #1
 8009ffe:	72fb      	strb	r3, [r7, #11]
      break;
 800a000:	e021      	b.n	800a046 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a002:	687b      	ldr	r3, [r7, #4]
 800a004:	7c1b      	ldrb	r3, [r3, #16]
 800a006:	2b00      	cmp	r3, #0
 800a008:	d10d      	bne.n	800a026 <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800a00a:	687b      	ldr	r3, [r7, #4]
 800a00c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a010:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a012:	f107 0208 	add.w	r2, r7, #8
 800a016:	4610      	mov	r0, r2
 800a018:	4798      	blx	r3
 800a01a:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800a01c:	68fb      	ldr	r3, [r7, #12]
 800a01e:	3301      	adds	r3, #1
 800a020:	2207      	movs	r2, #7
 800a022:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800a024:	e00f      	b.n	800a046 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800a026:	6839      	ldr	r1, [r7, #0]
 800a028:	6878      	ldr	r0, [r7, #4]
 800a02a:	f000 f9f7 	bl	800a41c <USBD_CtlError>
        err++;
 800a02e:	7afb      	ldrb	r3, [r7, #11]
 800a030:	3301      	adds	r3, #1
 800a032:	72fb      	strb	r3, [r7, #11]
      break;
 800a034:	e007      	b.n	800a046 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800a036:	6839      	ldr	r1, [r7, #0]
 800a038:	6878      	ldr	r0, [r7, #4]
 800a03a:	f000 f9ef 	bl	800a41c <USBD_CtlError>
      err++;
 800a03e:	7afb      	ldrb	r3, [r7, #11]
 800a040:	3301      	adds	r3, #1
 800a042:	72fb      	strb	r3, [r7, #11]
      break;
 800a044:	bf00      	nop
  }

  if (err != 0U)
 800a046:	7afb      	ldrb	r3, [r7, #11]
 800a048:	2b00      	cmp	r3, #0
 800a04a:	d11e      	bne.n	800a08a <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 800a04c:	683b      	ldr	r3, [r7, #0]
 800a04e:	88db      	ldrh	r3, [r3, #6]
 800a050:	2b00      	cmp	r3, #0
 800a052:	d016      	beq.n	800a082 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 800a054:	893b      	ldrh	r3, [r7, #8]
 800a056:	2b00      	cmp	r3, #0
 800a058:	d00e      	beq.n	800a078 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 800a05a:	683b      	ldr	r3, [r7, #0]
 800a05c:	88da      	ldrh	r2, [r3, #6]
 800a05e:	893b      	ldrh	r3, [r7, #8]
 800a060:	4293      	cmp	r3, r2
 800a062:	bf28      	it	cs
 800a064:	4613      	movcs	r3, r2
 800a066:	b29b      	uxth	r3, r3
 800a068:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800a06a:	893b      	ldrh	r3, [r7, #8]
 800a06c:	461a      	mov	r2, r3
 800a06e:	68f9      	ldr	r1, [r7, #12]
 800a070:	6878      	ldr	r0, [r7, #4]
 800a072:	f000 f9e4 	bl	800a43e <USBD_CtlSendData>
 800a076:	e009      	b.n	800a08c <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800a078:	6839      	ldr	r1, [r7, #0]
 800a07a:	6878      	ldr	r0, [r7, #4]
 800a07c:	f000 f9ce 	bl	800a41c <USBD_CtlError>
 800a080:	e004      	b.n	800a08c <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800a082:	6878      	ldr	r0, [r7, #4]
 800a084:	f000 fa18 	bl	800a4b8 <USBD_CtlSendStatus>
 800a088:	e000      	b.n	800a08c <USBD_GetDescriptor+0x2cc>
    return;
 800a08a:	bf00      	nop
  }
}
 800a08c:	3710      	adds	r7, #16
 800a08e:	46bd      	mov	sp, r7
 800a090:	bd80      	pop	{r7, pc}
 800a092:	bf00      	nop

0800a094 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a094:	b580      	push	{r7, lr}
 800a096:	b084      	sub	sp, #16
 800a098:	af00      	add	r7, sp, #0
 800a09a:	6078      	str	r0, [r7, #4]
 800a09c:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800a09e:	683b      	ldr	r3, [r7, #0]
 800a0a0:	889b      	ldrh	r3, [r3, #4]
 800a0a2:	2b00      	cmp	r3, #0
 800a0a4:	d131      	bne.n	800a10a <USBD_SetAddress+0x76>
 800a0a6:	683b      	ldr	r3, [r7, #0]
 800a0a8:	88db      	ldrh	r3, [r3, #6]
 800a0aa:	2b00      	cmp	r3, #0
 800a0ac:	d12d      	bne.n	800a10a <USBD_SetAddress+0x76>
 800a0ae:	683b      	ldr	r3, [r7, #0]
 800a0b0:	885b      	ldrh	r3, [r3, #2]
 800a0b2:	2b7f      	cmp	r3, #127	; 0x7f
 800a0b4:	d829      	bhi.n	800a10a <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800a0b6:	683b      	ldr	r3, [r7, #0]
 800a0b8:	885b      	ldrh	r3, [r3, #2]
 800a0ba:	b2db      	uxtb	r3, r3
 800a0bc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a0c0:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a0c2:	687b      	ldr	r3, [r7, #4]
 800a0c4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a0c8:	b2db      	uxtb	r3, r3
 800a0ca:	2b03      	cmp	r3, #3
 800a0cc:	d104      	bne.n	800a0d8 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800a0ce:	6839      	ldr	r1, [r7, #0]
 800a0d0:	6878      	ldr	r0, [r7, #4]
 800a0d2:	f000 f9a3 	bl	800a41c <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a0d6:	e01d      	b.n	800a114 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800a0d8:	687b      	ldr	r3, [r7, #4]
 800a0da:	7bfa      	ldrb	r2, [r7, #15]
 800a0dc:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800a0e0:	7bfb      	ldrb	r3, [r7, #15]
 800a0e2:	4619      	mov	r1, r3
 800a0e4:	6878      	ldr	r0, [r7, #4]
 800a0e6:	f003 f95b 	bl	800d3a0 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800a0ea:	6878      	ldr	r0, [r7, #4]
 800a0ec:	f000 f9e4 	bl	800a4b8 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800a0f0:	7bfb      	ldrb	r3, [r7, #15]
 800a0f2:	2b00      	cmp	r3, #0
 800a0f4:	d004      	beq.n	800a100 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800a0f6:	687b      	ldr	r3, [r7, #4]
 800a0f8:	2202      	movs	r2, #2
 800a0fa:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a0fe:	e009      	b.n	800a114 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800a100:	687b      	ldr	r3, [r7, #4]
 800a102:	2201      	movs	r2, #1
 800a104:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a108:	e004      	b.n	800a114 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800a10a:	6839      	ldr	r1, [r7, #0]
 800a10c:	6878      	ldr	r0, [r7, #4]
 800a10e:	f000 f985 	bl	800a41c <USBD_CtlError>
  }
}
 800a112:	bf00      	nop
 800a114:	bf00      	nop
 800a116:	3710      	adds	r7, #16
 800a118:	46bd      	mov	sp, r7
 800a11a:	bd80      	pop	{r7, pc}

0800a11c <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a11c:	b580      	push	{r7, lr}
 800a11e:	b084      	sub	sp, #16
 800a120:	af00      	add	r7, sp, #0
 800a122:	6078      	str	r0, [r7, #4]
 800a124:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800a126:	2300      	movs	r3, #0
 800a128:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800a12a:	683b      	ldr	r3, [r7, #0]
 800a12c:	885b      	ldrh	r3, [r3, #2]
 800a12e:	b2da      	uxtb	r2, r3
 800a130:	4b4c      	ldr	r3, [pc, #304]	; (800a264 <USBD_SetConfig+0x148>)
 800a132:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800a134:	4b4b      	ldr	r3, [pc, #300]	; (800a264 <USBD_SetConfig+0x148>)
 800a136:	781b      	ldrb	r3, [r3, #0]
 800a138:	2b01      	cmp	r3, #1
 800a13a:	d905      	bls.n	800a148 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800a13c:	6839      	ldr	r1, [r7, #0]
 800a13e:	6878      	ldr	r0, [r7, #4]
 800a140:	f000 f96c 	bl	800a41c <USBD_CtlError>
    return USBD_FAIL;
 800a144:	2303      	movs	r3, #3
 800a146:	e088      	b.n	800a25a <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 800a148:	687b      	ldr	r3, [r7, #4]
 800a14a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a14e:	b2db      	uxtb	r3, r3
 800a150:	2b02      	cmp	r3, #2
 800a152:	d002      	beq.n	800a15a <USBD_SetConfig+0x3e>
 800a154:	2b03      	cmp	r3, #3
 800a156:	d025      	beq.n	800a1a4 <USBD_SetConfig+0x88>
 800a158:	e071      	b.n	800a23e <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800a15a:	4b42      	ldr	r3, [pc, #264]	; (800a264 <USBD_SetConfig+0x148>)
 800a15c:	781b      	ldrb	r3, [r3, #0]
 800a15e:	2b00      	cmp	r3, #0
 800a160:	d01c      	beq.n	800a19c <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 800a162:	4b40      	ldr	r3, [pc, #256]	; (800a264 <USBD_SetConfig+0x148>)
 800a164:	781b      	ldrb	r3, [r3, #0]
 800a166:	461a      	mov	r2, r3
 800a168:	687b      	ldr	r3, [r7, #4]
 800a16a:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800a16c:	4b3d      	ldr	r3, [pc, #244]	; (800a264 <USBD_SetConfig+0x148>)
 800a16e:	781b      	ldrb	r3, [r3, #0]
 800a170:	4619      	mov	r1, r3
 800a172:	6878      	ldr	r0, [r7, #4]
 800a174:	f7ff f949 	bl	800940a <USBD_SetClassConfig>
 800a178:	4603      	mov	r3, r0
 800a17a:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800a17c:	7bfb      	ldrb	r3, [r7, #15]
 800a17e:	2b00      	cmp	r3, #0
 800a180:	d004      	beq.n	800a18c <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 800a182:	6839      	ldr	r1, [r7, #0]
 800a184:	6878      	ldr	r0, [r7, #4]
 800a186:	f000 f949 	bl	800a41c <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800a18a:	e065      	b.n	800a258 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800a18c:	6878      	ldr	r0, [r7, #4]
 800a18e:	f000 f993 	bl	800a4b8 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800a192:	687b      	ldr	r3, [r7, #4]
 800a194:	2203      	movs	r2, #3
 800a196:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800a19a:	e05d      	b.n	800a258 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800a19c:	6878      	ldr	r0, [r7, #4]
 800a19e:	f000 f98b 	bl	800a4b8 <USBD_CtlSendStatus>
      break;
 800a1a2:	e059      	b.n	800a258 <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800a1a4:	4b2f      	ldr	r3, [pc, #188]	; (800a264 <USBD_SetConfig+0x148>)
 800a1a6:	781b      	ldrb	r3, [r3, #0]
 800a1a8:	2b00      	cmp	r3, #0
 800a1aa:	d112      	bne.n	800a1d2 <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800a1ac:	687b      	ldr	r3, [r7, #4]
 800a1ae:	2202      	movs	r2, #2
 800a1b0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 800a1b4:	4b2b      	ldr	r3, [pc, #172]	; (800a264 <USBD_SetConfig+0x148>)
 800a1b6:	781b      	ldrb	r3, [r3, #0]
 800a1b8:	461a      	mov	r2, r3
 800a1ba:	687b      	ldr	r3, [r7, #4]
 800a1bc:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800a1be:	4b29      	ldr	r3, [pc, #164]	; (800a264 <USBD_SetConfig+0x148>)
 800a1c0:	781b      	ldrb	r3, [r3, #0]
 800a1c2:	4619      	mov	r1, r3
 800a1c4:	6878      	ldr	r0, [r7, #4]
 800a1c6:	f7ff f93c 	bl	8009442 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800a1ca:	6878      	ldr	r0, [r7, #4]
 800a1cc:	f000 f974 	bl	800a4b8 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800a1d0:	e042      	b.n	800a258 <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 800a1d2:	4b24      	ldr	r3, [pc, #144]	; (800a264 <USBD_SetConfig+0x148>)
 800a1d4:	781b      	ldrb	r3, [r3, #0]
 800a1d6:	461a      	mov	r2, r3
 800a1d8:	687b      	ldr	r3, [r7, #4]
 800a1da:	685b      	ldr	r3, [r3, #4]
 800a1dc:	429a      	cmp	r2, r3
 800a1de:	d02a      	beq.n	800a236 <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800a1e0:	687b      	ldr	r3, [r7, #4]
 800a1e2:	685b      	ldr	r3, [r3, #4]
 800a1e4:	b2db      	uxtb	r3, r3
 800a1e6:	4619      	mov	r1, r3
 800a1e8:	6878      	ldr	r0, [r7, #4]
 800a1ea:	f7ff f92a 	bl	8009442 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800a1ee:	4b1d      	ldr	r3, [pc, #116]	; (800a264 <USBD_SetConfig+0x148>)
 800a1f0:	781b      	ldrb	r3, [r3, #0]
 800a1f2:	461a      	mov	r2, r3
 800a1f4:	687b      	ldr	r3, [r7, #4]
 800a1f6:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800a1f8:	4b1a      	ldr	r3, [pc, #104]	; (800a264 <USBD_SetConfig+0x148>)
 800a1fa:	781b      	ldrb	r3, [r3, #0]
 800a1fc:	4619      	mov	r1, r3
 800a1fe:	6878      	ldr	r0, [r7, #4]
 800a200:	f7ff f903 	bl	800940a <USBD_SetClassConfig>
 800a204:	4603      	mov	r3, r0
 800a206:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800a208:	7bfb      	ldrb	r3, [r7, #15]
 800a20a:	2b00      	cmp	r3, #0
 800a20c:	d00f      	beq.n	800a22e <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 800a20e:	6839      	ldr	r1, [r7, #0]
 800a210:	6878      	ldr	r0, [r7, #4]
 800a212:	f000 f903 	bl	800a41c <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800a216:	687b      	ldr	r3, [r7, #4]
 800a218:	685b      	ldr	r3, [r3, #4]
 800a21a:	b2db      	uxtb	r3, r3
 800a21c:	4619      	mov	r1, r3
 800a21e:	6878      	ldr	r0, [r7, #4]
 800a220:	f7ff f90f 	bl	8009442 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800a224:	687b      	ldr	r3, [r7, #4]
 800a226:	2202      	movs	r2, #2
 800a228:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800a22c:	e014      	b.n	800a258 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800a22e:	6878      	ldr	r0, [r7, #4]
 800a230:	f000 f942 	bl	800a4b8 <USBD_CtlSendStatus>
      break;
 800a234:	e010      	b.n	800a258 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800a236:	6878      	ldr	r0, [r7, #4]
 800a238:	f000 f93e 	bl	800a4b8 <USBD_CtlSendStatus>
      break;
 800a23c:	e00c      	b.n	800a258 <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 800a23e:	6839      	ldr	r1, [r7, #0]
 800a240:	6878      	ldr	r0, [r7, #4]
 800a242:	f000 f8eb 	bl	800a41c <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800a246:	4b07      	ldr	r3, [pc, #28]	; (800a264 <USBD_SetConfig+0x148>)
 800a248:	781b      	ldrb	r3, [r3, #0]
 800a24a:	4619      	mov	r1, r3
 800a24c:	6878      	ldr	r0, [r7, #4]
 800a24e:	f7ff f8f8 	bl	8009442 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800a252:	2303      	movs	r3, #3
 800a254:	73fb      	strb	r3, [r7, #15]
      break;
 800a256:	bf00      	nop
  }

  return ret;
 800a258:	7bfb      	ldrb	r3, [r7, #15]
}
 800a25a:	4618      	mov	r0, r3
 800a25c:	3710      	adds	r7, #16
 800a25e:	46bd      	mov	sp, r7
 800a260:	bd80      	pop	{r7, pc}
 800a262:	bf00      	nop
 800a264:	20000108 	.word	0x20000108

0800a268 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a268:	b580      	push	{r7, lr}
 800a26a:	b082      	sub	sp, #8
 800a26c:	af00      	add	r7, sp, #0
 800a26e:	6078      	str	r0, [r7, #4]
 800a270:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800a272:	683b      	ldr	r3, [r7, #0]
 800a274:	88db      	ldrh	r3, [r3, #6]
 800a276:	2b01      	cmp	r3, #1
 800a278:	d004      	beq.n	800a284 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800a27a:	6839      	ldr	r1, [r7, #0]
 800a27c:	6878      	ldr	r0, [r7, #4]
 800a27e:	f000 f8cd 	bl	800a41c <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800a282:	e023      	b.n	800a2cc <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800a284:	687b      	ldr	r3, [r7, #4]
 800a286:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a28a:	b2db      	uxtb	r3, r3
 800a28c:	2b02      	cmp	r3, #2
 800a28e:	dc02      	bgt.n	800a296 <USBD_GetConfig+0x2e>
 800a290:	2b00      	cmp	r3, #0
 800a292:	dc03      	bgt.n	800a29c <USBD_GetConfig+0x34>
 800a294:	e015      	b.n	800a2c2 <USBD_GetConfig+0x5a>
 800a296:	2b03      	cmp	r3, #3
 800a298:	d00b      	beq.n	800a2b2 <USBD_GetConfig+0x4a>
 800a29a:	e012      	b.n	800a2c2 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800a29c:	687b      	ldr	r3, [r7, #4]
 800a29e:	2200      	movs	r2, #0
 800a2a0:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800a2a2:	687b      	ldr	r3, [r7, #4]
 800a2a4:	3308      	adds	r3, #8
 800a2a6:	2201      	movs	r2, #1
 800a2a8:	4619      	mov	r1, r3
 800a2aa:	6878      	ldr	r0, [r7, #4]
 800a2ac:	f000 f8c7 	bl	800a43e <USBD_CtlSendData>
        break;
 800a2b0:	e00c      	b.n	800a2cc <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800a2b2:	687b      	ldr	r3, [r7, #4]
 800a2b4:	3304      	adds	r3, #4
 800a2b6:	2201      	movs	r2, #1
 800a2b8:	4619      	mov	r1, r3
 800a2ba:	6878      	ldr	r0, [r7, #4]
 800a2bc:	f000 f8bf 	bl	800a43e <USBD_CtlSendData>
        break;
 800a2c0:	e004      	b.n	800a2cc <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800a2c2:	6839      	ldr	r1, [r7, #0]
 800a2c4:	6878      	ldr	r0, [r7, #4]
 800a2c6:	f000 f8a9 	bl	800a41c <USBD_CtlError>
        break;
 800a2ca:	bf00      	nop
}
 800a2cc:	bf00      	nop
 800a2ce:	3708      	adds	r7, #8
 800a2d0:	46bd      	mov	sp, r7
 800a2d2:	bd80      	pop	{r7, pc}

0800a2d4 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a2d4:	b580      	push	{r7, lr}
 800a2d6:	b082      	sub	sp, #8
 800a2d8:	af00      	add	r7, sp, #0
 800a2da:	6078      	str	r0, [r7, #4]
 800a2dc:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800a2de:	687b      	ldr	r3, [r7, #4]
 800a2e0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a2e4:	b2db      	uxtb	r3, r3
 800a2e6:	3b01      	subs	r3, #1
 800a2e8:	2b02      	cmp	r3, #2
 800a2ea:	d81e      	bhi.n	800a32a <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800a2ec:	683b      	ldr	r3, [r7, #0]
 800a2ee:	88db      	ldrh	r3, [r3, #6]
 800a2f0:	2b02      	cmp	r3, #2
 800a2f2:	d004      	beq.n	800a2fe <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800a2f4:	6839      	ldr	r1, [r7, #0]
 800a2f6:	6878      	ldr	r0, [r7, #4]
 800a2f8:	f000 f890 	bl	800a41c <USBD_CtlError>
        break;
 800a2fc:	e01a      	b.n	800a334 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800a2fe:	687b      	ldr	r3, [r7, #4]
 800a300:	2201      	movs	r2, #1
 800a302:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 800a304:	687b      	ldr	r3, [r7, #4]
 800a306:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800a30a:	2b00      	cmp	r3, #0
 800a30c:	d005      	beq.n	800a31a <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800a30e:	687b      	ldr	r3, [r7, #4]
 800a310:	68db      	ldr	r3, [r3, #12]
 800a312:	f043 0202 	orr.w	r2, r3, #2
 800a316:	687b      	ldr	r3, [r7, #4]
 800a318:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800a31a:	687b      	ldr	r3, [r7, #4]
 800a31c:	330c      	adds	r3, #12
 800a31e:	2202      	movs	r2, #2
 800a320:	4619      	mov	r1, r3
 800a322:	6878      	ldr	r0, [r7, #4]
 800a324:	f000 f88b 	bl	800a43e <USBD_CtlSendData>
      break;
 800a328:	e004      	b.n	800a334 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800a32a:	6839      	ldr	r1, [r7, #0]
 800a32c:	6878      	ldr	r0, [r7, #4]
 800a32e:	f000 f875 	bl	800a41c <USBD_CtlError>
      break;
 800a332:	bf00      	nop
  }
}
 800a334:	bf00      	nop
 800a336:	3708      	adds	r7, #8
 800a338:	46bd      	mov	sp, r7
 800a33a:	bd80      	pop	{r7, pc}

0800a33c <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a33c:	b580      	push	{r7, lr}
 800a33e:	b082      	sub	sp, #8
 800a340:	af00      	add	r7, sp, #0
 800a342:	6078      	str	r0, [r7, #4]
 800a344:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800a346:	683b      	ldr	r3, [r7, #0]
 800a348:	885b      	ldrh	r3, [r3, #2]
 800a34a:	2b01      	cmp	r3, #1
 800a34c:	d106      	bne.n	800a35c <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800a34e:	687b      	ldr	r3, [r7, #4]
 800a350:	2201      	movs	r2, #1
 800a352:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800a356:	6878      	ldr	r0, [r7, #4]
 800a358:	f000 f8ae 	bl	800a4b8 <USBD_CtlSendStatus>
  }
}
 800a35c:	bf00      	nop
 800a35e:	3708      	adds	r7, #8
 800a360:	46bd      	mov	sp, r7
 800a362:	bd80      	pop	{r7, pc}

0800a364 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a364:	b580      	push	{r7, lr}
 800a366:	b082      	sub	sp, #8
 800a368:	af00      	add	r7, sp, #0
 800a36a:	6078      	str	r0, [r7, #4]
 800a36c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800a36e:	687b      	ldr	r3, [r7, #4]
 800a370:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a374:	b2db      	uxtb	r3, r3
 800a376:	3b01      	subs	r3, #1
 800a378:	2b02      	cmp	r3, #2
 800a37a:	d80b      	bhi.n	800a394 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800a37c:	683b      	ldr	r3, [r7, #0]
 800a37e:	885b      	ldrh	r3, [r3, #2]
 800a380:	2b01      	cmp	r3, #1
 800a382:	d10c      	bne.n	800a39e <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800a384:	687b      	ldr	r3, [r7, #4]
 800a386:	2200      	movs	r2, #0
 800a388:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800a38c:	6878      	ldr	r0, [r7, #4]
 800a38e:	f000 f893 	bl	800a4b8 <USBD_CtlSendStatus>
      }
      break;
 800a392:	e004      	b.n	800a39e <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800a394:	6839      	ldr	r1, [r7, #0]
 800a396:	6878      	ldr	r0, [r7, #4]
 800a398:	f000 f840 	bl	800a41c <USBD_CtlError>
      break;
 800a39c:	e000      	b.n	800a3a0 <USBD_ClrFeature+0x3c>
      break;
 800a39e:	bf00      	nop
  }
}
 800a3a0:	bf00      	nop
 800a3a2:	3708      	adds	r7, #8
 800a3a4:	46bd      	mov	sp, r7
 800a3a6:	bd80      	pop	{r7, pc}

0800a3a8 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800a3a8:	b580      	push	{r7, lr}
 800a3aa:	b084      	sub	sp, #16
 800a3ac:	af00      	add	r7, sp, #0
 800a3ae:	6078      	str	r0, [r7, #4]
 800a3b0:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800a3b2:	683b      	ldr	r3, [r7, #0]
 800a3b4:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800a3b6:	68fb      	ldr	r3, [r7, #12]
 800a3b8:	781a      	ldrb	r2, [r3, #0]
 800a3ba:	687b      	ldr	r3, [r7, #4]
 800a3bc:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800a3be:	68fb      	ldr	r3, [r7, #12]
 800a3c0:	3301      	adds	r3, #1
 800a3c2:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800a3c4:	68fb      	ldr	r3, [r7, #12]
 800a3c6:	781a      	ldrb	r2, [r3, #0]
 800a3c8:	687b      	ldr	r3, [r7, #4]
 800a3ca:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800a3cc:	68fb      	ldr	r3, [r7, #12]
 800a3ce:	3301      	adds	r3, #1
 800a3d0:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800a3d2:	68f8      	ldr	r0, [r7, #12]
 800a3d4:	f7ff fabc 	bl	8009950 <SWAPBYTE>
 800a3d8:	4603      	mov	r3, r0
 800a3da:	461a      	mov	r2, r3
 800a3dc:	687b      	ldr	r3, [r7, #4]
 800a3de:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800a3e0:	68fb      	ldr	r3, [r7, #12]
 800a3e2:	3301      	adds	r3, #1
 800a3e4:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800a3e6:	68fb      	ldr	r3, [r7, #12]
 800a3e8:	3301      	adds	r3, #1
 800a3ea:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800a3ec:	68f8      	ldr	r0, [r7, #12]
 800a3ee:	f7ff faaf 	bl	8009950 <SWAPBYTE>
 800a3f2:	4603      	mov	r3, r0
 800a3f4:	461a      	mov	r2, r3
 800a3f6:	687b      	ldr	r3, [r7, #4]
 800a3f8:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800a3fa:	68fb      	ldr	r3, [r7, #12]
 800a3fc:	3301      	adds	r3, #1
 800a3fe:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800a400:	68fb      	ldr	r3, [r7, #12]
 800a402:	3301      	adds	r3, #1
 800a404:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800a406:	68f8      	ldr	r0, [r7, #12]
 800a408:	f7ff faa2 	bl	8009950 <SWAPBYTE>
 800a40c:	4603      	mov	r3, r0
 800a40e:	461a      	mov	r2, r3
 800a410:	687b      	ldr	r3, [r7, #4]
 800a412:	80da      	strh	r2, [r3, #6]
}
 800a414:	bf00      	nop
 800a416:	3710      	adds	r7, #16
 800a418:	46bd      	mov	sp, r7
 800a41a:	bd80      	pop	{r7, pc}

0800a41c <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a41c:	b580      	push	{r7, lr}
 800a41e:	b082      	sub	sp, #8
 800a420:	af00      	add	r7, sp, #0
 800a422:	6078      	str	r0, [r7, #4]
 800a424:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800a426:	2180      	movs	r1, #128	; 0x80
 800a428:	6878      	ldr	r0, [r7, #4]
 800a42a:	f002 ff4f 	bl	800d2cc <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800a42e:	2100      	movs	r1, #0
 800a430:	6878      	ldr	r0, [r7, #4]
 800a432:	f002 ff4b 	bl	800d2cc <USBD_LL_StallEP>
}
 800a436:	bf00      	nop
 800a438:	3708      	adds	r7, #8
 800a43a:	46bd      	mov	sp, r7
 800a43c:	bd80      	pop	{r7, pc}

0800a43e <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800a43e:	b580      	push	{r7, lr}
 800a440:	b084      	sub	sp, #16
 800a442:	af00      	add	r7, sp, #0
 800a444:	60f8      	str	r0, [r7, #12]
 800a446:	60b9      	str	r1, [r7, #8]
 800a448:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800a44a:	68fb      	ldr	r3, [r7, #12]
 800a44c:	2202      	movs	r2, #2
 800a44e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800a452:	68fb      	ldr	r3, [r7, #12]
 800a454:	687a      	ldr	r2, [r7, #4]
 800a456:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800a458:	68fb      	ldr	r3, [r7, #12]
 800a45a:	687a      	ldr	r2, [r7, #4]
 800a45c:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800a45e:	687b      	ldr	r3, [r7, #4]
 800a460:	68ba      	ldr	r2, [r7, #8]
 800a462:	2100      	movs	r1, #0
 800a464:	68f8      	ldr	r0, [r7, #12]
 800a466:	f002 ffba 	bl	800d3de <USBD_LL_Transmit>

  return USBD_OK;
 800a46a:	2300      	movs	r3, #0
}
 800a46c:	4618      	mov	r0, r3
 800a46e:	3710      	adds	r7, #16
 800a470:	46bd      	mov	sp, r7
 800a472:	bd80      	pop	{r7, pc}

0800a474 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800a474:	b580      	push	{r7, lr}
 800a476:	b084      	sub	sp, #16
 800a478:	af00      	add	r7, sp, #0
 800a47a:	60f8      	str	r0, [r7, #12]
 800a47c:	60b9      	str	r1, [r7, #8]
 800a47e:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800a480:	687b      	ldr	r3, [r7, #4]
 800a482:	68ba      	ldr	r2, [r7, #8]
 800a484:	2100      	movs	r1, #0
 800a486:	68f8      	ldr	r0, [r7, #12]
 800a488:	f002 ffa9 	bl	800d3de <USBD_LL_Transmit>

  return USBD_OK;
 800a48c:	2300      	movs	r3, #0
}
 800a48e:	4618      	mov	r0, r3
 800a490:	3710      	adds	r7, #16
 800a492:	46bd      	mov	sp, r7
 800a494:	bd80      	pop	{r7, pc}

0800a496 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800a496:	b580      	push	{r7, lr}
 800a498:	b084      	sub	sp, #16
 800a49a:	af00      	add	r7, sp, #0
 800a49c:	60f8      	str	r0, [r7, #12]
 800a49e:	60b9      	str	r1, [r7, #8]
 800a4a0:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800a4a2:	687b      	ldr	r3, [r7, #4]
 800a4a4:	68ba      	ldr	r2, [r7, #8]
 800a4a6:	2100      	movs	r1, #0
 800a4a8:	68f8      	ldr	r0, [r7, #12]
 800a4aa:	f002 ffb9 	bl	800d420 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a4ae:	2300      	movs	r3, #0
}
 800a4b0:	4618      	mov	r0, r3
 800a4b2:	3710      	adds	r7, #16
 800a4b4:	46bd      	mov	sp, r7
 800a4b6:	bd80      	pop	{r7, pc}

0800a4b8 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800a4b8:	b580      	push	{r7, lr}
 800a4ba:	b082      	sub	sp, #8
 800a4bc:	af00      	add	r7, sp, #0
 800a4be:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800a4c0:	687b      	ldr	r3, [r7, #4]
 800a4c2:	2204      	movs	r2, #4
 800a4c4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800a4c8:	2300      	movs	r3, #0
 800a4ca:	2200      	movs	r2, #0
 800a4cc:	2100      	movs	r1, #0
 800a4ce:	6878      	ldr	r0, [r7, #4]
 800a4d0:	f002 ff85 	bl	800d3de <USBD_LL_Transmit>

  return USBD_OK;
 800a4d4:	2300      	movs	r3, #0
}
 800a4d6:	4618      	mov	r0, r3
 800a4d8:	3708      	adds	r7, #8
 800a4da:	46bd      	mov	sp, r7
 800a4dc:	bd80      	pop	{r7, pc}

0800a4de <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800a4de:	b580      	push	{r7, lr}
 800a4e0:	b082      	sub	sp, #8
 800a4e2:	af00      	add	r7, sp, #0
 800a4e4:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800a4e6:	687b      	ldr	r3, [r7, #4]
 800a4e8:	2205      	movs	r2, #5
 800a4ea:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a4ee:	2300      	movs	r3, #0
 800a4f0:	2200      	movs	r2, #0
 800a4f2:	2100      	movs	r1, #0
 800a4f4:	6878      	ldr	r0, [r7, #4]
 800a4f6:	f002 ff93 	bl	800d420 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a4fa:	2300      	movs	r3, #0
}
 800a4fc:	4618      	mov	r0, r3
 800a4fe:	3708      	adds	r7, #8
 800a500:	46bd      	mov	sp, r7
 800a502:	bd80      	pop	{r7, pc}

0800a504 <__NVIC_SetPriority>:
{
 800a504:	b480      	push	{r7}
 800a506:	b083      	sub	sp, #12
 800a508:	af00      	add	r7, sp, #0
 800a50a:	4603      	mov	r3, r0
 800a50c:	6039      	str	r1, [r7, #0]
 800a50e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800a510:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a514:	2b00      	cmp	r3, #0
 800a516:	db0a      	blt.n	800a52e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800a518:	683b      	ldr	r3, [r7, #0]
 800a51a:	b2da      	uxtb	r2, r3
 800a51c:	490c      	ldr	r1, [pc, #48]	; (800a550 <__NVIC_SetPriority+0x4c>)
 800a51e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a522:	0112      	lsls	r2, r2, #4
 800a524:	b2d2      	uxtb	r2, r2
 800a526:	440b      	add	r3, r1
 800a528:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800a52c:	e00a      	b.n	800a544 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800a52e:	683b      	ldr	r3, [r7, #0]
 800a530:	b2da      	uxtb	r2, r3
 800a532:	4908      	ldr	r1, [pc, #32]	; (800a554 <__NVIC_SetPriority+0x50>)
 800a534:	79fb      	ldrb	r3, [r7, #7]
 800a536:	f003 030f 	and.w	r3, r3, #15
 800a53a:	3b04      	subs	r3, #4
 800a53c:	0112      	lsls	r2, r2, #4
 800a53e:	b2d2      	uxtb	r2, r2
 800a540:	440b      	add	r3, r1
 800a542:	761a      	strb	r2, [r3, #24]
}
 800a544:	bf00      	nop
 800a546:	370c      	adds	r7, #12
 800a548:	46bd      	mov	sp, r7
 800a54a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a54e:	4770      	bx	lr
 800a550:	e000e100 	.word	0xe000e100
 800a554:	e000ed00 	.word	0xe000ed00

0800a558 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800a558:	b580      	push	{r7, lr}
 800a55a:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 800a55c:	4b05      	ldr	r3, [pc, #20]	; (800a574 <SysTick_Handler+0x1c>)
 800a55e:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800a560:	f001 fd36 	bl	800bfd0 <xTaskGetSchedulerState>
 800a564:	4603      	mov	r3, r0
 800a566:	2b01      	cmp	r3, #1
 800a568:	d001      	beq.n	800a56e <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800a56a:	f002 fb1d 	bl	800cba8 <xPortSysTickHandler>
  }
}
 800a56e:	bf00      	nop
 800a570:	bd80      	pop	{r7, pc}
 800a572:	bf00      	nop
 800a574:	e000e010 	.word	0xe000e010

0800a578 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800a578:	b580      	push	{r7, lr}
 800a57a:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800a57c:	2100      	movs	r1, #0
 800a57e:	f06f 0004 	mvn.w	r0, #4
 800a582:	f7ff ffbf 	bl	800a504 <__NVIC_SetPriority>
#endif
}
 800a586:	bf00      	nop
 800a588:	bd80      	pop	{r7, pc}
	...

0800a58c <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800a58c:	b480      	push	{r7}
 800a58e:	b083      	sub	sp, #12
 800a590:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a592:	f3ef 8305 	mrs	r3, IPSR
 800a596:	603b      	str	r3, [r7, #0]
  return(result);
 800a598:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800a59a:	2b00      	cmp	r3, #0
 800a59c:	d003      	beq.n	800a5a6 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800a59e:	f06f 0305 	mvn.w	r3, #5
 800a5a2:	607b      	str	r3, [r7, #4]
 800a5a4:	e00c      	b.n	800a5c0 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800a5a6:	4b0a      	ldr	r3, [pc, #40]	; (800a5d0 <osKernelInitialize+0x44>)
 800a5a8:	681b      	ldr	r3, [r3, #0]
 800a5aa:	2b00      	cmp	r3, #0
 800a5ac:	d105      	bne.n	800a5ba <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800a5ae:	4b08      	ldr	r3, [pc, #32]	; (800a5d0 <osKernelInitialize+0x44>)
 800a5b0:	2201      	movs	r2, #1
 800a5b2:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800a5b4:	2300      	movs	r3, #0
 800a5b6:	607b      	str	r3, [r7, #4]
 800a5b8:	e002      	b.n	800a5c0 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800a5ba:	f04f 33ff 	mov.w	r3, #4294967295
 800a5be:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800a5c0:	687b      	ldr	r3, [r7, #4]
}
 800a5c2:	4618      	mov	r0, r3
 800a5c4:	370c      	adds	r7, #12
 800a5c6:	46bd      	mov	sp, r7
 800a5c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5cc:	4770      	bx	lr
 800a5ce:	bf00      	nop
 800a5d0:	2000010c 	.word	0x2000010c

0800a5d4 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800a5d4:	b580      	push	{r7, lr}
 800a5d6:	b082      	sub	sp, #8
 800a5d8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a5da:	f3ef 8305 	mrs	r3, IPSR
 800a5de:	603b      	str	r3, [r7, #0]
  return(result);
 800a5e0:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800a5e2:	2b00      	cmp	r3, #0
 800a5e4:	d003      	beq.n	800a5ee <osKernelStart+0x1a>
    stat = osErrorISR;
 800a5e6:	f06f 0305 	mvn.w	r3, #5
 800a5ea:	607b      	str	r3, [r7, #4]
 800a5ec:	e010      	b.n	800a610 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800a5ee:	4b0b      	ldr	r3, [pc, #44]	; (800a61c <osKernelStart+0x48>)
 800a5f0:	681b      	ldr	r3, [r3, #0]
 800a5f2:	2b01      	cmp	r3, #1
 800a5f4:	d109      	bne.n	800a60a <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800a5f6:	f7ff ffbf 	bl	800a578 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800a5fa:	4b08      	ldr	r3, [pc, #32]	; (800a61c <osKernelStart+0x48>)
 800a5fc:	2202      	movs	r2, #2
 800a5fe:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800a600:	f001 f866 	bl	800b6d0 <vTaskStartScheduler>
      stat = osOK;
 800a604:	2300      	movs	r3, #0
 800a606:	607b      	str	r3, [r7, #4]
 800a608:	e002      	b.n	800a610 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800a60a:	f04f 33ff 	mov.w	r3, #4294967295
 800a60e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800a610:	687b      	ldr	r3, [r7, #4]
}
 800a612:	4618      	mov	r0, r3
 800a614:	3708      	adds	r7, #8
 800a616:	46bd      	mov	sp, r7
 800a618:	bd80      	pop	{r7, pc}
 800a61a:	bf00      	nop
 800a61c:	2000010c 	.word	0x2000010c

0800a620 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800a620:	b580      	push	{r7, lr}
 800a622:	b08e      	sub	sp, #56	; 0x38
 800a624:	af04      	add	r7, sp, #16
 800a626:	60f8      	str	r0, [r7, #12]
 800a628:	60b9      	str	r1, [r7, #8]
 800a62a:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800a62c:	2300      	movs	r3, #0
 800a62e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a630:	f3ef 8305 	mrs	r3, IPSR
 800a634:	617b      	str	r3, [r7, #20]
  return(result);
 800a636:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800a638:	2b00      	cmp	r3, #0
 800a63a:	d17e      	bne.n	800a73a <osThreadNew+0x11a>
 800a63c:	68fb      	ldr	r3, [r7, #12]
 800a63e:	2b00      	cmp	r3, #0
 800a640:	d07b      	beq.n	800a73a <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800a642:	2380      	movs	r3, #128	; 0x80
 800a644:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800a646:	2318      	movs	r3, #24
 800a648:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800a64a:	2300      	movs	r3, #0
 800a64c:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 800a64e:	f04f 33ff 	mov.w	r3, #4294967295
 800a652:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800a654:	687b      	ldr	r3, [r7, #4]
 800a656:	2b00      	cmp	r3, #0
 800a658:	d045      	beq.n	800a6e6 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800a65a:	687b      	ldr	r3, [r7, #4]
 800a65c:	681b      	ldr	r3, [r3, #0]
 800a65e:	2b00      	cmp	r3, #0
 800a660:	d002      	beq.n	800a668 <osThreadNew+0x48>
        name = attr->name;
 800a662:	687b      	ldr	r3, [r7, #4]
 800a664:	681b      	ldr	r3, [r3, #0]
 800a666:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 800a668:	687b      	ldr	r3, [r7, #4]
 800a66a:	699b      	ldr	r3, [r3, #24]
 800a66c:	2b00      	cmp	r3, #0
 800a66e:	d002      	beq.n	800a676 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800a670:	687b      	ldr	r3, [r7, #4]
 800a672:	699b      	ldr	r3, [r3, #24]
 800a674:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800a676:	69fb      	ldr	r3, [r7, #28]
 800a678:	2b00      	cmp	r3, #0
 800a67a:	d008      	beq.n	800a68e <osThreadNew+0x6e>
 800a67c:	69fb      	ldr	r3, [r7, #28]
 800a67e:	2b38      	cmp	r3, #56	; 0x38
 800a680:	d805      	bhi.n	800a68e <osThreadNew+0x6e>
 800a682:	687b      	ldr	r3, [r7, #4]
 800a684:	685b      	ldr	r3, [r3, #4]
 800a686:	f003 0301 	and.w	r3, r3, #1
 800a68a:	2b00      	cmp	r3, #0
 800a68c:	d001      	beq.n	800a692 <osThreadNew+0x72>
        return (NULL);
 800a68e:	2300      	movs	r3, #0
 800a690:	e054      	b.n	800a73c <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800a692:	687b      	ldr	r3, [r7, #4]
 800a694:	695b      	ldr	r3, [r3, #20]
 800a696:	2b00      	cmp	r3, #0
 800a698:	d003      	beq.n	800a6a2 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800a69a:	687b      	ldr	r3, [r7, #4]
 800a69c:	695b      	ldr	r3, [r3, #20]
 800a69e:	089b      	lsrs	r3, r3, #2
 800a6a0:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800a6a2:	687b      	ldr	r3, [r7, #4]
 800a6a4:	689b      	ldr	r3, [r3, #8]
 800a6a6:	2b00      	cmp	r3, #0
 800a6a8:	d00e      	beq.n	800a6c8 <osThreadNew+0xa8>
 800a6aa:	687b      	ldr	r3, [r7, #4]
 800a6ac:	68db      	ldr	r3, [r3, #12]
 800a6ae:	2b5b      	cmp	r3, #91	; 0x5b
 800a6b0:	d90a      	bls.n	800a6c8 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800a6b2:	687b      	ldr	r3, [r7, #4]
 800a6b4:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800a6b6:	2b00      	cmp	r3, #0
 800a6b8:	d006      	beq.n	800a6c8 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800a6ba:	687b      	ldr	r3, [r7, #4]
 800a6bc:	695b      	ldr	r3, [r3, #20]
 800a6be:	2b00      	cmp	r3, #0
 800a6c0:	d002      	beq.n	800a6c8 <osThreadNew+0xa8>
        mem = 1;
 800a6c2:	2301      	movs	r3, #1
 800a6c4:	61bb      	str	r3, [r7, #24]
 800a6c6:	e010      	b.n	800a6ea <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800a6c8:	687b      	ldr	r3, [r7, #4]
 800a6ca:	689b      	ldr	r3, [r3, #8]
 800a6cc:	2b00      	cmp	r3, #0
 800a6ce:	d10c      	bne.n	800a6ea <osThreadNew+0xca>
 800a6d0:	687b      	ldr	r3, [r7, #4]
 800a6d2:	68db      	ldr	r3, [r3, #12]
 800a6d4:	2b00      	cmp	r3, #0
 800a6d6:	d108      	bne.n	800a6ea <osThreadNew+0xca>
 800a6d8:	687b      	ldr	r3, [r7, #4]
 800a6da:	691b      	ldr	r3, [r3, #16]
 800a6dc:	2b00      	cmp	r3, #0
 800a6de:	d104      	bne.n	800a6ea <osThreadNew+0xca>
          mem = 0;
 800a6e0:	2300      	movs	r3, #0
 800a6e2:	61bb      	str	r3, [r7, #24]
 800a6e4:	e001      	b.n	800a6ea <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800a6e6:	2300      	movs	r3, #0
 800a6e8:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800a6ea:	69bb      	ldr	r3, [r7, #24]
 800a6ec:	2b01      	cmp	r3, #1
 800a6ee:	d110      	bne.n	800a712 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800a6f0:	687b      	ldr	r3, [r7, #4]
 800a6f2:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800a6f4:	687a      	ldr	r2, [r7, #4]
 800a6f6:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800a6f8:	9202      	str	r2, [sp, #8]
 800a6fa:	9301      	str	r3, [sp, #4]
 800a6fc:	69fb      	ldr	r3, [r7, #28]
 800a6fe:	9300      	str	r3, [sp, #0]
 800a700:	68bb      	ldr	r3, [r7, #8]
 800a702:	6a3a      	ldr	r2, [r7, #32]
 800a704:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800a706:	68f8      	ldr	r0, [r7, #12]
 800a708:	f000 fe0c 	bl	800b324 <xTaskCreateStatic>
 800a70c:	4603      	mov	r3, r0
 800a70e:	613b      	str	r3, [r7, #16]
 800a710:	e013      	b.n	800a73a <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800a712:	69bb      	ldr	r3, [r7, #24]
 800a714:	2b00      	cmp	r3, #0
 800a716:	d110      	bne.n	800a73a <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800a718:	6a3b      	ldr	r3, [r7, #32]
 800a71a:	b29a      	uxth	r2, r3
 800a71c:	f107 0310 	add.w	r3, r7, #16
 800a720:	9301      	str	r3, [sp, #4]
 800a722:	69fb      	ldr	r3, [r7, #28]
 800a724:	9300      	str	r3, [sp, #0]
 800a726:	68bb      	ldr	r3, [r7, #8]
 800a728:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800a72a:	68f8      	ldr	r0, [r7, #12]
 800a72c:	f000 fe57 	bl	800b3de <xTaskCreate>
 800a730:	4603      	mov	r3, r0
 800a732:	2b01      	cmp	r3, #1
 800a734:	d001      	beq.n	800a73a <osThreadNew+0x11a>
            hTask = NULL;
 800a736:	2300      	movs	r3, #0
 800a738:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800a73a:	693b      	ldr	r3, [r7, #16]
}
 800a73c:	4618      	mov	r0, r3
 800a73e:	3728      	adds	r7, #40	; 0x28
 800a740:	46bd      	mov	sp, r7
 800a742:	bd80      	pop	{r7, pc}

0800a744 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800a744:	b580      	push	{r7, lr}
 800a746:	b084      	sub	sp, #16
 800a748:	af00      	add	r7, sp, #0
 800a74a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a74c:	f3ef 8305 	mrs	r3, IPSR
 800a750:	60bb      	str	r3, [r7, #8]
  return(result);
 800a752:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800a754:	2b00      	cmp	r3, #0
 800a756:	d003      	beq.n	800a760 <osDelay+0x1c>
    stat = osErrorISR;
 800a758:	f06f 0305 	mvn.w	r3, #5
 800a75c:	60fb      	str	r3, [r7, #12]
 800a75e:	e007      	b.n	800a770 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800a760:	2300      	movs	r3, #0
 800a762:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800a764:	687b      	ldr	r3, [r7, #4]
 800a766:	2b00      	cmp	r3, #0
 800a768:	d002      	beq.n	800a770 <osDelay+0x2c>
      vTaskDelay(ticks);
 800a76a:	6878      	ldr	r0, [r7, #4]
 800a76c:	f000 ff7c 	bl	800b668 <vTaskDelay>
    }
  }

  return (stat);
 800a770:	68fb      	ldr	r3, [r7, #12]
}
 800a772:	4618      	mov	r0, r3
 800a774:	3710      	adds	r7, #16
 800a776:	46bd      	mov	sp, r7
 800a778:	bd80      	pop	{r7, pc}
	...

0800a77c <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800a77c:	b480      	push	{r7}
 800a77e:	b085      	sub	sp, #20
 800a780:	af00      	add	r7, sp, #0
 800a782:	60f8      	str	r0, [r7, #12]
 800a784:	60b9      	str	r1, [r7, #8]
 800a786:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800a788:	68fb      	ldr	r3, [r7, #12]
 800a78a:	4a07      	ldr	r2, [pc, #28]	; (800a7a8 <vApplicationGetIdleTaskMemory+0x2c>)
 800a78c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800a78e:	68bb      	ldr	r3, [r7, #8]
 800a790:	4a06      	ldr	r2, [pc, #24]	; (800a7ac <vApplicationGetIdleTaskMemory+0x30>)
 800a792:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800a794:	687b      	ldr	r3, [r7, #4]
 800a796:	2280      	movs	r2, #128	; 0x80
 800a798:	601a      	str	r2, [r3, #0]
}
 800a79a:	bf00      	nop
 800a79c:	3714      	adds	r7, #20
 800a79e:	46bd      	mov	sp, r7
 800a7a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7a4:	4770      	bx	lr
 800a7a6:	bf00      	nop
 800a7a8:	20000110 	.word	0x20000110
 800a7ac:	2000016c 	.word	0x2000016c

0800a7b0 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800a7b0:	b480      	push	{r7}
 800a7b2:	b085      	sub	sp, #20
 800a7b4:	af00      	add	r7, sp, #0
 800a7b6:	60f8      	str	r0, [r7, #12]
 800a7b8:	60b9      	str	r1, [r7, #8]
 800a7ba:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800a7bc:	68fb      	ldr	r3, [r7, #12]
 800a7be:	4a07      	ldr	r2, [pc, #28]	; (800a7dc <vApplicationGetTimerTaskMemory+0x2c>)
 800a7c0:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800a7c2:	68bb      	ldr	r3, [r7, #8]
 800a7c4:	4a06      	ldr	r2, [pc, #24]	; (800a7e0 <vApplicationGetTimerTaskMemory+0x30>)
 800a7c6:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800a7c8:	687b      	ldr	r3, [r7, #4]
 800a7ca:	f44f 7280 	mov.w	r2, #256	; 0x100
 800a7ce:	601a      	str	r2, [r3, #0]
}
 800a7d0:	bf00      	nop
 800a7d2:	3714      	adds	r7, #20
 800a7d4:	46bd      	mov	sp, r7
 800a7d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7da:	4770      	bx	lr
 800a7dc:	2000036c 	.word	0x2000036c
 800a7e0:	200003c8 	.word	0x200003c8

0800a7e4 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800a7e4:	b480      	push	{r7}
 800a7e6:	b083      	sub	sp, #12
 800a7e8:	af00      	add	r7, sp, #0
 800a7ea:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a7ec:	687b      	ldr	r3, [r7, #4]
 800a7ee:	f103 0208 	add.w	r2, r3, #8
 800a7f2:	687b      	ldr	r3, [r7, #4]
 800a7f4:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800a7f6:	687b      	ldr	r3, [r7, #4]
 800a7f8:	f04f 32ff 	mov.w	r2, #4294967295
 800a7fc:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a7fe:	687b      	ldr	r3, [r7, #4]
 800a800:	f103 0208 	add.w	r2, r3, #8
 800a804:	687b      	ldr	r3, [r7, #4]
 800a806:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a808:	687b      	ldr	r3, [r7, #4]
 800a80a:	f103 0208 	add.w	r2, r3, #8
 800a80e:	687b      	ldr	r3, [r7, #4]
 800a810:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800a812:	687b      	ldr	r3, [r7, #4]
 800a814:	2200      	movs	r2, #0
 800a816:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800a818:	bf00      	nop
 800a81a:	370c      	adds	r7, #12
 800a81c:	46bd      	mov	sp, r7
 800a81e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a822:	4770      	bx	lr

0800a824 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800a824:	b480      	push	{r7}
 800a826:	b083      	sub	sp, #12
 800a828:	af00      	add	r7, sp, #0
 800a82a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800a82c:	687b      	ldr	r3, [r7, #4]
 800a82e:	2200      	movs	r2, #0
 800a830:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800a832:	bf00      	nop
 800a834:	370c      	adds	r7, #12
 800a836:	46bd      	mov	sp, r7
 800a838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a83c:	4770      	bx	lr

0800a83e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800a83e:	b480      	push	{r7}
 800a840:	b085      	sub	sp, #20
 800a842:	af00      	add	r7, sp, #0
 800a844:	6078      	str	r0, [r7, #4]
 800a846:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800a848:	687b      	ldr	r3, [r7, #4]
 800a84a:	685b      	ldr	r3, [r3, #4]
 800a84c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800a84e:	683b      	ldr	r3, [r7, #0]
 800a850:	68fa      	ldr	r2, [r7, #12]
 800a852:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800a854:	68fb      	ldr	r3, [r7, #12]
 800a856:	689a      	ldr	r2, [r3, #8]
 800a858:	683b      	ldr	r3, [r7, #0]
 800a85a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800a85c:	68fb      	ldr	r3, [r7, #12]
 800a85e:	689b      	ldr	r3, [r3, #8]
 800a860:	683a      	ldr	r2, [r7, #0]
 800a862:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800a864:	68fb      	ldr	r3, [r7, #12]
 800a866:	683a      	ldr	r2, [r7, #0]
 800a868:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800a86a:	683b      	ldr	r3, [r7, #0]
 800a86c:	687a      	ldr	r2, [r7, #4]
 800a86e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800a870:	687b      	ldr	r3, [r7, #4]
 800a872:	681b      	ldr	r3, [r3, #0]
 800a874:	1c5a      	adds	r2, r3, #1
 800a876:	687b      	ldr	r3, [r7, #4]
 800a878:	601a      	str	r2, [r3, #0]
}
 800a87a:	bf00      	nop
 800a87c:	3714      	adds	r7, #20
 800a87e:	46bd      	mov	sp, r7
 800a880:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a884:	4770      	bx	lr

0800a886 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800a886:	b480      	push	{r7}
 800a888:	b085      	sub	sp, #20
 800a88a:	af00      	add	r7, sp, #0
 800a88c:	6078      	str	r0, [r7, #4]
 800a88e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800a890:	683b      	ldr	r3, [r7, #0]
 800a892:	681b      	ldr	r3, [r3, #0]
 800a894:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800a896:	68bb      	ldr	r3, [r7, #8]
 800a898:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a89c:	d103      	bne.n	800a8a6 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800a89e:	687b      	ldr	r3, [r7, #4]
 800a8a0:	691b      	ldr	r3, [r3, #16]
 800a8a2:	60fb      	str	r3, [r7, #12]
 800a8a4:	e00c      	b.n	800a8c0 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800a8a6:	687b      	ldr	r3, [r7, #4]
 800a8a8:	3308      	adds	r3, #8
 800a8aa:	60fb      	str	r3, [r7, #12]
 800a8ac:	e002      	b.n	800a8b4 <vListInsert+0x2e>
 800a8ae:	68fb      	ldr	r3, [r7, #12]
 800a8b0:	685b      	ldr	r3, [r3, #4]
 800a8b2:	60fb      	str	r3, [r7, #12]
 800a8b4:	68fb      	ldr	r3, [r7, #12]
 800a8b6:	685b      	ldr	r3, [r3, #4]
 800a8b8:	681b      	ldr	r3, [r3, #0]
 800a8ba:	68ba      	ldr	r2, [r7, #8]
 800a8bc:	429a      	cmp	r2, r3
 800a8be:	d2f6      	bcs.n	800a8ae <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800a8c0:	68fb      	ldr	r3, [r7, #12]
 800a8c2:	685a      	ldr	r2, [r3, #4]
 800a8c4:	683b      	ldr	r3, [r7, #0]
 800a8c6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800a8c8:	683b      	ldr	r3, [r7, #0]
 800a8ca:	685b      	ldr	r3, [r3, #4]
 800a8cc:	683a      	ldr	r2, [r7, #0]
 800a8ce:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800a8d0:	683b      	ldr	r3, [r7, #0]
 800a8d2:	68fa      	ldr	r2, [r7, #12]
 800a8d4:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800a8d6:	68fb      	ldr	r3, [r7, #12]
 800a8d8:	683a      	ldr	r2, [r7, #0]
 800a8da:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800a8dc:	683b      	ldr	r3, [r7, #0]
 800a8de:	687a      	ldr	r2, [r7, #4]
 800a8e0:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800a8e2:	687b      	ldr	r3, [r7, #4]
 800a8e4:	681b      	ldr	r3, [r3, #0]
 800a8e6:	1c5a      	adds	r2, r3, #1
 800a8e8:	687b      	ldr	r3, [r7, #4]
 800a8ea:	601a      	str	r2, [r3, #0]
}
 800a8ec:	bf00      	nop
 800a8ee:	3714      	adds	r7, #20
 800a8f0:	46bd      	mov	sp, r7
 800a8f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8f6:	4770      	bx	lr

0800a8f8 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800a8f8:	b480      	push	{r7}
 800a8fa:	b085      	sub	sp, #20
 800a8fc:	af00      	add	r7, sp, #0
 800a8fe:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800a900:	687b      	ldr	r3, [r7, #4]
 800a902:	691b      	ldr	r3, [r3, #16]
 800a904:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800a906:	687b      	ldr	r3, [r7, #4]
 800a908:	685b      	ldr	r3, [r3, #4]
 800a90a:	687a      	ldr	r2, [r7, #4]
 800a90c:	6892      	ldr	r2, [r2, #8]
 800a90e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800a910:	687b      	ldr	r3, [r7, #4]
 800a912:	689b      	ldr	r3, [r3, #8]
 800a914:	687a      	ldr	r2, [r7, #4]
 800a916:	6852      	ldr	r2, [r2, #4]
 800a918:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800a91a:	68fb      	ldr	r3, [r7, #12]
 800a91c:	685b      	ldr	r3, [r3, #4]
 800a91e:	687a      	ldr	r2, [r7, #4]
 800a920:	429a      	cmp	r2, r3
 800a922:	d103      	bne.n	800a92c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800a924:	687b      	ldr	r3, [r7, #4]
 800a926:	689a      	ldr	r2, [r3, #8]
 800a928:	68fb      	ldr	r3, [r7, #12]
 800a92a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800a92c:	687b      	ldr	r3, [r7, #4]
 800a92e:	2200      	movs	r2, #0
 800a930:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800a932:	68fb      	ldr	r3, [r7, #12]
 800a934:	681b      	ldr	r3, [r3, #0]
 800a936:	1e5a      	subs	r2, r3, #1
 800a938:	68fb      	ldr	r3, [r7, #12]
 800a93a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800a93c:	68fb      	ldr	r3, [r7, #12]
 800a93e:	681b      	ldr	r3, [r3, #0]
}
 800a940:	4618      	mov	r0, r3
 800a942:	3714      	adds	r7, #20
 800a944:	46bd      	mov	sp, r7
 800a946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a94a:	4770      	bx	lr

0800a94c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800a94c:	b580      	push	{r7, lr}
 800a94e:	b084      	sub	sp, #16
 800a950:	af00      	add	r7, sp, #0
 800a952:	6078      	str	r0, [r7, #4]
 800a954:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800a956:	687b      	ldr	r3, [r7, #4]
 800a958:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800a95a:	68fb      	ldr	r3, [r7, #12]
 800a95c:	2b00      	cmp	r3, #0
 800a95e:	d10a      	bne.n	800a976 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800a960:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a964:	f383 8811 	msr	BASEPRI, r3
 800a968:	f3bf 8f6f 	isb	sy
 800a96c:	f3bf 8f4f 	dsb	sy
 800a970:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800a972:	bf00      	nop
 800a974:	e7fe      	b.n	800a974 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800a976:	f002 f885 	bl	800ca84 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800a97a:	68fb      	ldr	r3, [r7, #12]
 800a97c:	681a      	ldr	r2, [r3, #0]
 800a97e:	68fb      	ldr	r3, [r7, #12]
 800a980:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a982:	68f9      	ldr	r1, [r7, #12]
 800a984:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800a986:	fb01 f303 	mul.w	r3, r1, r3
 800a98a:	441a      	add	r2, r3
 800a98c:	68fb      	ldr	r3, [r7, #12]
 800a98e:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800a990:	68fb      	ldr	r3, [r7, #12]
 800a992:	2200      	movs	r2, #0
 800a994:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800a996:	68fb      	ldr	r3, [r7, #12]
 800a998:	681a      	ldr	r2, [r3, #0]
 800a99a:	68fb      	ldr	r3, [r7, #12]
 800a99c:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800a99e:	68fb      	ldr	r3, [r7, #12]
 800a9a0:	681a      	ldr	r2, [r3, #0]
 800a9a2:	68fb      	ldr	r3, [r7, #12]
 800a9a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a9a6:	3b01      	subs	r3, #1
 800a9a8:	68f9      	ldr	r1, [r7, #12]
 800a9aa:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800a9ac:	fb01 f303 	mul.w	r3, r1, r3
 800a9b0:	441a      	add	r2, r3
 800a9b2:	68fb      	ldr	r3, [r7, #12]
 800a9b4:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800a9b6:	68fb      	ldr	r3, [r7, #12]
 800a9b8:	22ff      	movs	r2, #255	; 0xff
 800a9ba:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800a9be:	68fb      	ldr	r3, [r7, #12]
 800a9c0:	22ff      	movs	r2, #255	; 0xff
 800a9c2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800a9c6:	683b      	ldr	r3, [r7, #0]
 800a9c8:	2b00      	cmp	r3, #0
 800a9ca:	d114      	bne.n	800a9f6 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a9cc:	68fb      	ldr	r3, [r7, #12]
 800a9ce:	691b      	ldr	r3, [r3, #16]
 800a9d0:	2b00      	cmp	r3, #0
 800a9d2:	d01a      	beq.n	800aa0a <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a9d4:	68fb      	ldr	r3, [r7, #12]
 800a9d6:	3310      	adds	r3, #16
 800a9d8:	4618      	mov	r0, r3
 800a9da:	f001 f903 	bl	800bbe4 <xTaskRemoveFromEventList>
 800a9de:	4603      	mov	r3, r0
 800a9e0:	2b00      	cmp	r3, #0
 800a9e2:	d012      	beq.n	800aa0a <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800a9e4:	4b0c      	ldr	r3, [pc, #48]	; (800aa18 <xQueueGenericReset+0xcc>)
 800a9e6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a9ea:	601a      	str	r2, [r3, #0]
 800a9ec:	f3bf 8f4f 	dsb	sy
 800a9f0:	f3bf 8f6f 	isb	sy
 800a9f4:	e009      	b.n	800aa0a <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800a9f6:	68fb      	ldr	r3, [r7, #12]
 800a9f8:	3310      	adds	r3, #16
 800a9fa:	4618      	mov	r0, r3
 800a9fc:	f7ff fef2 	bl	800a7e4 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800aa00:	68fb      	ldr	r3, [r7, #12]
 800aa02:	3324      	adds	r3, #36	; 0x24
 800aa04:	4618      	mov	r0, r3
 800aa06:	f7ff feed 	bl	800a7e4 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800aa0a:	f002 f86b 	bl	800cae4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800aa0e:	2301      	movs	r3, #1
}
 800aa10:	4618      	mov	r0, r3
 800aa12:	3710      	adds	r7, #16
 800aa14:	46bd      	mov	sp, r7
 800aa16:	bd80      	pop	{r7, pc}
 800aa18:	e000ed04 	.word	0xe000ed04

0800aa1c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800aa1c:	b580      	push	{r7, lr}
 800aa1e:	b08e      	sub	sp, #56	; 0x38
 800aa20:	af02      	add	r7, sp, #8
 800aa22:	60f8      	str	r0, [r7, #12]
 800aa24:	60b9      	str	r1, [r7, #8]
 800aa26:	607a      	str	r2, [r7, #4]
 800aa28:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800aa2a:	68fb      	ldr	r3, [r7, #12]
 800aa2c:	2b00      	cmp	r3, #0
 800aa2e:	d10a      	bne.n	800aa46 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800aa30:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa34:	f383 8811 	msr	BASEPRI, r3
 800aa38:	f3bf 8f6f 	isb	sy
 800aa3c:	f3bf 8f4f 	dsb	sy
 800aa40:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800aa42:	bf00      	nop
 800aa44:	e7fe      	b.n	800aa44 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800aa46:	683b      	ldr	r3, [r7, #0]
 800aa48:	2b00      	cmp	r3, #0
 800aa4a:	d10a      	bne.n	800aa62 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800aa4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa50:	f383 8811 	msr	BASEPRI, r3
 800aa54:	f3bf 8f6f 	isb	sy
 800aa58:	f3bf 8f4f 	dsb	sy
 800aa5c:	627b      	str	r3, [r7, #36]	; 0x24
}
 800aa5e:	bf00      	nop
 800aa60:	e7fe      	b.n	800aa60 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800aa62:	687b      	ldr	r3, [r7, #4]
 800aa64:	2b00      	cmp	r3, #0
 800aa66:	d002      	beq.n	800aa6e <xQueueGenericCreateStatic+0x52>
 800aa68:	68bb      	ldr	r3, [r7, #8]
 800aa6a:	2b00      	cmp	r3, #0
 800aa6c:	d001      	beq.n	800aa72 <xQueueGenericCreateStatic+0x56>
 800aa6e:	2301      	movs	r3, #1
 800aa70:	e000      	b.n	800aa74 <xQueueGenericCreateStatic+0x58>
 800aa72:	2300      	movs	r3, #0
 800aa74:	2b00      	cmp	r3, #0
 800aa76:	d10a      	bne.n	800aa8e <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800aa78:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa7c:	f383 8811 	msr	BASEPRI, r3
 800aa80:	f3bf 8f6f 	isb	sy
 800aa84:	f3bf 8f4f 	dsb	sy
 800aa88:	623b      	str	r3, [r7, #32]
}
 800aa8a:	bf00      	nop
 800aa8c:	e7fe      	b.n	800aa8c <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800aa8e:	687b      	ldr	r3, [r7, #4]
 800aa90:	2b00      	cmp	r3, #0
 800aa92:	d102      	bne.n	800aa9a <xQueueGenericCreateStatic+0x7e>
 800aa94:	68bb      	ldr	r3, [r7, #8]
 800aa96:	2b00      	cmp	r3, #0
 800aa98:	d101      	bne.n	800aa9e <xQueueGenericCreateStatic+0x82>
 800aa9a:	2301      	movs	r3, #1
 800aa9c:	e000      	b.n	800aaa0 <xQueueGenericCreateStatic+0x84>
 800aa9e:	2300      	movs	r3, #0
 800aaa0:	2b00      	cmp	r3, #0
 800aaa2:	d10a      	bne.n	800aaba <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800aaa4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aaa8:	f383 8811 	msr	BASEPRI, r3
 800aaac:	f3bf 8f6f 	isb	sy
 800aab0:	f3bf 8f4f 	dsb	sy
 800aab4:	61fb      	str	r3, [r7, #28]
}
 800aab6:	bf00      	nop
 800aab8:	e7fe      	b.n	800aab8 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800aaba:	2350      	movs	r3, #80	; 0x50
 800aabc:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800aabe:	697b      	ldr	r3, [r7, #20]
 800aac0:	2b50      	cmp	r3, #80	; 0x50
 800aac2:	d00a      	beq.n	800aada <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800aac4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aac8:	f383 8811 	msr	BASEPRI, r3
 800aacc:	f3bf 8f6f 	isb	sy
 800aad0:	f3bf 8f4f 	dsb	sy
 800aad4:	61bb      	str	r3, [r7, #24]
}
 800aad6:	bf00      	nop
 800aad8:	e7fe      	b.n	800aad8 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800aada:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800aadc:	683b      	ldr	r3, [r7, #0]
 800aade:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800aae0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aae2:	2b00      	cmp	r3, #0
 800aae4:	d00d      	beq.n	800ab02 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800aae6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aae8:	2201      	movs	r2, #1
 800aaea:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800aaee:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800aaf2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aaf4:	9300      	str	r3, [sp, #0]
 800aaf6:	4613      	mov	r3, r2
 800aaf8:	687a      	ldr	r2, [r7, #4]
 800aafa:	68b9      	ldr	r1, [r7, #8]
 800aafc:	68f8      	ldr	r0, [r7, #12]
 800aafe:	f000 f805 	bl	800ab0c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800ab02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800ab04:	4618      	mov	r0, r3
 800ab06:	3730      	adds	r7, #48	; 0x30
 800ab08:	46bd      	mov	sp, r7
 800ab0a:	bd80      	pop	{r7, pc}

0800ab0c <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800ab0c:	b580      	push	{r7, lr}
 800ab0e:	b084      	sub	sp, #16
 800ab10:	af00      	add	r7, sp, #0
 800ab12:	60f8      	str	r0, [r7, #12]
 800ab14:	60b9      	str	r1, [r7, #8]
 800ab16:	607a      	str	r2, [r7, #4]
 800ab18:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800ab1a:	68bb      	ldr	r3, [r7, #8]
 800ab1c:	2b00      	cmp	r3, #0
 800ab1e:	d103      	bne.n	800ab28 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800ab20:	69bb      	ldr	r3, [r7, #24]
 800ab22:	69ba      	ldr	r2, [r7, #24]
 800ab24:	601a      	str	r2, [r3, #0]
 800ab26:	e002      	b.n	800ab2e <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800ab28:	69bb      	ldr	r3, [r7, #24]
 800ab2a:	687a      	ldr	r2, [r7, #4]
 800ab2c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800ab2e:	69bb      	ldr	r3, [r7, #24]
 800ab30:	68fa      	ldr	r2, [r7, #12]
 800ab32:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800ab34:	69bb      	ldr	r3, [r7, #24]
 800ab36:	68ba      	ldr	r2, [r7, #8]
 800ab38:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800ab3a:	2101      	movs	r1, #1
 800ab3c:	69b8      	ldr	r0, [r7, #24]
 800ab3e:	f7ff ff05 	bl	800a94c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800ab42:	69bb      	ldr	r3, [r7, #24]
 800ab44:	78fa      	ldrb	r2, [r7, #3]
 800ab46:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800ab4a:	bf00      	nop
 800ab4c:	3710      	adds	r7, #16
 800ab4e:	46bd      	mov	sp, r7
 800ab50:	bd80      	pop	{r7, pc}
	...

0800ab54 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800ab54:	b580      	push	{r7, lr}
 800ab56:	b08e      	sub	sp, #56	; 0x38
 800ab58:	af00      	add	r7, sp, #0
 800ab5a:	60f8      	str	r0, [r7, #12]
 800ab5c:	60b9      	str	r1, [r7, #8]
 800ab5e:	607a      	str	r2, [r7, #4]
 800ab60:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800ab62:	2300      	movs	r3, #0
 800ab64:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800ab66:	68fb      	ldr	r3, [r7, #12]
 800ab68:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800ab6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab6c:	2b00      	cmp	r3, #0
 800ab6e:	d10a      	bne.n	800ab86 <xQueueGenericSend+0x32>
	__asm volatile
 800ab70:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ab74:	f383 8811 	msr	BASEPRI, r3
 800ab78:	f3bf 8f6f 	isb	sy
 800ab7c:	f3bf 8f4f 	dsb	sy
 800ab80:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800ab82:	bf00      	nop
 800ab84:	e7fe      	b.n	800ab84 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800ab86:	68bb      	ldr	r3, [r7, #8]
 800ab88:	2b00      	cmp	r3, #0
 800ab8a:	d103      	bne.n	800ab94 <xQueueGenericSend+0x40>
 800ab8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ab90:	2b00      	cmp	r3, #0
 800ab92:	d101      	bne.n	800ab98 <xQueueGenericSend+0x44>
 800ab94:	2301      	movs	r3, #1
 800ab96:	e000      	b.n	800ab9a <xQueueGenericSend+0x46>
 800ab98:	2300      	movs	r3, #0
 800ab9a:	2b00      	cmp	r3, #0
 800ab9c:	d10a      	bne.n	800abb4 <xQueueGenericSend+0x60>
	__asm volatile
 800ab9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aba2:	f383 8811 	msr	BASEPRI, r3
 800aba6:	f3bf 8f6f 	isb	sy
 800abaa:	f3bf 8f4f 	dsb	sy
 800abae:	627b      	str	r3, [r7, #36]	; 0x24
}
 800abb0:	bf00      	nop
 800abb2:	e7fe      	b.n	800abb2 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800abb4:	683b      	ldr	r3, [r7, #0]
 800abb6:	2b02      	cmp	r3, #2
 800abb8:	d103      	bne.n	800abc2 <xQueueGenericSend+0x6e>
 800abba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800abbc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800abbe:	2b01      	cmp	r3, #1
 800abc0:	d101      	bne.n	800abc6 <xQueueGenericSend+0x72>
 800abc2:	2301      	movs	r3, #1
 800abc4:	e000      	b.n	800abc8 <xQueueGenericSend+0x74>
 800abc6:	2300      	movs	r3, #0
 800abc8:	2b00      	cmp	r3, #0
 800abca:	d10a      	bne.n	800abe2 <xQueueGenericSend+0x8e>
	__asm volatile
 800abcc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800abd0:	f383 8811 	msr	BASEPRI, r3
 800abd4:	f3bf 8f6f 	isb	sy
 800abd8:	f3bf 8f4f 	dsb	sy
 800abdc:	623b      	str	r3, [r7, #32]
}
 800abde:	bf00      	nop
 800abe0:	e7fe      	b.n	800abe0 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800abe2:	f001 f9f5 	bl	800bfd0 <xTaskGetSchedulerState>
 800abe6:	4603      	mov	r3, r0
 800abe8:	2b00      	cmp	r3, #0
 800abea:	d102      	bne.n	800abf2 <xQueueGenericSend+0x9e>
 800abec:	687b      	ldr	r3, [r7, #4]
 800abee:	2b00      	cmp	r3, #0
 800abf0:	d101      	bne.n	800abf6 <xQueueGenericSend+0xa2>
 800abf2:	2301      	movs	r3, #1
 800abf4:	e000      	b.n	800abf8 <xQueueGenericSend+0xa4>
 800abf6:	2300      	movs	r3, #0
 800abf8:	2b00      	cmp	r3, #0
 800abfa:	d10a      	bne.n	800ac12 <xQueueGenericSend+0xbe>
	__asm volatile
 800abfc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac00:	f383 8811 	msr	BASEPRI, r3
 800ac04:	f3bf 8f6f 	isb	sy
 800ac08:	f3bf 8f4f 	dsb	sy
 800ac0c:	61fb      	str	r3, [r7, #28]
}
 800ac0e:	bf00      	nop
 800ac10:	e7fe      	b.n	800ac10 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800ac12:	f001 ff37 	bl	800ca84 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800ac16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac18:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ac1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac1c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ac1e:	429a      	cmp	r2, r3
 800ac20:	d302      	bcc.n	800ac28 <xQueueGenericSend+0xd4>
 800ac22:	683b      	ldr	r3, [r7, #0]
 800ac24:	2b02      	cmp	r3, #2
 800ac26:	d129      	bne.n	800ac7c <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800ac28:	683a      	ldr	r2, [r7, #0]
 800ac2a:	68b9      	ldr	r1, [r7, #8]
 800ac2c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ac2e:	f000 fa0b 	bl	800b048 <prvCopyDataToQueue>
 800ac32:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800ac34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ac38:	2b00      	cmp	r3, #0
 800ac3a:	d010      	beq.n	800ac5e <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800ac3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac3e:	3324      	adds	r3, #36	; 0x24
 800ac40:	4618      	mov	r0, r3
 800ac42:	f000 ffcf 	bl	800bbe4 <xTaskRemoveFromEventList>
 800ac46:	4603      	mov	r3, r0
 800ac48:	2b00      	cmp	r3, #0
 800ac4a:	d013      	beq.n	800ac74 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800ac4c:	4b3f      	ldr	r3, [pc, #252]	; (800ad4c <xQueueGenericSend+0x1f8>)
 800ac4e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ac52:	601a      	str	r2, [r3, #0]
 800ac54:	f3bf 8f4f 	dsb	sy
 800ac58:	f3bf 8f6f 	isb	sy
 800ac5c:	e00a      	b.n	800ac74 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800ac5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ac60:	2b00      	cmp	r3, #0
 800ac62:	d007      	beq.n	800ac74 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800ac64:	4b39      	ldr	r3, [pc, #228]	; (800ad4c <xQueueGenericSend+0x1f8>)
 800ac66:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ac6a:	601a      	str	r2, [r3, #0]
 800ac6c:	f3bf 8f4f 	dsb	sy
 800ac70:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800ac74:	f001 ff36 	bl	800cae4 <vPortExitCritical>
				return pdPASS;
 800ac78:	2301      	movs	r3, #1
 800ac7a:	e063      	b.n	800ad44 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800ac7c:	687b      	ldr	r3, [r7, #4]
 800ac7e:	2b00      	cmp	r3, #0
 800ac80:	d103      	bne.n	800ac8a <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800ac82:	f001 ff2f 	bl	800cae4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800ac86:	2300      	movs	r3, #0
 800ac88:	e05c      	b.n	800ad44 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800ac8a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ac8c:	2b00      	cmp	r3, #0
 800ac8e:	d106      	bne.n	800ac9e <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800ac90:	f107 0314 	add.w	r3, r7, #20
 800ac94:	4618      	mov	r0, r3
 800ac96:	f001 f809 	bl	800bcac <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800ac9a:	2301      	movs	r3, #1
 800ac9c:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800ac9e:	f001 ff21 	bl	800cae4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800aca2:	f000 fd7b 	bl	800b79c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800aca6:	f001 feed 	bl	800ca84 <vPortEnterCritical>
 800acaa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800acac:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800acb0:	b25b      	sxtb	r3, r3
 800acb2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800acb6:	d103      	bne.n	800acc0 <xQueueGenericSend+0x16c>
 800acb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800acba:	2200      	movs	r2, #0
 800acbc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800acc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800acc2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800acc6:	b25b      	sxtb	r3, r3
 800acc8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800accc:	d103      	bne.n	800acd6 <xQueueGenericSend+0x182>
 800acce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800acd0:	2200      	movs	r2, #0
 800acd2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800acd6:	f001 ff05 	bl	800cae4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800acda:	1d3a      	adds	r2, r7, #4
 800acdc:	f107 0314 	add.w	r3, r7, #20
 800ace0:	4611      	mov	r1, r2
 800ace2:	4618      	mov	r0, r3
 800ace4:	f000 fff8 	bl	800bcd8 <xTaskCheckForTimeOut>
 800ace8:	4603      	mov	r3, r0
 800acea:	2b00      	cmp	r3, #0
 800acec:	d124      	bne.n	800ad38 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800acee:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800acf0:	f000 faa2 	bl	800b238 <prvIsQueueFull>
 800acf4:	4603      	mov	r3, r0
 800acf6:	2b00      	cmp	r3, #0
 800acf8:	d018      	beq.n	800ad2c <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800acfa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800acfc:	3310      	adds	r3, #16
 800acfe:	687a      	ldr	r2, [r7, #4]
 800ad00:	4611      	mov	r1, r2
 800ad02:	4618      	mov	r0, r3
 800ad04:	f000 ff1e 	bl	800bb44 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800ad08:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ad0a:	f000 fa2d 	bl	800b168 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800ad0e:	f000 fd53 	bl	800b7b8 <xTaskResumeAll>
 800ad12:	4603      	mov	r3, r0
 800ad14:	2b00      	cmp	r3, #0
 800ad16:	f47f af7c 	bne.w	800ac12 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800ad1a:	4b0c      	ldr	r3, [pc, #48]	; (800ad4c <xQueueGenericSend+0x1f8>)
 800ad1c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ad20:	601a      	str	r2, [r3, #0]
 800ad22:	f3bf 8f4f 	dsb	sy
 800ad26:	f3bf 8f6f 	isb	sy
 800ad2a:	e772      	b.n	800ac12 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800ad2c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ad2e:	f000 fa1b 	bl	800b168 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800ad32:	f000 fd41 	bl	800b7b8 <xTaskResumeAll>
 800ad36:	e76c      	b.n	800ac12 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800ad38:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ad3a:	f000 fa15 	bl	800b168 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800ad3e:	f000 fd3b 	bl	800b7b8 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800ad42:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800ad44:	4618      	mov	r0, r3
 800ad46:	3738      	adds	r7, #56	; 0x38
 800ad48:	46bd      	mov	sp, r7
 800ad4a:	bd80      	pop	{r7, pc}
 800ad4c:	e000ed04 	.word	0xe000ed04

0800ad50 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800ad50:	b580      	push	{r7, lr}
 800ad52:	b090      	sub	sp, #64	; 0x40
 800ad54:	af00      	add	r7, sp, #0
 800ad56:	60f8      	str	r0, [r7, #12]
 800ad58:	60b9      	str	r1, [r7, #8]
 800ad5a:	607a      	str	r2, [r7, #4]
 800ad5c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800ad5e:	68fb      	ldr	r3, [r7, #12]
 800ad60:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800ad62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ad64:	2b00      	cmp	r3, #0
 800ad66:	d10a      	bne.n	800ad7e <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800ad68:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad6c:	f383 8811 	msr	BASEPRI, r3
 800ad70:	f3bf 8f6f 	isb	sy
 800ad74:	f3bf 8f4f 	dsb	sy
 800ad78:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800ad7a:	bf00      	nop
 800ad7c:	e7fe      	b.n	800ad7c <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800ad7e:	68bb      	ldr	r3, [r7, #8]
 800ad80:	2b00      	cmp	r3, #0
 800ad82:	d103      	bne.n	800ad8c <xQueueGenericSendFromISR+0x3c>
 800ad84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ad86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ad88:	2b00      	cmp	r3, #0
 800ad8a:	d101      	bne.n	800ad90 <xQueueGenericSendFromISR+0x40>
 800ad8c:	2301      	movs	r3, #1
 800ad8e:	e000      	b.n	800ad92 <xQueueGenericSendFromISR+0x42>
 800ad90:	2300      	movs	r3, #0
 800ad92:	2b00      	cmp	r3, #0
 800ad94:	d10a      	bne.n	800adac <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800ad96:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad9a:	f383 8811 	msr	BASEPRI, r3
 800ad9e:	f3bf 8f6f 	isb	sy
 800ada2:	f3bf 8f4f 	dsb	sy
 800ada6:	627b      	str	r3, [r7, #36]	; 0x24
}
 800ada8:	bf00      	nop
 800adaa:	e7fe      	b.n	800adaa <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800adac:	683b      	ldr	r3, [r7, #0]
 800adae:	2b02      	cmp	r3, #2
 800adb0:	d103      	bne.n	800adba <xQueueGenericSendFromISR+0x6a>
 800adb2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800adb4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800adb6:	2b01      	cmp	r3, #1
 800adb8:	d101      	bne.n	800adbe <xQueueGenericSendFromISR+0x6e>
 800adba:	2301      	movs	r3, #1
 800adbc:	e000      	b.n	800adc0 <xQueueGenericSendFromISR+0x70>
 800adbe:	2300      	movs	r3, #0
 800adc0:	2b00      	cmp	r3, #0
 800adc2:	d10a      	bne.n	800adda <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800adc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800adc8:	f383 8811 	msr	BASEPRI, r3
 800adcc:	f3bf 8f6f 	isb	sy
 800add0:	f3bf 8f4f 	dsb	sy
 800add4:	623b      	str	r3, [r7, #32]
}
 800add6:	bf00      	nop
 800add8:	e7fe      	b.n	800add8 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800adda:	f001 ff35 	bl	800cc48 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800adde:	f3ef 8211 	mrs	r2, BASEPRI
 800ade2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ade6:	f383 8811 	msr	BASEPRI, r3
 800adea:	f3bf 8f6f 	isb	sy
 800adee:	f3bf 8f4f 	dsb	sy
 800adf2:	61fa      	str	r2, [r7, #28]
 800adf4:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800adf6:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800adf8:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800adfa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800adfc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800adfe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ae00:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ae02:	429a      	cmp	r2, r3
 800ae04:	d302      	bcc.n	800ae0c <xQueueGenericSendFromISR+0xbc>
 800ae06:	683b      	ldr	r3, [r7, #0]
 800ae08:	2b02      	cmp	r3, #2
 800ae0a:	d12f      	bne.n	800ae6c <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800ae0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ae0e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800ae12:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800ae16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ae18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ae1a:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800ae1c:	683a      	ldr	r2, [r7, #0]
 800ae1e:	68b9      	ldr	r1, [r7, #8]
 800ae20:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800ae22:	f000 f911 	bl	800b048 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800ae26:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800ae2a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ae2e:	d112      	bne.n	800ae56 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800ae30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ae32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ae34:	2b00      	cmp	r3, #0
 800ae36:	d016      	beq.n	800ae66 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800ae38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ae3a:	3324      	adds	r3, #36	; 0x24
 800ae3c:	4618      	mov	r0, r3
 800ae3e:	f000 fed1 	bl	800bbe4 <xTaskRemoveFromEventList>
 800ae42:	4603      	mov	r3, r0
 800ae44:	2b00      	cmp	r3, #0
 800ae46:	d00e      	beq.n	800ae66 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800ae48:	687b      	ldr	r3, [r7, #4]
 800ae4a:	2b00      	cmp	r3, #0
 800ae4c:	d00b      	beq.n	800ae66 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800ae4e:	687b      	ldr	r3, [r7, #4]
 800ae50:	2201      	movs	r2, #1
 800ae52:	601a      	str	r2, [r3, #0]
 800ae54:	e007      	b.n	800ae66 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800ae56:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800ae5a:	3301      	adds	r3, #1
 800ae5c:	b2db      	uxtb	r3, r3
 800ae5e:	b25a      	sxtb	r2, r3
 800ae60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ae62:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800ae66:	2301      	movs	r3, #1
 800ae68:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800ae6a:	e001      	b.n	800ae70 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800ae6c:	2300      	movs	r3, #0
 800ae6e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ae70:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ae72:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800ae74:	697b      	ldr	r3, [r7, #20]
 800ae76:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800ae7a:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800ae7c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800ae7e:	4618      	mov	r0, r3
 800ae80:	3740      	adds	r7, #64	; 0x40
 800ae82:	46bd      	mov	sp, r7
 800ae84:	bd80      	pop	{r7, pc}
	...

0800ae88 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800ae88:	b580      	push	{r7, lr}
 800ae8a:	b08c      	sub	sp, #48	; 0x30
 800ae8c:	af00      	add	r7, sp, #0
 800ae8e:	60f8      	str	r0, [r7, #12]
 800ae90:	60b9      	str	r1, [r7, #8]
 800ae92:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800ae94:	2300      	movs	r3, #0
 800ae96:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800ae98:	68fb      	ldr	r3, [r7, #12]
 800ae9a:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800ae9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ae9e:	2b00      	cmp	r3, #0
 800aea0:	d10a      	bne.n	800aeb8 <xQueueReceive+0x30>
	__asm volatile
 800aea2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aea6:	f383 8811 	msr	BASEPRI, r3
 800aeaa:	f3bf 8f6f 	isb	sy
 800aeae:	f3bf 8f4f 	dsb	sy
 800aeb2:	623b      	str	r3, [r7, #32]
}
 800aeb4:	bf00      	nop
 800aeb6:	e7fe      	b.n	800aeb6 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800aeb8:	68bb      	ldr	r3, [r7, #8]
 800aeba:	2b00      	cmp	r3, #0
 800aebc:	d103      	bne.n	800aec6 <xQueueReceive+0x3e>
 800aebe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aec0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aec2:	2b00      	cmp	r3, #0
 800aec4:	d101      	bne.n	800aeca <xQueueReceive+0x42>
 800aec6:	2301      	movs	r3, #1
 800aec8:	e000      	b.n	800aecc <xQueueReceive+0x44>
 800aeca:	2300      	movs	r3, #0
 800aecc:	2b00      	cmp	r3, #0
 800aece:	d10a      	bne.n	800aee6 <xQueueReceive+0x5e>
	__asm volatile
 800aed0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aed4:	f383 8811 	msr	BASEPRI, r3
 800aed8:	f3bf 8f6f 	isb	sy
 800aedc:	f3bf 8f4f 	dsb	sy
 800aee0:	61fb      	str	r3, [r7, #28]
}
 800aee2:	bf00      	nop
 800aee4:	e7fe      	b.n	800aee4 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800aee6:	f001 f873 	bl	800bfd0 <xTaskGetSchedulerState>
 800aeea:	4603      	mov	r3, r0
 800aeec:	2b00      	cmp	r3, #0
 800aeee:	d102      	bne.n	800aef6 <xQueueReceive+0x6e>
 800aef0:	687b      	ldr	r3, [r7, #4]
 800aef2:	2b00      	cmp	r3, #0
 800aef4:	d101      	bne.n	800aefa <xQueueReceive+0x72>
 800aef6:	2301      	movs	r3, #1
 800aef8:	e000      	b.n	800aefc <xQueueReceive+0x74>
 800aefa:	2300      	movs	r3, #0
 800aefc:	2b00      	cmp	r3, #0
 800aefe:	d10a      	bne.n	800af16 <xQueueReceive+0x8e>
	__asm volatile
 800af00:	f04f 0350 	mov.w	r3, #80	; 0x50
 800af04:	f383 8811 	msr	BASEPRI, r3
 800af08:	f3bf 8f6f 	isb	sy
 800af0c:	f3bf 8f4f 	dsb	sy
 800af10:	61bb      	str	r3, [r7, #24]
}
 800af12:	bf00      	nop
 800af14:	e7fe      	b.n	800af14 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800af16:	f001 fdb5 	bl	800ca84 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800af1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800af1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800af1e:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800af20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af22:	2b00      	cmp	r3, #0
 800af24:	d01f      	beq.n	800af66 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800af26:	68b9      	ldr	r1, [r7, #8]
 800af28:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800af2a:	f000 f8f7 	bl	800b11c <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800af2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af30:	1e5a      	subs	r2, r3, #1
 800af32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800af34:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800af36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800af38:	691b      	ldr	r3, [r3, #16]
 800af3a:	2b00      	cmp	r3, #0
 800af3c:	d00f      	beq.n	800af5e <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800af3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800af40:	3310      	adds	r3, #16
 800af42:	4618      	mov	r0, r3
 800af44:	f000 fe4e 	bl	800bbe4 <xTaskRemoveFromEventList>
 800af48:	4603      	mov	r3, r0
 800af4a:	2b00      	cmp	r3, #0
 800af4c:	d007      	beq.n	800af5e <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800af4e:	4b3d      	ldr	r3, [pc, #244]	; (800b044 <xQueueReceive+0x1bc>)
 800af50:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800af54:	601a      	str	r2, [r3, #0]
 800af56:	f3bf 8f4f 	dsb	sy
 800af5a:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800af5e:	f001 fdc1 	bl	800cae4 <vPortExitCritical>
				return pdPASS;
 800af62:	2301      	movs	r3, #1
 800af64:	e069      	b.n	800b03a <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800af66:	687b      	ldr	r3, [r7, #4]
 800af68:	2b00      	cmp	r3, #0
 800af6a:	d103      	bne.n	800af74 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800af6c:	f001 fdba 	bl	800cae4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800af70:	2300      	movs	r3, #0
 800af72:	e062      	b.n	800b03a <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800af74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800af76:	2b00      	cmp	r3, #0
 800af78:	d106      	bne.n	800af88 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800af7a:	f107 0310 	add.w	r3, r7, #16
 800af7e:	4618      	mov	r0, r3
 800af80:	f000 fe94 	bl	800bcac <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800af84:	2301      	movs	r3, #1
 800af86:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800af88:	f001 fdac 	bl	800cae4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800af8c:	f000 fc06 	bl	800b79c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800af90:	f001 fd78 	bl	800ca84 <vPortEnterCritical>
 800af94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800af96:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800af9a:	b25b      	sxtb	r3, r3
 800af9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800afa0:	d103      	bne.n	800afaa <xQueueReceive+0x122>
 800afa2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800afa4:	2200      	movs	r2, #0
 800afa6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800afaa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800afac:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800afb0:	b25b      	sxtb	r3, r3
 800afb2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800afb6:	d103      	bne.n	800afc0 <xQueueReceive+0x138>
 800afb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800afba:	2200      	movs	r2, #0
 800afbc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800afc0:	f001 fd90 	bl	800cae4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800afc4:	1d3a      	adds	r2, r7, #4
 800afc6:	f107 0310 	add.w	r3, r7, #16
 800afca:	4611      	mov	r1, r2
 800afcc:	4618      	mov	r0, r3
 800afce:	f000 fe83 	bl	800bcd8 <xTaskCheckForTimeOut>
 800afd2:	4603      	mov	r3, r0
 800afd4:	2b00      	cmp	r3, #0
 800afd6:	d123      	bne.n	800b020 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800afd8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800afda:	f000 f917 	bl	800b20c <prvIsQueueEmpty>
 800afde:	4603      	mov	r3, r0
 800afe0:	2b00      	cmp	r3, #0
 800afe2:	d017      	beq.n	800b014 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800afe4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800afe6:	3324      	adds	r3, #36	; 0x24
 800afe8:	687a      	ldr	r2, [r7, #4]
 800afea:	4611      	mov	r1, r2
 800afec:	4618      	mov	r0, r3
 800afee:	f000 fda9 	bl	800bb44 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800aff2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800aff4:	f000 f8b8 	bl	800b168 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800aff8:	f000 fbde 	bl	800b7b8 <xTaskResumeAll>
 800affc:	4603      	mov	r3, r0
 800affe:	2b00      	cmp	r3, #0
 800b000:	d189      	bne.n	800af16 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800b002:	4b10      	ldr	r3, [pc, #64]	; (800b044 <xQueueReceive+0x1bc>)
 800b004:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b008:	601a      	str	r2, [r3, #0]
 800b00a:	f3bf 8f4f 	dsb	sy
 800b00e:	f3bf 8f6f 	isb	sy
 800b012:	e780      	b.n	800af16 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800b014:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b016:	f000 f8a7 	bl	800b168 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800b01a:	f000 fbcd 	bl	800b7b8 <xTaskResumeAll>
 800b01e:	e77a      	b.n	800af16 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800b020:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b022:	f000 f8a1 	bl	800b168 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800b026:	f000 fbc7 	bl	800b7b8 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800b02a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b02c:	f000 f8ee 	bl	800b20c <prvIsQueueEmpty>
 800b030:	4603      	mov	r3, r0
 800b032:	2b00      	cmp	r3, #0
 800b034:	f43f af6f 	beq.w	800af16 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800b038:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800b03a:	4618      	mov	r0, r3
 800b03c:	3730      	adds	r7, #48	; 0x30
 800b03e:	46bd      	mov	sp, r7
 800b040:	bd80      	pop	{r7, pc}
 800b042:	bf00      	nop
 800b044:	e000ed04 	.word	0xe000ed04

0800b048 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800b048:	b580      	push	{r7, lr}
 800b04a:	b086      	sub	sp, #24
 800b04c:	af00      	add	r7, sp, #0
 800b04e:	60f8      	str	r0, [r7, #12]
 800b050:	60b9      	str	r1, [r7, #8]
 800b052:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800b054:	2300      	movs	r3, #0
 800b056:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800b058:	68fb      	ldr	r3, [r7, #12]
 800b05a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b05c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800b05e:	68fb      	ldr	r3, [r7, #12]
 800b060:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b062:	2b00      	cmp	r3, #0
 800b064:	d10d      	bne.n	800b082 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800b066:	68fb      	ldr	r3, [r7, #12]
 800b068:	681b      	ldr	r3, [r3, #0]
 800b06a:	2b00      	cmp	r3, #0
 800b06c:	d14d      	bne.n	800b10a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800b06e:	68fb      	ldr	r3, [r7, #12]
 800b070:	689b      	ldr	r3, [r3, #8]
 800b072:	4618      	mov	r0, r3
 800b074:	f000 ffca 	bl	800c00c <xTaskPriorityDisinherit>
 800b078:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800b07a:	68fb      	ldr	r3, [r7, #12]
 800b07c:	2200      	movs	r2, #0
 800b07e:	609a      	str	r2, [r3, #8]
 800b080:	e043      	b.n	800b10a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800b082:	687b      	ldr	r3, [r7, #4]
 800b084:	2b00      	cmp	r3, #0
 800b086:	d119      	bne.n	800b0bc <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800b088:	68fb      	ldr	r3, [r7, #12]
 800b08a:	6858      	ldr	r0, [r3, #4]
 800b08c:	68fb      	ldr	r3, [r7, #12]
 800b08e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b090:	461a      	mov	r2, r3
 800b092:	68b9      	ldr	r1, [r7, #8]
 800b094:	f002 fa3c 	bl	800d510 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800b098:	68fb      	ldr	r3, [r7, #12]
 800b09a:	685a      	ldr	r2, [r3, #4]
 800b09c:	68fb      	ldr	r3, [r7, #12]
 800b09e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b0a0:	441a      	add	r2, r3
 800b0a2:	68fb      	ldr	r3, [r7, #12]
 800b0a4:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800b0a6:	68fb      	ldr	r3, [r7, #12]
 800b0a8:	685a      	ldr	r2, [r3, #4]
 800b0aa:	68fb      	ldr	r3, [r7, #12]
 800b0ac:	689b      	ldr	r3, [r3, #8]
 800b0ae:	429a      	cmp	r2, r3
 800b0b0:	d32b      	bcc.n	800b10a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800b0b2:	68fb      	ldr	r3, [r7, #12]
 800b0b4:	681a      	ldr	r2, [r3, #0]
 800b0b6:	68fb      	ldr	r3, [r7, #12]
 800b0b8:	605a      	str	r2, [r3, #4]
 800b0ba:	e026      	b.n	800b10a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800b0bc:	68fb      	ldr	r3, [r7, #12]
 800b0be:	68d8      	ldr	r0, [r3, #12]
 800b0c0:	68fb      	ldr	r3, [r7, #12]
 800b0c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b0c4:	461a      	mov	r2, r3
 800b0c6:	68b9      	ldr	r1, [r7, #8]
 800b0c8:	f002 fa22 	bl	800d510 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800b0cc:	68fb      	ldr	r3, [r7, #12]
 800b0ce:	68da      	ldr	r2, [r3, #12]
 800b0d0:	68fb      	ldr	r3, [r7, #12]
 800b0d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b0d4:	425b      	negs	r3, r3
 800b0d6:	441a      	add	r2, r3
 800b0d8:	68fb      	ldr	r3, [r7, #12]
 800b0da:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800b0dc:	68fb      	ldr	r3, [r7, #12]
 800b0de:	68da      	ldr	r2, [r3, #12]
 800b0e0:	68fb      	ldr	r3, [r7, #12]
 800b0e2:	681b      	ldr	r3, [r3, #0]
 800b0e4:	429a      	cmp	r2, r3
 800b0e6:	d207      	bcs.n	800b0f8 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800b0e8:	68fb      	ldr	r3, [r7, #12]
 800b0ea:	689a      	ldr	r2, [r3, #8]
 800b0ec:	68fb      	ldr	r3, [r7, #12]
 800b0ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b0f0:	425b      	negs	r3, r3
 800b0f2:	441a      	add	r2, r3
 800b0f4:	68fb      	ldr	r3, [r7, #12]
 800b0f6:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800b0f8:	687b      	ldr	r3, [r7, #4]
 800b0fa:	2b02      	cmp	r3, #2
 800b0fc:	d105      	bne.n	800b10a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800b0fe:	693b      	ldr	r3, [r7, #16]
 800b100:	2b00      	cmp	r3, #0
 800b102:	d002      	beq.n	800b10a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800b104:	693b      	ldr	r3, [r7, #16]
 800b106:	3b01      	subs	r3, #1
 800b108:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800b10a:	693b      	ldr	r3, [r7, #16]
 800b10c:	1c5a      	adds	r2, r3, #1
 800b10e:	68fb      	ldr	r3, [r7, #12]
 800b110:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800b112:	697b      	ldr	r3, [r7, #20]
}
 800b114:	4618      	mov	r0, r3
 800b116:	3718      	adds	r7, #24
 800b118:	46bd      	mov	sp, r7
 800b11a:	bd80      	pop	{r7, pc}

0800b11c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800b11c:	b580      	push	{r7, lr}
 800b11e:	b082      	sub	sp, #8
 800b120:	af00      	add	r7, sp, #0
 800b122:	6078      	str	r0, [r7, #4]
 800b124:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800b126:	687b      	ldr	r3, [r7, #4]
 800b128:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b12a:	2b00      	cmp	r3, #0
 800b12c:	d018      	beq.n	800b160 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800b12e:	687b      	ldr	r3, [r7, #4]
 800b130:	68da      	ldr	r2, [r3, #12]
 800b132:	687b      	ldr	r3, [r7, #4]
 800b134:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b136:	441a      	add	r2, r3
 800b138:	687b      	ldr	r3, [r7, #4]
 800b13a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800b13c:	687b      	ldr	r3, [r7, #4]
 800b13e:	68da      	ldr	r2, [r3, #12]
 800b140:	687b      	ldr	r3, [r7, #4]
 800b142:	689b      	ldr	r3, [r3, #8]
 800b144:	429a      	cmp	r2, r3
 800b146:	d303      	bcc.n	800b150 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800b148:	687b      	ldr	r3, [r7, #4]
 800b14a:	681a      	ldr	r2, [r3, #0]
 800b14c:	687b      	ldr	r3, [r7, #4]
 800b14e:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800b150:	687b      	ldr	r3, [r7, #4]
 800b152:	68d9      	ldr	r1, [r3, #12]
 800b154:	687b      	ldr	r3, [r7, #4]
 800b156:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b158:	461a      	mov	r2, r3
 800b15a:	6838      	ldr	r0, [r7, #0]
 800b15c:	f002 f9d8 	bl	800d510 <memcpy>
	}
}
 800b160:	bf00      	nop
 800b162:	3708      	adds	r7, #8
 800b164:	46bd      	mov	sp, r7
 800b166:	bd80      	pop	{r7, pc}

0800b168 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800b168:	b580      	push	{r7, lr}
 800b16a:	b084      	sub	sp, #16
 800b16c:	af00      	add	r7, sp, #0
 800b16e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800b170:	f001 fc88 	bl	800ca84 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800b174:	687b      	ldr	r3, [r7, #4]
 800b176:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b17a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800b17c:	e011      	b.n	800b1a2 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800b17e:	687b      	ldr	r3, [r7, #4]
 800b180:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b182:	2b00      	cmp	r3, #0
 800b184:	d012      	beq.n	800b1ac <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800b186:	687b      	ldr	r3, [r7, #4]
 800b188:	3324      	adds	r3, #36	; 0x24
 800b18a:	4618      	mov	r0, r3
 800b18c:	f000 fd2a 	bl	800bbe4 <xTaskRemoveFromEventList>
 800b190:	4603      	mov	r3, r0
 800b192:	2b00      	cmp	r3, #0
 800b194:	d001      	beq.n	800b19a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800b196:	f000 fe01 	bl	800bd9c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800b19a:	7bfb      	ldrb	r3, [r7, #15]
 800b19c:	3b01      	subs	r3, #1
 800b19e:	b2db      	uxtb	r3, r3
 800b1a0:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800b1a2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b1a6:	2b00      	cmp	r3, #0
 800b1a8:	dce9      	bgt.n	800b17e <prvUnlockQueue+0x16>
 800b1aa:	e000      	b.n	800b1ae <prvUnlockQueue+0x46>
					break;
 800b1ac:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800b1ae:	687b      	ldr	r3, [r7, #4]
 800b1b0:	22ff      	movs	r2, #255	; 0xff
 800b1b2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800b1b6:	f001 fc95 	bl	800cae4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800b1ba:	f001 fc63 	bl	800ca84 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800b1be:	687b      	ldr	r3, [r7, #4]
 800b1c0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800b1c4:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800b1c6:	e011      	b.n	800b1ec <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b1c8:	687b      	ldr	r3, [r7, #4]
 800b1ca:	691b      	ldr	r3, [r3, #16]
 800b1cc:	2b00      	cmp	r3, #0
 800b1ce:	d012      	beq.n	800b1f6 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b1d0:	687b      	ldr	r3, [r7, #4]
 800b1d2:	3310      	adds	r3, #16
 800b1d4:	4618      	mov	r0, r3
 800b1d6:	f000 fd05 	bl	800bbe4 <xTaskRemoveFromEventList>
 800b1da:	4603      	mov	r3, r0
 800b1dc:	2b00      	cmp	r3, #0
 800b1de:	d001      	beq.n	800b1e4 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800b1e0:	f000 fddc 	bl	800bd9c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800b1e4:	7bbb      	ldrb	r3, [r7, #14]
 800b1e6:	3b01      	subs	r3, #1
 800b1e8:	b2db      	uxtb	r3, r3
 800b1ea:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800b1ec:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b1f0:	2b00      	cmp	r3, #0
 800b1f2:	dce9      	bgt.n	800b1c8 <prvUnlockQueue+0x60>
 800b1f4:	e000      	b.n	800b1f8 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800b1f6:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800b1f8:	687b      	ldr	r3, [r7, #4]
 800b1fa:	22ff      	movs	r2, #255	; 0xff
 800b1fc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800b200:	f001 fc70 	bl	800cae4 <vPortExitCritical>
}
 800b204:	bf00      	nop
 800b206:	3710      	adds	r7, #16
 800b208:	46bd      	mov	sp, r7
 800b20a:	bd80      	pop	{r7, pc}

0800b20c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800b20c:	b580      	push	{r7, lr}
 800b20e:	b084      	sub	sp, #16
 800b210:	af00      	add	r7, sp, #0
 800b212:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800b214:	f001 fc36 	bl	800ca84 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800b218:	687b      	ldr	r3, [r7, #4]
 800b21a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b21c:	2b00      	cmp	r3, #0
 800b21e:	d102      	bne.n	800b226 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800b220:	2301      	movs	r3, #1
 800b222:	60fb      	str	r3, [r7, #12]
 800b224:	e001      	b.n	800b22a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800b226:	2300      	movs	r3, #0
 800b228:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800b22a:	f001 fc5b 	bl	800cae4 <vPortExitCritical>

	return xReturn;
 800b22e:	68fb      	ldr	r3, [r7, #12]
}
 800b230:	4618      	mov	r0, r3
 800b232:	3710      	adds	r7, #16
 800b234:	46bd      	mov	sp, r7
 800b236:	bd80      	pop	{r7, pc}

0800b238 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800b238:	b580      	push	{r7, lr}
 800b23a:	b084      	sub	sp, #16
 800b23c:	af00      	add	r7, sp, #0
 800b23e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800b240:	f001 fc20 	bl	800ca84 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800b244:	687b      	ldr	r3, [r7, #4]
 800b246:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b248:	687b      	ldr	r3, [r7, #4]
 800b24a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b24c:	429a      	cmp	r2, r3
 800b24e:	d102      	bne.n	800b256 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800b250:	2301      	movs	r3, #1
 800b252:	60fb      	str	r3, [r7, #12]
 800b254:	e001      	b.n	800b25a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800b256:	2300      	movs	r3, #0
 800b258:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800b25a:	f001 fc43 	bl	800cae4 <vPortExitCritical>

	return xReturn;
 800b25e:	68fb      	ldr	r3, [r7, #12]
}
 800b260:	4618      	mov	r0, r3
 800b262:	3710      	adds	r7, #16
 800b264:	46bd      	mov	sp, r7
 800b266:	bd80      	pop	{r7, pc}

0800b268 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800b268:	b480      	push	{r7}
 800b26a:	b085      	sub	sp, #20
 800b26c:	af00      	add	r7, sp, #0
 800b26e:	6078      	str	r0, [r7, #4]
 800b270:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800b272:	2300      	movs	r3, #0
 800b274:	60fb      	str	r3, [r7, #12]
 800b276:	e014      	b.n	800b2a2 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800b278:	4a0f      	ldr	r2, [pc, #60]	; (800b2b8 <vQueueAddToRegistry+0x50>)
 800b27a:	68fb      	ldr	r3, [r7, #12]
 800b27c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800b280:	2b00      	cmp	r3, #0
 800b282:	d10b      	bne.n	800b29c <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800b284:	490c      	ldr	r1, [pc, #48]	; (800b2b8 <vQueueAddToRegistry+0x50>)
 800b286:	68fb      	ldr	r3, [r7, #12]
 800b288:	683a      	ldr	r2, [r7, #0]
 800b28a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800b28e:	4a0a      	ldr	r2, [pc, #40]	; (800b2b8 <vQueueAddToRegistry+0x50>)
 800b290:	68fb      	ldr	r3, [r7, #12]
 800b292:	00db      	lsls	r3, r3, #3
 800b294:	4413      	add	r3, r2
 800b296:	687a      	ldr	r2, [r7, #4]
 800b298:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800b29a:	e006      	b.n	800b2aa <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800b29c:	68fb      	ldr	r3, [r7, #12]
 800b29e:	3301      	adds	r3, #1
 800b2a0:	60fb      	str	r3, [r7, #12]
 800b2a2:	68fb      	ldr	r3, [r7, #12]
 800b2a4:	2b07      	cmp	r3, #7
 800b2a6:	d9e7      	bls.n	800b278 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800b2a8:	bf00      	nop
 800b2aa:	bf00      	nop
 800b2ac:	3714      	adds	r7, #20
 800b2ae:	46bd      	mov	sp, r7
 800b2b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2b4:	4770      	bx	lr
 800b2b6:	bf00      	nop
 800b2b8:	2000516c 	.word	0x2000516c

0800b2bc <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800b2bc:	b580      	push	{r7, lr}
 800b2be:	b086      	sub	sp, #24
 800b2c0:	af00      	add	r7, sp, #0
 800b2c2:	60f8      	str	r0, [r7, #12]
 800b2c4:	60b9      	str	r1, [r7, #8]
 800b2c6:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800b2c8:	68fb      	ldr	r3, [r7, #12]
 800b2ca:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800b2cc:	f001 fbda 	bl	800ca84 <vPortEnterCritical>
 800b2d0:	697b      	ldr	r3, [r7, #20]
 800b2d2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800b2d6:	b25b      	sxtb	r3, r3
 800b2d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b2dc:	d103      	bne.n	800b2e6 <vQueueWaitForMessageRestricted+0x2a>
 800b2de:	697b      	ldr	r3, [r7, #20]
 800b2e0:	2200      	movs	r2, #0
 800b2e2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b2e6:	697b      	ldr	r3, [r7, #20]
 800b2e8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b2ec:	b25b      	sxtb	r3, r3
 800b2ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b2f2:	d103      	bne.n	800b2fc <vQueueWaitForMessageRestricted+0x40>
 800b2f4:	697b      	ldr	r3, [r7, #20]
 800b2f6:	2200      	movs	r2, #0
 800b2f8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800b2fc:	f001 fbf2 	bl	800cae4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800b300:	697b      	ldr	r3, [r7, #20]
 800b302:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b304:	2b00      	cmp	r3, #0
 800b306:	d106      	bne.n	800b316 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800b308:	697b      	ldr	r3, [r7, #20]
 800b30a:	3324      	adds	r3, #36	; 0x24
 800b30c:	687a      	ldr	r2, [r7, #4]
 800b30e:	68b9      	ldr	r1, [r7, #8]
 800b310:	4618      	mov	r0, r3
 800b312:	f000 fc3b 	bl	800bb8c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800b316:	6978      	ldr	r0, [r7, #20]
 800b318:	f7ff ff26 	bl	800b168 <prvUnlockQueue>
	}
 800b31c:	bf00      	nop
 800b31e:	3718      	adds	r7, #24
 800b320:	46bd      	mov	sp, r7
 800b322:	bd80      	pop	{r7, pc}

0800b324 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800b324:	b580      	push	{r7, lr}
 800b326:	b08e      	sub	sp, #56	; 0x38
 800b328:	af04      	add	r7, sp, #16
 800b32a:	60f8      	str	r0, [r7, #12]
 800b32c:	60b9      	str	r1, [r7, #8]
 800b32e:	607a      	str	r2, [r7, #4]
 800b330:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800b332:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b334:	2b00      	cmp	r3, #0
 800b336:	d10a      	bne.n	800b34e <xTaskCreateStatic+0x2a>
	__asm volatile
 800b338:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b33c:	f383 8811 	msr	BASEPRI, r3
 800b340:	f3bf 8f6f 	isb	sy
 800b344:	f3bf 8f4f 	dsb	sy
 800b348:	623b      	str	r3, [r7, #32]
}
 800b34a:	bf00      	nop
 800b34c:	e7fe      	b.n	800b34c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800b34e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b350:	2b00      	cmp	r3, #0
 800b352:	d10a      	bne.n	800b36a <xTaskCreateStatic+0x46>
	__asm volatile
 800b354:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b358:	f383 8811 	msr	BASEPRI, r3
 800b35c:	f3bf 8f6f 	isb	sy
 800b360:	f3bf 8f4f 	dsb	sy
 800b364:	61fb      	str	r3, [r7, #28]
}
 800b366:	bf00      	nop
 800b368:	e7fe      	b.n	800b368 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800b36a:	235c      	movs	r3, #92	; 0x5c
 800b36c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800b36e:	693b      	ldr	r3, [r7, #16]
 800b370:	2b5c      	cmp	r3, #92	; 0x5c
 800b372:	d00a      	beq.n	800b38a <xTaskCreateStatic+0x66>
	__asm volatile
 800b374:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b378:	f383 8811 	msr	BASEPRI, r3
 800b37c:	f3bf 8f6f 	isb	sy
 800b380:	f3bf 8f4f 	dsb	sy
 800b384:	61bb      	str	r3, [r7, #24]
}
 800b386:	bf00      	nop
 800b388:	e7fe      	b.n	800b388 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800b38a:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800b38c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b38e:	2b00      	cmp	r3, #0
 800b390:	d01e      	beq.n	800b3d0 <xTaskCreateStatic+0xac>
 800b392:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b394:	2b00      	cmp	r3, #0
 800b396:	d01b      	beq.n	800b3d0 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800b398:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b39a:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800b39c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b39e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b3a0:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800b3a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b3a4:	2202      	movs	r2, #2
 800b3a6:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800b3aa:	2300      	movs	r3, #0
 800b3ac:	9303      	str	r3, [sp, #12]
 800b3ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b3b0:	9302      	str	r3, [sp, #8]
 800b3b2:	f107 0314 	add.w	r3, r7, #20
 800b3b6:	9301      	str	r3, [sp, #4]
 800b3b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b3ba:	9300      	str	r3, [sp, #0]
 800b3bc:	683b      	ldr	r3, [r7, #0]
 800b3be:	687a      	ldr	r2, [r7, #4]
 800b3c0:	68b9      	ldr	r1, [r7, #8]
 800b3c2:	68f8      	ldr	r0, [r7, #12]
 800b3c4:	f000 f850 	bl	800b468 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800b3c8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800b3ca:	f000 f8dd 	bl	800b588 <prvAddNewTaskToReadyList>
 800b3ce:	e001      	b.n	800b3d4 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800b3d0:	2300      	movs	r3, #0
 800b3d2:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800b3d4:	697b      	ldr	r3, [r7, #20]
	}
 800b3d6:	4618      	mov	r0, r3
 800b3d8:	3728      	adds	r7, #40	; 0x28
 800b3da:	46bd      	mov	sp, r7
 800b3dc:	bd80      	pop	{r7, pc}

0800b3de <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800b3de:	b580      	push	{r7, lr}
 800b3e0:	b08c      	sub	sp, #48	; 0x30
 800b3e2:	af04      	add	r7, sp, #16
 800b3e4:	60f8      	str	r0, [r7, #12]
 800b3e6:	60b9      	str	r1, [r7, #8]
 800b3e8:	603b      	str	r3, [r7, #0]
 800b3ea:	4613      	mov	r3, r2
 800b3ec:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800b3ee:	88fb      	ldrh	r3, [r7, #6]
 800b3f0:	009b      	lsls	r3, r3, #2
 800b3f2:	4618      	mov	r0, r3
 800b3f4:	f001 fc68 	bl	800ccc8 <pvPortMalloc>
 800b3f8:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800b3fa:	697b      	ldr	r3, [r7, #20]
 800b3fc:	2b00      	cmp	r3, #0
 800b3fe:	d00e      	beq.n	800b41e <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800b400:	205c      	movs	r0, #92	; 0x5c
 800b402:	f001 fc61 	bl	800ccc8 <pvPortMalloc>
 800b406:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800b408:	69fb      	ldr	r3, [r7, #28]
 800b40a:	2b00      	cmp	r3, #0
 800b40c:	d003      	beq.n	800b416 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800b40e:	69fb      	ldr	r3, [r7, #28]
 800b410:	697a      	ldr	r2, [r7, #20]
 800b412:	631a      	str	r2, [r3, #48]	; 0x30
 800b414:	e005      	b.n	800b422 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800b416:	6978      	ldr	r0, [r7, #20]
 800b418:	f001 fd22 	bl	800ce60 <vPortFree>
 800b41c:	e001      	b.n	800b422 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800b41e:	2300      	movs	r3, #0
 800b420:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800b422:	69fb      	ldr	r3, [r7, #28]
 800b424:	2b00      	cmp	r3, #0
 800b426:	d017      	beq.n	800b458 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800b428:	69fb      	ldr	r3, [r7, #28]
 800b42a:	2200      	movs	r2, #0
 800b42c:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800b430:	88fa      	ldrh	r2, [r7, #6]
 800b432:	2300      	movs	r3, #0
 800b434:	9303      	str	r3, [sp, #12]
 800b436:	69fb      	ldr	r3, [r7, #28]
 800b438:	9302      	str	r3, [sp, #8]
 800b43a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b43c:	9301      	str	r3, [sp, #4]
 800b43e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b440:	9300      	str	r3, [sp, #0]
 800b442:	683b      	ldr	r3, [r7, #0]
 800b444:	68b9      	ldr	r1, [r7, #8]
 800b446:	68f8      	ldr	r0, [r7, #12]
 800b448:	f000 f80e 	bl	800b468 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800b44c:	69f8      	ldr	r0, [r7, #28]
 800b44e:	f000 f89b 	bl	800b588 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800b452:	2301      	movs	r3, #1
 800b454:	61bb      	str	r3, [r7, #24]
 800b456:	e002      	b.n	800b45e <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800b458:	f04f 33ff 	mov.w	r3, #4294967295
 800b45c:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800b45e:	69bb      	ldr	r3, [r7, #24]
	}
 800b460:	4618      	mov	r0, r3
 800b462:	3720      	adds	r7, #32
 800b464:	46bd      	mov	sp, r7
 800b466:	bd80      	pop	{r7, pc}

0800b468 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800b468:	b580      	push	{r7, lr}
 800b46a:	b088      	sub	sp, #32
 800b46c:	af00      	add	r7, sp, #0
 800b46e:	60f8      	str	r0, [r7, #12]
 800b470:	60b9      	str	r1, [r7, #8]
 800b472:	607a      	str	r2, [r7, #4]
 800b474:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800b476:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b478:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800b47a:	687b      	ldr	r3, [r7, #4]
 800b47c:	009b      	lsls	r3, r3, #2
 800b47e:	461a      	mov	r2, r3
 800b480:	21a5      	movs	r1, #165	; 0xa5
 800b482:	f002 f853 	bl	800d52c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800b486:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b488:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b48a:	687b      	ldr	r3, [r7, #4]
 800b48c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800b490:	3b01      	subs	r3, #1
 800b492:	009b      	lsls	r3, r3, #2
 800b494:	4413      	add	r3, r2
 800b496:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800b498:	69bb      	ldr	r3, [r7, #24]
 800b49a:	f023 0307 	bic.w	r3, r3, #7
 800b49e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800b4a0:	69bb      	ldr	r3, [r7, #24]
 800b4a2:	f003 0307 	and.w	r3, r3, #7
 800b4a6:	2b00      	cmp	r3, #0
 800b4a8:	d00a      	beq.n	800b4c0 <prvInitialiseNewTask+0x58>
	__asm volatile
 800b4aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b4ae:	f383 8811 	msr	BASEPRI, r3
 800b4b2:	f3bf 8f6f 	isb	sy
 800b4b6:	f3bf 8f4f 	dsb	sy
 800b4ba:	617b      	str	r3, [r7, #20]
}
 800b4bc:	bf00      	nop
 800b4be:	e7fe      	b.n	800b4be <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800b4c0:	68bb      	ldr	r3, [r7, #8]
 800b4c2:	2b00      	cmp	r3, #0
 800b4c4:	d01f      	beq.n	800b506 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800b4c6:	2300      	movs	r3, #0
 800b4c8:	61fb      	str	r3, [r7, #28]
 800b4ca:	e012      	b.n	800b4f2 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800b4cc:	68ba      	ldr	r2, [r7, #8]
 800b4ce:	69fb      	ldr	r3, [r7, #28]
 800b4d0:	4413      	add	r3, r2
 800b4d2:	7819      	ldrb	r1, [r3, #0]
 800b4d4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b4d6:	69fb      	ldr	r3, [r7, #28]
 800b4d8:	4413      	add	r3, r2
 800b4da:	3334      	adds	r3, #52	; 0x34
 800b4dc:	460a      	mov	r2, r1
 800b4de:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800b4e0:	68ba      	ldr	r2, [r7, #8]
 800b4e2:	69fb      	ldr	r3, [r7, #28]
 800b4e4:	4413      	add	r3, r2
 800b4e6:	781b      	ldrb	r3, [r3, #0]
 800b4e8:	2b00      	cmp	r3, #0
 800b4ea:	d006      	beq.n	800b4fa <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800b4ec:	69fb      	ldr	r3, [r7, #28]
 800b4ee:	3301      	adds	r3, #1
 800b4f0:	61fb      	str	r3, [r7, #28]
 800b4f2:	69fb      	ldr	r3, [r7, #28]
 800b4f4:	2b0f      	cmp	r3, #15
 800b4f6:	d9e9      	bls.n	800b4cc <prvInitialiseNewTask+0x64>
 800b4f8:	e000      	b.n	800b4fc <prvInitialiseNewTask+0x94>
			{
				break;
 800b4fa:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800b4fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b4fe:	2200      	movs	r2, #0
 800b500:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800b504:	e003      	b.n	800b50e <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800b506:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b508:	2200      	movs	r2, #0
 800b50a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800b50e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b510:	2b37      	cmp	r3, #55	; 0x37
 800b512:	d901      	bls.n	800b518 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800b514:	2337      	movs	r3, #55	; 0x37
 800b516:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800b518:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b51a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b51c:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800b51e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b520:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b522:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800b524:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b526:	2200      	movs	r2, #0
 800b528:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800b52a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b52c:	3304      	adds	r3, #4
 800b52e:	4618      	mov	r0, r3
 800b530:	f7ff f978 	bl	800a824 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800b534:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b536:	3318      	adds	r3, #24
 800b538:	4618      	mov	r0, r3
 800b53a:	f7ff f973 	bl	800a824 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800b53e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b540:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b542:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b544:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b546:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800b54a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b54c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800b54e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b550:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b552:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800b554:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b556:	2200      	movs	r2, #0
 800b558:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800b55a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b55c:	2200      	movs	r2, #0
 800b55e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800b562:	683a      	ldr	r2, [r7, #0]
 800b564:	68f9      	ldr	r1, [r7, #12]
 800b566:	69b8      	ldr	r0, [r7, #24]
 800b568:	f001 f960 	bl	800c82c <pxPortInitialiseStack>
 800b56c:	4602      	mov	r2, r0
 800b56e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b570:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800b572:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b574:	2b00      	cmp	r3, #0
 800b576:	d002      	beq.n	800b57e <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800b578:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b57a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b57c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b57e:	bf00      	nop
 800b580:	3720      	adds	r7, #32
 800b582:	46bd      	mov	sp, r7
 800b584:	bd80      	pop	{r7, pc}
	...

0800b588 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800b588:	b580      	push	{r7, lr}
 800b58a:	b082      	sub	sp, #8
 800b58c:	af00      	add	r7, sp, #0
 800b58e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800b590:	f001 fa78 	bl	800ca84 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800b594:	4b2d      	ldr	r3, [pc, #180]	; (800b64c <prvAddNewTaskToReadyList+0xc4>)
 800b596:	681b      	ldr	r3, [r3, #0]
 800b598:	3301      	adds	r3, #1
 800b59a:	4a2c      	ldr	r2, [pc, #176]	; (800b64c <prvAddNewTaskToReadyList+0xc4>)
 800b59c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800b59e:	4b2c      	ldr	r3, [pc, #176]	; (800b650 <prvAddNewTaskToReadyList+0xc8>)
 800b5a0:	681b      	ldr	r3, [r3, #0]
 800b5a2:	2b00      	cmp	r3, #0
 800b5a4:	d109      	bne.n	800b5ba <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800b5a6:	4a2a      	ldr	r2, [pc, #168]	; (800b650 <prvAddNewTaskToReadyList+0xc8>)
 800b5a8:	687b      	ldr	r3, [r7, #4]
 800b5aa:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800b5ac:	4b27      	ldr	r3, [pc, #156]	; (800b64c <prvAddNewTaskToReadyList+0xc4>)
 800b5ae:	681b      	ldr	r3, [r3, #0]
 800b5b0:	2b01      	cmp	r3, #1
 800b5b2:	d110      	bne.n	800b5d6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800b5b4:	f000 fc16 	bl	800bde4 <prvInitialiseTaskLists>
 800b5b8:	e00d      	b.n	800b5d6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800b5ba:	4b26      	ldr	r3, [pc, #152]	; (800b654 <prvAddNewTaskToReadyList+0xcc>)
 800b5bc:	681b      	ldr	r3, [r3, #0]
 800b5be:	2b00      	cmp	r3, #0
 800b5c0:	d109      	bne.n	800b5d6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800b5c2:	4b23      	ldr	r3, [pc, #140]	; (800b650 <prvAddNewTaskToReadyList+0xc8>)
 800b5c4:	681b      	ldr	r3, [r3, #0]
 800b5c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b5c8:	687b      	ldr	r3, [r7, #4]
 800b5ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b5cc:	429a      	cmp	r2, r3
 800b5ce:	d802      	bhi.n	800b5d6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800b5d0:	4a1f      	ldr	r2, [pc, #124]	; (800b650 <prvAddNewTaskToReadyList+0xc8>)
 800b5d2:	687b      	ldr	r3, [r7, #4]
 800b5d4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800b5d6:	4b20      	ldr	r3, [pc, #128]	; (800b658 <prvAddNewTaskToReadyList+0xd0>)
 800b5d8:	681b      	ldr	r3, [r3, #0]
 800b5da:	3301      	adds	r3, #1
 800b5dc:	4a1e      	ldr	r2, [pc, #120]	; (800b658 <prvAddNewTaskToReadyList+0xd0>)
 800b5de:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800b5e0:	4b1d      	ldr	r3, [pc, #116]	; (800b658 <prvAddNewTaskToReadyList+0xd0>)
 800b5e2:	681a      	ldr	r2, [r3, #0]
 800b5e4:	687b      	ldr	r3, [r7, #4]
 800b5e6:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800b5e8:	687b      	ldr	r3, [r7, #4]
 800b5ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b5ec:	4b1b      	ldr	r3, [pc, #108]	; (800b65c <prvAddNewTaskToReadyList+0xd4>)
 800b5ee:	681b      	ldr	r3, [r3, #0]
 800b5f0:	429a      	cmp	r2, r3
 800b5f2:	d903      	bls.n	800b5fc <prvAddNewTaskToReadyList+0x74>
 800b5f4:	687b      	ldr	r3, [r7, #4]
 800b5f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b5f8:	4a18      	ldr	r2, [pc, #96]	; (800b65c <prvAddNewTaskToReadyList+0xd4>)
 800b5fa:	6013      	str	r3, [r2, #0]
 800b5fc:	687b      	ldr	r3, [r7, #4]
 800b5fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b600:	4613      	mov	r3, r2
 800b602:	009b      	lsls	r3, r3, #2
 800b604:	4413      	add	r3, r2
 800b606:	009b      	lsls	r3, r3, #2
 800b608:	4a15      	ldr	r2, [pc, #84]	; (800b660 <prvAddNewTaskToReadyList+0xd8>)
 800b60a:	441a      	add	r2, r3
 800b60c:	687b      	ldr	r3, [r7, #4]
 800b60e:	3304      	adds	r3, #4
 800b610:	4619      	mov	r1, r3
 800b612:	4610      	mov	r0, r2
 800b614:	f7ff f913 	bl	800a83e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800b618:	f001 fa64 	bl	800cae4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800b61c:	4b0d      	ldr	r3, [pc, #52]	; (800b654 <prvAddNewTaskToReadyList+0xcc>)
 800b61e:	681b      	ldr	r3, [r3, #0]
 800b620:	2b00      	cmp	r3, #0
 800b622:	d00e      	beq.n	800b642 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800b624:	4b0a      	ldr	r3, [pc, #40]	; (800b650 <prvAddNewTaskToReadyList+0xc8>)
 800b626:	681b      	ldr	r3, [r3, #0]
 800b628:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b62a:	687b      	ldr	r3, [r7, #4]
 800b62c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b62e:	429a      	cmp	r2, r3
 800b630:	d207      	bcs.n	800b642 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800b632:	4b0c      	ldr	r3, [pc, #48]	; (800b664 <prvAddNewTaskToReadyList+0xdc>)
 800b634:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b638:	601a      	str	r2, [r3, #0]
 800b63a:	f3bf 8f4f 	dsb	sy
 800b63e:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b642:	bf00      	nop
 800b644:	3708      	adds	r7, #8
 800b646:	46bd      	mov	sp, r7
 800b648:	bd80      	pop	{r7, pc}
 800b64a:	bf00      	nop
 800b64c:	20000c9c 	.word	0x20000c9c
 800b650:	200007c8 	.word	0x200007c8
 800b654:	20000ca8 	.word	0x20000ca8
 800b658:	20000cb8 	.word	0x20000cb8
 800b65c:	20000ca4 	.word	0x20000ca4
 800b660:	200007cc 	.word	0x200007cc
 800b664:	e000ed04 	.word	0xe000ed04

0800b668 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800b668:	b580      	push	{r7, lr}
 800b66a:	b084      	sub	sp, #16
 800b66c:	af00      	add	r7, sp, #0
 800b66e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800b670:	2300      	movs	r3, #0
 800b672:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800b674:	687b      	ldr	r3, [r7, #4]
 800b676:	2b00      	cmp	r3, #0
 800b678:	d017      	beq.n	800b6aa <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800b67a:	4b13      	ldr	r3, [pc, #76]	; (800b6c8 <vTaskDelay+0x60>)
 800b67c:	681b      	ldr	r3, [r3, #0]
 800b67e:	2b00      	cmp	r3, #0
 800b680:	d00a      	beq.n	800b698 <vTaskDelay+0x30>
	__asm volatile
 800b682:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b686:	f383 8811 	msr	BASEPRI, r3
 800b68a:	f3bf 8f6f 	isb	sy
 800b68e:	f3bf 8f4f 	dsb	sy
 800b692:	60bb      	str	r3, [r7, #8]
}
 800b694:	bf00      	nop
 800b696:	e7fe      	b.n	800b696 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800b698:	f000 f880 	bl	800b79c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800b69c:	2100      	movs	r1, #0
 800b69e:	6878      	ldr	r0, [r7, #4]
 800b6a0:	f000 fd22 	bl	800c0e8 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800b6a4:	f000 f888 	bl	800b7b8 <xTaskResumeAll>
 800b6a8:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800b6aa:	68fb      	ldr	r3, [r7, #12]
 800b6ac:	2b00      	cmp	r3, #0
 800b6ae:	d107      	bne.n	800b6c0 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800b6b0:	4b06      	ldr	r3, [pc, #24]	; (800b6cc <vTaskDelay+0x64>)
 800b6b2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b6b6:	601a      	str	r2, [r3, #0]
 800b6b8:	f3bf 8f4f 	dsb	sy
 800b6bc:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800b6c0:	bf00      	nop
 800b6c2:	3710      	adds	r7, #16
 800b6c4:	46bd      	mov	sp, r7
 800b6c6:	bd80      	pop	{r7, pc}
 800b6c8:	20000cc4 	.word	0x20000cc4
 800b6cc:	e000ed04 	.word	0xe000ed04

0800b6d0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800b6d0:	b580      	push	{r7, lr}
 800b6d2:	b08a      	sub	sp, #40	; 0x28
 800b6d4:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800b6d6:	2300      	movs	r3, #0
 800b6d8:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800b6da:	2300      	movs	r3, #0
 800b6dc:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800b6de:	463a      	mov	r2, r7
 800b6e0:	1d39      	adds	r1, r7, #4
 800b6e2:	f107 0308 	add.w	r3, r7, #8
 800b6e6:	4618      	mov	r0, r3
 800b6e8:	f7ff f848 	bl	800a77c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800b6ec:	6839      	ldr	r1, [r7, #0]
 800b6ee:	687b      	ldr	r3, [r7, #4]
 800b6f0:	68ba      	ldr	r2, [r7, #8]
 800b6f2:	9202      	str	r2, [sp, #8]
 800b6f4:	9301      	str	r3, [sp, #4]
 800b6f6:	2300      	movs	r3, #0
 800b6f8:	9300      	str	r3, [sp, #0]
 800b6fa:	2300      	movs	r3, #0
 800b6fc:	460a      	mov	r2, r1
 800b6fe:	4921      	ldr	r1, [pc, #132]	; (800b784 <vTaskStartScheduler+0xb4>)
 800b700:	4821      	ldr	r0, [pc, #132]	; (800b788 <vTaskStartScheduler+0xb8>)
 800b702:	f7ff fe0f 	bl	800b324 <xTaskCreateStatic>
 800b706:	4603      	mov	r3, r0
 800b708:	4a20      	ldr	r2, [pc, #128]	; (800b78c <vTaskStartScheduler+0xbc>)
 800b70a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800b70c:	4b1f      	ldr	r3, [pc, #124]	; (800b78c <vTaskStartScheduler+0xbc>)
 800b70e:	681b      	ldr	r3, [r3, #0]
 800b710:	2b00      	cmp	r3, #0
 800b712:	d002      	beq.n	800b71a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800b714:	2301      	movs	r3, #1
 800b716:	617b      	str	r3, [r7, #20]
 800b718:	e001      	b.n	800b71e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800b71a:	2300      	movs	r3, #0
 800b71c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800b71e:	697b      	ldr	r3, [r7, #20]
 800b720:	2b01      	cmp	r3, #1
 800b722:	d102      	bne.n	800b72a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800b724:	f000 fd34 	bl	800c190 <xTimerCreateTimerTask>
 800b728:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800b72a:	697b      	ldr	r3, [r7, #20]
 800b72c:	2b01      	cmp	r3, #1
 800b72e:	d116      	bne.n	800b75e <vTaskStartScheduler+0x8e>
	__asm volatile
 800b730:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b734:	f383 8811 	msr	BASEPRI, r3
 800b738:	f3bf 8f6f 	isb	sy
 800b73c:	f3bf 8f4f 	dsb	sy
 800b740:	613b      	str	r3, [r7, #16]
}
 800b742:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800b744:	4b12      	ldr	r3, [pc, #72]	; (800b790 <vTaskStartScheduler+0xc0>)
 800b746:	f04f 32ff 	mov.w	r2, #4294967295
 800b74a:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800b74c:	4b11      	ldr	r3, [pc, #68]	; (800b794 <vTaskStartScheduler+0xc4>)
 800b74e:	2201      	movs	r2, #1
 800b750:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800b752:	4b11      	ldr	r3, [pc, #68]	; (800b798 <vTaskStartScheduler+0xc8>)
 800b754:	2200      	movs	r2, #0
 800b756:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800b758:	f001 f8f2 	bl	800c940 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800b75c:	e00e      	b.n	800b77c <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800b75e:	697b      	ldr	r3, [r7, #20]
 800b760:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b764:	d10a      	bne.n	800b77c <vTaskStartScheduler+0xac>
	__asm volatile
 800b766:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b76a:	f383 8811 	msr	BASEPRI, r3
 800b76e:	f3bf 8f6f 	isb	sy
 800b772:	f3bf 8f4f 	dsb	sy
 800b776:	60fb      	str	r3, [r7, #12]
}
 800b778:	bf00      	nop
 800b77a:	e7fe      	b.n	800b77a <vTaskStartScheduler+0xaa>
}
 800b77c:	bf00      	nop
 800b77e:	3718      	adds	r7, #24
 800b780:	46bd      	mov	sp, r7
 800b782:	bd80      	pop	{r7, pc}
 800b784:	0800fa64 	.word	0x0800fa64
 800b788:	0800bdb5 	.word	0x0800bdb5
 800b78c:	20000cc0 	.word	0x20000cc0
 800b790:	20000cbc 	.word	0x20000cbc
 800b794:	20000ca8 	.word	0x20000ca8
 800b798:	20000ca0 	.word	0x20000ca0

0800b79c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800b79c:	b480      	push	{r7}
 800b79e:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800b7a0:	4b04      	ldr	r3, [pc, #16]	; (800b7b4 <vTaskSuspendAll+0x18>)
 800b7a2:	681b      	ldr	r3, [r3, #0]
 800b7a4:	3301      	adds	r3, #1
 800b7a6:	4a03      	ldr	r2, [pc, #12]	; (800b7b4 <vTaskSuspendAll+0x18>)
 800b7a8:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800b7aa:	bf00      	nop
 800b7ac:	46bd      	mov	sp, r7
 800b7ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7b2:	4770      	bx	lr
 800b7b4:	20000cc4 	.word	0x20000cc4

0800b7b8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800b7b8:	b580      	push	{r7, lr}
 800b7ba:	b084      	sub	sp, #16
 800b7bc:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800b7be:	2300      	movs	r3, #0
 800b7c0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800b7c2:	2300      	movs	r3, #0
 800b7c4:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800b7c6:	4b42      	ldr	r3, [pc, #264]	; (800b8d0 <xTaskResumeAll+0x118>)
 800b7c8:	681b      	ldr	r3, [r3, #0]
 800b7ca:	2b00      	cmp	r3, #0
 800b7cc:	d10a      	bne.n	800b7e4 <xTaskResumeAll+0x2c>
	__asm volatile
 800b7ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b7d2:	f383 8811 	msr	BASEPRI, r3
 800b7d6:	f3bf 8f6f 	isb	sy
 800b7da:	f3bf 8f4f 	dsb	sy
 800b7de:	603b      	str	r3, [r7, #0]
}
 800b7e0:	bf00      	nop
 800b7e2:	e7fe      	b.n	800b7e2 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800b7e4:	f001 f94e 	bl	800ca84 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800b7e8:	4b39      	ldr	r3, [pc, #228]	; (800b8d0 <xTaskResumeAll+0x118>)
 800b7ea:	681b      	ldr	r3, [r3, #0]
 800b7ec:	3b01      	subs	r3, #1
 800b7ee:	4a38      	ldr	r2, [pc, #224]	; (800b8d0 <xTaskResumeAll+0x118>)
 800b7f0:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b7f2:	4b37      	ldr	r3, [pc, #220]	; (800b8d0 <xTaskResumeAll+0x118>)
 800b7f4:	681b      	ldr	r3, [r3, #0]
 800b7f6:	2b00      	cmp	r3, #0
 800b7f8:	d162      	bne.n	800b8c0 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800b7fa:	4b36      	ldr	r3, [pc, #216]	; (800b8d4 <xTaskResumeAll+0x11c>)
 800b7fc:	681b      	ldr	r3, [r3, #0]
 800b7fe:	2b00      	cmp	r3, #0
 800b800:	d05e      	beq.n	800b8c0 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800b802:	e02f      	b.n	800b864 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b804:	4b34      	ldr	r3, [pc, #208]	; (800b8d8 <xTaskResumeAll+0x120>)
 800b806:	68db      	ldr	r3, [r3, #12]
 800b808:	68db      	ldr	r3, [r3, #12]
 800b80a:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800b80c:	68fb      	ldr	r3, [r7, #12]
 800b80e:	3318      	adds	r3, #24
 800b810:	4618      	mov	r0, r3
 800b812:	f7ff f871 	bl	800a8f8 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b816:	68fb      	ldr	r3, [r7, #12]
 800b818:	3304      	adds	r3, #4
 800b81a:	4618      	mov	r0, r3
 800b81c:	f7ff f86c 	bl	800a8f8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800b820:	68fb      	ldr	r3, [r7, #12]
 800b822:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b824:	4b2d      	ldr	r3, [pc, #180]	; (800b8dc <xTaskResumeAll+0x124>)
 800b826:	681b      	ldr	r3, [r3, #0]
 800b828:	429a      	cmp	r2, r3
 800b82a:	d903      	bls.n	800b834 <xTaskResumeAll+0x7c>
 800b82c:	68fb      	ldr	r3, [r7, #12]
 800b82e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b830:	4a2a      	ldr	r2, [pc, #168]	; (800b8dc <xTaskResumeAll+0x124>)
 800b832:	6013      	str	r3, [r2, #0]
 800b834:	68fb      	ldr	r3, [r7, #12]
 800b836:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b838:	4613      	mov	r3, r2
 800b83a:	009b      	lsls	r3, r3, #2
 800b83c:	4413      	add	r3, r2
 800b83e:	009b      	lsls	r3, r3, #2
 800b840:	4a27      	ldr	r2, [pc, #156]	; (800b8e0 <xTaskResumeAll+0x128>)
 800b842:	441a      	add	r2, r3
 800b844:	68fb      	ldr	r3, [r7, #12]
 800b846:	3304      	adds	r3, #4
 800b848:	4619      	mov	r1, r3
 800b84a:	4610      	mov	r0, r2
 800b84c:	f7fe fff7 	bl	800a83e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800b850:	68fb      	ldr	r3, [r7, #12]
 800b852:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b854:	4b23      	ldr	r3, [pc, #140]	; (800b8e4 <xTaskResumeAll+0x12c>)
 800b856:	681b      	ldr	r3, [r3, #0]
 800b858:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b85a:	429a      	cmp	r2, r3
 800b85c:	d302      	bcc.n	800b864 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800b85e:	4b22      	ldr	r3, [pc, #136]	; (800b8e8 <xTaskResumeAll+0x130>)
 800b860:	2201      	movs	r2, #1
 800b862:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800b864:	4b1c      	ldr	r3, [pc, #112]	; (800b8d8 <xTaskResumeAll+0x120>)
 800b866:	681b      	ldr	r3, [r3, #0]
 800b868:	2b00      	cmp	r3, #0
 800b86a:	d1cb      	bne.n	800b804 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800b86c:	68fb      	ldr	r3, [r7, #12]
 800b86e:	2b00      	cmp	r3, #0
 800b870:	d001      	beq.n	800b876 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800b872:	f000 fb8d 	bl	800bf90 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800b876:	4b1d      	ldr	r3, [pc, #116]	; (800b8ec <xTaskResumeAll+0x134>)
 800b878:	681b      	ldr	r3, [r3, #0]
 800b87a:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800b87c:	687b      	ldr	r3, [r7, #4]
 800b87e:	2b00      	cmp	r3, #0
 800b880:	d010      	beq.n	800b8a4 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800b882:	f000 f847 	bl	800b914 <xTaskIncrementTick>
 800b886:	4603      	mov	r3, r0
 800b888:	2b00      	cmp	r3, #0
 800b88a:	d002      	beq.n	800b892 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800b88c:	4b16      	ldr	r3, [pc, #88]	; (800b8e8 <xTaskResumeAll+0x130>)
 800b88e:	2201      	movs	r2, #1
 800b890:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800b892:	687b      	ldr	r3, [r7, #4]
 800b894:	3b01      	subs	r3, #1
 800b896:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800b898:	687b      	ldr	r3, [r7, #4]
 800b89a:	2b00      	cmp	r3, #0
 800b89c:	d1f1      	bne.n	800b882 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800b89e:	4b13      	ldr	r3, [pc, #76]	; (800b8ec <xTaskResumeAll+0x134>)
 800b8a0:	2200      	movs	r2, #0
 800b8a2:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800b8a4:	4b10      	ldr	r3, [pc, #64]	; (800b8e8 <xTaskResumeAll+0x130>)
 800b8a6:	681b      	ldr	r3, [r3, #0]
 800b8a8:	2b00      	cmp	r3, #0
 800b8aa:	d009      	beq.n	800b8c0 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800b8ac:	2301      	movs	r3, #1
 800b8ae:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800b8b0:	4b0f      	ldr	r3, [pc, #60]	; (800b8f0 <xTaskResumeAll+0x138>)
 800b8b2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b8b6:	601a      	str	r2, [r3, #0]
 800b8b8:	f3bf 8f4f 	dsb	sy
 800b8bc:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800b8c0:	f001 f910 	bl	800cae4 <vPortExitCritical>

	return xAlreadyYielded;
 800b8c4:	68bb      	ldr	r3, [r7, #8]
}
 800b8c6:	4618      	mov	r0, r3
 800b8c8:	3710      	adds	r7, #16
 800b8ca:	46bd      	mov	sp, r7
 800b8cc:	bd80      	pop	{r7, pc}
 800b8ce:	bf00      	nop
 800b8d0:	20000cc4 	.word	0x20000cc4
 800b8d4:	20000c9c 	.word	0x20000c9c
 800b8d8:	20000c5c 	.word	0x20000c5c
 800b8dc:	20000ca4 	.word	0x20000ca4
 800b8e0:	200007cc 	.word	0x200007cc
 800b8e4:	200007c8 	.word	0x200007c8
 800b8e8:	20000cb0 	.word	0x20000cb0
 800b8ec:	20000cac 	.word	0x20000cac
 800b8f0:	e000ed04 	.word	0xe000ed04

0800b8f4 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800b8f4:	b480      	push	{r7}
 800b8f6:	b083      	sub	sp, #12
 800b8f8:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800b8fa:	4b05      	ldr	r3, [pc, #20]	; (800b910 <xTaskGetTickCount+0x1c>)
 800b8fc:	681b      	ldr	r3, [r3, #0]
 800b8fe:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800b900:	687b      	ldr	r3, [r7, #4]
}
 800b902:	4618      	mov	r0, r3
 800b904:	370c      	adds	r7, #12
 800b906:	46bd      	mov	sp, r7
 800b908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b90c:	4770      	bx	lr
 800b90e:	bf00      	nop
 800b910:	20000ca0 	.word	0x20000ca0

0800b914 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800b914:	b580      	push	{r7, lr}
 800b916:	b086      	sub	sp, #24
 800b918:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800b91a:	2300      	movs	r3, #0
 800b91c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b91e:	4b4f      	ldr	r3, [pc, #316]	; (800ba5c <xTaskIncrementTick+0x148>)
 800b920:	681b      	ldr	r3, [r3, #0]
 800b922:	2b00      	cmp	r3, #0
 800b924:	f040 808f 	bne.w	800ba46 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800b928:	4b4d      	ldr	r3, [pc, #308]	; (800ba60 <xTaskIncrementTick+0x14c>)
 800b92a:	681b      	ldr	r3, [r3, #0]
 800b92c:	3301      	adds	r3, #1
 800b92e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800b930:	4a4b      	ldr	r2, [pc, #300]	; (800ba60 <xTaskIncrementTick+0x14c>)
 800b932:	693b      	ldr	r3, [r7, #16]
 800b934:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800b936:	693b      	ldr	r3, [r7, #16]
 800b938:	2b00      	cmp	r3, #0
 800b93a:	d120      	bne.n	800b97e <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800b93c:	4b49      	ldr	r3, [pc, #292]	; (800ba64 <xTaskIncrementTick+0x150>)
 800b93e:	681b      	ldr	r3, [r3, #0]
 800b940:	681b      	ldr	r3, [r3, #0]
 800b942:	2b00      	cmp	r3, #0
 800b944:	d00a      	beq.n	800b95c <xTaskIncrementTick+0x48>
	__asm volatile
 800b946:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b94a:	f383 8811 	msr	BASEPRI, r3
 800b94e:	f3bf 8f6f 	isb	sy
 800b952:	f3bf 8f4f 	dsb	sy
 800b956:	603b      	str	r3, [r7, #0]
}
 800b958:	bf00      	nop
 800b95a:	e7fe      	b.n	800b95a <xTaskIncrementTick+0x46>
 800b95c:	4b41      	ldr	r3, [pc, #260]	; (800ba64 <xTaskIncrementTick+0x150>)
 800b95e:	681b      	ldr	r3, [r3, #0]
 800b960:	60fb      	str	r3, [r7, #12]
 800b962:	4b41      	ldr	r3, [pc, #260]	; (800ba68 <xTaskIncrementTick+0x154>)
 800b964:	681b      	ldr	r3, [r3, #0]
 800b966:	4a3f      	ldr	r2, [pc, #252]	; (800ba64 <xTaskIncrementTick+0x150>)
 800b968:	6013      	str	r3, [r2, #0]
 800b96a:	4a3f      	ldr	r2, [pc, #252]	; (800ba68 <xTaskIncrementTick+0x154>)
 800b96c:	68fb      	ldr	r3, [r7, #12]
 800b96e:	6013      	str	r3, [r2, #0]
 800b970:	4b3e      	ldr	r3, [pc, #248]	; (800ba6c <xTaskIncrementTick+0x158>)
 800b972:	681b      	ldr	r3, [r3, #0]
 800b974:	3301      	adds	r3, #1
 800b976:	4a3d      	ldr	r2, [pc, #244]	; (800ba6c <xTaskIncrementTick+0x158>)
 800b978:	6013      	str	r3, [r2, #0]
 800b97a:	f000 fb09 	bl	800bf90 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800b97e:	4b3c      	ldr	r3, [pc, #240]	; (800ba70 <xTaskIncrementTick+0x15c>)
 800b980:	681b      	ldr	r3, [r3, #0]
 800b982:	693a      	ldr	r2, [r7, #16]
 800b984:	429a      	cmp	r2, r3
 800b986:	d349      	bcc.n	800ba1c <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b988:	4b36      	ldr	r3, [pc, #216]	; (800ba64 <xTaskIncrementTick+0x150>)
 800b98a:	681b      	ldr	r3, [r3, #0]
 800b98c:	681b      	ldr	r3, [r3, #0]
 800b98e:	2b00      	cmp	r3, #0
 800b990:	d104      	bne.n	800b99c <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b992:	4b37      	ldr	r3, [pc, #220]	; (800ba70 <xTaskIncrementTick+0x15c>)
 800b994:	f04f 32ff 	mov.w	r2, #4294967295
 800b998:	601a      	str	r2, [r3, #0]
					break;
 800b99a:	e03f      	b.n	800ba1c <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b99c:	4b31      	ldr	r3, [pc, #196]	; (800ba64 <xTaskIncrementTick+0x150>)
 800b99e:	681b      	ldr	r3, [r3, #0]
 800b9a0:	68db      	ldr	r3, [r3, #12]
 800b9a2:	68db      	ldr	r3, [r3, #12]
 800b9a4:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800b9a6:	68bb      	ldr	r3, [r7, #8]
 800b9a8:	685b      	ldr	r3, [r3, #4]
 800b9aa:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800b9ac:	693a      	ldr	r2, [r7, #16]
 800b9ae:	687b      	ldr	r3, [r7, #4]
 800b9b0:	429a      	cmp	r2, r3
 800b9b2:	d203      	bcs.n	800b9bc <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800b9b4:	4a2e      	ldr	r2, [pc, #184]	; (800ba70 <xTaskIncrementTick+0x15c>)
 800b9b6:	687b      	ldr	r3, [r7, #4]
 800b9b8:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800b9ba:	e02f      	b.n	800ba1c <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b9bc:	68bb      	ldr	r3, [r7, #8]
 800b9be:	3304      	adds	r3, #4
 800b9c0:	4618      	mov	r0, r3
 800b9c2:	f7fe ff99 	bl	800a8f8 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800b9c6:	68bb      	ldr	r3, [r7, #8]
 800b9c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b9ca:	2b00      	cmp	r3, #0
 800b9cc:	d004      	beq.n	800b9d8 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800b9ce:	68bb      	ldr	r3, [r7, #8]
 800b9d0:	3318      	adds	r3, #24
 800b9d2:	4618      	mov	r0, r3
 800b9d4:	f7fe ff90 	bl	800a8f8 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800b9d8:	68bb      	ldr	r3, [r7, #8]
 800b9da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b9dc:	4b25      	ldr	r3, [pc, #148]	; (800ba74 <xTaskIncrementTick+0x160>)
 800b9de:	681b      	ldr	r3, [r3, #0]
 800b9e0:	429a      	cmp	r2, r3
 800b9e2:	d903      	bls.n	800b9ec <xTaskIncrementTick+0xd8>
 800b9e4:	68bb      	ldr	r3, [r7, #8]
 800b9e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b9e8:	4a22      	ldr	r2, [pc, #136]	; (800ba74 <xTaskIncrementTick+0x160>)
 800b9ea:	6013      	str	r3, [r2, #0]
 800b9ec:	68bb      	ldr	r3, [r7, #8]
 800b9ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b9f0:	4613      	mov	r3, r2
 800b9f2:	009b      	lsls	r3, r3, #2
 800b9f4:	4413      	add	r3, r2
 800b9f6:	009b      	lsls	r3, r3, #2
 800b9f8:	4a1f      	ldr	r2, [pc, #124]	; (800ba78 <xTaskIncrementTick+0x164>)
 800b9fa:	441a      	add	r2, r3
 800b9fc:	68bb      	ldr	r3, [r7, #8]
 800b9fe:	3304      	adds	r3, #4
 800ba00:	4619      	mov	r1, r3
 800ba02:	4610      	mov	r0, r2
 800ba04:	f7fe ff1b 	bl	800a83e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800ba08:	68bb      	ldr	r3, [r7, #8]
 800ba0a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ba0c:	4b1b      	ldr	r3, [pc, #108]	; (800ba7c <xTaskIncrementTick+0x168>)
 800ba0e:	681b      	ldr	r3, [r3, #0]
 800ba10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ba12:	429a      	cmp	r2, r3
 800ba14:	d3b8      	bcc.n	800b988 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800ba16:	2301      	movs	r3, #1
 800ba18:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800ba1a:	e7b5      	b.n	800b988 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800ba1c:	4b17      	ldr	r3, [pc, #92]	; (800ba7c <xTaskIncrementTick+0x168>)
 800ba1e:	681b      	ldr	r3, [r3, #0]
 800ba20:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ba22:	4915      	ldr	r1, [pc, #84]	; (800ba78 <xTaskIncrementTick+0x164>)
 800ba24:	4613      	mov	r3, r2
 800ba26:	009b      	lsls	r3, r3, #2
 800ba28:	4413      	add	r3, r2
 800ba2a:	009b      	lsls	r3, r3, #2
 800ba2c:	440b      	add	r3, r1
 800ba2e:	681b      	ldr	r3, [r3, #0]
 800ba30:	2b01      	cmp	r3, #1
 800ba32:	d901      	bls.n	800ba38 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800ba34:	2301      	movs	r3, #1
 800ba36:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800ba38:	4b11      	ldr	r3, [pc, #68]	; (800ba80 <xTaskIncrementTick+0x16c>)
 800ba3a:	681b      	ldr	r3, [r3, #0]
 800ba3c:	2b00      	cmp	r3, #0
 800ba3e:	d007      	beq.n	800ba50 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800ba40:	2301      	movs	r3, #1
 800ba42:	617b      	str	r3, [r7, #20]
 800ba44:	e004      	b.n	800ba50 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800ba46:	4b0f      	ldr	r3, [pc, #60]	; (800ba84 <xTaskIncrementTick+0x170>)
 800ba48:	681b      	ldr	r3, [r3, #0]
 800ba4a:	3301      	adds	r3, #1
 800ba4c:	4a0d      	ldr	r2, [pc, #52]	; (800ba84 <xTaskIncrementTick+0x170>)
 800ba4e:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800ba50:	697b      	ldr	r3, [r7, #20]
}
 800ba52:	4618      	mov	r0, r3
 800ba54:	3718      	adds	r7, #24
 800ba56:	46bd      	mov	sp, r7
 800ba58:	bd80      	pop	{r7, pc}
 800ba5a:	bf00      	nop
 800ba5c:	20000cc4 	.word	0x20000cc4
 800ba60:	20000ca0 	.word	0x20000ca0
 800ba64:	20000c54 	.word	0x20000c54
 800ba68:	20000c58 	.word	0x20000c58
 800ba6c:	20000cb4 	.word	0x20000cb4
 800ba70:	20000cbc 	.word	0x20000cbc
 800ba74:	20000ca4 	.word	0x20000ca4
 800ba78:	200007cc 	.word	0x200007cc
 800ba7c:	200007c8 	.word	0x200007c8
 800ba80:	20000cb0 	.word	0x20000cb0
 800ba84:	20000cac 	.word	0x20000cac

0800ba88 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800ba88:	b480      	push	{r7}
 800ba8a:	b085      	sub	sp, #20
 800ba8c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800ba8e:	4b28      	ldr	r3, [pc, #160]	; (800bb30 <vTaskSwitchContext+0xa8>)
 800ba90:	681b      	ldr	r3, [r3, #0]
 800ba92:	2b00      	cmp	r3, #0
 800ba94:	d003      	beq.n	800ba9e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800ba96:	4b27      	ldr	r3, [pc, #156]	; (800bb34 <vTaskSwitchContext+0xac>)
 800ba98:	2201      	movs	r2, #1
 800ba9a:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800ba9c:	e041      	b.n	800bb22 <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 800ba9e:	4b25      	ldr	r3, [pc, #148]	; (800bb34 <vTaskSwitchContext+0xac>)
 800baa0:	2200      	movs	r2, #0
 800baa2:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800baa4:	4b24      	ldr	r3, [pc, #144]	; (800bb38 <vTaskSwitchContext+0xb0>)
 800baa6:	681b      	ldr	r3, [r3, #0]
 800baa8:	60fb      	str	r3, [r7, #12]
 800baaa:	e010      	b.n	800bace <vTaskSwitchContext+0x46>
 800baac:	68fb      	ldr	r3, [r7, #12]
 800baae:	2b00      	cmp	r3, #0
 800bab0:	d10a      	bne.n	800bac8 <vTaskSwitchContext+0x40>
	__asm volatile
 800bab2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bab6:	f383 8811 	msr	BASEPRI, r3
 800baba:	f3bf 8f6f 	isb	sy
 800babe:	f3bf 8f4f 	dsb	sy
 800bac2:	607b      	str	r3, [r7, #4]
}
 800bac4:	bf00      	nop
 800bac6:	e7fe      	b.n	800bac6 <vTaskSwitchContext+0x3e>
 800bac8:	68fb      	ldr	r3, [r7, #12]
 800baca:	3b01      	subs	r3, #1
 800bacc:	60fb      	str	r3, [r7, #12]
 800bace:	491b      	ldr	r1, [pc, #108]	; (800bb3c <vTaskSwitchContext+0xb4>)
 800bad0:	68fa      	ldr	r2, [r7, #12]
 800bad2:	4613      	mov	r3, r2
 800bad4:	009b      	lsls	r3, r3, #2
 800bad6:	4413      	add	r3, r2
 800bad8:	009b      	lsls	r3, r3, #2
 800bada:	440b      	add	r3, r1
 800badc:	681b      	ldr	r3, [r3, #0]
 800bade:	2b00      	cmp	r3, #0
 800bae0:	d0e4      	beq.n	800baac <vTaskSwitchContext+0x24>
 800bae2:	68fa      	ldr	r2, [r7, #12]
 800bae4:	4613      	mov	r3, r2
 800bae6:	009b      	lsls	r3, r3, #2
 800bae8:	4413      	add	r3, r2
 800baea:	009b      	lsls	r3, r3, #2
 800baec:	4a13      	ldr	r2, [pc, #76]	; (800bb3c <vTaskSwitchContext+0xb4>)
 800baee:	4413      	add	r3, r2
 800baf0:	60bb      	str	r3, [r7, #8]
 800baf2:	68bb      	ldr	r3, [r7, #8]
 800baf4:	685b      	ldr	r3, [r3, #4]
 800baf6:	685a      	ldr	r2, [r3, #4]
 800baf8:	68bb      	ldr	r3, [r7, #8]
 800bafa:	605a      	str	r2, [r3, #4]
 800bafc:	68bb      	ldr	r3, [r7, #8]
 800bafe:	685a      	ldr	r2, [r3, #4]
 800bb00:	68bb      	ldr	r3, [r7, #8]
 800bb02:	3308      	adds	r3, #8
 800bb04:	429a      	cmp	r2, r3
 800bb06:	d104      	bne.n	800bb12 <vTaskSwitchContext+0x8a>
 800bb08:	68bb      	ldr	r3, [r7, #8]
 800bb0a:	685b      	ldr	r3, [r3, #4]
 800bb0c:	685a      	ldr	r2, [r3, #4]
 800bb0e:	68bb      	ldr	r3, [r7, #8]
 800bb10:	605a      	str	r2, [r3, #4]
 800bb12:	68bb      	ldr	r3, [r7, #8]
 800bb14:	685b      	ldr	r3, [r3, #4]
 800bb16:	68db      	ldr	r3, [r3, #12]
 800bb18:	4a09      	ldr	r2, [pc, #36]	; (800bb40 <vTaskSwitchContext+0xb8>)
 800bb1a:	6013      	str	r3, [r2, #0]
 800bb1c:	4a06      	ldr	r2, [pc, #24]	; (800bb38 <vTaskSwitchContext+0xb0>)
 800bb1e:	68fb      	ldr	r3, [r7, #12]
 800bb20:	6013      	str	r3, [r2, #0]
}
 800bb22:	bf00      	nop
 800bb24:	3714      	adds	r7, #20
 800bb26:	46bd      	mov	sp, r7
 800bb28:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb2c:	4770      	bx	lr
 800bb2e:	bf00      	nop
 800bb30:	20000cc4 	.word	0x20000cc4
 800bb34:	20000cb0 	.word	0x20000cb0
 800bb38:	20000ca4 	.word	0x20000ca4
 800bb3c:	200007cc 	.word	0x200007cc
 800bb40:	200007c8 	.word	0x200007c8

0800bb44 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800bb44:	b580      	push	{r7, lr}
 800bb46:	b084      	sub	sp, #16
 800bb48:	af00      	add	r7, sp, #0
 800bb4a:	6078      	str	r0, [r7, #4]
 800bb4c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800bb4e:	687b      	ldr	r3, [r7, #4]
 800bb50:	2b00      	cmp	r3, #0
 800bb52:	d10a      	bne.n	800bb6a <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800bb54:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bb58:	f383 8811 	msr	BASEPRI, r3
 800bb5c:	f3bf 8f6f 	isb	sy
 800bb60:	f3bf 8f4f 	dsb	sy
 800bb64:	60fb      	str	r3, [r7, #12]
}
 800bb66:	bf00      	nop
 800bb68:	e7fe      	b.n	800bb68 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800bb6a:	4b07      	ldr	r3, [pc, #28]	; (800bb88 <vTaskPlaceOnEventList+0x44>)
 800bb6c:	681b      	ldr	r3, [r3, #0]
 800bb6e:	3318      	adds	r3, #24
 800bb70:	4619      	mov	r1, r3
 800bb72:	6878      	ldr	r0, [r7, #4]
 800bb74:	f7fe fe87 	bl	800a886 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800bb78:	2101      	movs	r1, #1
 800bb7a:	6838      	ldr	r0, [r7, #0]
 800bb7c:	f000 fab4 	bl	800c0e8 <prvAddCurrentTaskToDelayedList>
}
 800bb80:	bf00      	nop
 800bb82:	3710      	adds	r7, #16
 800bb84:	46bd      	mov	sp, r7
 800bb86:	bd80      	pop	{r7, pc}
 800bb88:	200007c8 	.word	0x200007c8

0800bb8c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800bb8c:	b580      	push	{r7, lr}
 800bb8e:	b086      	sub	sp, #24
 800bb90:	af00      	add	r7, sp, #0
 800bb92:	60f8      	str	r0, [r7, #12]
 800bb94:	60b9      	str	r1, [r7, #8]
 800bb96:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800bb98:	68fb      	ldr	r3, [r7, #12]
 800bb9a:	2b00      	cmp	r3, #0
 800bb9c:	d10a      	bne.n	800bbb4 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800bb9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bba2:	f383 8811 	msr	BASEPRI, r3
 800bba6:	f3bf 8f6f 	isb	sy
 800bbaa:	f3bf 8f4f 	dsb	sy
 800bbae:	617b      	str	r3, [r7, #20]
}
 800bbb0:	bf00      	nop
 800bbb2:	e7fe      	b.n	800bbb2 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800bbb4:	4b0a      	ldr	r3, [pc, #40]	; (800bbe0 <vTaskPlaceOnEventListRestricted+0x54>)
 800bbb6:	681b      	ldr	r3, [r3, #0]
 800bbb8:	3318      	adds	r3, #24
 800bbba:	4619      	mov	r1, r3
 800bbbc:	68f8      	ldr	r0, [r7, #12]
 800bbbe:	f7fe fe3e 	bl	800a83e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800bbc2:	687b      	ldr	r3, [r7, #4]
 800bbc4:	2b00      	cmp	r3, #0
 800bbc6:	d002      	beq.n	800bbce <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800bbc8:	f04f 33ff 	mov.w	r3, #4294967295
 800bbcc:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800bbce:	6879      	ldr	r1, [r7, #4]
 800bbd0:	68b8      	ldr	r0, [r7, #8]
 800bbd2:	f000 fa89 	bl	800c0e8 <prvAddCurrentTaskToDelayedList>
	}
 800bbd6:	bf00      	nop
 800bbd8:	3718      	adds	r7, #24
 800bbda:	46bd      	mov	sp, r7
 800bbdc:	bd80      	pop	{r7, pc}
 800bbde:	bf00      	nop
 800bbe0:	200007c8 	.word	0x200007c8

0800bbe4 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800bbe4:	b580      	push	{r7, lr}
 800bbe6:	b086      	sub	sp, #24
 800bbe8:	af00      	add	r7, sp, #0
 800bbea:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bbec:	687b      	ldr	r3, [r7, #4]
 800bbee:	68db      	ldr	r3, [r3, #12]
 800bbf0:	68db      	ldr	r3, [r3, #12]
 800bbf2:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800bbf4:	693b      	ldr	r3, [r7, #16]
 800bbf6:	2b00      	cmp	r3, #0
 800bbf8:	d10a      	bne.n	800bc10 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800bbfa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bbfe:	f383 8811 	msr	BASEPRI, r3
 800bc02:	f3bf 8f6f 	isb	sy
 800bc06:	f3bf 8f4f 	dsb	sy
 800bc0a:	60fb      	str	r3, [r7, #12]
}
 800bc0c:	bf00      	nop
 800bc0e:	e7fe      	b.n	800bc0e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800bc10:	693b      	ldr	r3, [r7, #16]
 800bc12:	3318      	adds	r3, #24
 800bc14:	4618      	mov	r0, r3
 800bc16:	f7fe fe6f 	bl	800a8f8 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800bc1a:	4b1e      	ldr	r3, [pc, #120]	; (800bc94 <xTaskRemoveFromEventList+0xb0>)
 800bc1c:	681b      	ldr	r3, [r3, #0]
 800bc1e:	2b00      	cmp	r3, #0
 800bc20:	d11d      	bne.n	800bc5e <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800bc22:	693b      	ldr	r3, [r7, #16]
 800bc24:	3304      	adds	r3, #4
 800bc26:	4618      	mov	r0, r3
 800bc28:	f7fe fe66 	bl	800a8f8 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800bc2c:	693b      	ldr	r3, [r7, #16]
 800bc2e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bc30:	4b19      	ldr	r3, [pc, #100]	; (800bc98 <xTaskRemoveFromEventList+0xb4>)
 800bc32:	681b      	ldr	r3, [r3, #0]
 800bc34:	429a      	cmp	r2, r3
 800bc36:	d903      	bls.n	800bc40 <xTaskRemoveFromEventList+0x5c>
 800bc38:	693b      	ldr	r3, [r7, #16]
 800bc3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bc3c:	4a16      	ldr	r2, [pc, #88]	; (800bc98 <xTaskRemoveFromEventList+0xb4>)
 800bc3e:	6013      	str	r3, [r2, #0]
 800bc40:	693b      	ldr	r3, [r7, #16]
 800bc42:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bc44:	4613      	mov	r3, r2
 800bc46:	009b      	lsls	r3, r3, #2
 800bc48:	4413      	add	r3, r2
 800bc4a:	009b      	lsls	r3, r3, #2
 800bc4c:	4a13      	ldr	r2, [pc, #76]	; (800bc9c <xTaskRemoveFromEventList+0xb8>)
 800bc4e:	441a      	add	r2, r3
 800bc50:	693b      	ldr	r3, [r7, #16]
 800bc52:	3304      	adds	r3, #4
 800bc54:	4619      	mov	r1, r3
 800bc56:	4610      	mov	r0, r2
 800bc58:	f7fe fdf1 	bl	800a83e <vListInsertEnd>
 800bc5c:	e005      	b.n	800bc6a <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800bc5e:	693b      	ldr	r3, [r7, #16]
 800bc60:	3318      	adds	r3, #24
 800bc62:	4619      	mov	r1, r3
 800bc64:	480e      	ldr	r0, [pc, #56]	; (800bca0 <xTaskRemoveFromEventList+0xbc>)
 800bc66:	f7fe fdea 	bl	800a83e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800bc6a:	693b      	ldr	r3, [r7, #16]
 800bc6c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bc6e:	4b0d      	ldr	r3, [pc, #52]	; (800bca4 <xTaskRemoveFromEventList+0xc0>)
 800bc70:	681b      	ldr	r3, [r3, #0]
 800bc72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bc74:	429a      	cmp	r2, r3
 800bc76:	d905      	bls.n	800bc84 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800bc78:	2301      	movs	r3, #1
 800bc7a:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800bc7c:	4b0a      	ldr	r3, [pc, #40]	; (800bca8 <xTaskRemoveFromEventList+0xc4>)
 800bc7e:	2201      	movs	r2, #1
 800bc80:	601a      	str	r2, [r3, #0]
 800bc82:	e001      	b.n	800bc88 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800bc84:	2300      	movs	r3, #0
 800bc86:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800bc88:	697b      	ldr	r3, [r7, #20]
}
 800bc8a:	4618      	mov	r0, r3
 800bc8c:	3718      	adds	r7, #24
 800bc8e:	46bd      	mov	sp, r7
 800bc90:	bd80      	pop	{r7, pc}
 800bc92:	bf00      	nop
 800bc94:	20000cc4 	.word	0x20000cc4
 800bc98:	20000ca4 	.word	0x20000ca4
 800bc9c:	200007cc 	.word	0x200007cc
 800bca0:	20000c5c 	.word	0x20000c5c
 800bca4:	200007c8 	.word	0x200007c8
 800bca8:	20000cb0 	.word	0x20000cb0

0800bcac <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800bcac:	b480      	push	{r7}
 800bcae:	b083      	sub	sp, #12
 800bcb0:	af00      	add	r7, sp, #0
 800bcb2:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800bcb4:	4b06      	ldr	r3, [pc, #24]	; (800bcd0 <vTaskInternalSetTimeOutState+0x24>)
 800bcb6:	681a      	ldr	r2, [r3, #0]
 800bcb8:	687b      	ldr	r3, [r7, #4]
 800bcba:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800bcbc:	4b05      	ldr	r3, [pc, #20]	; (800bcd4 <vTaskInternalSetTimeOutState+0x28>)
 800bcbe:	681a      	ldr	r2, [r3, #0]
 800bcc0:	687b      	ldr	r3, [r7, #4]
 800bcc2:	605a      	str	r2, [r3, #4]
}
 800bcc4:	bf00      	nop
 800bcc6:	370c      	adds	r7, #12
 800bcc8:	46bd      	mov	sp, r7
 800bcca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcce:	4770      	bx	lr
 800bcd0:	20000cb4 	.word	0x20000cb4
 800bcd4:	20000ca0 	.word	0x20000ca0

0800bcd8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800bcd8:	b580      	push	{r7, lr}
 800bcda:	b088      	sub	sp, #32
 800bcdc:	af00      	add	r7, sp, #0
 800bcde:	6078      	str	r0, [r7, #4]
 800bce0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800bce2:	687b      	ldr	r3, [r7, #4]
 800bce4:	2b00      	cmp	r3, #0
 800bce6:	d10a      	bne.n	800bcfe <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800bce8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bcec:	f383 8811 	msr	BASEPRI, r3
 800bcf0:	f3bf 8f6f 	isb	sy
 800bcf4:	f3bf 8f4f 	dsb	sy
 800bcf8:	613b      	str	r3, [r7, #16]
}
 800bcfa:	bf00      	nop
 800bcfc:	e7fe      	b.n	800bcfc <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800bcfe:	683b      	ldr	r3, [r7, #0]
 800bd00:	2b00      	cmp	r3, #0
 800bd02:	d10a      	bne.n	800bd1a <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800bd04:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bd08:	f383 8811 	msr	BASEPRI, r3
 800bd0c:	f3bf 8f6f 	isb	sy
 800bd10:	f3bf 8f4f 	dsb	sy
 800bd14:	60fb      	str	r3, [r7, #12]
}
 800bd16:	bf00      	nop
 800bd18:	e7fe      	b.n	800bd18 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800bd1a:	f000 feb3 	bl	800ca84 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800bd1e:	4b1d      	ldr	r3, [pc, #116]	; (800bd94 <xTaskCheckForTimeOut+0xbc>)
 800bd20:	681b      	ldr	r3, [r3, #0]
 800bd22:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800bd24:	687b      	ldr	r3, [r7, #4]
 800bd26:	685b      	ldr	r3, [r3, #4]
 800bd28:	69ba      	ldr	r2, [r7, #24]
 800bd2a:	1ad3      	subs	r3, r2, r3
 800bd2c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800bd2e:	683b      	ldr	r3, [r7, #0]
 800bd30:	681b      	ldr	r3, [r3, #0]
 800bd32:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bd36:	d102      	bne.n	800bd3e <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800bd38:	2300      	movs	r3, #0
 800bd3a:	61fb      	str	r3, [r7, #28]
 800bd3c:	e023      	b.n	800bd86 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800bd3e:	687b      	ldr	r3, [r7, #4]
 800bd40:	681a      	ldr	r2, [r3, #0]
 800bd42:	4b15      	ldr	r3, [pc, #84]	; (800bd98 <xTaskCheckForTimeOut+0xc0>)
 800bd44:	681b      	ldr	r3, [r3, #0]
 800bd46:	429a      	cmp	r2, r3
 800bd48:	d007      	beq.n	800bd5a <xTaskCheckForTimeOut+0x82>
 800bd4a:	687b      	ldr	r3, [r7, #4]
 800bd4c:	685b      	ldr	r3, [r3, #4]
 800bd4e:	69ba      	ldr	r2, [r7, #24]
 800bd50:	429a      	cmp	r2, r3
 800bd52:	d302      	bcc.n	800bd5a <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800bd54:	2301      	movs	r3, #1
 800bd56:	61fb      	str	r3, [r7, #28]
 800bd58:	e015      	b.n	800bd86 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800bd5a:	683b      	ldr	r3, [r7, #0]
 800bd5c:	681b      	ldr	r3, [r3, #0]
 800bd5e:	697a      	ldr	r2, [r7, #20]
 800bd60:	429a      	cmp	r2, r3
 800bd62:	d20b      	bcs.n	800bd7c <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800bd64:	683b      	ldr	r3, [r7, #0]
 800bd66:	681a      	ldr	r2, [r3, #0]
 800bd68:	697b      	ldr	r3, [r7, #20]
 800bd6a:	1ad2      	subs	r2, r2, r3
 800bd6c:	683b      	ldr	r3, [r7, #0]
 800bd6e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800bd70:	6878      	ldr	r0, [r7, #4]
 800bd72:	f7ff ff9b 	bl	800bcac <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800bd76:	2300      	movs	r3, #0
 800bd78:	61fb      	str	r3, [r7, #28]
 800bd7a:	e004      	b.n	800bd86 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800bd7c:	683b      	ldr	r3, [r7, #0]
 800bd7e:	2200      	movs	r2, #0
 800bd80:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800bd82:	2301      	movs	r3, #1
 800bd84:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800bd86:	f000 fead 	bl	800cae4 <vPortExitCritical>

	return xReturn;
 800bd8a:	69fb      	ldr	r3, [r7, #28]
}
 800bd8c:	4618      	mov	r0, r3
 800bd8e:	3720      	adds	r7, #32
 800bd90:	46bd      	mov	sp, r7
 800bd92:	bd80      	pop	{r7, pc}
 800bd94:	20000ca0 	.word	0x20000ca0
 800bd98:	20000cb4 	.word	0x20000cb4

0800bd9c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800bd9c:	b480      	push	{r7}
 800bd9e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800bda0:	4b03      	ldr	r3, [pc, #12]	; (800bdb0 <vTaskMissedYield+0x14>)
 800bda2:	2201      	movs	r2, #1
 800bda4:	601a      	str	r2, [r3, #0]
}
 800bda6:	bf00      	nop
 800bda8:	46bd      	mov	sp, r7
 800bdaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdae:	4770      	bx	lr
 800bdb0:	20000cb0 	.word	0x20000cb0

0800bdb4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800bdb4:	b580      	push	{r7, lr}
 800bdb6:	b082      	sub	sp, #8
 800bdb8:	af00      	add	r7, sp, #0
 800bdba:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800bdbc:	f000 f852 	bl	800be64 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800bdc0:	4b06      	ldr	r3, [pc, #24]	; (800bddc <prvIdleTask+0x28>)
 800bdc2:	681b      	ldr	r3, [r3, #0]
 800bdc4:	2b01      	cmp	r3, #1
 800bdc6:	d9f9      	bls.n	800bdbc <prvIdleTask+0x8>
			{
				taskYIELD();
 800bdc8:	4b05      	ldr	r3, [pc, #20]	; (800bde0 <prvIdleTask+0x2c>)
 800bdca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bdce:	601a      	str	r2, [r3, #0]
 800bdd0:	f3bf 8f4f 	dsb	sy
 800bdd4:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800bdd8:	e7f0      	b.n	800bdbc <prvIdleTask+0x8>
 800bdda:	bf00      	nop
 800bddc:	200007cc 	.word	0x200007cc
 800bde0:	e000ed04 	.word	0xe000ed04

0800bde4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800bde4:	b580      	push	{r7, lr}
 800bde6:	b082      	sub	sp, #8
 800bde8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800bdea:	2300      	movs	r3, #0
 800bdec:	607b      	str	r3, [r7, #4]
 800bdee:	e00c      	b.n	800be0a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800bdf0:	687a      	ldr	r2, [r7, #4]
 800bdf2:	4613      	mov	r3, r2
 800bdf4:	009b      	lsls	r3, r3, #2
 800bdf6:	4413      	add	r3, r2
 800bdf8:	009b      	lsls	r3, r3, #2
 800bdfa:	4a12      	ldr	r2, [pc, #72]	; (800be44 <prvInitialiseTaskLists+0x60>)
 800bdfc:	4413      	add	r3, r2
 800bdfe:	4618      	mov	r0, r3
 800be00:	f7fe fcf0 	bl	800a7e4 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800be04:	687b      	ldr	r3, [r7, #4]
 800be06:	3301      	adds	r3, #1
 800be08:	607b      	str	r3, [r7, #4]
 800be0a:	687b      	ldr	r3, [r7, #4]
 800be0c:	2b37      	cmp	r3, #55	; 0x37
 800be0e:	d9ef      	bls.n	800bdf0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800be10:	480d      	ldr	r0, [pc, #52]	; (800be48 <prvInitialiseTaskLists+0x64>)
 800be12:	f7fe fce7 	bl	800a7e4 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800be16:	480d      	ldr	r0, [pc, #52]	; (800be4c <prvInitialiseTaskLists+0x68>)
 800be18:	f7fe fce4 	bl	800a7e4 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800be1c:	480c      	ldr	r0, [pc, #48]	; (800be50 <prvInitialiseTaskLists+0x6c>)
 800be1e:	f7fe fce1 	bl	800a7e4 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800be22:	480c      	ldr	r0, [pc, #48]	; (800be54 <prvInitialiseTaskLists+0x70>)
 800be24:	f7fe fcde 	bl	800a7e4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800be28:	480b      	ldr	r0, [pc, #44]	; (800be58 <prvInitialiseTaskLists+0x74>)
 800be2a:	f7fe fcdb 	bl	800a7e4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800be2e:	4b0b      	ldr	r3, [pc, #44]	; (800be5c <prvInitialiseTaskLists+0x78>)
 800be30:	4a05      	ldr	r2, [pc, #20]	; (800be48 <prvInitialiseTaskLists+0x64>)
 800be32:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800be34:	4b0a      	ldr	r3, [pc, #40]	; (800be60 <prvInitialiseTaskLists+0x7c>)
 800be36:	4a05      	ldr	r2, [pc, #20]	; (800be4c <prvInitialiseTaskLists+0x68>)
 800be38:	601a      	str	r2, [r3, #0]
}
 800be3a:	bf00      	nop
 800be3c:	3708      	adds	r7, #8
 800be3e:	46bd      	mov	sp, r7
 800be40:	bd80      	pop	{r7, pc}
 800be42:	bf00      	nop
 800be44:	200007cc 	.word	0x200007cc
 800be48:	20000c2c 	.word	0x20000c2c
 800be4c:	20000c40 	.word	0x20000c40
 800be50:	20000c5c 	.word	0x20000c5c
 800be54:	20000c70 	.word	0x20000c70
 800be58:	20000c88 	.word	0x20000c88
 800be5c:	20000c54 	.word	0x20000c54
 800be60:	20000c58 	.word	0x20000c58

0800be64 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800be64:	b580      	push	{r7, lr}
 800be66:	b082      	sub	sp, #8
 800be68:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800be6a:	e019      	b.n	800bea0 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800be6c:	f000 fe0a 	bl	800ca84 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800be70:	4b10      	ldr	r3, [pc, #64]	; (800beb4 <prvCheckTasksWaitingTermination+0x50>)
 800be72:	68db      	ldr	r3, [r3, #12]
 800be74:	68db      	ldr	r3, [r3, #12]
 800be76:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800be78:	687b      	ldr	r3, [r7, #4]
 800be7a:	3304      	adds	r3, #4
 800be7c:	4618      	mov	r0, r3
 800be7e:	f7fe fd3b 	bl	800a8f8 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800be82:	4b0d      	ldr	r3, [pc, #52]	; (800beb8 <prvCheckTasksWaitingTermination+0x54>)
 800be84:	681b      	ldr	r3, [r3, #0]
 800be86:	3b01      	subs	r3, #1
 800be88:	4a0b      	ldr	r2, [pc, #44]	; (800beb8 <prvCheckTasksWaitingTermination+0x54>)
 800be8a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800be8c:	4b0b      	ldr	r3, [pc, #44]	; (800bebc <prvCheckTasksWaitingTermination+0x58>)
 800be8e:	681b      	ldr	r3, [r3, #0]
 800be90:	3b01      	subs	r3, #1
 800be92:	4a0a      	ldr	r2, [pc, #40]	; (800bebc <prvCheckTasksWaitingTermination+0x58>)
 800be94:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800be96:	f000 fe25 	bl	800cae4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800be9a:	6878      	ldr	r0, [r7, #4]
 800be9c:	f000 f848 	bl	800bf30 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800bea0:	4b06      	ldr	r3, [pc, #24]	; (800bebc <prvCheckTasksWaitingTermination+0x58>)
 800bea2:	681b      	ldr	r3, [r3, #0]
 800bea4:	2b00      	cmp	r3, #0
 800bea6:	d1e1      	bne.n	800be6c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800bea8:	bf00      	nop
 800beaa:	bf00      	nop
 800beac:	3708      	adds	r7, #8
 800beae:	46bd      	mov	sp, r7
 800beb0:	bd80      	pop	{r7, pc}
 800beb2:	bf00      	nop
 800beb4:	20000c70 	.word	0x20000c70
 800beb8:	20000c9c 	.word	0x20000c9c
 800bebc:	20000c84 	.word	0x20000c84

0800bec0 <prvTaskCheckFreeStackSpace>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark2 == 1 ) )

	static configSTACK_DEPTH_TYPE prvTaskCheckFreeStackSpace( const uint8_t * pucStackByte )
	{
 800bec0:	b480      	push	{r7}
 800bec2:	b085      	sub	sp, #20
 800bec4:	af00      	add	r7, sp, #0
 800bec6:	6078      	str	r0, [r7, #4]
	uint32_t ulCount = 0U;
 800bec8:	2300      	movs	r3, #0
 800beca:	60fb      	str	r3, [r7, #12]

		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 800becc:	e005      	b.n	800beda <prvTaskCheckFreeStackSpace+0x1a>
		{
			pucStackByte -= portSTACK_GROWTH;
 800bece:	687b      	ldr	r3, [r7, #4]
 800bed0:	3301      	adds	r3, #1
 800bed2:	607b      	str	r3, [r7, #4]
			ulCount++;
 800bed4:	68fb      	ldr	r3, [r7, #12]
 800bed6:	3301      	adds	r3, #1
 800bed8:	60fb      	str	r3, [r7, #12]
		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 800beda:	687b      	ldr	r3, [r7, #4]
 800bedc:	781b      	ldrb	r3, [r3, #0]
 800bede:	2ba5      	cmp	r3, #165	; 0xa5
 800bee0:	d0f5      	beq.n	800bece <prvTaskCheckFreeStackSpace+0xe>
		}

		ulCount /= ( uint32_t ) sizeof( StackType_t ); /*lint !e961 Casting is not redundant on smaller architectures. */
 800bee2:	68fb      	ldr	r3, [r7, #12]
 800bee4:	089b      	lsrs	r3, r3, #2
 800bee6:	60fb      	str	r3, [r7, #12]

		return ( configSTACK_DEPTH_TYPE ) ulCount;
 800bee8:	68fb      	ldr	r3, [r7, #12]
 800beea:	b29b      	uxth	r3, r3
	}
 800beec:	4618      	mov	r0, r3
 800beee:	3714      	adds	r7, #20
 800bef0:	46bd      	mov	sp, r7
 800bef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bef6:	4770      	bx	lr

0800bef8 <uxTaskGetStackHighWaterMark>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_uxTaskGetStackHighWaterMark == 1 )

	UBaseType_t uxTaskGetStackHighWaterMark( TaskHandle_t xTask )
	{
 800bef8:	b580      	push	{r7, lr}
 800befa:	b086      	sub	sp, #24
 800befc:	af00      	add	r7, sp, #0
 800befe:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;
	uint8_t *pucEndOfStack;
	UBaseType_t uxReturn;

		pxTCB = prvGetTCBFromHandle( xTask );
 800bf00:	687b      	ldr	r3, [r7, #4]
 800bf02:	2b00      	cmp	r3, #0
 800bf04:	d102      	bne.n	800bf0c <uxTaskGetStackHighWaterMark+0x14>
 800bf06:	4b09      	ldr	r3, [pc, #36]	; (800bf2c <uxTaskGetStackHighWaterMark+0x34>)
 800bf08:	681b      	ldr	r3, [r3, #0]
 800bf0a:	e000      	b.n	800bf0e <uxTaskGetStackHighWaterMark+0x16>
 800bf0c:	687b      	ldr	r3, [r7, #4]
 800bf0e:	617b      	str	r3, [r7, #20]

		#if portSTACK_GROWTH < 0
		{
			pucEndOfStack = ( uint8_t * ) pxTCB->pxStack;
 800bf10:	697b      	ldr	r3, [r7, #20]
 800bf12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bf14:	613b      	str	r3, [r7, #16]
		{
			pucEndOfStack = ( uint8_t * ) pxTCB->pxEndOfStack;
		}
		#endif

		uxReturn = ( UBaseType_t ) prvTaskCheckFreeStackSpace( pucEndOfStack );
 800bf16:	6938      	ldr	r0, [r7, #16]
 800bf18:	f7ff ffd2 	bl	800bec0 <prvTaskCheckFreeStackSpace>
 800bf1c:	4603      	mov	r3, r0
 800bf1e:	60fb      	str	r3, [r7, #12]

		return uxReturn;
 800bf20:	68fb      	ldr	r3, [r7, #12]
	}
 800bf22:	4618      	mov	r0, r3
 800bf24:	3718      	adds	r7, #24
 800bf26:	46bd      	mov	sp, r7
 800bf28:	bd80      	pop	{r7, pc}
 800bf2a:	bf00      	nop
 800bf2c:	200007c8 	.word	0x200007c8

0800bf30 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800bf30:	b580      	push	{r7, lr}
 800bf32:	b084      	sub	sp, #16
 800bf34:	af00      	add	r7, sp, #0
 800bf36:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800bf38:	687b      	ldr	r3, [r7, #4]
 800bf3a:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800bf3e:	2b00      	cmp	r3, #0
 800bf40:	d108      	bne.n	800bf54 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800bf42:	687b      	ldr	r3, [r7, #4]
 800bf44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bf46:	4618      	mov	r0, r3
 800bf48:	f000 ff8a 	bl	800ce60 <vPortFree>
				vPortFree( pxTCB );
 800bf4c:	6878      	ldr	r0, [r7, #4]
 800bf4e:	f000 ff87 	bl	800ce60 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800bf52:	e018      	b.n	800bf86 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800bf54:	687b      	ldr	r3, [r7, #4]
 800bf56:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800bf5a:	2b01      	cmp	r3, #1
 800bf5c:	d103      	bne.n	800bf66 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800bf5e:	6878      	ldr	r0, [r7, #4]
 800bf60:	f000 ff7e 	bl	800ce60 <vPortFree>
	}
 800bf64:	e00f      	b.n	800bf86 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800bf66:	687b      	ldr	r3, [r7, #4]
 800bf68:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800bf6c:	2b02      	cmp	r3, #2
 800bf6e:	d00a      	beq.n	800bf86 <prvDeleteTCB+0x56>
	__asm volatile
 800bf70:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bf74:	f383 8811 	msr	BASEPRI, r3
 800bf78:	f3bf 8f6f 	isb	sy
 800bf7c:	f3bf 8f4f 	dsb	sy
 800bf80:	60fb      	str	r3, [r7, #12]
}
 800bf82:	bf00      	nop
 800bf84:	e7fe      	b.n	800bf84 <prvDeleteTCB+0x54>
	}
 800bf86:	bf00      	nop
 800bf88:	3710      	adds	r7, #16
 800bf8a:	46bd      	mov	sp, r7
 800bf8c:	bd80      	pop	{r7, pc}
	...

0800bf90 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800bf90:	b480      	push	{r7}
 800bf92:	b083      	sub	sp, #12
 800bf94:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800bf96:	4b0c      	ldr	r3, [pc, #48]	; (800bfc8 <prvResetNextTaskUnblockTime+0x38>)
 800bf98:	681b      	ldr	r3, [r3, #0]
 800bf9a:	681b      	ldr	r3, [r3, #0]
 800bf9c:	2b00      	cmp	r3, #0
 800bf9e:	d104      	bne.n	800bfaa <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800bfa0:	4b0a      	ldr	r3, [pc, #40]	; (800bfcc <prvResetNextTaskUnblockTime+0x3c>)
 800bfa2:	f04f 32ff 	mov.w	r2, #4294967295
 800bfa6:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800bfa8:	e008      	b.n	800bfbc <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bfaa:	4b07      	ldr	r3, [pc, #28]	; (800bfc8 <prvResetNextTaskUnblockTime+0x38>)
 800bfac:	681b      	ldr	r3, [r3, #0]
 800bfae:	68db      	ldr	r3, [r3, #12]
 800bfb0:	68db      	ldr	r3, [r3, #12]
 800bfb2:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800bfb4:	687b      	ldr	r3, [r7, #4]
 800bfb6:	685b      	ldr	r3, [r3, #4]
 800bfb8:	4a04      	ldr	r2, [pc, #16]	; (800bfcc <prvResetNextTaskUnblockTime+0x3c>)
 800bfba:	6013      	str	r3, [r2, #0]
}
 800bfbc:	bf00      	nop
 800bfbe:	370c      	adds	r7, #12
 800bfc0:	46bd      	mov	sp, r7
 800bfc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfc6:	4770      	bx	lr
 800bfc8:	20000c54 	.word	0x20000c54
 800bfcc:	20000cbc 	.word	0x20000cbc

0800bfd0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800bfd0:	b480      	push	{r7}
 800bfd2:	b083      	sub	sp, #12
 800bfd4:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800bfd6:	4b0b      	ldr	r3, [pc, #44]	; (800c004 <xTaskGetSchedulerState+0x34>)
 800bfd8:	681b      	ldr	r3, [r3, #0]
 800bfda:	2b00      	cmp	r3, #0
 800bfdc:	d102      	bne.n	800bfe4 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800bfde:	2301      	movs	r3, #1
 800bfe0:	607b      	str	r3, [r7, #4]
 800bfe2:	e008      	b.n	800bff6 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800bfe4:	4b08      	ldr	r3, [pc, #32]	; (800c008 <xTaskGetSchedulerState+0x38>)
 800bfe6:	681b      	ldr	r3, [r3, #0]
 800bfe8:	2b00      	cmp	r3, #0
 800bfea:	d102      	bne.n	800bff2 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800bfec:	2302      	movs	r3, #2
 800bfee:	607b      	str	r3, [r7, #4]
 800bff0:	e001      	b.n	800bff6 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800bff2:	2300      	movs	r3, #0
 800bff4:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800bff6:	687b      	ldr	r3, [r7, #4]
	}
 800bff8:	4618      	mov	r0, r3
 800bffa:	370c      	adds	r7, #12
 800bffc:	46bd      	mov	sp, r7
 800bffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c002:	4770      	bx	lr
 800c004:	20000ca8 	.word	0x20000ca8
 800c008:	20000cc4 	.word	0x20000cc4

0800c00c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800c00c:	b580      	push	{r7, lr}
 800c00e:	b086      	sub	sp, #24
 800c010:	af00      	add	r7, sp, #0
 800c012:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800c014:	687b      	ldr	r3, [r7, #4]
 800c016:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800c018:	2300      	movs	r3, #0
 800c01a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800c01c:	687b      	ldr	r3, [r7, #4]
 800c01e:	2b00      	cmp	r3, #0
 800c020:	d056      	beq.n	800c0d0 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800c022:	4b2e      	ldr	r3, [pc, #184]	; (800c0dc <xTaskPriorityDisinherit+0xd0>)
 800c024:	681b      	ldr	r3, [r3, #0]
 800c026:	693a      	ldr	r2, [r7, #16]
 800c028:	429a      	cmp	r2, r3
 800c02a:	d00a      	beq.n	800c042 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800c02c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c030:	f383 8811 	msr	BASEPRI, r3
 800c034:	f3bf 8f6f 	isb	sy
 800c038:	f3bf 8f4f 	dsb	sy
 800c03c:	60fb      	str	r3, [r7, #12]
}
 800c03e:	bf00      	nop
 800c040:	e7fe      	b.n	800c040 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800c042:	693b      	ldr	r3, [r7, #16]
 800c044:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c046:	2b00      	cmp	r3, #0
 800c048:	d10a      	bne.n	800c060 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800c04a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c04e:	f383 8811 	msr	BASEPRI, r3
 800c052:	f3bf 8f6f 	isb	sy
 800c056:	f3bf 8f4f 	dsb	sy
 800c05a:	60bb      	str	r3, [r7, #8]
}
 800c05c:	bf00      	nop
 800c05e:	e7fe      	b.n	800c05e <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800c060:	693b      	ldr	r3, [r7, #16]
 800c062:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c064:	1e5a      	subs	r2, r3, #1
 800c066:	693b      	ldr	r3, [r7, #16]
 800c068:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800c06a:	693b      	ldr	r3, [r7, #16]
 800c06c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c06e:	693b      	ldr	r3, [r7, #16]
 800c070:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c072:	429a      	cmp	r2, r3
 800c074:	d02c      	beq.n	800c0d0 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800c076:	693b      	ldr	r3, [r7, #16]
 800c078:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c07a:	2b00      	cmp	r3, #0
 800c07c:	d128      	bne.n	800c0d0 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800c07e:	693b      	ldr	r3, [r7, #16]
 800c080:	3304      	adds	r3, #4
 800c082:	4618      	mov	r0, r3
 800c084:	f7fe fc38 	bl	800a8f8 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800c088:	693b      	ldr	r3, [r7, #16]
 800c08a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800c08c:	693b      	ldr	r3, [r7, #16]
 800c08e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c090:	693b      	ldr	r3, [r7, #16]
 800c092:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c094:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800c098:	693b      	ldr	r3, [r7, #16]
 800c09a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800c09c:	693b      	ldr	r3, [r7, #16]
 800c09e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c0a0:	4b0f      	ldr	r3, [pc, #60]	; (800c0e0 <xTaskPriorityDisinherit+0xd4>)
 800c0a2:	681b      	ldr	r3, [r3, #0]
 800c0a4:	429a      	cmp	r2, r3
 800c0a6:	d903      	bls.n	800c0b0 <xTaskPriorityDisinherit+0xa4>
 800c0a8:	693b      	ldr	r3, [r7, #16]
 800c0aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c0ac:	4a0c      	ldr	r2, [pc, #48]	; (800c0e0 <xTaskPriorityDisinherit+0xd4>)
 800c0ae:	6013      	str	r3, [r2, #0]
 800c0b0:	693b      	ldr	r3, [r7, #16]
 800c0b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c0b4:	4613      	mov	r3, r2
 800c0b6:	009b      	lsls	r3, r3, #2
 800c0b8:	4413      	add	r3, r2
 800c0ba:	009b      	lsls	r3, r3, #2
 800c0bc:	4a09      	ldr	r2, [pc, #36]	; (800c0e4 <xTaskPriorityDisinherit+0xd8>)
 800c0be:	441a      	add	r2, r3
 800c0c0:	693b      	ldr	r3, [r7, #16]
 800c0c2:	3304      	adds	r3, #4
 800c0c4:	4619      	mov	r1, r3
 800c0c6:	4610      	mov	r0, r2
 800c0c8:	f7fe fbb9 	bl	800a83e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800c0cc:	2301      	movs	r3, #1
 800c0ce:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800c0d0:	697b      	ldr	r3, [r7, #20]
	}
 800c0d2:	4618      	mov	r0, r3
 800c0d4:	3718      	adds	r7, #24
 800c0d6:	46bd      	mov	sp, r7
 800c0d8:	bd80      	pop	{r7, pc}
 800c0da:	bf00      	nop
 800c0dc:	200007c8 	.word	0x200007c8
 800c0e0:	20000ca4 	.word	0x20000ca4
 800c0e4:	200007cc 	.word	0x200007cc

0800c0e8 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800c0e8:	b580      	push	{r7, lr}
 800c0ea:	b084      	sub	sp, #16
 800c0ec:	af00      	add	r7, sp, #0
 800c0ee:	6078      	str	r0, [r7, #4]
 800c0f0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800c0f2:	4b21      	ldr	r3, [pc, #132]	; (800c178 <prvAddCurrentTaskToDelayedList+0x90>)
 800c0f4:	681b      	ldr	r3, [r3, #0]
 800c0f6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800c0f8:	4b20      	ldr	r3, [pc, #128]	; (800c17c <prvAddCurrentTaskToDelayedList+0x94>)
 800c0fa:	681b      	ldr	r3, [r3, #0]
 800c0fc:	3304      	adds	r3, #4
 800c0fe:	4618      	mov	r0, r3
 800c100:	f7fe fbfa 	bl	800a8f8 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800c104:	687b      	ldr	r3, [r7, #4]
 800c106:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c10a:	d10a      	bne.n	800c122 <prvAddCurrentTaskToDelayedList+0x3a>
 800c10c:	683b      	ldr	r3, [r7, #0]
 800c10e:	2b00      	cmp	r3, #0
 800c110:	d007      	beq.n	800c122 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c112:	4b1a      	ldr	r3, [pc, #104]	; (800c17c <prvAddCurrentTaskToDelayedList+0x94>)
 800c114:	681b      	ldr	r3, [r3, #0]
 800c116:	3304      	adds	r3, #4
 800c118:	4619      	mov	r1, r3
 800c11a:	4819      	ldr	r0, [pc, #100]	; (800c180 <prvAddCurrentTaskToDelayedList+0x98>)
 800c11c:	f7fe fb8f 	bl	800a83e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800c120:	e026      	b.n	800c170 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800c122:	68fa      	ldr	r2, [r7, #12]
 800c124:	687b      	ldr	r3, [r7, #4]
 800c126:	4413      	add	r3, r2
 800c128:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800c12a:	4b14      	ldr	r3, [pc, #80]	; (800c17c <prvAddCurrentTaskToDelayedList+0x94>)
 800c12c:	681b      	ldr	r3, [r3, #0]
 800c12e:	68ba      	ldr	r2, [r7, #8]
 800c130:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800c132:	68ba      	ldr	r2, [r7, #8]
 800c134:	68fb      	ldr	r3, [r7, #12]
 800c136:	429a      	cmp	r2, r3
 800c138:	d209      	bcs.n	800c14e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c13a:	4b12      	ldr	r3, [pc, #72]	; (800c184 <prvAddCurrentTaskToDelayedList+0x9c>)
 800c13c:	681a      	ldr	r2, [r3, #0]
 800c13e:	4b0f      	ldr	r3, [pc, #60]	; (800c17c <prvAddCurrentTaskToDelayedList+0x94>)
 800c140:	681b      	ldr	r3, [r3, #0]
 800c142:	3304      	adds	r3, #4
 800c144:	4619      	mov	r1, r3
 800c146:	4610      	mov	r0, r2
 800c148:	f7fe fb9d 	bl	800a886 <vListInsert>
}
 800c14c:	e010      	b.n	800c170 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c14e:	4b0e      	ldr	r3, [pc, #56]	; (800c188 <prvAddCurrentTaskToDelayedList+0xa0>)
 800c150:	681a      	ldr	r2, [r3, #0]
 800c152:	4b0a      	ldr	r3, [pc, #40]	; (800c17c <prvAddCurrentTaskToDelayedList+0x94>)
 800c154:	681b      	ldr	r3, [r3, #0]
 800c156:	3304      	adds	r3, #4
 800c158:	4619      	mov	r1, r3
 800c15a:	4610      	mov	r0, r2
 800c15c:	f7fe fb93 	bl	800a886 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800c160:	4b0a      	ldr	r3, [pc, #40]	; (800c18c <prvAddCurrentTaskToDelayedList+0xa4>)
 800c162:	681b      	ldr	r3, [r3, #0]
 800c164:	68ba      	ldr	r2, [r7, #8]
 800c166:	429a      	cmp	r2, r3
 800c168:	d202      	bcs.n	800c170 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800c16a:	4a08      	ldr	r2, [pc, #32]	; (800c18c <prvAddCurrentTaskToDelayedList+0xa4>)
 800c16c:	68bb      	ldr	r3, [r7, #8]
 800c16e:	6013      	str	r3, [r2, #0]
}
 800c170:	bf00      	nop
 800c172:	3710      	adds	r7, #16
 800c174:	46bd      	mov	sp, r7
 800c176:	bd80      	pop	{r7, pc}
 800c178:	20000ca0 	.word	0x20000ca0
 800c17c:	200007c8 	.word	0x200007c8
 800c180:	20000c88 	.word	0x20000c88
 800c184:	20000c58 	.word	0x20000c58
 800c188:	20000c54 	.word	0x20000c54
 800c18c:	20000cbc 	.word	0x20000cbc

0800c190 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800c190:	b580      	push	{r7, lr}
 800c192:	b08a      	sub	sp, #40	; 0x28
 800c194:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800c196:	2300      	movs	r3, #0
 800c198:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800c19a:	f000 fb07 	bl	800c7ac <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800c19e:	4b1c      	ldr	r3, [pc, #112]	; (800c210 <xTimerCreateTimerTask+0x80>)
 800c1a0:	681b      	ldr	r3, [r3, #0]
 800c1a2:	2b00      	cmp	r3, #0
 800c1a4:	d021      	beq.n	800c1ea <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800c1a6:	2300      	movs	r3, #0
 800c1a8:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800c1aa:	2300      	movs	r3, #0
 800c1ac:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800c1ae:	1d3a      	adds	r2, r7, #4
 800c1b0:	f107 0108 	add.w	r1, r7, #8
 800c1b4:	f107 030c 	add.w	r3, r7, #12
 800c1b8:	4618      	mov	r0, r3
 800c1ba:	f7fe faf9 	bl	800a7b0 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800c1be:	6879      	ldr	r1, [r7, #4]
 800c1c0:	68bb      	ldr	r3, [r7, #8]
 800c1c2:	68fa      	ldr	r2, [r7, #12]
 800c1c4:	9202      	str	r2, [sp, #8]
 800c1c6:	9301      	str	r3, [sp, #4]
 800c1c8:	2302      	movs	r3, #2
 800c1ca:	9300      	str	r3, [sp, #0]
 800c1cc:	2300      	movs	r3, #0
 800c1ce:	460a      	mov	r2, r1
 800c1d0:	4910      	ldr	r1, [pc, #64]	; (800c214 <xTimerCreateTimerTask+0x84>)
 800c1d2:	4811      	ldr	r0, [pc, #68]	; (800c218 <xTimerCreateTimerTask+0x88>)
 800c1d4:	f7ff f8a6 	bl	800b324 <xTaskCreateStatic>
 800c1d8:	4603      	mov	r3, r0
 800c1da:	4a10      	ldr	r2, [pc, #64]	; (800c21c <xTimerCreateTimerTask+0x8c>)
 800c1dc:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800c1de:	4b0f      	ldr	r3, [pc, #60]	; (800c21c <xTimerCreateTimerTask+0x8c>)
 800c1e0:	681b      	ldr	r3, [r3, #0]
 800c1e2:	2b00      	cmp	r3, #0
 800c1e4:	d001      	beq.n	800c1ea <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800c1e6:	2301      	movs	r3, #1
 800c1e8:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800c1ea:	697b      	ldr	r3, [r7, #20]
 800c1ec:	2b00      	cmp	r3, #0
 800c1ee:	d10a      	bne.n	800c206 <xTimerCreateTimerTask+0x76>
	__asm volatile
 800c1f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c1f4:	f383 8811 	msr	BASEPRI, r3
 800c1f8:	f3bf 8f6f 	isb	sy
 800c1fc:	f3bf 8f4f 	dsb	sy
 800c200:	613b      	str	r3, [r7, #16]
}
 800c202:	bf00      	nop
 800c204:	e7fe      	b.n	800c204 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800c206:	697b      	ldr	r3, [r7, #20]
}
 800c208:	4618      	mov	r0, r3
 800c20a:	3718      	adds	r7, #24
 800c20c:	46bd      	mov	sp, r7
 800c20e:	bd80      	pop	{r7, pc}
 800c210:	20000cf8 	.word	0x20000cf8
 800c214:	0800fa6c 	.word	0x0800fa6c
 800c218:	0800c355 	.word	0x0800c355
 800c21c:	20000cfc 	.word	0x20000cfc

0800c220 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800c220:	b580      	push	{r7, lr}
 800c222:	b08a      	sub	sp, #40	; 0x28
 800c224:	af00      	add	r7, sp, #0
 800c226:	60f8      	str	r0, [r7, #12]
 800c228:	60b9      	str	r1, [r7, #8]
 800c22a:	607a      	str	r2, [r7, #4]
 800c22c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800c22e:	2300      	movs	r3, #0
 800c230:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800c232:	68fb      	ldr	r3, [r7, #12]
 800c234:	2b00      	cmp	r3, #0
 800c236:	d10a      	bne.n	800c24e <xTimerGenericCommand+0x2e>
	__asm volatile
 800c238:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c23c:	f383 8811 	msr	BASEPRI, r3
 800c240:	f3bf 8f6f 	isb	sy
 800c244:	f3bf 8f4f 	dsb	sy
 800c248:	623b      	str	r3, [r7, #32]
}
 800c24a:	bf00      	nop
 800c24c:	e7fe      	b.n	800c24c <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800c24e:	4b1a      	ldr	r3, [pc, #104]	; (800c2b8 <xTimerGenericCommand+0x98>)
 800c250:	681b      	ldr	r3, [r3, #0]
 800c252:	2b00      	cmp	r3, #0
 800c254:	d02a      	beq.n	800c2ac <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800c256:	68bb      	ldr	r3, [r7, #8]
 800c258:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800c25a:	687b      	ldr	r3, [r7, #4]
 800c25c:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800c25e:	68fb      	ldr	r3, [r7, #12]
 800c260:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800c262:	68bb      	ldr	r3, [r7, #8]
 800c264:	2b05      	cmp	r3, #5
 800c266:	dc18      	bgt.n	800c29a <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800c268:	f7ff feb2 	bl	800bfd0 <xTaskGetSchedulerState>
 800c26c:	4603      	mov	r3, r0
 800c26e:	2b02      	cmp	r3, #2
 800c270:	d109      	bne.n	800c286 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800c272:	4b11      	ldr	r3, [pc, #68]	; (800c2b8 <xTimerGenericCommand+0x98>)
 800c274:	6818      	ldr	r0, [r3, #0]
 800c276:	f107 0110 	add.w	r1, r7, #16
 800c27a:	2300      	movs	r3, #0
 800c27c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c27e:	f7fe fc69 	bl	800ab54 <xQueueGenericSend>
 800c282:	6278      	str	r0, [r7, #36]	; 0x24
 800c284:	e012      	b.n	800c2ac <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800c286:	4b0c      	ldr	r3, [pc, #48]	; (800c2b8 <xTimerGenericCommand+0x98>)
 800c288:	6818      	ldr	r0, [r3, #0]
 800c28a:	f107 0110 	add.w	r1, r7, #16
 800c28e:	2300      	movs	r3, #0
 800c290:	2200      	movs	r2, #0
 800c292:	f7fe fc5f 	bl	800ab54 <xQueueGenericSend>
 800c296:	6278      	str	r0, [r7, #36]	; 0x24
 800c298:	e008      	b.n	800c2ac <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800c29a:	4b07      	ldr	r3, [pc, #28]	; (800c2b8 <xTimerGenericCommand+0x98>)
 800c29c:	6818      	ldr	r0, [r3, #0]
 800c29e:	f107 0110 	add.w	r1, r7, #16
 800c2a2:	2300      	movs	r3, #0
 800c2a4:	683a      	ldr	r2, [r7, #0]
 800c2a6:	f7fe fd53 	bl	800ad50 <xQueueGenericSendFromISR>
 800c2aa:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800c2ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800c2ae:	4618      	mov	r0, r3
 800c2b0:	3728      	adds	r7, #40	; 0x28
 800c2b2:	46bd      	mov	sp, r7
 800c2b4:	bd80      	pop	{r7, pc}
 800c2b6:	bf00      	nop
 800c2b8:	20000cf8 	.word	0x20000cf8

0800c2bc <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800c2bc:	b580      	push	{r7, lr}
 800c2be:	b088      	sub	sp, #32
 800c2c0:	af02      	add	r7, sp, #8
 800c2c2:	6078      	str	r0, [r7, #4]
 800c2c4:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c2c6:	4b22      	ldr	r3, [pc, #136]	; (800c350 <prvProcessExpiredTimer+0x94>)
 800c2c8:	681b      	ldr	r3, [r3, #0]
 800c2ca:	68db      	ldr	r3, [r3, #12]
 800c2cc:	68db      	ldr	r3, [r3, #12]
 800c2ce:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800c2d0:	697b      	ldr	r3, [r7, #20]
 800c2d2:	3304      	adds	r3, #4
 800c2d4:	4618      	mov	r0, r3
 800c2d6:	f7fe fb0f 	bl	800a8f8 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800c2da:	697b      	ldr	r3, [r7, #20]
 800c2dc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c2e0:	f003 0304 	and.w	r3, r3, #4
 800c2e4:	2b00      	cmp	r3, #0
 800c2e6:	d022      	beq.n	800c32e <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800c2e8:	697b      	ldr	r3, [r7, #20]
 800c2ea:	699a      	ldr	r2, [r3, #24]
 800c2ec:	687b      	ldr	r3, [r7, #4]
 800c2ee:	18d1      	adds	r1, r2, r3
 800c2f0:	687b      	ldr	r3, [r7, #4]
 800c2f2:	683a      	ldr	r2, [r7, #0]
 800c2f4:	6978      	ldr	r0, [r7, #20]
 800c2f6:	f000 f8d1 	bl	800c49c <prvInsertTimerInActiveList>
 800c2fa:	4603      	mov	r3, r0
 800c2fc:	2b00      	cmp	r3, #0
 800c2fe:	d01f      	beq.n	800c340 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800c300:	2300      	movs	r3, #0
 800c302:	9300      	str	r3, [sp, #0]
 800c304:	2300      	movs	r3, #0
 800c306:	687a      	ldr	r2, [r7, #4]
 800c308:	2100      	movs	r1, #0
 800c30a:	6978      	ldr	r0, [r7, #20]
 800c30c:	f7ff ff88 	bl	800c220 <xTimerGenericCommand>
 800c310:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800c312:	693b      	ldr	r3, [r7, #16]
 800c314:	2b00      	cmp	r3, #0
 800c316:	d113      	bne.n	800c340 <prvProcessExpiredTimer+0x84>
	__asm volatile
 800c318:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c31c:	f383 8811 	msr	BASEPRI, r3
 800c320:	f3bf 8f6f 	isb	sy
 800c324:	f3bf 8f4f 	dsb	sy
 800c328:	60fb      	str	r3, [r7, #12]
}
 800c32a:	bf00      	nop
 800c32c:	e7fe      	b.n	800c32c <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800c32e:	697b      	ldr	r3, [r7, #20]
 800c330:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c334:	f023 0301 	bic.w	r3, r3, #1
 800c338:	b2da      	uxtb	r2, r3
 800c33a:	697b      	ldr	r3, [r7, #20]
 800c33c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800c340:	697b      	ldr	r3, [r7, #20]
 800c342:	6a1b      	ldr	r3, [r3, #32]
 800c344:	6978      	ldr	r0, [r7, #20]
 800c346:	4798      	blx	r3
}
 800c348:	bf00      	nop
 800c34a:	3718      	adds	r7, #24
 800c34c:	46bd      	mov	sp, r7
 800c34e:	bd80      	pop	{r7, pc}
 800c350:	20000cf0 	.word	0x20000cf0

0800c354 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800c354:	b580      	push	{r7, lr}
 800c356:	b084      	sub	sp, #16
 800c358:	af00      	add	r7, sp, #0
 800c35a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800c35c:	f107 0308 	add.w	r3, r7, #8
 800c360:	4618      	mov	r0, r3
 800c362:	f000 f857 	bl	800c414 <prvGetNextExpireTime>
 800c366:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800c368:	68bb      	ldr	r3, [r7, #8]
 800c36a:	4619      	mov	r1, r3
 800c36c:	68f8      	ldr	r0, [r7, #12]
 800c36e:	f000 f803 	bl	800c378 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800c372:	f000 f8d5 	bl	800c520 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800c376:	e7f1      	b.n	800c35c <prvTimerTask+0x8>

0800c378 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800c378:	b580      	push	{r7, lr}
 800c37a:	b084      	sub	sp, #16
 800c37c:	af00      	add	r7, sp, #0
 800c37e:	6078      	str	r0, [r7, #4]
 800c380:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800c382:	f7ff fa0b 	bl	800b79c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800c386:	f107 0308 	add.w	r3, r7, #8
 800c38a:	4618      	mov	r0, r3
 800c38c:	f000 f866 	bl	800c45c <prvSampleTimeNow>
 800c390:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800c392:	68bb      	ldr	r3, [r7, #8]
 800c394:	2b00      	cmp	r3, #0
 800c396:	d130      	bne.n	800c3fa <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800c398:	683b      	ldr	r3, [r7, #0]
 800c39a:	2b00      	cmp	r3, #0
 800c39c:	d10a      	bne.n	800c3b4 <prvProcessTimerOrBlockTask+0x3c>
 800c39e:	687a      	ldr	r2, [r7, #4]
 800c3a0:	68fb      	ldr	r3, [r7, #12]
 800c3a2:	429a      	cmp	r2, r3
 800c3a4:	d806      	bhi.n	800c3b4 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800c3a6:	f7ff fa07 	bl	800b7b8 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800c3aa:	68f9      	ldr	r1, [r7, #12]
 800c3ac:	6878      	ldr	r0, [r7, #4]
 800c3ae:	f7ff ff85 	bl	800c2bc <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800c3b2:	e024      	b.n	800c3fe <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800c3b4:	683b      	ldr	r3, [r7, #0]
 800c3b6:	2b00      	cmp	r3, #0
 800c3b8:	d008      	beq.n	800c3cc <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800c3ba:	4b13      	ldr	r3, [pc, #76]	; (800c408 <prvProcessTimerOrBlockTask+0x90>)
 800c3bc:	681b      	ldr	r3, [r3, #0]
 800c3be:	681b      	ldr	r3, [r3, #0]
 800c3c0:	2b00      	cmp	r3, #0
 800c3c2:	d101      	bne.n	800c3c8 <prvProcessTimerOrBlockTask+0x50>
 800c3c4:	2301      	movs	r3, #1
 800c3c6:	e000      	b.n	800c3ca <prvProcessTimerOrBlockTask+0x52>
 800c3c8:	2300      	movs	r3, #0
 800c3ca:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800c3cc:	4b0f      	ldr	r3, [pc, #60]	; (800c40c <prvProcessTimerOrBlockTask+0x94>)
 800c3ce:	6818      	ldr	r0, [r3, #0]
 800c3d0:	687a      	ldr	r2, [r7, #4]
 800c3d2:	68fb      	ldr	r3, [r7, #12]
 800c3d4:	1ad3      	subs	r3, r2, r3
 800c3d6:	683a      	ldr	r2, [r7, #0]
 800c3d8:	4619      	mov	r1, r3
 800c3da:	f7fe ff6f 	bl	800b2bc <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800c3de:	f7ff f9eb 	bl	800b7b8 <xTaskResumeAll>
 800c3e2:	4603      	mov	r3, r0
 800c3e4:	2b00      	cmp	r3, #0
 800c3e6:	d10a      	bne.n	800c3fe <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800c3e8:	4b09      	ldr	r3, [pc, #36]	; (800c410 <prvProcessTimerOrBlockTask+0x98>)
 800c3ea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c3ee:	601a      	str	r2, [r3, #0]
 800c3f0:	f3bf 8f4f 	dsb	sy
 800c3f4:	f3bf 8f6f 	isb	sy
}
 800c3f8:	e001      	b.n	800c3fe <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800c3fa:	f7ff f9dd 	bl	800b7b8 <xTaskResumeAll>
}
 800c3fe:	bf00      	nop
 800c400:	3710      	adds	r7, #16
 800c402:	46bd      	mov	sp, r7
 800c404:	bd80      	pop	{r7, pc}
 800c406:	bf00      	nop
 800c408:	20000cf4 	.word	0x20000cf4
 800c40c:	20000cf8 	.word	0x20000cf8
 800c410:	e000ed04 	.word	0xe000ed04

0800c414 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800c414:	b480      	push	{r7}
 800c416:	b085      	sub	sp, #20
 800c418:	af00      	add	r7, sp, #0
 800c41a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800c41c:	4b0e      	ldr	r3, [pc, #56]	; (800c458 <prvGetNextExpireTime+0x44>)
 800c41e:	681b      	ldr	r3, [r3, #0]
 800c420:	681b      	ldr	r3, [r3, #0]
 800c422:	2b00      	cmp	r3, #0
 800c424:	d101      	bne.n	800c42a <prvGetNextExpireTime+0x16>
 800c426:	2201      	movs	r2, #1
 800c428:	e000      	b.n	800c42c <prvGetNextExpireTime+0x18>
 800c42a:	2200      	movs	r2, #0
 800c42c:	687b      	ldr	r3, [r7, #4]
 800c42e:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800c430:	687b      	ldr	r3, [r7, #4]
 800c432:	681b      	ldr	r3, [r3, #0]
 800c434:	2b00      	cmp	r3, #0
 800c436:	d105      	bne.n	800c444 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800c438:	4b07      	ldr	r3, [pc, #28]	; (800c458 <prvGetNextExpireTime+0x44>)
 800c43a:	681b      	ldr	r3, [r3, #0]
 800c43c:	68db      	ldr	r3, [r3, #12]
 800c43e:	681b      	ldr	r3, [r3, #0]
 800c440:	60fb      	str	r3, [r7, #12]
 800c442:	e001      	b.n	800c448 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800c444:	2300      	movs	r3, #0
 800c446:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800c448:	68fb      	ldr	r3, [r7, #12]
}
 800c44a:	4618      	mov	r0, r3
 800c44c:	3714      	adds	r7, #20
 800c44e:	46bd      	mov	sp, r7
 800c450:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c454:	4770      	bx	lr
 800c456:	bf00      	nop
 800c458:	20000cf0 	.word	0x20000cf0

0800c45c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800c45c:	b580      	push	{r7, lr}
 800c45e:	b084      	sub	sp, #16
 800c460:	af00      	add	r7, sp, #0
 800c462:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800c464:	f7ff fa46 	bl	800b8f4 <xTaskGetTickCount>
 800c468:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800c46a:	4b0b      	ldr	r3, [pc, #44]	; (800c498 <prvSampleTimeNow+0x3c>)
 800c46c:	681b      	ldr	r3, [r3, #0]
 800c46e:	68fa      	ldr	r2, [r7, #12]
 800c470:	429a      	cmp	r2, r3
 800c472:	d205      	bcs.n	800c480 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800c474:	f000 f936 	bl	800c6e4 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800c478:	687b      	ldr	r3, [r7, #4]
 800c47a:	2201      	movs	r2, #1
 800c47c:	601a      	str	r2, [r3, #0]
 800c47e:	e002      	b.n	800c486 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800c480:	687b      	ldr	r3, [r7, #4]
 800c482:	2200      	movs	r2, #0
 800c484:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800c486:	4a04      	ldr	r2, [pc, #16]	; (800c498 <prvSampleTimeNow+0x3c>)
 800c488:	68fb      	ldr	r3, [r7, #12]
 800c48a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800c48c:	68fb      	ldr	r3, [r7, #12]
}
 800c48e:	4618      	mov	r0, r3
 800c490:	3710      	adds	r7, #16
 800c492:	46bd      	mov	sp, r7
 800c494:	bd80      	pop	{r7, pc}
 800c496:	bf00      	nop
 800c498:	20000d00 	.word	0x20000d00

0800c49c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800c49c:	b580      	push	{r7, lr}
 800c49e:	b086      	sub	sp, #24
 800c4a0:	af00      	add	r7, sp, #0
 800c4a2:	60f8      	str	r0, [r7, #12]
 800c4a4:	60b9      	str	r1, [r7, #8]
 800c4a6:	607a      	str	r2, [r7, #4]
 800c4a8:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800c4aa:	2300      	movs	r3, #0
 800c4ac:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800c4ae:	68fb      	ldr	r3, [r7, #12]
 800c4b0:	68ba      	ldr	r2, [r7, #8]
 800c4b2:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800c4b4:	68fb      	ldr	r3, [r7, #12]
 800c4b6:	68fa      	ldr	r2, [r7, #12]
 800c4b8:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800c4ba:	68ba      	ldr	r2, [r7, #8]
 800c4bc:	687b      	ldr	r3, [r7, #4]
 800c4be:	429a      	cmp	r2, r3
 800c4c0:	d812      	bhi.n	800c4e8 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c4c2:	687a      	ldr	r2, [r7, #4]
 800c4c4:	683b      	ldr	r3, [r7, #0]
 800c4c6:	1ad2      	subs	r2, r2, r3
 800c4c8:	68fb      	ldr	r3, [r7, #12]
 800c4ca:	699b      	ldr	r3, [r3, #24]
 800c4cc:	429a      	cmp	r2, r3
 800c4ce:	d302      	bcc.n	800c4d6 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800c4d0:	2301      	movs	r3, #1
 800c4d2:	617b      	str	r3, [r7, #20]
 800c4d4:	e01b      	b.n	800c50e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800c4d6:	4b10      	ldr	r3, [pc, #64]	; (800c518 <prvInsertTimerInActiveList+0x7c>)
 800c4d8:	681a      	ldr	r2, [r3, #0]
 800c4da:	68fb      	ldr	r3, [r7, #12]
 800c4dc:	3304      	adds	r3, #4
 800c4de:	4619      	mov	r1, r3
 800c4e0:	4610      	mov	r0, r2
 800c4e2:	f7fe f9d0 	bl	800a886 <vListInsert>
 800c4e6:	e012      	b.n	800c50e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800c4e8:	687a      	ldr	r2, [r7, #4]
 800c4ea:	683b      	ldr	r3, [r7, #0]
 800c4ec:	429a      	cmp	r2, r3
 800c4ee:	d206      	bcs.n	800c4fe <prvInsertTimerInActiveList+0x62>
 800c4f0:	68ba      	ldr	r2, [r7, #8]
 800c4f2:	683b      	ldr	r3, [r7, #0]
 800c4f4:	429a      	cmp	r2, r3
 800c4f6:	d302      	bcc.n	800c4fe <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800c4f8:	2301      	movs	r3, #1
 800c4fa:	617b      	str	r3, [r7, #20]
 800c4fc:	e007      	b.n	800c50e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800c4fe:	4b07      	ldr	r3, [pc, #28]	; (800c51c <prvInsertTimerInActiveList+0x80>)
 800c500:	681a      	ldr	r2, [r3, #0]
 800c502:	68fb      	ldr	r3, [r7, #12]
 800c504:	3304      	adds	r3, #4
 800c506:	4619      	mov	r1, r3
 800c508:	4610      	mov	r0, r2
 800c50a:	f7fe f9bc 	bl	800a886 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800c50e:	697b      	ldr	r3, [r7, #20]
}
 800c510:	4618      	mov	r0, r3
 800c512:	3718      	adds	r7, #24
 800c514:	46bd      	mov	sp, r7
 800c516:	bd80      	pop	{r7, pc}
 800c518:	20000cf4 	.word	0x20000cf4
 800c51c:	20000cf0 	.word	0x20000cf0

0800c520 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800c520:	b580      	push	{r7, lr}
 800c522:	b08e      	sub	sp, #56	; 0x38
 800c524:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800c526:	e0ca      	b.n	800c6be <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800c528:	687b      	ldr	r3, [r7, #4]
 800c52a:	2b00      	cmp	r3, #0
 800c52c:	da18      	bge.n	800c560 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800c52e:	1d3b      	adds	r3, r7, #4
 800c530:	3304      	adds	r3, #4
 800c532:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800c534:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c536:	2b00      	cmp	r3, #0
 800c538:	d10a      	bne.n	800c550 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800c53a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c53e:	f383 8811 	msr	BASEPRI, r3
 800c542:	f3bf 8f6f 	isb	sy
 800c546:	f3bf 8f4f 	dsb	sy
 800c54a:	61fb      	str	r3, [r7, #28]
}
 800c54c:	bf00      	nop
 800c54e:	e7fe      	b.n	800c54e <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800c550:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c552:	681b      	ldr	r3, [r3, #0]
 800c554:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c556:	6850      	ldr	r0, [r2, #4]
 800c558:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c55a:	6892      	ldr	r2, [r2, #8]
 800c55c:	4611      	mov	r1, r2
 800c55e:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800c560:	687b      	ldr	r3, [r7, #4]
 800c562:	2b00      	cmp	r3, #0
 800c564:	f2c0 80aa 	blt.w	800c6bc <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800c568:	68fb      	ldr	r3, [r7, #12]
 800c56a:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800c56c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c56e:	695b      	ldr	r3, [r3, #20]
 800c570:	2b00      	cmp	r3, #0
 800c572:	d004      	beq.n	800c57e <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800c574:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c576:	3304      	adds	r3, #4
 800c578:	4618      	mov	r0, r3
 800c57a:	f7fe f9bd 	bl	800a8f8 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800c57e:	463b      	mov	r3, r7
 800c580:	4618      	mov	r0, r3
 800c582:	f7ff ff6b 	bl	800c45c <prvSampleTimeNow>
 800c586:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800c588:	687b      	ldr	r3, [r7, #4]
 800c58a:	2b09      	cmp	r3, #9
 800c58c:	f200 8097 	bhi.w	800c6be <prvProcessReceivedCommands+0x19e>
 800c590:	a201      	add	r2, pc, #4	; (adr r2, 800c598 <prvProcessReceivedCommands+0x78>)
 800c592:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c596:	bf00      	nop
 800c598:	0800c5c1 	.word	0x0800c5c1
 800c59c:	0800c5c1 	.word	0x0800c5c1
 800c5a0:	0800c5c1 	.word	0x0800c5c1
 800c5a4:	0800c635 	.word	0x0800c635
 800c5a8:	0800c649 	.word	0x0800c649
 800c5ac:	0800c693 	.word	0x0800c693
 800c5b0:	0800c5c1 	.word	0x0800c5c1
 800c5b4:	0800c5c1 	.word	0x0800c5c1
 800c5b8:	0800c635 	.word	0x0800c635
 800c5bc:	0800c649 	.word	0x0800c649
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800c5c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c5c2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c5c6:	f043 0301 	orr.w	r3, r3, #1
 800c5ca:	b2da      	uxtb	r2, r3
 800c5cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c5ce:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800c5d2:	68ba      	ldr	r2, [r7, #8]
 800c5d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c5d6:	699b      	ldr	r3, [r3, #24]
 800c5d8:	18d1      	adds	r1, r2, r3
 800c5da:	68bb      	ldr	r3, [r7, #8]
 800c5dc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c5de:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c5e0:	f7ff ff5c 	bl	800c49c <prvInsertTimerInActiveList>
 800c5e4:	4603      	mov	r3, r0
 800c5e6:	2b00      	cmp	r3, #0
 800c5e8:	d069      	beq.n	800c6be <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800c5ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c5ec:	6a1b      	ldr	r3, [r3, #32]
 800c5ee:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c5f0:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800c5f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c5f4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c5f8:	f003 0304 	and.w	r3, r3, #4
 800c5fc:	2b00      	cmp	r3, #0
 800c5fe:	d05e      	beq.n	800c6be <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800c600:	68ba      	ldr	r2, [r7, #8]
 800c602:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c604:	699b      	ldr	r3, [r3, #24]
 800c606:	441a      	add	r2, r3
 800c608:	2300      	movs	r3, #0
 800c60a:	9300      	str	r3, [sp, #0]
 800c60c:	2300      	movs	r3, #0
 800c60e:	2100      	movs	r1, #0
 800c610:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c612:	f7ff fe05 	bl	800c220 <xTimerGenericCommand>
 800c616:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800c618:	6a3b      	ldr	r3, [r7, #32]
 800c61a:	2b00      	cmp	r3, #0
 800c61c:	d14f      	bne.n	800c6be <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800c61e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c622:	f383 8811 	msr	BASEPRI, r3
 800c626:	f3bf 8f6f 	isb	sy
 800c62a:	f3bf 8f4f 	dsb	sy
 800c62e:	61bb      	str	r3, [r7, #24]
}
 800c630:	bf00      	nop
 800c632:	e7fe      	b.n	800c632 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800c634:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c636:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c63a:	f023 0301 	bic.w	r3, r3, #1
 800c63e:	b2da      	uxtb	r2, r3
 800c640:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c642:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800c646:	e03a      	b.n	800c6be <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800c648:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c64a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c64e:	f043 0301 	orr.w	r3, r3, #1
 800c652:	b2da      	uxtb	r2, r3
 800c654:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c656:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800c65a:	68ba      	ldr	r2, [r7, #8]
 800c65c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c65e:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800c660:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c662:	699b      	ldr	r3, [r3, #24]
 800c664:	2b00      	cmp	r3, #0
 800c666:	d10a      	bne.n	800c67e <prvProcessReceivedCommands+0x15e>
	__asm volatile
 800c668:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c66c:	f383 8811 	msr	BASEPRI, r3
 800c670:	f3bf 8f6f 	isb	sy
 800c674:	f3bf 8f4f 	dsb	sy
 800c678:	617b      	str	r3, [r7, #20]
}
 800c67a:	bf00      	nop
 800c67c:	e7fe      	b.n	800c67c <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800c67e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c680:	699a      	ldr	r2, [r3, #24]
 800c682:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c684:	18d1      	adds	r1, r2, r3
 800c686:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c688:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c68a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c68c:	f7ff ff06 	bl	800c49c <prvInsertTimerInActiveList>
					break;
 800c690:	e015      	b.n	800c6be <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800c692:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c694:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c698:	f003 0302 	and.w	r3, r3, #2
 800c69c:	2b00      	cmp	r3, #0
 800c69e:	d103      	bne.n	800c6a8 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800c6a0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c6a2:	f000 fbdd 	bl	800ce60 <vPortFree>
 800c6a6:	e00a      	b.n	800c6be <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800c6a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c6aa:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c6ae:	f023 0301 	bic.w	r3, r3, #1
 800c6b2:	b2da      	uxtb	r2, r3
 800c6b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c6b6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800c6ba:	e000      	b.n	800c6be <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800c6bc:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800c6be:	4b08      	ldr	r3, [pc, #32]	; (800c6e0 <prvProcessReceivedCommands+0x1c0>)
 800c6c0:	681b      	ldr	r3, [r3, #0]
 800c6c2:	1d39      	adds	r1, r7, #4
 800c6c4:	2200      	movs	r2, #0
 800c6c6:	4618      	mov	r0, r3
 800c6c8:	f7fe fbde 	bl	800ae88 <xQueueReceive>
 800c6cc:	4603      	mov	r3, r0
 800c6ce:	2b00      	cmp	r3, #0
 800c6d0:	f47f af2a 	bne.w	800c528 <prvProcessReceivedCommands+0x8>
	}
}
 800c6d4:	bf00      	nop
 800c6d6:	bf00      	nop
 800c6d8:	3730      	adds	r7, #48	; 0x30
 800c6da:	46bd      	mov	sp, r7
 800c6dc:	bd80      	pop	{r7, pc}
 800c6de:	bf00      	nop
 800c6e0:	20000cf8 	.word	0x20000cf8

0800c6e4 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800c6e4:	b580      	push	{r7, lr}
 800c6e6:	b088      	sub	sp, #32
 800c6e8:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800c6ea:	e048      	b.n	800c77e <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800c6ec:	4b2d      	ldr	r3, [pc, #180]	; (800c7a4 <prvSwitchTimerLists+0xc0>)
 800c6ee:	681b      	ldr	r3, [r3, #0]
 800c6f0:	68db      	ldr	r3, [r3, #12]
 800c6f2:	681b      	ldr	r3, [r3, #0]
 800c6f4:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c6f6:	4b2b      	ldr	r3, [pc, #172]	; (800c7a4 <prvSwitchTimerLists+0xc0>)
 800c6f8:	681b      	ldr	r3, [r3, #0]
 800c6fa:	68db      	ldr	r3, [r3, #12]
 800c6fc:	68db      	ldr	r3, [r3, #12]
 800c6fe:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800c700:	68fb      	ldr	r3, [r7, #12]
 800c702:	3304      	adds	r3, #4
 800c704:	4618      	mov	r0, r3
 800c706:	f7fe f8f7 	bl	800a8f8 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800c70a:	68fb      	ldr	r3, [r7, #12]
 800c70c:	6a1b      	ldr	r3, [r3, #32]
 800c70e:	68f8      	ldr	r0, [r7, #12]
 800c710:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800c712:	68fb      	ldr	r3, [r7, #12]
 800c714:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c718:	f003 0304 	and.w	r3, r3, #4
 800c71c:	2b00      	cmp	r3, #0
 800c71e:	d02e      	beq.n	800c77e <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800c720:	68fb      	ldr	r3, [r7, #12]
 800c722:	699b      	ldr	r3, [r3, #24]
 800c724:	693a      	ldr	r2, [r7, #16]
 800c726:	4413      	add	r3, r2
 800c728:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800c72a:	68ba      	ldr	r2, [r7, #8]
 800c72c:	693b      	ldr	r3, [r7, #16]
 800c72e:	429a      	cmp	r2, r3
 800c730:	d90e      	bls.n	800c750 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800c732:	68fb      	ldr	r3, [r7, #12]
 800c734:	68ba      	ldr	r2, [r7, #8]
 800c736:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800c738:	68fb      	ldr	r3, [r7, #12]
 800c73a:	68fa      	ldr	r2, [r7, #12]
 800c73c:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800c73e:	4b19      	ldr	r3, [pc, #100]	; (800c7a4 <prvSwitchTimerLists+0xc0>)
 800c740:	681a      	ldr	r2, [r3, #0]
 800c742:	68fb      	ldr	r3, [r7, #12]
 800c744:	3304      	adds	r3, #4
 800c746:	4619      	mov	r1, r3
 800c748:	4610      	mov	r0, r2
 800c74a:	f7fe f89c 	bl	800a886 <vListInsert>
 800c74e:	e016      	b.n	800c77e <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800c750:	2300      	movs	r3, #0
 800c752:	9300      	str	r3, [sp, #0]
 800c754:	2300      	movs	r3, #0
 800c756:	693a      	ldr	r2, [r7, #16]
 800c758:	2100      	movs	r1, #0
 800c75a:	68f8      	ldr	r0, [r7, #12]
 800c75c:	f7ff fd60 	bl	800c220 <xTimerGenericCommand>
 800c760:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800c762:	687b      	ldr	r3, [r7, #4]
 800c764:	2b00      	cmp	r3, #0
 800c766:	d10a      	bne.n	800c77e <prvSwitchTimerLists+0x9a>
	__asm volatile
 800c768:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c76c:	f383 8811 	msr	BASEPRI, r3
 800c770:	f3bf 8f6f 	isb	sy
 800c774:	f3bf 8f4f 	dsb	sy
 800c778:	603b      	str	r3, [r7, #0]
}
 800c77a:	bf00      	nop
 800c77c:	e7fe      	b.n	800c77c <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800c77e:	4b09      	ldr	r3, [pc, #36]	; (800c7a4 <prvSwitchTimerLists+0xc0>)
 800c780:	681b      	ldr	r3, [r3, #0]
 800c782:	681b      	ldr	r3, [r3, #0]
 800c784:	2b00      	cmp	r3, #0
 800c786:	d1b1      	bne.n	800c6ec <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800c788:	4b06      	ldr	r3, [pc, #24]	; (800c7a4 <prvSwitchTimerLists+0xc0>)
 800c78a:	681b      	ldr	r3, [r3, #0]
 800c78c:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800c78e:	4b06      	ldr	r3, [pc, #24]	; (800c7a8 <prvSwitchTimerLists+0xc4>)
 800c790:	681b      	ldr	r3, [r3, #0]
 800c792:	4a04      	ldr	r2, [pc, #16]	; (800c7a4 <prvSwitchTimerLists+0xc0>)
 800c794:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800c796:	4a04      	ldr	r2, [pc, #16]	; (800c7a8 <prvSwitchTimerLists+0xc4>)
 800c798:	697b      	ldr	r3, [r7, #20]
 800c79a:	6013      	str	r3, [r2, #0]
}
 800c79c:	bf00      	nop
 800c79e:	3718      	adds	r7, #24
 800c7a0:	46bd      	mov	sp, r7
 800c7a2:	bd80      	pop	{r7, pc}
 800c7a4:	20000cf0 	.word	0x20000cf0
 800c7a8:	20000cf4 	.word	0x20000cf4

0800c7ac <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800c7ac:	b580      	push	{r7, lr}
 800c7ae:	b082      	sub	sp, #8
 800c7b0:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800c7b2:	f000 f967 	bl	800ca84 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800c7b6:	4b15      	ldr	r3, [pc, #84]	; (800c80c <prvCheckForValidListAndQueue+0x60>)
 800c7b8:	681b      	ldr	r3, [r3, #0]
 800c7ba:	2b00      	cmp	r3, #0
 800c7bc:	d120      	bne.n	800c800 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800c7be:	4814      	ldr	r0, [pc, #80]	; (800c810 <prvCheckForValidListAndQueue+0x64>)
 800c7c0:	f7fe f810 	bl	800a7e4 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800c7c4:	4813      	ldr	r0, [pc, #76]	; (800c814 <prvCheckForValidListAndQueue+0x68>)
 800c7c6:	f7fe f80d 	bl	800a7e4 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800c7ca:	4b13      	ldr	r3, [pc, #76]	; (800c818 <prvCheckForValidListAndQueue+0x6c>)
 800c7cc:	4a10      	ldr	r2, [pc, #64]	; (800c810 <prvCheckForValidListAndQueue+0x64>)
 800c7ce:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800c7d0:	4b12      	ldr	r3, [pc, #72]	; (800c81c <prvCheckForValidListAndQueue+0x70>)
 800c7d2:	4a10      	ldr	r2, [pc, #64]	; (800c814 <prvCheckForValidListAndQueue+0x68>)
 800c7d4:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800c7d6:	2300      	movs	r3, #0
 800c7d8:	9300      	str	r3, [sp, #0]
 800c7da:	4b11      	ldr	r3, [pc, #68]	; (800c820 <prvCheckForValidListAndQueue+0x74>)
 800c7dc:	4a11      	ldr	r2, [pc, #68]	; (800c824 <prvCheckForValidListAndQueue+0x78>)
 800c7de:	2110      	movs	r1, #16
 800c7e0:	200a      	movs	r0, #10
 800c7e2:	f7fe f91b 	bl	800aa1c <xQueueGenericCreateStatic>
 800c7e6:	4603      	mov	r3, r0
 800c7e8:	4a08      	ldr	r2, [pc, #32]	; (800c80c <prvCheckForValidListAndQueue+0x60>)
 800c7ea:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800c7ec:	4b07      	ldr	r3, [pc, #28]	; (800c80c <prvCheckForValidListAndQueue+0x60>)
 800c7ee:	681b      	ldr	r3, [r3, #0]
 800c7f0:	2b00      	cmp	r3, #0
 800c7f2:	d005      	beq.n	800c800 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800c7f4:	4b05      	ldr	r3, [pc, #20]	; (800c80c <prvCheckForValidListAndQueue+0x60>)
 800c7f6:	681b      	ldr	r3, [r3, #0]
 800c7f8:	490b      	ldr	r1, [pc, #44]	; (800c828 <prvCheckForValidListAndQueue+0x7c>)
 800c7fa:	4618      	mov	r0, r3
 800c7fc:	f7fe fd34 	bl	800b268 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800c800:	f000 f970 	bl	800cae4 <vPortExitCritical>
}
 800c804:	bf00      	nop
 800c806:	46bd      	mov	sp, r7
 800c808:	bd80      	pop	{r7, pc}
 800c80a:	bf00      	nop
 800c80c:	20000cf8 	.word	0x20000cf8
 800c810:	20000cc8 	.word	0x20000cc8
 800c814:	20000cdc 	.word	0x20000cdc
 800c818:	20000cf0 	.word	0x20000cf0
 800c81c:	20000cf4 	.word	0x20000cf4
 800c820:	20000da4 	.word	0x20000da4
 800c824:	20000d04 	.word	0x20000d04
 800c828:	0800fa74 	.word	0x0800fa74

0800c82c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800c82c:	b480      	push	{r7}
 800c82e:	b085      	sub	sp, #20
 800c830:	af00      	add	r7, sp, #0
 800c832:	60f8      	str	r0, [r7, #12]
 800c834:	60b9      	str	r1, [r7, #8]
 800c836:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800c838:	68fb      	ldr	r3, [r7, #12]
 800c83a:	3b04      	subs	r3, #4
 800c83c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800c83e:	68fb      	ldr	r3, [r7, #12]
 800c840:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800c844:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800c846:	68fb      	ldr	r3, [r7, #12]
 800c848:	3b04      	subs	r3, #4
 800c84a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800c84c:	68bb      	ldr	r3, [r7, #8]
 800c84e:	f023 0201 	bic.w	r2, r3, #1
 800c852:	68fb      	ldr	r3, [r7, #12]
 800c854:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800c856:	68fb      	ldr	r3, [r7, #12]
 800c858:	3b04      	subs	r3, #4
 800c85a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800c85c:	4a0c      	ldr	r2, [pc, #48]	; (800c890 <pxPortInitialiseStack+0x64>)
 800c85e:	68fb      	ldr	r3, [r7, #12]
 800c860:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800c862:	68fb      	ldr	r3, [r7, #12]
 800c864:	3b14      	subs	r3, #20
 800c866:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800c868:	687a      	ldr	r2, [r7, #4]
 800c86a:	68fb      	ldr	r3, [r7, #12]
 800c86c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800c86e:	68fb      	ldr	r3, [r7, #12]
 800c870:	3b04      	subs	r3, #4
 800c872:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800c874:	68fb      	ldr	r3, [r7, #12]
 800c876:	f06f 0202 	mvn.w	r2, #2
 800c87a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800c87c:	68fb      	ldr	r3, [r7, #12]
 800c87e:	3b20      	subs	r3, #32
 800c880:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800c882:	68fb      	ldr	r3, [r7, #12]
}
 800c884:	4618      	mov	r0, r3
 800c886:	3714      	adds	r7, #20
 800c888:	46bd      	mov	sp, r7
 800c88a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c88e:	4770      	bx	lr
 800c890:	0800c895 	.word	0x0800c895

0800c894 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800c894:	b480      	push	{r7}
 800c896:	b085      	sub	sp, #20
 800c898:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800c89a:	2300      	movs	r3, #0
 800c89c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800c89e:	4b12      	ldr	r3, [pc, #72]	; (800c8e8 <prvTaskExitError+0x54>)
 800c8a0:	681b      	ldr	r3, [r3, #0]
 800c8a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c8a6:	d00a      	beq.n	800c8be <prvTaskExitError+0x2a>
	__asm volatile
 800c8a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c8ac:	f383 8811 	msr	BASEPRI, r3
 800c8b0:	f3bf 8f6f 	isb	sy
 800c8b4:	f3bf 8f4f 	dsb	sy
 800c8b8:	60fb      	str	r3, [r7, #12]
}
 800c8ba:	bf00      	nop
 800c8bc:	e7fe      	b.n	800c8bc <prvTaskExitError+0x28>
	__asm volatile
 800c8be:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c8c2:	f383 8811 	msr	BASEPRI, r3
 800c8c6:	f3bf 8f6f 	isb	sy
 800c8ca:	f3bf 8f4f 	dsb	sy
 800c8ce:	60bb      	str	r3, [r7, #8]
}
 800c8d0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800c8d2:	bf00      	nop
 800c8d4:	687b      	ldr	r3, [r7, #4]
 800c8d6:	2b00      	cmp	r3, #0
 800c8d8:	d0fc      	beq.n	800c8d4 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800c8da:	bf00      	nop
 800c8dc:	bf00      	nop
 800c8de:	3714      	adds	r7, #20
 800c8e0:	46bd      	mov	sp, r7
 800c8e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8e6:	4770      	bx	lr
 800c8e8:	2000000c 	.word	0x2000000c
 800c8ec:	00000000 	.word	0x00000000

0800c8f0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800c8f0:	4b07      	ldr	r3, [pc, #28]	; (800c910 <pxCurrentTCBConst2>)
 800c8f2:	6819      	ldr	r1, [r3, #0]
 800c8f4:	6808      	ldr	r0, [r1, #0]
 800c8f6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c8fa:	f380 8809 	msr	PSP, r0
 800c8fe:	f3bf 8f6f 	isb	sy
 800c902:	f04f 0000 	mov.w	r0, #0
 800c906:	f380 8811 	msr	BASEPRI, r0
 800c90a:	4770      	bx	lr
 800c90c:	f3af 8000 	nop.w

0800c910 <pxCurrentTCBConst2>:
 800c910:	200007c8 	.word	0x200007c8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800c914:	bf00      	nop
 800c916:	bf00      	nop

0800c918 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800c918:	4808      	ldr	r0, [pc, #32]	; (800c93c <prvPortStartFirstTask+0x24>)
 800c91a:	6800      	ldr	r0, [r0, #0]
 800c91c:	6800      	ldr	r0, [r0, #0]
 800c91e:	f380 8808 	msr	MSP, r0
 800c922:	f04f 0000 	mov.w	r0, #0
 800c926:	f380 8814 	msr	CONTROL, r0
 800c92a:	b662      	cpsie	i
 800c92c:	b661      	cpsie	f
 800c92e:	f3bf 8f4f 	dsb	sy
 800c932:	f3bf 8f6f 	isb	sy
 800c936:	df00      	svc	0
 800c938:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800c93a:	bf00      	nop
 800c93c:	e000ed08 	.word	0xe000ed08

0800c940 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800c940:	b580      	push	{r7, lr}
 800c942:	b086      	sub	sp, #24
 800c944:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800c946:	4b46      	ldr	r3, [pc, #280]	; (800ca60 <xPortStartScheduler+0x120>)
 800c948:	681b      	ldr	r3, [r3, #0]
 800c94a:	4a46      	ldr	r2, [pc, #280]	; (800ca64 <xPortStartScheduler+0x124>)
 800c94c:	4293      	cmp	r3, r2
 800c94e:	d10a      	bne.n	800c966 <xPortStartScheduler+0x26>
	__asm volatile
 800c950:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c954:	f383 8811 	msr	BASEPRI, r3
 800c958:	f3bf 8f6f 	isb	sy
 800c95c:	f3bf 8f4f 	dsb	sy
 800c960:	613b      	str	r3, [r7, #16]
}
 800c962:	bf00      	nop
 800c964:	e7fe      	b.n	800c964 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800c966:	4b3e      	ldr	r3, [pc, #248]	; (800ca60 <xPortStartScheduler+0x120>)
 800c968:	681b      	ldr	r3, [r3, #0]
 800c96a:	4a3f      	ldr	r2, [pc, #252]	; (800ca68 <xPortStartScheduler+0x128>)
 800c96c:	4293      	cmp	r3, r2
 800c96e:	d10a      	bne.n	800c986 <xPortStartScheduler+0x46>
	__asm volatile
 800c970:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c974:	f383 8811 	msr	BASEPRI, r3
 800c978:	f3bf 8f6f 	isb	sy
 800c97c:	f3bf 8f4f 	dsb	sy
 800c980:	60fb      	str	r3, [r7, #12]
}
 800c982:	bf00      	nop
 800c984:	e7fe      	b.n	800c984 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800c986:	4b39      	ldr	r3, [pc, #228]	; (800ca6c <xPortStartScheduler+0x12c>)
 800c988:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800c98a:	697b      	ldr	r3, [r7, #20]
 800c98c:	781b      	ldrb	r3, [r3, #0]
 800c98e:	b2db      	uxtb	r3, r3
 800c990:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800c992:	697b      	ldr	r3, [r7, #20]
 800c994:	22ff      	movs	r2, #255	; 0xff
 800c996:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800c998:	697b      	ldr	r3, [r7, #20]
 800c99a:	781b      	ldrb	r3, [r3, #0]
 800c99c:	b2db      	uxtb	r3, r3
 800c99e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800c9a0:	78fb      	ldrb	r3, [r7, #3]
 800c9a2:	b2db      	uxtb	r3, r3
 800c9a4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800c9a8:	b2da      	uxtb	r2, r3
 800c9aa:	4b31      	ldr	r3, [pc, #196]	; (800ca70 <xPortStartScheduler+0x130>)
 800c9ac:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800c9ae:	4b31      	ldr	r3, [pc, #196]	; (800ca74 <xPortStartScheduler+0x134>)
 800c9b0:	2207      	movs	r2, #7
 800c9b2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800c9b4:	e009      	b.n	800c9ca <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800c9b6:	4b2f      	ldr	r3, [pc, #188]	; (800ca74 <xPortStartScheduler+0x134>)
 800c9b8:	681b      	ldr	r3, [r3, #0]
 800c9ba:	3b01      	subs	r3, #1
 800c9bc:	4a2d      	ldr	r2, [pc, #180]	; (800ca74 <xPortStartScheduler+0x134>)
 800c9be:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800c9c0:	78fb      	ldrb	r3, [r7, #3]
 800c9c2:	b2db      	uxtb	r3, r3
 800c9c4:	005b      	lsls	r3, r3, #1
 800c9c6:	b2db      	uxtb	r3, r3
 800c9c8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800c9ca:	78fb      	ldrb	r3, [r7, #3]
 800c9cc:	b2db      	uxtb	r3, r3
 800c9ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c9d2:	2b80      	cmp	r3, #128	; 0x80
 800c9d4:	d0ef      	beq.n	800c9b6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800c9d6:	4b27      	ldr	r3, [pc, #156]	; (800ca74 <xPortStartScheduler+0x134>)
 800c9d8:	681b      	ldr	r3, [r3, #0]
 800c9da:	f1c3 0307 	rsb	r3, r3, #7
 800c9de:	2b04      	cmp	r3, #4
 800c9e0:	d00a      	beq.n	800c9f8 <xPortStartScheduler+0xb8>
	__asm volatile
 800c9e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c9e6:	f383 8811 	msr	BASEPRI, r3
 800c9ea:	f3bf 8f6f 	isb	sy
 800c9ee:	f3bf 8f4f 	dsb	sy
 800c9f2:	60bb      	str	r3, [r7, #8]
}
 800c9f4:	bf00      	nop
 800c9f6:	e7fe      	b.n	800c9f6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800c9f8:	4b1e      	ldr	r3, [pc, #120]	; (800ca74 <xPortStartScheduler+0x134>)
 800c9fa:	681b      	ldr	r3, [r3, #0]
 800c9fc:	021b      	lsls	r3, r3, #8
 800c9fe:	4a1d      	ldr	r2, [pc, #116]	; (800ca74 <xPortStartScheduler+0x134>)
 800ca00:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800ca02:	4b1c      	ldr	r3, [pc, #112]	; (800ca74 <xPortStartScheduler+0x134>)
 800ca04:	681b      	ldr	r3, [r3, #0]
 800ca06:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800ca0a:	4a1a      	ldr	r2, [pc, #104]	; (800ca74 <xPortStartScheduler+0x134>)
 800ca0c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800ca0e:	687b      	ldr	r3, [r7, #4]
 800ca10:	b2da      	uxtb	r2, r3
 800ca12:	697b      	ldr	r3, [r7, #20]
 800ca14:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800ca16:	4b18      	ldr	r3, [pc, #96]	; (800ca78 <xPortStartScheduler+0x138>)
 800ca18:	681b      	ldr	r3, [r3, #0]
 800ca1a:	4a17      	ldr	r2, [pc, #92]	; (800ca78 <xPortStartScheduler+0x138>)
 800ca1c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800ca20:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800ca22:	4b15      	ldr	r3, [pc, #84]	; (800ca78 <xPortStartScheduler+0x138>)
 800ca24:	681b      	ldr	r3, [r3, #0]
 800ca26:	4a14      	ldr	r2, [pc, #80]	; (800ca78 <xPortStartScheduler+0x138>)
 800ca28:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800ca2c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800ca2e:	f000 f8dd 	bl	800cbec <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800ca32:	4b12      	ldr	r3, [pc, #72]	; (800ca7c <xPortStartScheduler+0x13c>)
 800ca34:	2200      	movs	r2, #0
 800ca36:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800ca38:	f000 f8fc 	bl	800cc34 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800ca3c:	4b10      	ldr	r3, [pc, #64]	; (800ca80 <xPortStartScheduler+0x140>)
 800ca3e:	681b      	ldr	r3, [r3, #0]
 800ca40:	4a0f      	ldr	r2, [pc, #60]	; (800ca80 <xPortStartScheduler+0x140>)
 800ca42:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800ca46:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800ca48:	f7ff ff66 	bl	800c918 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800ca4c:	f7ff f81c 	bl	800ba88 <vTaskSwitchContext>
	prvTaskExitError();
 800ca50:	f7ff ff20 	bl	800c894 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800ca54:	2300      	movs	r3, #0
}
 800ca56:	4618      	mov	r0, r3
 800ca58:	3718      	adds	r7, #24
 800ca5a:	46bd      	mov	sp, r7
 800ca5c:	bd80      	pop	{r7, pc}
 800ca5e:	bf00      	nop
 800ca60:	e000ed00 	.word	0xe000ed00
 800ca64:	410fc271 	.word	0x410fc271
 800ca68:	410fc270 	.word	0x410fc270
 800ca6c:	e000e400 	.word	0xe000e400
 800ca70:	20000df4 	.word	0x20000df4
 800ca74:	20000df8 	.word	0x20000df8
 800ca78:	e000ed20 	.word	0xe000ed20
 800ca7c:	2000000c 	.word	0x2000000c
 800ca80:	e000ef34 	.word	0xe000ef34

0800ca84 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800ca84:	b480      	push	{r7}
 800ca86:	b083      	sub	sp, #12
 800ca88:	af00      	add	r7, sp, #0
	__asm volatile
 800ca8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ca8e:	f383 8811 	msr	BASEPRI, r3
 800ca92:	f3bf 8f6f 	isb	sy
 800ca96:	f3bf 8f4f 	dsb	sy
 800ca9a:	607b      	str	r3, [r7, #4]
}
 800ca9c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800ca9e:	4b0f      	ldr	r3, [pc, #60]	; (800cadc <vPortEnterCritical+0x58>)
 800caa0:	681b      	ldr	r3, [r3, #0]
 800caa2:	3301      	adds	r3, #1
 800caa4:	4a0d      	ldr	r2, [pc, #52]	; (800cadc <vPortEnterCritical+0x58>)
 800caa6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800caa8:	4b0c      	ldr	r3, [pc, #48]	; (800cadc <vPortEnterCritical+0x58>)
 800caaa:	681b      	ldr	r3, [r3, #0]
 800caac:	2b01      	cmp	r3, #1
 800caae:	d10f      	bne.n	800cad0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800cab0:	4b0b      	ldr	r3, [pc, #44]	; (800cae0 <vPortEnterCritical+0x5c>)
 800cab2:	681b      	ldr	r3, [r3, #0]
 800cab4:	b2db      	uxtb	r3, r3
 800cab6:	2b00      	cmp	r3, #0
 800cab8:	d00a      	beq.n	800cad0 <vPortEnterCritical+0x4c>
	__asm volatile
 800caba:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cabe:	f383 8811 	msr	BASEPRI, r3
 800cac2:	f3bf 8f6f 	isb	sy
 800cac6:	f3bf 8f4f 	dsb	sy
 800caca:	603b      	str	r3, [r7, #0]
}
 800cacc:	bf00      	nop
 800cace:	e7fe      	b.n	800cace <vPortEnterCritical+0x4a>
	}
}
 800cad0:	bf00      	nop
 800cad2:	370c      	adds	r7, #12
 800cad4:	46bd      	mov	sp, r7
 800cad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cada:	4770      	bx	lr
 800cadc:	2000000c 	.word	0x2000000c
 800cae0:	e000ed04 	.word	0xe000ed04

0800cae4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800cae4:	b480      	push	{r7}
 800cae6:	b083      	sub	sp, #12
 800cae8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800caea:	4b12      	ldr	r3, [pc, #72]	; (800cb34 <vPortExitCritical+0x50>)
 800caec:	681b      	ldr	r3, [r3, #0]
 800caee:	2b00      	cmp	r3, #0
 800caf0:	d10a      	bne.n	800cb08 <vPortExitCritical+0x24>
	__asm volatile
 800caf2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800caf6:	f383 8811 	msr	BASEPRI, r3
 800cafa:	f3bf 8f6f 	isb	sy
 800cafe:	f3bf 8f4f 	dsb	sy
 800cb02:	607b      	str	r3, [r7, #4]
}
 800cb04:	bf00      	nop
 800cb06:	e7fe      	b.n	800cb06 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800cb08:	4b0a      	ldr	r3, [pc, #40]	; (800cb34 <vPortExitCritical+0x50>)
 800cb0a:	681b      	ldr	r3, [r3, #0]
 800cb0c:	3b01      	subs	r3, #1
 800cb0e:	4a09      	ldr	r2, [pc, #36]	; (800cb34 <vPortExitCritical+0x50>)
 800cb10:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800cb12:	4b08      	ldr	r3, [pc, #32]	; (800cb34 <vPortExitCritical+0x50>)
 800cb14:	681b      	ldr	r3, [r3, #0]
 800cb16:	2b00      	cmp	r3, #0
 800cb18:	d105      	bne.n	800cb26 <vPortExitCritical+0x42>
 800cb1a:	2300      	movs	r3, #0
 800cb1c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800cb1e:	683b      	ldr	r3, [r7, #0]
 800cb20:	f383 8811 	msr	BASEPRI, r3
}
 800cb24:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800cb26:	bf00      	nop
 800cb28:	370c      	adds	r7, #12
 800cb2a:	46bd      	mov	sp, r7
 800cb2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb30:	4770      	bx	lr
 800cb32:	bf00      	nop
 800cb34:	2000000c 	.word	0x2000000c
	...

0800cb40 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800cb40:	f3ef 8009 	mrs	r0, PSP
 800cb44:	f3bf 8f6f 	isb	sy
 800cb48:	4b15      	ldr	r3, [pc, #84]	; (800cba0 <pxCurrentTCBConst>)
 800cb4a:	681a      	ldr	r2, [r3, #0]
 800cb4c:	f01e 0f10 	tst.w	lr, #16
 800cb50:	bf08      	it	eq
 800cb52:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800cb56:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cb5a:	6010      	str	r0, [r2, #0]
 800cb5c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800cb60:	f04f 0050 	mov.w	r0, #80	; 0x50
 800cb64:	f380 8811 	msr	BASEPRI, r0
 800cb68:	f3bf 8f4f 	dsb	sy
 800cb6c:	f3bf 8f6f 	isb	sy
 800cb70:	f7fe ff8a 	bl	800ba88 <vTaskSwitchContext>
 800cb74:	f04f 0000 	mov.w	r0, #0
 800cb78:	f380 8811 	msr	BASEPRI, r0
 800cb7c:	bc09      	pop	{r0, r3}
 800cb7e:	6819      	ldr	r1, [r3, #0]
 800cb80:	6808      	ldr	r0, [r1, #0]
 800cb82:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cb86:	f01e 0f10 	tst.w	lr, #16
 800cb8a:	bf08      	it	eq
 800cb8c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800cb90:	f380 8809 	msr	PSP, r0
 800cb94:	f3bf 8f6f 	isb	sy
 800cb98:	4770      	bx	lr
 800cb9a:	bf00      	nop
 800cb9c:	f3af 8000 	nop.w

0800cba0 <pxCurrentTCBConst>:
 800cba0:	200007c8 	.word	0x200007c8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800cba4:	bf00      	nop
 800cba6:	bf00      	nop

0800cba8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800cba8:	b580      	push	{r7, lr}
 800cbaa:	b082      	sub	sp, #8
 800cbac:	af00      	add	r7, sp, #0
	__asm volatile
 800cbae:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cbb2:	f383 8811 	msr	BASEPRI, r3
 800cbb6:	f3bf 8f6f 	isb	sy
 800cbba:	f3bf 8f4f 	dsb	sy
 800cbbe:	607b      	str	r3, [r7, #4]
}
 800cbc0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800cbc2:	f7fe fea7 	bl	800b914 <xTaskIncrementTick>
 800cbc6:	4603      	mov	r3, r0
 800cbc8:	2b00      	cmp	r3, #0
 800cbca:	d003      	beq.n	800cbd4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800cbcc:	4b06      	ldr	r3, [pc, #24]	; (800cbe8 <xPortSysTickHandler+0x40>)
 800cbce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cbd2:	601a      	str	r2, [r3, #0]
 800cbd4:	2300      	movs	r3, #0
 800cbd6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800cbd8:	683b      	ldr	r3, [r7, #0]
 800cbda:	f383 8811 	msr	BASEPRI, r3
}
 800cbde:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800cbe0:	bf00      	nop
 800cbe2:	3708      	adds	r7, #8
 800cbe4:	46bd      	mov	sp, r7
 800cbe6:	bd80      	pop	{r7, pc}
 800cbe8:	e000ed04 	.word	0xe000ed04

0800cbec <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800cbec:	b480      	push	{r7}
 800cbee:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800cbf0:	4b0b      	ldr	r3, [pc, #44]	; (800cc20 <vPortSetupTimerInterrupt+0x34>)
 800cbf2:	2200      	movs	r2, #0
 800cbf4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800cbf6:	4b0b      	ldr	r3, [pc, #44]	; (800cc24 <vPortSetupTimerInterrupt+0x38>)
 800cbf8:	2200      	movs	r2, #0
 800cbfa:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800cbfc:	4b0a      	ldr	r3, [pc, #40]	; (800cc28 <vPortSetupTimerInterrupt+0x3c>)
 800cbfe:	681b      	ldr	r3, [r3, #0]
 800cc00:	4a0a      	ldr	r2, [pc, #40]	; (800cc2c <vPortSetupTimerInterrupt+0x40>)
 800cc02:	fba2 2303 	umull	r2, r3, r2, r3
 800cc06:	099b      	lsrs	r3, r3, #6
 800cc08:	4a09      	ldr	r2, [pc, #36]	; (800cc30 <vPortSetupTimerInterrupt+0x44>)
 800cc0a:	3b01      	subs	r3, #1
 800cc0c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800cc0e:	4b04      	ldr	r3, [pc, #16]	; (800cc20 <vPortSetupTimerInterrupt+0x34>)
 800cc10:	2207      	movs	r2, #7
 800cc12:	601a      	str	r2, [r3, #0]
}
 800cc14:	bf00      	nop
 800cc16:	46bd      	mov	sp, r7
 800cc18:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc1c:	4770      	bx	lr
 800cc1e:	bf00      	nop
 800cc20:	e000e010 	.word	0xe000e010
 800cc24:	e000e018 	.word	0xe000e018
 800cc28:	20000000 	.word	0x20000000
 800cc2c:	10624dd3 	.word	0x10624dd3
 800cc30:	e000e014 	.word	0xe000e014

0800cc34 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800cc34:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800cc44 <vPortEnableVFP+0x10>
 800cc38:	6801      	ldr	r1, [r0, #0]
 800cc3a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800cc3e:	6001      	str	r1, [r0, #0]
 800cc40:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800cc42:	bf00      	nop
 800cc44:	e000ed88 	.word	0xe000ed88

0800cc48 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800cc48:	b480      	push	{r7}
 800cc4a:	b085      	sub	sp, #20
 800cc4c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800cc4e:	f3ef 8305 	mrs	r3, IPSR
 800cc52:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800cc54:	68fb      	ldr	r3, [r7, #12]
 800cc56:	2b0f      	cmp	r3, #15
 800cc58:	d914      	bls.n	800cc84 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800cc5a:	4a17      	ldr	r2, [pc, #92]	; (800ccb8 <vPortValidateInterruptPriority+0x70>)
 800cc5c:	68fb      	ldr	r3, [r7, #12]
 800cc5e:	4413      	add	r3, r2
 800cc60:	781b      	ldrb	r3, [r3, #0]
 800cc62:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800cc64:	4b15      	ldr	r3, [pc, #84]	; (800ccbc <vPortValidateInterruptPriority+0x74>)
 800cc66:	781b      	ldrb	r3, [r3, #0]
 800cc68:	7afa      	ldrb	r2, [r7, #11]
 800cc6a:	429a      	cmp	r2, r3
 800cc6c:	d20a      	bcs.n	800cc84 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800cc6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cc72:	f383 8811 	msr	BASEPRI, r3
 800cc76:	f3bf 8f6f 	isb	sy
 800cc7a:	f3bf 8f4f 	dsb	sy
 800cc7e:	607b      	str	r3, [r7, #4]
}
 800cc80:	bf00      	nop
 800cc82:	e7fe      	b.n	800cc82 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800cc84:	4b0e      	ldr	r3, [pc, #56]	; (800ccc0 <vPortValidateInterruptPriority+0x78>)
 800cc86:	681b      	ldr	r3, [r3, #0]
 800cc88:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800cc8c:	4b0d      	ldr	r3, [pc, #52]	; (800ccc4 <vPortValidateInterruptPriority+0x7c>)
 800cc8e:	681b      	ldr	r3, [r3, #0]
 800cc90:	429a      	cmp	r2, r3
 800cc92:	d90a      	bls.n	800ccaa <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800cc94:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cc98:	f383 8811 	msr	BASEPRI, r3
 800cc9c:	f3bf 8f6f 	isb	sy
 800cca0:	f3bf 8f4f 	dsb	sy
 800cca4:	603b      	str	r3, [r7, #0]
}
 800cca6:	bf00      	nop
 800cca8:	e7fe      	b.n	800cca8 <vPortValidateInterruptPriority+0x60>
	}
 800ccaa:	bf00      	nop
 800ccac:	3714      	adds	r7, #20
 800ccae:	46bd      	mov	sp, r7
 800ccb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccb4:	4770      	bx	lr
 800ccb6:	bf00      	nop
 800ccb8:	e000e3f0 	.word	0xe000e3f0
 800ccbc:	20000df4 	.word	0x20000df4
 800ccc0:	e000ed0c 	.word	0xe000ed0c
 800ccc4:	20000df8 	.word	0x20000df8

0800ccc8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800ccc8:	b580      	push	{r7, lr}
 800ccca:	b08a      	sub	sp, #40	; 0x28
 800cccc:	af00      	add	r7, sp, #0
 800ccce:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800ccd0:	2300      	movs	r3, #0
 800ccd2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800ccd4:	f7fe fd62 	bl	800b79c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800ccd8:	4b5b      	ldr	r3, [pc, #364]	; (800ce48 <pvPortMalloc+0x180>)
 800ccda:	681b      	ldr	r3, [r3, #0]
 800ccdc:	2b00      	cmp	r3, #0
 800ccde:	d101      	bne.n	800cce4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800cce0:	f000 f920 	bl	800cf24 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800cce4:	4b59      	ldr	r3, [pc, #356]	; (800ce4c <pvPortMalloc+0x184>)
 800cce6:	681a      	ldr	r2, [r3, #0]
 800cce8:	687b      	ldr	r3, [r7, #4]
 800ccea:	4013      	ands	r3, r2
 800ccec:	2b00      	cmp	r3, #0
 800ccee:	f040 8093 	bne.w	800ce18 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800ccf2:	687b      	ldr	r3, [r7, #4]
 800ccf4:	2b00      	cmp	r3, #0
 800ccf6:	d01d      	beq.n	800cd34 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800ccf8:	2208      	movs	r2, #8
 800ccfa:	687b      	ldr	r3, [r7, #4]
 800ccfc:	4413      	add	r3, r2
 800ccfe:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800cd00:	687b      	ldr	r3, [r7, #4]
 800cd02:	f003 0307 	and.w	r3, r3, #7
 800cd06:	2b00      	cmp	r3, #0
 800cd08:	d014      	beq.n	800cd34 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800cd0a:	687b      	ldr	r3, [r7, #4]
 800cd0c:	f023 0307 	bic.w	r3, r3, #7
 800cd10:	3308      	adds	r3, #8
 800cd12:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800cd14:	687b      	ldr	r3, [r7, #4]
 800cd16:	f003 0307 	and.w	r3, r3, #7
 800cd1a:	2b00      	cmp	r3, #0
 800cd1c:	d00a      	beq.n	800cd34 <pvPortMalloc+0x6c>
	__asm volatile
 800cd1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cd22:	f383 8811 	msr	BASEPRI, r3
 800cd26:	f3bf 8f6f 	isb	sy
 800cd2a:	f3bf 8f4f 	dsb	sy
 800cd2e:	617b      	str	r3, [r7, #20]
}
 800cd30:	bf00      	nop
 800cd32:	e7fe      	b.n	800cd32 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800cd34:	687b      	ldr	r3, [r7, #4]
 800cd36:	2b00      	cmp	r3, #0
 800cd38:	d06e      	beq.n	800ce18 <pvPortMalloc+0x150>
 800cd3a:	4b45      	ldr	r3, [pc, #276]	; (800ce50 <pvPortMalloc+0x188>)
 800cd3c:	681b      	ldr	r3, [r3, #0]
 800cd3e:	687a      	ldr	r2, [r7, #4]
 800cd40:	429a      	cmp	r2, r3
 800cd42:	d869      	bhi.n	800ce18 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800cd44:	4b43      	ldr	r3, [pc, #268]	; (800ce54 <pvPortMalloc+0x18c>)
 800cd46:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800cd48:	4b42      	ldr	r3, [pc, #264]	; (800ce54 <pvPortMalloc+0x18c>)
 800cd4a:	681b      	ldr	r3, [r3, #0]
 800cd4c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800cd4e:	e004      	b.n	800cd5a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800cd50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cd52:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800cd54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cd56:	681b      	ldr	r3, [r3, #0]
 800cd58:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800cd5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cd5c:	685b      	ldr	r3, [r3, #4]
 800cd5e:	687a      	ldr	r2, [r7, #4]
 800cd60:	429a      	cmp	r2, r3
 800cd62:	d903      	bls.n	800cd6c <pvPortMalloc+0xa4>
 800cd64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cd66:	681b      	ldr	r3, [r3, #0]
 800cd68:	2b00      	cmp	r3, #0
 800cd6a:	d1f1      	bne.n	800cd50 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800cd6c:	4b36      	ldr	r3, [pc, #216]	; (800ce48 <pvPortMalloc+0x180>)
 800cd6e:	681b      	ldr	r3, [r3, #0]
 800cd70:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800cd72:	429a      	cmp	r2, r3
 800cd74:	d050      	beq.n	800ce18 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800cd76:	6a3b      	ldr	r3, [r7, #32]
 800cd78:	681b      	ldr	r3, [r3, #0]
 800cd7a:	2208      	movs	r2, #8
 800cd7c:	4413      	add	r3, r2
 800cd7e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800cd80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cd82:	681a      	ldr	r2, [r3, #0]
 800cd84:	6a3b      	ldr	r3, [r7, #32]
 800cd86:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800cd88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cd8a:	685a      	ldr	r2, [r3, #4]
 800cd8c:	687b      	ldr	r3, [r7, #4]
 800cd8e:	1ad2      	subs	r2, r2, r3
 800cd90:	2308      	movs	r3, #8
 800cd92:	005b      	lsls	r3, r3, #1
 800cd94:	429a      	cmp	r2, r3
 800cd96:	d91f      	bls.n	800cdd8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800cd98:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800cd9a:	687b      	ldr	r3, [r7, #4]
 800cd9c:	4413      	add	r3, r2
 800cd9e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800cda0:	69bb      	ldr	r3, [r7, #24]
 800cda2:	f003 0307 	and.w	r3, r3, #7
 800cda6:	2b00      	cmp	r3, #0
 800cda8:	d00a      	beq.n	800cdc0 <pvPortMalloc+0xf8>
	__asm volatile
 800cdaa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cdae:	f383 8811 	msr	BASEPRI, r3
 800cdb2:	f3bf 8f6f 	isb	sy
 800cdb6:	f3bf 8f4f 	dsb	sy
 800cdba:	613b      	str	r3, [r7, #16]
}
 800cdbc:	bf00      	nop
 800cdbe:	e7fe      	b.n	800cdbe <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800cdc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cdc2:	685a      	ldr	r2, [r3, #4]
 800cdc4:	687b      	ldr	r3, [r7, #4]
 800cdc6:	1ad2      	subs	r2, r2, r3
 800cdc8:	69bb      	ldr	r3, [r7, #24]
 800cdca:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800cdcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cdce:	687a      	ldr	r2, [r7, #4]
 800cdd0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800cdd2:	69b8      	ldr	r0, [r7, #24]
 800cdd4:	f000 f908 	bl	800cfe8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800cdd8:	4b1d      	ldr	r3, [pc, #116]	; (800ce50 <pvPortMalloc+0x188>)
 800cdda:	681a      	ldr	r2, [r3, #0]
 800cddc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cdde:	685b      	ldr	r3, [r3, #4]
 800cde0:	1ad3      	subs	r3, r2, r3
 800cde2:	4a1b      	ldr	r2, [pc, #108]	; (800ce50 <pvPortMalloc+0x188>)
 800cde4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800cde6:	4b1a      	ldr	r3, [pc, #104]	; (800ce50 <pvPortMalloc+0x188>)
 800cde8:	681a      	ldr	r2, [r3, #0]
 800cdea:	4b1b      	ldr	r3, [pc, #108]	; (800ce58 <pvPortMalloc+0x190>)
 800cdec:	681b      	ldr	r3, [r3, #0]
 800cdee:	429a      	cmp	r2, r3
 800cdf0:	d203      	bcs.n	800cdfa <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800cdf2:	4b17      	ldr	r3, [pc, #92]	; (800ce50 <pvPortMalloc+0x188>)
 800cdf4:	681b      	ldr	r3, [r3, #0]
 800cdf6:	4a18      	ldr	r2, [pc, #96]	; (800ce58 <pvPortMalloc+0x190>)
 800cdf8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800cdfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cdfc:	685a      	ldr	r2, [r3, #4]
 800cdfe:	4b13      	ldr	r3, [pc, #76]	; (800ce4c <pvPortMalloc+0x184>)
 800ce00:	681b      	ldr	r3, [r3, #0]
 800ce02:	431a      	orrs	r2, r3
 800ce04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ce06:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800ce08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ce0a:	2200      	movs	r2, #0
 800ce0c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800ce0e:	4b13      	ldr	r3, [pc, #76]	; (800ce5c <pvPortMalloc+0x194>)
 800ce10:	681b      	ldr	r3, [r3, #0]
 800ce12:	3301      	adds	r3, #1
 800ce14:	4a11      	ldr	r2, [pc, #68]	; (800ce5c <pvPortMalloc+0x194>)
 800ce16:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800ce18:	f7fe fcce 	bl	800b7b8 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800ce1c:	69fb      	ldr	r3, [r7, #28]
 800ce1e:	f003 0307 	and.w	r3, r3, #7
 800ce22:	2b00      	cmp	r3, #0
 800ce24:	d00a      	beq.n	800ce3c <pvPortMalloc+0x174>
	__asm volatile
 800ce26:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ce2a:	f383 8811 	msr	BASEPRI, r3
 800ce2e:	f3bf 8f6f 	isb	sy
 800ce32:	f3bf 8f4f 	dsb	sy
 800ce36:	60fb      	str	r3, [r7, #12]
}
 800ce38:	bf00      	nop
 800ce3a:	e7fe      	b.n	800ce3a <pvPortMalloc+0x172>
	return pvReturn;
 800ce3c:	69fb      	ldr	r3, [r7, #28]
}
 800ce3e:	4618      	mov	r0, r3
 800ce40:	3728      	adds	r7, #40	; 0x28
 800ce42:	46bd      	mov	sp, r7
 800ce44:	bd80      	pop	{r7, pc}
 800ce46:	bf00      	nop
 800ce48:	20004a04 	.word	0x20004a04
 800ce4c:	20004a18 	.word	0x20004a18
 800ce50:	20004a08 	.word	0x20004a08
 800ce54:	200049fc 	.word	0x200049fc
 800ce58:	20004a0c 	.word	0x20004a0c
 800ce5c:	20004a10 	.word	0x20004a10

0800ce60 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800ce60:	b580      	push	{r7, lr}
 800ce62:	b086      	sub	sp, #24
 800ce64:	af00      	add	r7, sp, #0
 800ce66:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800ce68:	687b      	ldr	r3, [r7, #4]
 800ce6a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800ce6c:	687b      	ldr	r3, [r7, #4]
 800ce6e:	2b00      	cmp	r3, #0
 800ce70:	d04d      	beq.n	800cf0e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800ce72:	2308      	movs	r3, #8
 800ce74:	425b      	negs	r3, r3
 800ce76:	697a      	ldr	r2, [r7, #20]
 800ce78:	4413      	add	r3, r2
 800ce7a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800ce7c:	697b      	ldr	r3, [r7, #20]
 800ce7e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800ce80:	693b      	ldr	r3, [r7, #16]
 800ce82:	685a      	ldr	r2, [r3, #4]
 800ce84:	4b24      	ldr	r3, [pc, #144]	; (800cf18 <vPortFree+0xb8>)
 800ce86:	681b      	ldr	r3, [r3, #0]
 800ce88:	4013      	ands	r3, r2
 800ce8a:	2b00      	cmp	r3, #0
 800ce8c:	d10a      	bne.n	800cea4 <vPortFree+0x44>
	__asm volatile
 800ce8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ce92:	f383 8811 	msr	BASEPRI, r3
 800ce96:	f3bf 8f6f 	isb	sy
 800ce9a:	f3bf 8f4f 	dsb	sy
 800ce9e:	60fb      	str	r3, [r7, #12]
}
 800cea0:	bf00      	nop
 800cea2:	e7fe      	b.n	800cea2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800cea4:	693b      	ldr	r3, [r7, #16]
 800cea6:	681b      	ldr	r3, [r3, #0]
 800cea8:	2b00      	cmp	r3, #0
 800ceaa:	d00a      	beq.n	800cec2 <vPortFree+0x62>
	__asm volatile
 800ceac:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ceb0:	f383 8811 	msr	BASEPRI, r3
 800ceb4:	f3bf 8f6f 	isb	sy
 800ceb8:	f3bf 8f4f 	dsb	sy
 800cebc:	60bb      	str	r3, [r7, #8]
}
 800cebe:	bf00      	nop
 800cec0:	e7fe      	b.n	800cec0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800cec2:	693b      	ldr	r3, [r7, #16]
 800cec4:	685a      	ldr	r2, [r3, #4]
 800cec6:	4b14      	ldr	r3, [pc, #80]	; (800cf18 <vPortFree+0xb8>)
 800cec8:	681b      	ldr	r3, [r3, #0]
 800ceca:	4013      	ands	r3, r2
 800cecc:	2b00      	cmp	r3, #0
 800cece:	d01e      	beq.n	800cf0e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800ced0:	693b      	ldr	r3, [r7, #16]
 800ced2:	681b      	ldr	r3, [r3, #0]
 800ced4:	2b00      	cmp	r3, #0
 800ced6:	d11a      	bne.n	800cf0e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800ced8:	693b      	ldr	r3, [r7, #16]
 800ceda:	685a      	ldr	r2, [r3, #4]
 800cedc:	4b0e      	ldr	r3, [pc, #56]	; (800cf18 <vPortFree+0xb8>)
 800cede:	681b      	ldr	r3, [r3, #0]
 800cee0:	43db      	mvns	r3, r3
 800cee2:	401a      	ands	r2, r3
 800cee4:	693b      	ldr	r3, [r7, #16]
 800cee6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800cee8:	f7fe fc58 	bl	800b79c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800ceec:	693b      	ldr	r3, [r7, #16]
 800ceee:	685a      	ldr	r2, [r3, #4]
 800cef0:	4b0a      	ldr	r3, [pc, #40]	; (800cf1c <vPortFree+0xbc>)
 800cef2:	681b      	ldr	r3, [r3, #0]
 800cef4:	4413      	add	r3, r2
 800cef6:	4a09      	ldr	r2, [pc, #36]	; (800cf1c <vPortFree+0xbc>)
 800cef8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800cefa:	6938      	ldr	r0, [r7, #16]
 800cefc:	f000 f874 	bl	800cfe8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800cf00:	4b07      	ldr	r3, [pc, #28]	; (800cf20 <vPortFree+0xc0>)
 800cf02:	681b      	ldr	r3, [r3, #0]
 800cf04:	3301      	adds	r3, #1
 800cf06:	4a06      	ldr	r2, [pc, #24]	; (800cf20 <vPortFree+0xc0>)
 800cf08:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800cf0a:	f7fe fc55 	bl	800b7b8 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800cf0e:	bf00      	nop
 800cf10:	3718      	adds	r7, #24
 800cf12:	46bd      	mov	sp, r7
 800cf14:	bd80      	pop	{r7, pc}
 800cf16:	bf00      	nop
 800cf18:	20004a18 	.word	0x20004a18
 800cf1c:	20004a08 	.word	0x20004a08
 800cf20:	20004a14 	.word	0x20004a14

0800cf24 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800cf24:	b480      	push	{r7}
 800cf26:	b085      	sub	sp, #20
 800cf28:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800cf2a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800cf2e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800cf30:	4b27      	ldr	r3, [pc, #156]	; (800cfd0 <prvHeapInit+0xac>)
 800cf32:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800cf34:	68fb      	ldr	r3, [r7, #12]
 800cf36:	f003 0307 	and.w	r3, r3, #7
 800cf3a:	2b00      	cmp	r3, #0
 800cf3c:	d00c      	beq.n	800cf58 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800cf3e:	68fb      	ldr	r3, [r7, #12]
 800cf40:	3307      	adds	r3, #7
 800cf42:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800cf44:	68fb      	ldr	r3, [r7, #12]
 800cf46:	f023 0307 	bic.w	r3, r3, #7
 800cf4a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800cf4c:	68ba      	ldr	r2, [r7, #8]
 800cf4e:	68fb      	ldr	r3, [r7, #12]
 800cf50:	1ad3      	subs	r3, r2, r3
 800cf52:	4a1f      	ldr	r2, [pc, #124]	; (800cfd0 <prvHeapInit+0xac>)
 800cf54:	4413      	add	r3, r2
 800cf56:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800cf58:	68fb      	ldr	r3, [r7, #12]
 800cf5a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800cf5c:	4a1d      	ldr	r2, [pc, #116]	; (800cfd4 <prvHeapInit+0xb0>)
 800cf5e:	687b      	ldr	r3, [r7, #4]
 800cf60:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800cf62:	4b1c      	ldr	r3, [pc, #112]	; (800cfd4 <prvHeapInit+0xb0>)
 800cf64:	2200      	movs	r2, #0
 800cf66:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800cf68:	687b      	ldr	r3, [r7, #4]
 800cf6a:	68ba      	ldr	r2, [r7, #8]
 800cf6c:	4413      	add	r3, r2
 800cf6e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800cf70:	2208      	movs	r2, #8
 800cf72:	68fb      	ldr	r3, [r7, #12]
 800cf74:	1a9b      	subs	r3, r3, r2
 800cf76:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800cf78:	68fb      	ldr	r3, [r7, #12]
 800cf7a:	f023 0307 	bic.w	r3, r3, #7
 800cf7e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800cf80:	68fb      	ldr	r3, [r7, #12]
 800cf82:	4a15      	ldr	r2, [pc, #84]	; (800cfd8 <prvHeapInit+0xb4>)
 800cf84:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800cf86:	4b14      	ldr	r3, [pc, #80]	; (800cfd8 <prvHeapInit+0xb4>)
 800cf88:	681b      	ldr	r3, [r3, #0]
 800cf8a:	2200      	movs	r2, #0
 800cf8c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800cf8e:	4b12      	ldr	r3, [pc, #72]	; (800cfd8 <prvHeapInit+0xb4>)
 800cf90:	681b      	ldr	r3, [r3, #0]
 800cf92:	2200      	movs	r2, #0
 800cf94:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800cf96:	687b      	ldr	r3, [r7, #4]
 800cf98:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800cf9a:	683b      	ldr	r3, [r7, #0]
 800cf9c:	68fa      	ldr	r2, [r7, #12]
 800cf9e:	1ad2      	subs	r2, r2, r3
 800cfa0:	683b      	ldr	r3, [r7, #0]
 800cfa2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800cfa4:	4b0c      	ldr	r3, [pc, #48]	; (800cfd8 <prvHeapInit+0xb4>)
 800cfa6:	681a      	ldr	r2, [r3, #0]
 800cfa8:	683b      	ldr	r3, [r7, #0]
 800cfaa:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800cfac:	683b      	ldr	r3, [r7, #0]
 800cfae:	685b      	ldr	r3, [r3, #4]
 800cfb0:	4a0a      	ldr	r2, [pc, #40]	; (800cfdc <prvHeapInit+0xb8>)
 800cfb2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800cfb4:	683b      	ldr	r3, [r7, #0]
 800cfb6:	685b      	ldr	r3, [r3, #4]
 800cfb8:	4a09      	ldr	r2, [pc, #36]	; (800cfe0 <prvHeapInit+0xbc>)
 800cfba:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800cfbc:	4b09      	ldr	r3, [pc, #36]	; (800cfe4 <prvHeapInit+0xc0>)
 800cfbe:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800cfc2:	601a      	str	r2, [r3, #0]
}
 800cfc4:	bf00      	nop
 800cfc6:	3714      	adds	r7, #20
 800cfc8:	46bd      	mov	sp, r7
 800cfca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfce:	4770      	bx	lr
 800cfd0:	20000dfc 	.word	0x20000dfc
 800cfd4:	200049fc 	.word	0x200049fc
 800cfd8:	20004a04 	.word	0x20004a04
 800cfdc:	20004a0c 	.word	0x20004a0c
 800cfe0:	20004a08 	.word	0x20004a08
 800cfe4:	20004a18 	.word	0x20004a18

0800cfe8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800cfe8:	b480      	push	{r7}
 800cfea:	b085      	sub	sp, #20
 800cfec:	af00      	add	r7, sp, #0
 800cfee:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800cff0:	4b28      	ldr	r3, [pc, #160]	; (800d094 <prvInsertBlockIntoFreeList+0xac>)
 800cff2:	60fb      	str	r3, [r7, #12]
 800cff4:	e002      	b.n	800cffc <prvInsertBlockIntoFreeList+0x14>
 800cff6:	68fb      	ldr	r3, [r7, #12]
 800cff8:	681b      	ldr	r3, [r3, #0]
 800cffa:	60fb      	str	r3, [r7, #12]
 800cffc:	68fb      	ldr	r3, [r7, #12]
 800cffe:	681b      	ldr	r3, [r3, #0]
 800d000:	687a      	ldr	r2, [r7, #4]
 800d002:	429a      	cmp	r2, r3
 800d004:	d8f7      	bhi.n	800cff6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800d006:	68fb      	ldr	r3, [r7, #12]
 800d008:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800d00a:	68fb      	ldr	r3, [r7, #12]
 800d00c:	685b      	ldr	r3, [r3, #4]
 800d00e:	68ba      	ldr	r2, [r7, #8]
 800d010:	4413      	add	r3, r2
 800d012:	687a      	ldr	r2, [r7, #4]
 800d014:	429a      	cmp	r2, r3
 800d016:	d108      	bne.n	800d02a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800d018:	68fb      	ldr	r3, [r7, #12]
 800d01a:	685a      	ldr	r2, [r3, #4]
 800d01c:	687b      	ldr	r3, [r7, #4]
 800d01e:	685b      	ldr	r3, [r3, #4]
 800d020:	441a      	add	r2, r3
 800d022:	68fb      	ldr	r3, [r7, #12]
 800d024:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800d026:	68fb      	ldr	r3, [r7, #12]
 800d028:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800d02a:	687b      	ldr	r3, [r7, #4]
 800d02c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800d02e:	687b      	ldr	r3, [r7, #4]
 800d030:	685b      	ldr	r3, [r3, #4]
 800d032:	68ba      	ldr	r2, [r7, #8]
 800d034:	441a      	add	r2, r3
 800d036:	68fb      	ldr	r3, [r7, #12]
 800d038:	681b      	ldr	r3, [r3, #0]
 800d03a:	429a      	cmp	r2, r3
 800d03c:	d118      	bne.n	800d070 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800d03e:	68fb      	ldr	r3, [r7, #12]
 800d040:	681a      	ldr	r2, [r3, #0]
 800d042:	4b15      	ldr	r3, [pc, #84]	; (800d098 <prvInsertBlockIntoFreeList+0xb0>)
 800d044:	681b      	ldr	r3, [r3, #0]
 800d046:	429a      	cmp	r2, r3
 800d048:	d00d      	beq.n	800d066 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800d04a:	687b      	ldr	r3, [r7, #4]
 800d04c:	685a      	ldr	r2, [r3, #4]
 800d04e:	68fb      	ldr	r3, [r7, #12]
 800d050:	681b      	ldr	r3, [r3, #0]
 800d052:	685b      	ldr	r3, [r3, #4]
 800d054:	441a      	add	r2, r3
 800d056:	687b      	ldr	r3, [r7, #4]
 800d058:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800d05a:	68fb      	ldr	r3, [r7, #12]
 800d05c:	681b      	ldr	r3, [r3, #0]
 800d05e:	681a      	ldr	r2, [r3, #0]
 800d060:	687b      	ldr	r3, [r7, #4]
 800d062:	601a      	str	r2, [r3, #0]
 800d064:	e008      	b.n	800d078 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800d066:	4b0c      	ldr	r3, [pc, #48]	; (800d098 <prvInsertBlockIntoFreeList+0xb0>)
 800d068:	681a      	ldr	r2, [r3, #0]
 800d06a:	687b      	ldr	r3, [r7, #4]
 800d06c:	601a      	str	r2, [r3, #0]
 800d06e:	e003      	b.n	800d078 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800d070:	68fb      	ldr	r3, [r7, #12]
 800d072:	681a      	ldr	r2, [r3, #0]
 800d074:	687b      	ldr	r3, [r7, #4]
 800d076:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800d078:	68fa      	ldr	r2, [r7, #12]
 800d07a:	687b      	ldr	r3, [r7, #4]
 800d07c:	429a      	cmp	r2, r3
 800d07e:	d002      	beq.n	800d086 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800d080:	68fb      	ldr	r3, [r7, #12]
 800d082:	687a      	ldr	r2, [r7, #4]
 800d084:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800d086:	bf00      	nop
 800d088:	3714      	adds	r7, #20
 800d08a:	46bd      	mov	sp, r7
 800d08c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d090:	4770      	bx	lr
 800d092:	bf00      	nop
 800d094:	200049fc 	.word	0x200049fc
 800d098:	20004a04 	.word	0x20004a04

0800d09c <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d09c:	b580      	push	{r7, lr}
 800d09e:	b082      	sub	sp, #8
 800d0a0:	af00      	add	r7, sp, #0
 800d0a2:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800d0a4:	687b      	ldr	r3, [r7, #4]
 800d0a6:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 800d0aa:	687b      	ldr	r3, [r7, #4]
 800d0ac:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800d0b0:	4619      	mov	r1, r3
 800d0b2:	4610      	mov	r0, r2
 800d0b4:	f7fc f9dd 	bl	8009472 <USBD_LL_SetupStage>
}
 800d0b8:	bf00      	nop
 800d0ba:	3708      	adds	r7, #8
 800d0bc:	46bd      	mov	sp, r7
 800d0be:	bd80      	pop	{r7, pc}

0800d0c0 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d0c0:	b580      	push	{r7, lr}
 800d0c2:	b082      	sub	sp, #8
 800d0c4:	af00      	add	r7, sp, #0
 800d0c6:	6078      	str	r0, [r7, #4]
 800d0c8:	460b      	mov	r3, r1
 800d0ca:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800d0cc:	687b      	ldr	r3, [r7, #4]
 800d0ce:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 800d0d2:	78fa      	ldrb	r2, [r7, #3]
 800d0d4:	6879      	ldr	r1, [r7, #4]
 800d0d6:	4613      	mov	r3, r2
 800d0d8:	00db      	lsls	r3, r3, #3
 800d0da:	1a9b      	subs	r3, r3, r2
 800d0dc:	009b      	lsls	r3, r3, #2
 800d0de:	440b      	add	r3, r1
 800d0e0:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800d0e4:	681a      	ldr	r2, [r3, #0]
 800d0e6:	78fb      	ldrb	r3, [r7, #3]
 800d0e8:	4619      	mov	r1, r3
 800d0ea:	f7fc fa17 	bl	800951c <USBD_LL_DataOutStage>
}
 800d0ee:	bf00      	nop
 800d0f0:	3708      	adds	r7, #8
 800d0f2:	46bd      	mov	sp, r7
 800d0f4:	bd80      	pop	{r7, pc}

0800d0f6 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d0f6:	b580      	push	{r7, lr}
 800d0f8:	b082      	sub	sp, #8
 800d0fa:	af00      	add	r7, sp, #0
 800d0fc:	6078      	str	r0, [r7, #4]
 800d0fe:	460b      	mov	r3, r1
 800d100:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800d102:	687b      	ldr	r3, [r7, #4]
 800d104:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 800d108:	78fa      	ldrb	r2, [r7, #3]
 800d10a:	6879      	ldr	r1, [r7, #4]
 800d10c:	4613      	mov	r3, r2
 800d10e:	00db      	lsls	r3, r3, #3
 800d110:	1a9b      	subs	r3, r3, r2
 800d112:	009b      	lsls	r3, r3, #2
 800d114:	440b      	add	r3, r1
 800d116:	3348      	adds	r3, #72	; 0x48
 800d118:	681a      	ldr	r2, [r3, #0]
 800d11a:	78fb      	ldrb	r3, [r7, #3]
 800d11c:	4619      	mov	r1, r3
 800d11e:	f7fc fa60 	bl	80095e2 <USBD_LL_DataInStage>
}
 800d122:	bf00      	nop
 800d124:	3708      	adds	r7, #8
 800d126:	46bd      	mov	sp, r7
 800d128:	bd80      	pop	{r7, pc}

0800d12a <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d12a:	b580      	push	{r7, lr}
 800d12c:	b082      	sub	sp, #8
 800d12e:	af00      	add	r7, sp, #0
 800d130:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800d132:	687b      	ldr	r3, [r7, #4]
 800d134:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800d138:	4618      	mov	r0, r3
 800d13a:	f7fc fb74 	bl	8009826 <USBD_LL_SOF>
}
 800d13e:	bf00      	nop
 800d140:	3708      	adds	r7, #8
 800d142:	46bd      	mov	sp, r7
 800d144:	bd80      	pop	{r7, pc}

0800d146 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d146:	b580      	push	{r7, lr}
 800d148:	b084      	sub	sp, #16
 800d14a:	af00      	add	r7, sp, #0
 800d14c:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800d14e:	2301      	movs	r3, #1
 800d150:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800d152:	687b      	ldr	r3, [r7, #4]
 800d154:	68db      	ldr	r3, [r3, #12]
 800d156:	2b00      	cmp	r3, #0
 800d158:	d102      	bne.n	800d160 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 800d15a:	2300      	movs	r3, #0
 800d15c:	73fb      	strb	r3, [r7, #15]
 800d15e:	e008      	b.n	800d172 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 800d160:	687b      	ldr	r3, [r7, #4]
 800d162:	68db      	ldr	r3, [r3, #12]
 800d164:	2b02      	cmp	r3, #2
 800d166:	d102      	bne.n	800d16e <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 800d168:	2301      	movs	r3, #1
 800d16a:	73fb      	strb	r3, [r7, #15]
 800d16c:	e001      	b.n	800d172 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 800d16e:	f7f5 f9e1 	bl	8002534 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800d172:	687b      	ldr	r3, [r7, #4]
 800d174:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800d178:	7bfa      	ldrb	r2, [r7, #15]
 800d17a:	4611      	mov	r1, r2
 800d17c:	4618      	mov	r0, r3
 800d17e:	f7fc fb14 	bl	80097aa <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800d182:	687b      	ldr	r3, [r7, #4]
 800d184:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800d188:	4618      	mov	r0, r3
 800d18a:	f7fc fac0 	bl	800970e <USBD_LL_Reset>
}
 800d18e:	bf00      	nop
 800d190:	3710      	adds	r7, #16
 800d192:	46bd      	mov	sp, r7
 800d194:	bd80      	pop	{r7, pc}
	...

0800d198 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d198:	b580      	push	{r7, lr}
 800d19a:	b082      	sub	sp, #8
 800d19c:	af00      	add	r7, sp, #0
 800d19e:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800d1a0:	687b      	ldr	r3, [r7, #4]
 800d1a2:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800d1a6:	4618      	mov	r0, r3
 800d1a8:	f7fc fb0f 	bl	80097ca <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800d1ac:	687b      	ldr	r3, [r7, #4]
 800d1ae:	681b      	ldr	r3, [r3, #0]
 800d1b0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800d1b4:	681b      	ldr	r3, [r3, #0]
 800d1b6:	687a      	ldr	r2, [r7, #4]
 800d1b8:	6812      	ldr	r2, [r2, #0]
 800d1ba:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800d1be:	f043 0301 	orr.w	r3, r3, #1
 800d1c2:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800d1c4:	687b      	ldr	r3, [r7, #4]
 800d1c6:	6a1b      	ldr	r3, [r3, #32]
 800d1c8:	2b00      	cmp	r3, #0
 800d1ca:	d005      	beq.n	800d1d8 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800d1cc:	4b04      	ldr	r3, [pc, #16]	; (800d1e0 <HAL_PCD_SuspendCallback+0x48>)
 800d1ce:	691b      	ldr	r3, [r3, #16]
 800d1d0:	4a03      	ldr	r2, [pc, #12]	; (800d1e0 <HAL_PCD_SuspendCallback+0x48>)
 800d1d2:	f043 0306 	orr.w	r3, r3, #6
 800d1d6:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800d1d8:	bf00      	nop
 800d1da:	3708      	adds	r7, #8
 800d1dc:	46bd      	mov	sp, r7
 800d1de:	bd80      	pop	{r7, pc}
 800d1e0:	e000ed00 	.word	0xe000ed00

0800d1e4 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d1e4:	b580      	push	{r7, lr}
 800d1e6:	b082      	sub	sp, #8
 800d1e8:	af00      	add	r7, sp, #0
 800d1ea:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800d1ec:	687b      	ldr	r3, [r7, #4]
 800d1ee:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800d1f2:	4618      	mov	r0, r3
 800d1f4:	f7fc faff 	bl	80097f6 <USBD_LL_Resume>
}
 800d1f8:	bf00      	nop
 800d1fa:	3708      	adds	r7, #8
 800d1fc:	46bd      	mov	sp, r7
 800d1fe:	bd80      	pop	{r7, pc}

0800d200 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d200:	b580      	push	{r7, lr}
 800d202:	b082      	sub	sp, #8
 800d204:	af00      	add	r7, sp, #0
 800d206:	6078      	str	r0, [r7, #4]
 800d208:	460b      	mov	r3, r1
 800d20a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800d20c:	687b      	ldr	r3, [r7, #4]
 800d20e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800d212:	78fa      	ldrb	r2, [r7, #3]
 800d214:	4611      	mov	r1, r2
 800d216:	4618      	mov	r0, r3
 800d218:	f7fc fb4d 	bl	80098b6 <USBD_LL_IsoOUTIncomplete>
}
 800d21c:	bf00      	nop
 800d21e:	3708      	adds	r7, #8
 800d220:	46bd      	mov	sp, r7
 800d222:	bd80      	pop	{r7, pc}

0800d224 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d224:	b580      	push	{r7, lr}
 800d226:	b082      	sub	sp, #8
 800d228:	af00      	add	r7, sp, #0
 800d22a:	6078      	str	r0, [r7, #4]
 800d22c:	460b      	mov	r3, r1
 800d22e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800d230:	687b      	ldr	r3, [r7, #4]
 800d232:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800d236:	78fa      	ldrb	r2, [r7, #3]
 800d238:	4611      	mov	r1, r2
 800d23a:	4618      	mov	r0, r3
 800d23c:	f7fc fb15 	bl	800986a <USBD_LL_IsoINIncomplete>
}
 800d240:	bf00      	nop
 800d242:	3708      	adds	r7, #8
 800d244:	46bd      	mov	sp, r7
 800d246:	bd80      	pop	{r7, pc}

0800d248 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d248:	b580      	push	{r7, lr}
 800d24a:	b082      	sub	sp, #8
 800d24c:	af00      	add	r7, sp, #0
 800d24e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800d250:	687b      	ldr	r3, [r7, #4]
 800d252:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800d256:	4618      	mov	r0, r3
 800d258:	f7fc fb53 	bl	8009902 <USBD_LL_DevConnected>
}
 800d25c:	bf00      	nop
 800d25e:	3708      	adds	r7, #8
 800d260:	46bd      	mov	sp, r7
 800d262:	bd80      	pop	{r7, pc}

0800d264 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d264:	b580      	push	{r7, lr}
 800d266:	b082      	sub	sp, #8
 800d268:	af00      	add	r7, sp, #0
 800d26a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800d26c:	687b      	ldr	r3, [r7, #4]
 800d26e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800d272:	4618      	mov	r0, r3
 800d274:	f7fc fb50 	bl	8009918 <USBD_LL_DevDisconnected>
}
 800d278:	bf00      	nop
 800d27a:	3708      	adds	r7, #8
 800d27c:	46bd      	mov	sp, r7
 800d27e:	bd80      	pop	{r7, pc}

0800d280 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800d280:	b580      	push	{r7, lr}
 800d282:	b084      	sub	sp, #16
 800d284:	af00      	add	r7, sp, #0
 800d286:	6078      	str	r0, [r7, #4]
 800d288:	4608      	mov	r0, r1
 800d28a:	4611      	mov	r1, r2
 800d28c:	461a      	mov	r2, r3
 800d28e:	4603      	mov	r3, r0
 800d290:	70fb      	strb	r3, [r7, #3]
 800d292:	460b      	mov	r3, r1
 800d294:	70bb      	strb	r3, [r7, #2]
 800d296:	4613      	mov	r3, r2
 800d298:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d29a:	2300      	movs	r3, #0
 800d29c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d29e:	2300      	movs	r3, #0
 800d2a0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800d2a2:	687b      	ldr	r3, [r7, #4]
 800d2a4:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800d2a8:	78bb      	ldrb	r3, [r7, #2]
 800d2aa:	883a      	ldrh	r2, [r7, #0]
 800d2ac:	78f9      	ldrb	r1, [r7, #3]
 800d2ae:	f7f8 f8cd 	bl	800544c <HAL_PCD_EP_Open>
 800d2b2:	4603      	mov	r3, r0
 800d2b4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d2b6:	7bfb      	ldrb	r3, [r7, #15]
 800d2b8:	4618      	mov	r0, r3
 800d2ba:	f000 f8d3 	bl	800d464 <USBD_Get_USB_Status>
 800d2be:	4603      	mov	r3, r0
 800d2c0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d2c2:	7bbb      	ldrb	r3, [r7, #14]
}
 800d2c4:	4618      	mov	r0, r3
 800d2c6:	3710      	adds	r7, #16
 800d2c8:	46bd      	mov	sp, r7
 800d2ca:	bd80      	pop	{r7, pc}

0800d2cc <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d2cc:	b580      	push	{r7, lr}
 800d2ce:	b084      	sub	sp, #16
 800d2d0:	af00      	add	r7, sp, #0
 800d2d2:	6078      	str	r0, [r7, #4]
 800d2d4:	460b      	mov	r3, r1
 800d2d6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d2d8:	2300      	movs	r3, #0
 800d2da:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d2dc:	2300      	movs	r3, #0
 800d2de:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800d2e0:	687b      	ldr	r3, [r7, #4]
 800d2e2:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800d2e6:	78fa      	ldrb	r2, [r7, #3]
 800d2e8:	4611      	mov	r1, r2
 800d2ea:	4618      	mov	r0, r3
 800d2ec:	f7f8 f9ab 	bl	8005646 <HAL_PCD_EP_SetStall>
 800d2f0:	4603      	mov	r3, r0
 800d2f2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d2f4:	7bfb      	ldrb	r3, [r7, #15]
 800d2f6:	4618      	mov	r0, r3
 800d2f8:	f000 f8b4 	bl	800d464 <USBD_Get_USB_Status>
 800d2fc:	4603      	mov	r3, r0
 800d2fe:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d300:	7bbb      	ldrb	r3, [r7, #14]
}
 800d302:	4618      	mov	r0, r3
 800d304:	3710      	adds	r7, #16
 800d306:	46bd      	mov	sp, r7
 800d308:	bd80      	pop	{r7, pc}

0800d30a <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d30a:	b580      	push	{r7, lr}
 800d30c:	b084      	sub	sp, #16
 800d30e:	af00      	add	r7, sp, #0
 800d310:	6078      	str	r0, [r7, #4]
 800d312:	460b      	mov	r3, r1
 800d314:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d316:	2300      	movs	r3, #0
 800d318:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d31a:	2300      	movs	r3, #0
 800d31c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800d31e:	687b      	ldr	r3, [r7, #4]
 800d320:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800d324:	78fa      	ldrb	r2, [r7, #3]
 800d326:	4611      	mov	r1, r2
 800d328:	4618      	mov	r0, r3
 800d32a:	f7f8 f9f0 	bl	800570e <HAL_PCD_EP_ClrStall>
 800d32e:	4603      	mov	r3, r0
 800d330:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d332:	7bfb      	ldrb	r3, [r7, #15]
 800d334:	4618      	mov	r0, r3
 800d336:	f000 f895 	bl	800d464 <USBD_Get_USB_Status>
 800d33a:	4603      	mov	r3, r0
 800d33c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d33e:	7bbb      	ldrb	r3, [r7, #14]
}
 800d340:	4618      	mov	r0, r3
 800d342:	3710      	adds	r7, #16
 800d344:	46bd      	mov	sp, r7
 800d346:	bd80      	pop	{r7, pc}

0800d348 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d348:	b480      	push	{r7}
 800d34a:	b085      	sub	sp, #20
 800d34c:	af00      	add	r7, sp, #0
 800d34e:	6078      	str	r0, [r7, #4]
 800d350:	460b      	mov	r3, r1
 800d352:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800d354:	687b      	ldr	r3, [r7, #4]
 800d356:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800d35a:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800d35c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800d360:	2b00      	cmp	r3, #0
 800d362:	da0b      	bge.n	800d37c <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800d364:	78fb      	ldrb	r3, [r7, #3]
 800d366:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800d36a:	68f9      	ldr	r1, [r7, #12]
 800d36c:	4613      	mov	r3, r2
 800d36e:	00db      	lsls	r3, r3, #3
 800d370:	1a9b      	subs	r3, r3, r2
 800d372:	009b      	lsls	r3, r3, #2
 800d374:	440b      	add	r3, r1
 800d376:	333e      	adds	r3, #62	; 0x3e
 800d378:	781b      	ldrb	r3, [r3, #0]
 800d37a:	e00b      	b.n	800d394 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800d37c:	78fb      	ldrb	r3, [r7, #3]
 800d37e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800d382:	68f9      	ldr	r1, [r7, #12]
 800d384:	4613      	mov	r3, r2
 800d386:	00db      	lsls	r3, r3, #3
 800d388:	1a9b      	subs	r3, r3, r2
 800d38a:	009b      	lsls	r3, r3, #2
 800d38c:	440b      	add	r3, r1
 800d38e:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800d392:	781b      	ldrb	r3, [r3, #0]
  }
}
 800d394:	4618      	mov	r0, r3
 800d396:	3714      	adds	r7, #20
 800d398:	46bd      	mov	sp, r7
 800d39a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d39e:	4770      	bx	lr

0800d3a0 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800d3a0:	b580      	push	{r7, lr}
 800d3a2:	b084      	sub	sp, #16
 800d3a4:	af00      	add	r7, sp, #0
 800d3a6:	6078      	str	r0, [r7, #4]
 800d3a8:	460b      	mov	r3, r1
 800d3aa:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d3ac:	2300      	movs	r3, #0
 800d3ae:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d3b0:	2300      	movs	r3, #0
 800d3b2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800d3b4:	687b      	ldr	r3, [r7, #4]
 800d3b6:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800d3ba:	78fa      	ldrb	r2, [r7, #3]
 800d3bc:	4611      	mov	r1, r2
 800d3be:	4618      	mov	r0, r3
 800d3c0:	f7f8 f81f 	bl	8005402 <HAL_PCD_SetAddress>
 800d3c4:	4603      	mov	r3, r0
 800d3c6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d3c8:	7bfb      	ldrb	r3, [r7, #15]
 800d3ca:	4618      	mov	r0, r3
 800d3cc:	f000 f84a 	bl	800d464 <USBD_Get_USB_Status>
 800d3d0:	4603      	mov	r3, r0
 800d3d2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d3d4:	7bbb      	ldrb	r3, [r7, #14]
}
 800d3d6:	4618      	mov	r0, r3
 800d3d8:	3710      	adds	r7, #16
 800d3da:	46bd      	mov	sp, r7
 800d3dc:	bd80      	pop	{r7, pc}

0800d3de <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800d3de:	b580      	push	{r7, lr}
 800d3e0:	b086      	sub	sp, #24
 800d3e2:	af00      	add	r7, sp, #0
 800d3e4:	60f8      	str	r0, [r7, #12]
 800d3e6:	607a      	str	r2, [r7, #4]
 800d3e8:	603b      	str	r3, [r7, #0]
 800d3ea:	460b      	mov	r3, r1
 800d3ec:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d3ee:	2300      	movs	r3, #0
 800d3f0:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d3f2:	2300      	movs	r3, #0
 800d3f4:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800d3f6:	68fb      	ldr	r3, [r7, #12]
 800d3f8:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800d3fc:	7af9      	ldrb	r1, [r7, #11]
 800d3fe:	683b      	ldr	r3, [r7, #0]
 800d400:	687a      	ldr	r2, [r7, #4]
 800d402:	f7f8 f8d6 	bl	80055b2 <HAL_PCD_EP_Transmit>
 800d406:	4603      	mov	r3, r0
 800d408:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d40a:	7dfb      	ldrb	r3, [r7, #23]
 800d40c:	4618      	mov	r0, r3
 800d40e:	f000 f829 	bl	800d464 <USBD_Get_USB_Status>
 800d412:	4603      	mov	r3, r0
 800d414:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800d416:	7dbb      	ldrb	r3, [r7, #22]
}
 800d418:	4618      	mov	r0, r3
 800d41a:	3718      	adds	r7, #24
 800d41c:	46bd      	mov	sp, r7
 800d41e:	bd80      	pop	{r7, pc}

0800d420 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800d420:	b580      	push	{r7, lr}
 800d422:	b086      	sub	sp, #24
 800d424:	af00      	add	r7, sp, #0
 800d426:	60f8      	str	r0, [r7, #12]
 800d428:	607a      	str	r2, [r7, #4]
 800d42a:	603b      	str	r3, [r7, #0]
 800d42c:	460b      	mov	r3, r1
 800d42e:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d430:	2300      	movs	r3, #0
 800d432:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d434:	2300      	movs	r3, #0
 800d436:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800d438:	68fb      	ldr	r3, [r7, #12]
 800d43a:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800d43e:	7af9      	ldrb	r1, [r7, #11]
 800d440:	683b      	ldr	r3, [r7, #0]
 800d442:	687a      	ldr	r2, [r7, #4]
 800d444:	f7f8 f86a 	bl	800551c <HAL_PCD_EP_Receive>
 800d448:	4603      	mov	r3, r0
 800d44a:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d44c:	7dfb      	ldrb	r3, [r7, #23]
 800d44e:	4618      	mov	r0, r3
 800d450:	f000 f808 	bl	800d464 <USBD_Get_USB_Status>
 800d454:	4603      	mov	r3, r0
 800d456:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800d458:	7dbb      	ldrb	r3, [r7, #22]
}
 800d45a:	4618      	mov	r0, r3
 800d45c:	3718      	adds	r7, #24
 800d45e:	46bd      	mov	sp, r7
 800d460:	bd80      	pop	{r7, pc}
	...

0800d464 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800d464:	b480      	push	{r7}
 800d466:	b085      	sub	sp, #20
 800d468:	af00      	add	r7, sp, #0
 800d46a:	4603      	mov	r3, r0
 800d46c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d46e:	2300      	movs	r3, #0
 800d470:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800d472:	79fb      	ldrb	r3, [r7, #7]
 800d474:	2b03      	cmp	r3, #3
 800d476:	d817      	bhi.n	800d4a8 <USBD_Get_USB_Status+0x44>
 800d478:	a201      	add	r2, pc, #4	; (adr r2, 800d480 <USBD_Get_USB_Status+0x1c>)
 800d47a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d47e:	bf00      	nop
 800d480:	0800d491 	.word	0x0800d491
 800d484:	0800d497 	.word	0x0800d497
 800d488:	0800d49d 	.word	0x0800d49d
 800d48c:	0800d4a3 	.word	0x0800d4a3
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800d490:	2300      	movs	r3, #0
 800d492:	73fb      	strb	r3, [r7, #15]
    break;
 800d494:	e00b      	b.n	800d4ae <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800d496:	2303      	movs	r3, #3
 800d498:	73fb      	strb	r3, [r7, #15]
    break;
 800d49a:	e008      	b.n	800d4ae <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800d49c:	2301      	movs	r3, #1
 800d49e:	73fb      	strb	r3, [r7, #15]
    break;
 800d4a0:	e005      	b.n	800d4ae <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800d4a2:	2303      	movs	r3, #3
 800d4a4:	73fb      	strb	r3, [r7, #15]
    break;
 800d4a6:	e002      	b.n	800d4ae <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800d4a8:	2303      	movs	r3, #3
 800d4aa:	73fb      	strb	r3, [r7, #15]
    break;
 800d4ac:	bf00      	nop
  }
  return usb_status;
 800d4ae:	7bfb      	ldrb	r3, [r7, #15]
}
 800d4b0:	4618      	mov	r0, r3
 800d4b2:	3714      	adds	r7, #20
 800d4b4:	46bd      	mov	sp, r7
 800d4b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4ba:	4770      	bx	lr

0800d4bc <__errno>:
 800d4bc:	4b01      	ldr	r3, [pc, #4]	; (800d4c4 <__errno+0x8>)
 800d4be:	6818      	ldr	r0, [r3, #0]
 800d4c0:	4770      	bx	lr
 800d4c2:	bf00      	nop
 800d4c4:	20000010 	.word	0x20000010

0800d4c8 <__libc_init_array>:
 800d4c8:	b570      	push	{r4, r5, r6, lr}
 800d4ca:	4d0d      	ldr	r5, [pc, #52]	; (800d500 <__libc_init_array+0x38>)
 800d4cc:	4c0d      	ldr	r4, [pc, #52]	; (800d504 <__libc_init_array+0x3c>)
 800d4ce:	1b64      	subs	r4, r4, r5
 800d4d0:	10a4      	asrs	r4, r4, #2
 800d4d2:	2600      	movs	r6, #0
 800d4d4:	42a6      	cmp	r6, r4
 800d4d6:	d109      	bne.n	800d4ec <__libc_init_array+0x24>
 800d4d8:	4d0b      	ldr	r5, [pc, #44]	; (800d508 <__libc_init_array+0x40>)
 800d4da:	4c0c      	ldr	r4, [pc, #48]	; (800d50c <__libc_init_array+0x44>)
 800d4dc:	f002 faaa 	bl	800fa34 <_init>
 800d4e0:	1b64      	subs	r4, r4, r5
 800d4e2:	10a4      	asrs	r4, r4, #2
 800d4e4:	2600      	movs	r6, #0
 800d4e6:	42a6      	cmp	r6, r4
 800d4e8:	d105      	bne.n	800d4f6 <__libc_init_array+0x2e>
 800d4ea:	bd70      	pop	{r4, r5, r6, pc}
 800d4ec:	f855 3b04 	ldr.w	r3, [r5], #4
 800d4f0:	4798      	blx	r3
 800d4f2:	3601      	adds	r6, #1
 800d4f4:	e7ee      	b.n	800d4d4 <__libc_init_array+0xc>
 800d4f6:	f855 3b04 	ldr.w	r3, [r5], #4
 800d4fa:	4798      	blx	r3
 800d4fc:	3601      	adds	r6, #1
 800d4fe:	e7f2      	b.n	800d4e6 <__libc_init_array+0x1e>
 800d500:	0800fd20 	.word	0x0800fd20
 800d504:	0800fd20 	.word	0x0800fd20
 800d508:	0800fd20 	.word	0x0800fd20
 800d50c:	0800fd24 	.word	0x0800fd24

0800d510 <memcpy>:
 800d510:	440a      	add	r2, r1
 800d512:	4291      	cmp	r1, r2
 800d514:	f100 33ff 	add.w	r3, r0, #4294967295
 800d518:	d100      	bne.n	800d51c <memcpy+0xc>
 800d51a:	4770      	bx	lr
 800d51c:	b510      	push	{r4, lr}
 800d51e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d522:	f803 4f01 	strb.w	r4, [r3, #1]!
 800d526:	4291      	cmp	r1, r2
 800d528:	d1f9      	bne.n	800d51e <memcpy+0xe>
 800d52a:	bd10      	pop	{r4, pc}

0800d52c <memset>:
 800d52c:	4402      	add	r2, r0
 800d52e:	4603      	mov	r3, r0
 800d530:	4293      	cmp	r3, r2
 800d532:	d100      	bne.n	800d536 <memset+0xa>
 800d534:	4770      	bx	lr
 800d536:	f803 1b01 	strb.w	r1, [r3], #1
 800d53a:	e7f9      	b.n	800d530 <memset+0x4>
 800d53c:	0000      	movs	r0, r0
	...

0800d540 <cos>:
 800d540:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800d542:	ec53 2b10 	vmov	r2, r3, d0
 800d546:	4824      	ldr	r0, [pc, #144]	; (800d5d8 <cos+0x98>)
 800d548:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800d54c:	4281      	cmp	r1, r0
 800d54e:	dc06      	bgt.n	800d55e <cos+0x1e>
 800d550:	ed9f 1b1f 	vldr	d1, [pc, #124]	; 800d5d0 <cos+0x90>
 800d554:	f001 fbf8 	bl	800ed48 <__kernel_cos>
 800d558:	ec51 0b10 	vmov	r0, r1, d0
 800d55c:	e007      	b.n	800d56e <cos+0x2e>
 800d55e:	481f      	ldr	r0, [pc, #124]	; (800d5dc <cos+0x9c>)
 800d560:	4281      	cmp	r1, r0
 800d562:	dd09      	ble.n	800d578 <cos+0x38>
 800d564:	ee10 0a10 	vmov	r0, s0
 800d568:	4619      	mov	r1, r3
 800d56a:	f7f2 fe35 	bl	80001d8 <__aeabi_dsub>
 800d56e:	ec41 0b10 	vmov	d0, r0, r1
 800d572:	b005      	add	sp, #20
 800d574:	f85d fb04 	ldr.w	pc, [sp], #4
 800d578:	4668      	mov	r0, sp
 800d57a:	f001 f925 	bl	800e7c8 <__ieee754_rem_pio2>
 800d57e:	f000 0003 	and.w	r0, r0, #3
 800d582:	2801      	cmp	r0, #1
 800d584:	d007      	beq.n	800d596 <cos+0x56>
 800d586:	2802      	cmp	r0, #2
 800d588:	d012      	beq.n	800d5b0 <cos+0x70>
 800d58a:	b9c0      	cbnz	r0, 800d5be <cos+0x7e>
 800d58c:	ed9d 1b02 	vldr	d1, [sp, #8]
 800d590:	ed9d 0b00 	vldr	d0, [sp]
 800d594:	e7de      	b.n	800d554 <cos+0x14>
 800d596:	ed9d 1b02 	vldr	d1, [sp, #8]
 800d59a:	ed9d 0b00 	vldr	d0, [sp]
 800d59e:	f001 ffdb 	bl	800f558 <__kernel_sin>
 800d5a2:	ec53 2b10 	vmov	r2, r3, d0
 800d5a6:	ee10 0a10 	vmov	r0, s0
 800d5aa:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800d5ae:	e7de      	b.n	800d56e <cos+0x2e>
 800d5b0:	ed9d 1b02 	vldr	d1, [sp, #8]
 800d5b4:	ed9d 0b00 	vldr	d0, [sp]
 800d5b8:	f001 fbc6 	bl	800ed48 <__kernel_cos>
 800d5bc:	e7f1      	b.n	800d5a2 <cos+0x62>
 800d5be:	ed9d 1b02 	vldr	d1, [sp, #8]
 800d5c2:	ed9d 0b00 	vldr	d0, [sp]
 800d5c6:	2001      	movs	r0, #1
 800d5c8:	f001 ffc6 	bl	800f558 <__kernel_sin>
 800d5cc:	e7c4      	b.n	800d558 <cos+0x18>
 800d5ce:	bf00      	nop
	...
 800d5d8:	3fe921fb 	.word	0x3fe921fb
 800d5dc:	7fefffff 	.word	0x7fefffff

0800d5e0 <sin>:
 800d5e0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800d5e2:	ec53 2b10 	vmov	r2, r3, d0
 800d5e6:	4826      	ldr	r0, [pc, #152]	; (800d680 <sin+0xa0>)
 800d5e8:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800d5ec:	4281      	cmp	r1, r0
 800d5ee:	dc07      	bgt.n	800d600 <sin+0x20>
 800d5f0:	ed9f 1b21 	vldr	d1, [pc, #132]	; 800d678 <sin+0x98>
 800d5f4:	2000      	movs	r0, #0
 800d5f6:	f001 ffaf 	bl	800f558 <__kernel_sin>
 800d5fa:	ec51 0b10 	vmov	r0, r1, d0
 800d5fe:	e007      	b.n	800d610 <sin+0x30>
 800d600:	4820      	ldr	r0, [pc, #128]	; (800d684 <sin+0xa4>)
 800d602:	4281      	cmp	r1, r0
 800d604:	dd09      	ble.n	800d61a <sin+0x3a>
 800d606:	ee10 0a10 	vmov	r0, s0
 800d60a:	4619      	mov	r1, r3
 800d60c:	f7f2 fde4 	bl	80001d8 <__aeabi_dsub>
 800d610:	ec41 0b10 	vmov	d0, r0, r1
 800d614:	b005      	add	sp, #20
 800d616:	f85d fb04 	ldr.w	pc, [sp], #4
 800d61a:	4668      	mov	r0, sp
 800d61c:	f001 f8d4 	bl	800e7c8 <__ieee754_rem_pio2>
 800d620:	f000 0003 	and.w	r0, r0, #3
 800d624:	2801      	cmp	r0, #1
 800d626:	d008      	beq.n	800d63a <sin+0x5a>
 800d628:	2802      	cmp	r0, #2
 800d62a:	d00d      	beq.n	800d648 <sin+0x68>
 800d62c:	b9d0      	cbnz	r0, 800d664 <sin+0x84>
 800d62e:	ed9d 1b02 	vldr	d1, [sp, #8]
 800d632:	ed9d 0b00 	vldr	d0, [sp]
 800d636:	2001      	movs	r0, #1
 800d638:	e7dd      	b.n	800d5f6 <sin+0x16>
 800d63a:	ed9d 1b02 	vldr	d1, [sp, #8]
 800d63e:	ed9d 0b00 	vldr	d0, [sp]
 800d642:	f001 fb81 	bl	800ed48 <__kernel_cos>
 800d646:	e7d8      	b.n	800d5fa <sin+0x1a>
 800d648:	ed9d 1b02 	vldr	d1, [sp, #8]
 800d64c:	ed9d 0b00 	vldr	d0, [sp]
 800d650:	2001      	movs	r0, #1
 800d652:	f001 ff81 	bl	800f558 <__kernel_sin>
 800d656:	ec53 2b10 	vmov	r2, r3, d0
 800d65a:	ee10 0a10 	vmov	r0, s0
 800d65e:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800d662:	e7d5      	b.n	800d610 <sin+0x30>
 800d664:	ed9d 1b02 	vldr	d1, [sp, #8]
 800d668:	ed9d 0b00 	vldr	d0, [sp]
 800d66c:	f001 fb6c 	bl	800ed48 <__kernel_cos>
 800d670:	e7f1      	b.n	800d656 <sin+0x76>
 800d672:	bf00      	nop
 800d674:	f3af 8000 	nop.w
	...
 800d680:	3fe921fb 	.word	0x3fe921fb
 800d684:	7fefffff 	.word	0x7fefffff

0800d688 <acos>:
 800d688:	b538      	push	{r3, r4, r5, lr}
 800d68a:	ed2d 8b02 	vpush	{d8}
 800d68e:	ec55 4b10 	vmov	r4, r5, d0
 800d692:	f000 f915 	bl	800d8c0 <__ieee754_acos>
 800d696:	4b16      	ldr	r3, [pc, #88]	; (800d6f0 <acos+0x68>)
 800d698:	eeb0 8a40 	vmov.f32	s16, s0
 800d69c:	eef0 8a60 	vmov.f32	s17, s1
 800d6a0:	f993 3000 	ldrsb.w	r3, [r3]
 800d6a4:	3301      	adds	r3, #1
 800d6a6:	d01c      	beq.n	800d6e2 <acos+0x5a>
 800d6a8:	4622      	mov	r2, r4
 800d6aa:	462b      	mov	r3, r5
 800d6ac:	4620      	mov	r0, r4
 800d6ae:	4629      	mov	r1, r5
 800d6b0:	f7f3 f9e4 	bl	8000a7c <__aeabi_dcmpun>
 800d6b4:	b9a8      	cbnz	r0, 800d6e2 <acos+0x5a>
 800d6b6:	ec45 4b10 	vmov	d0, r4, r5
 800d6ba:	f002 f80b 	bl	800f6d4 <fabs>
 800d6be:	4b0d      	ldr	r3, [pc, #52]	; (800d6f4 <acos+0x6c>)
 800d6c0:	ec51 0b10 	vmov	r0, r1, d0
 800d6c4:	2200      	movs	r2, #0
 800d6c6:	f7f3 f9cf 	bl	8000a68 <__aeabi_dcmpgt>
 800d6ca:	b150      	cbz	r0, 800d6e2 <acos+0x5a>
 800d6cc:	f7ff fef6 	bl	800d4bc <__errno>
 800d6d0:	ecbd 8b02 	vpop	{d8}
 800d6d4:	2321      	movs	r3, #33	; 0x21
 800d6d6:	6003      	str	r3, [r0, #0]
 800d6d8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d6dc:	4806      	ldr	r0, [pc, #24]	; (800d6f8 <acos+0x70>)
 800d6de:	f002 b88f 	b.w	800f800 <nan>
 800d6e2:	eeb0 0a48 	vmov.f32	s0, s16
 800d6e6:	eef0 0a68 	vmov.f32	s1, s17
 800d6ea:	ecbd 8b02 	vpop	{d8}
 800d6ee:	bd38      	pop	{r3, r4, r5, pc}
 800d6f0:	20000074 	.word	0x20000074
 800d6f4:	3ff00000 	.word	0x3ff00000
 800d6f8:	0800faf8 	.word	0x0800faf8

0800d6fc <pow>:
 800d6fc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d700:	ec59 8b10 	vmov	r8, r9, d0
 800d704:	ec57 6b11 	vmov	r6, r7, d1
 800d708:	f000 fb3a 	bl	800dd80 <__ieee754_pow>
 800d70c:	4b4e      	ldr	r3, [pc, #312]	; (800d848 <pow+0x14c>)
 800d70e:	f993 3000 	ldrsb.w	r3, [r3]
 800d712:	3301      	adds	r3, #1
 800d714:	ec55 4b10 	vmov	r4, r5, d0
 800d718:	d015      	beq.n	800d746 <pow+0x4a>
 800d71a:	4632      	mov	r2, r6
 800d71c:	463b      	mov	r3, r7
 800d71e:	4630      	mov	r0, r6
 800d720:	4639      	mov	r1, r7
 800d722:	f7f3 f9ab 	bl	8000a7c <__aeabi_dcmpun>
 800d726:	b970      	cbnz	r0, 800d746 <pow+0x4a>
 800d728:	4642      	mov	r2, r8
 800d72a:	464b      	mov	r3, r9
 800d72c:	4640      	mov	r0, r8
 800d72e:	4649      	mov	r1, r9
 800d730:	f7f3 f9a4 	bl	8000a7c <__aeabi_dcmpun>
 800d734:	2200      	movs	r2, #0
 800d736:	2300      	movs	r3, #0
 800d738:	b148      	cbz	r0, 800d74e <pow+0x52>
 800d73a:	4630      	mov	r0, r6
 800d73c:	4639      	mov	r1, r7
 800d73e:	f7f3 f96b 	bl	8000a18 <__aeabi_dcmpeq>
 800d742:	2800      	cmp	r0, #0
 800d744:	d17d      	bne.n	800d842 <pow+0x146>
 800d746:	ec45 4b10 	vmov	d0, r4, r5
 800d74a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d74e:	4640      	mov	r0, r8
 800d750:	4649      	mov	r1, r9
 800d752:	f7f3 f961 	bl	8000a18 <__aeabi_dcmpeq>
 800d756:	b1e0      	cbz	r0, 800d792 <pow+0x96>
 800d758:	2200      	movs	r2, #0
 800d75a:	2300      	movs	r3, #0
 800d75c:	4630      	mov	r0, r6
 800d75e:	4639      	mov	r1, r7
 800d760:	f7f3 f95a 	bl	8000a18 <__aeabi_dcmpeq>
 800d764:	2800      	cmp	r0, #0
 800d766:	d16c      	bne.n	800d842 <pow+0x146>
 800d768:	ec47 6b10 	vmov	d0, r6, r7
 800d76c:	f001 ffbb 	bl	800f6e6 <finite>
 800d770:	2800      	cmp	r0, #0
 800d772:	d0e8      	beq.n	800d746 <pow+0x4a>
 800d774:	2200      	movs	r2, #0
 800d776:	2300      	movs	r3, #0
 800d778:	4630      	mov	r0, r6
 800d77a:	4639      	mov	r1, r7
 800d77c:	f7f3 f956 	bl	8000a2c <__aeabi_dcmplt>
 800d780:	2800      	cmp	r0, #0
 800d782:	d0e0      	beq.n	800d746 <pow+0x4a>
 800d784:	f7ff fe9a 	bl	800d4bc <__errno>
 800d788:	2321      	movs	r3, #33	; 0x21
 800d78a:	6003      	str	r3, [r0, #0]
 800d78c:	2400      	movs	r4, #0
 800d78e:	4d2f      	ldr	r5, [pc, #188]	; (800d84c <pow+0x150>)
 800d790:	e7d9      	b.n	800d746 <pow+0x4a>
 800d792:	ec45 4b10 	vmov	d0, r4, r5
 800d796:	f001 ffa6 	bl	800f6e6 <finite>
 800d79a:	bbb8      	cbnz	r0, 800d80c <pow+0x110>
 800d79c:	ec49 8b10 	vmov	d0, r8, r9
 800d7a0:	f001 ffa1 	bl	800f6e6 <finite>
 800d7a4:	b390      	cbz	r0, 800d80c <pow+0x110>
 800d7a6:	ec47 6b10 	vmov	d0, r6, r7
 800d7aa:	f001 ff9c 	bl	800f6e6 <finite>
 800d7ae:	b368      	cbz	r0, 800d80c <pow+0x110>
 800d7b0:	4622      	mov	r2, r4
 800d7b2:	462b      	mov	r3, r5
 800d7b4:	4620      	mov	r0, r4
 800d7b6:	4629      	mov	r1, r5
 800d7b8:	f7f3 f960 	bl	8000a7c <__aeabi_dcmpun>
 800d7bc:	b160      	cbz	r0, 800d7d8 <pow+0xdc>
 800d7be:	f7ff fe7d 	bl	800d4bc <__errno>
 800d7c2:	2321      	movs	r3, #33	; 0x21
 800d7c4:	6003      	str	r3, [r0, #0]
 800d7c6:	2200      	movs	r2, #0
 800d7c8:	2300      	movs	r3, #0
 800d7ca:	4610      	mov	r0, r2
 800d7cc:	4619      	mov	r1, r3
 800d7ce:	f7f2 ffe5 	bl	800079c <__aeabi_ddiv>
 800d7d2:	4604      	mov	r4, r0
 800d7d4:	460d      	mov	r5, r1
 800d7d6:	e7b6      	b.n	800d746 <pow+0x4a>
 800d7d8:	f7ff fe70 	bl	800d4bc <__errno>
 800d7dc:	2322      	movs	r3, #34	; 0x22
 800d7de:	6003      	str	r3, [r0, #0]
 800d7e0:	2200      	movs	r2, #0
 800d7e2:	2300      	movs	r3, #0
 800d7e4:	4640      	mov	r0, r8
 800d7e6:	4649      	mov	r1, r9
 800d7e8:	f7f3 f920 	bl	8000a2c <__aeabi_dcmplt>
 800d7ec:	2400      	movs	r4, #0
 800d7ee:	b158      	cbz	r0, 800d808 <pow+0x10c>
 800d7f0:	ec47 6b10 	vmov	d0, r6, r7
 800d7f4:	f002 f80c 	bl	800f810 <rint>
 800d7f8:	4632      	mov	r2, r6
 800d7fa:	ec51 0b10 	vmov	r0, r1, d0
 800d7fe:	463b      	mov	r3, r7
 800d800:	f7f3 f90a 	bl	8000a18 <__aeabi_dcmpeq>
 800d804:	2800      	cmp	r0, #0
 800d806:	d0c2      	beq.n	800d78e <pow+0x92>
 800d808:	4d11      	ldr	r5, [pc, #68]	; (800d850 <pow+0x154>)
 800d80a:	e79c      	b.n	800d746 <pow+0x4a>
 800d80c:	2200      	movs	r2, #0
 800d80e:	2300      	movs	r3, #0
 800d810:	4620      	mov	r0, r4
 800d812:	4629      	mov	r1, r5
 800d814:	f7f3 f900 	bl	8000a18 <__aeabi_dcmpeq>
 800d818:	2800      	cmp	r0, #0
 800d81a:	d094      	beq.n	800d746 <pow+0x4a>
 800d81c:	ec49 8b10 	vmov	d0, r8, r9
 800d820:	f001 ff61 	bl	800f6e6 <finite>
 800d824:	2800      	cmp	r0, #0
 800d826:	d08e      	beq.n	800d746 <pow+0x4a>
 800d828:	ec47 6b10 	vmov	d0, r6, r7
 800d82c:	f001 ff5b 	bl	800f6e6 <finite>
 800d830:	2800      	cmp	r0, #0
 800d832:	d088      	beq.n	800d746 <pow+0x4a>
 800d834:	f7ff fe42 	bl	800d4bc <__errno>
 800d838:	2322      	movs	r3, #34	; 0x22
 800d83a:	6003      	str	r3, [r0, #0]
 800d83c:	2400      	movs	r4, #0
 800d83e:	2500      	movs	r5, #0
 800d840:	e781      	b.n	800d746 <pow+0x4a>
 800d842:	4d04      	ldr	r5, [pc, #16]	; (800d854 <pow+0x158>)
 800d844:	2400      	movs	r4, #0
 800d846:	e77e      	b.n	800d746 <pow+0x4a>
 800d848:	20000074 	.word	0x20000074
 800d84c:	fff00000 	.word	0xfff00000
 800d850:	7ff00000 	.word	0x7ff00000
 800d854:	3ff00000 	.word	0x3ff00000

0800d858 <sqrt>:
 800d858:	b538      	push	{r3, r4, r5, lr}
 800d85a:	ed2d 8b02 	vpush	{d8}
 800d85e:	ec55 4b10 	vmov	r4, r5, d0
 800d862:	f001 f9bb 	bl	800ebdc <__ieee754_sqrt>
 800d866:	4b15      	ldr	r3, [pc, #84]	; (800d8bc <sqrt+0x64>)
 800d868:	eeb0 8a40 	vmov.f32	s16, s0
 800d86c:	eef0 8a60 	vmov.f32	s17, s1
 800d870:	f993 3000 	ldrsb.w	r3, [r3]
 800d874:	3301      	adds	r3, #1
 800d876:	d019      	beq.n	800d8ac <sqrt+0x54>
 800d878:	4622      	mov	r2, r4
 800d87a:	462b      	mov	r3, r5
 800d87c:	4620      	mov	r0, r4
 800d87e:	4629      	mov	r1, r5
 800d880:	f7f3 f8fc 	bl	8000a7c <__aeabi_dcmpun>
 800d884:	b990      	cbnz	r0, 800d8ac <sqrt+0x54>
 800d886:	2200      	movs	r2, #0
 800d888:	2300      	movs	r3, #0
 800d88a:	4620      	mov	r0, r4
 800d88c:	4629      	mov	r1, r5
 800d88e:	f7f3 f8cd 	bl	8000a2c <__aeabi_dcmplt>
 800d892:	b158      	cbz	r0, 800d8ac <sqrt+0x54>
 800d894:	f7ff fe12 	bl	800d4bc <__errno>
 800d898:	2321      	movs	r3, #33	; 0x21
 800d89a:	6003      	str	r3, [r0, #0]
 800d89c:	2200      	movs	r2, #0
 800d89e:	2300      	movs	r3, #0
 800d8a0:	4610      	mov	r0, r2
 800d8a2:	4619      	mov	r1, r3
 800d8a4:	f7f2 ff7a 	bl	800079c <__aeabi_ddiv>
 800d8a8:	ec41 0b18 	vmov	d8, r0, r1
 800d8ac:	eeb0 0a48 	vmov.f32	s0, s16
 800d8b0:	eef0 0a68 	vmov.f32	s1, s17
 800d8b4:	ecbd 8b02 	vpop	{d8}
 800d8b8:	bd38      	pop	{r3, r4, r5, pc}
 800d8ba:	bf00      	nop
 800d8bc:	20000074 	.word	0x20000074

0800d8c0 <__ieee754_acos>:
 800d8c0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d8c4:	ec55 4b10 	vmov	r4, r5, d0
 800d8c8:	49b7      	ldr	r1, [pc, #732]	; (800dba8 <__ieee754_acos+0x2e8>)
 800d8ca:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800d8ce:	428b      	cmp	r3, r1
 800d8d0:	dd1b      	ble.n	800d90a <__ieee754_acos+0x4a>
 800d8d2:	f103 4340 	add.w	r3, r3, #3221225472	; 0xc0000000
 800d8d6:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 800d8da:	4323      	orrs	r3, r4
 800d8dc:	d106      	bne.n	800d8ec <__ieee754_acos+0x2c>
 800d8de:	2d00      	cmp	r5, #0
 800d8e0:	f300 8211 	bgt.w	800dd06 <__ieee754_acos+0x446>
 800d8e4:	ed9f 0b96 	vldr	d0, [pc, #600]	; 800db40 <__ieee754_acos+0x280>
 800d8e8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d8ec:	ee10 2a10 	vmov	r2, s0
 800d8f0:	462b      	mov	r3, r5
 800d8f2:	ee10 0a10 	vmov	r0, s0
 800d8f6:	4629      	mov	r1, r5
 800d8f8:	f7f2 fc6e 	bl	80001d8 <__aeabi_dsub>
 800d8fc:	4602      	mov	r2, r0
 800d8fe:	460b      	mov	r3, r1
 800d900:	f7f2 ff4c 	bl	800079c <__aeabi_ddiv>
 800d904:	ec41 0b10 	vmov	d0, r0, r1
 800d908:	e7ee      	b.n	800d8e8 <__ieee754_acos+0x28>
 800d90a:	49a8      	ldr	r1, [pc, #672]	; (800dbac <__ieee754_acos+0x2ec>)
 800d90c:	428b      	cmp	r3, r1
 800d90e:	f300 8087 	bgt.w	800da20 <__ieee754_acos+0x160>
 800d912:	4aa7      	ldr	r2, [pc, #668]	; (800dbb0 <__ieee754_acos+0x2f0>)
 800d914:	4293      	cmp	r3, r2
 800d916:	f340 81f9 	ble.w	800dd0c <__ieee754_acos+0x44c>
 800d91a:	ee10 2a10 	vmov	r2, s0
 800d91e:	ee10 0a10 	vmov	r0, s0
 800d922:	462b      	mov	r3, r5
 800d924:	4629      	mov	r1, r5
 800d926:	f7f2 fe0f 	bl	8000548 <__aeabi_dmul>
 800d92a:	a387      	add	r3, pc, #540	; (adr r3, 800db48 <__ieee754_acos+0x288>)
 800d92c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d930:	4606      	mov	r6, r0
 800d932:	460f      	mov	r7, r1
 800d934:	f7f2 fe08 	bl	8000548 <__aeabi_dmul>
 800d938:	a385      	add	r3, pc, #532	; (adr r3, 800db50 <__ieee754_acos+0x290>)
 800d93a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d93e:	f7f2 fc4d 	bl	80001dc <__adddf3>
 800d942:	4632      	mov	r2, r6
 800d944:	463b      	mov	r3, r7
 800d946:	f7f2 fdff 	bl	8000548 <__aeabi_dmul>
 800d94a:	a383      	add	r3, pc, #524	; (adr r3, 800db58 <__ieee754_acos+0x298>)
 800d94c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d950:	f7f2 fc42 	bl	80001d8 <__aeabi_dsub>
 800d954:	4632      	mov	r2, r6
 800d956:	463b      	mov	r3, r7
 800d958:	f7f2 fdf6 	bl	8000548 <__aeabi_dmul>
 800d95c:	a380      	add	r3, pc, #512	; (adr r3, 800db60 <__ieee754_acos+0x2a0>)
 800d95e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d962:	f7f2 fc3b 	bl	80001dc <__adddf3>
 800d966:	4632      	mov	r2, r6
 800d968:	463b      	mov	r3, r7
 800d96a:	f7f2 fded 	bl	8000548 <__aeabi_dmul>
 800d96e:	a37e      	add	r3, pc, #504	; (adr r3, 800db68 <__ieee754_acos+0x2a8>)
 800d970:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d974:	f7f2 fc30 	bl	80001d8 <__aeabi_dsub>
 800d978:	4632      	mov	r2, r6
 800d97a:	463b      	mov	r3, r7
 800d97c:	f7f2 fde4 	bl	8000548 <__aeabi_dmul>
 800d980:	a37b      	add	r3, pc, #492	; (adr r3, 800db70 <__ieee754_acos+0x2b0>)
 800d982:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d986:	f7f2 fc29 	bl	80001dc <__adddf3>
 800d98a:	4632      	mov	r2, r6
 800d98c:	463b      	mov	r3, r7
 800d98e:	f7f2 fddb 	bl	8000548 <__aeabi_dmul>
 800d992:	a379      	add	r3, pc, #484	; (adr r3, 800db78 <__ieee754_acos+0x2b8>)
 800d994:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d998:	4680      	mov	r8, r0
 800d99a:	4689      	mov	r9, r1
 800d99c:	4630      	mov	r0, r6
 800d99e:	4639      	mov	r1, r7
 800d9a0:	f7f2 fdd2 	bl	8000548 <__aeabi_dmul>
 800d9a4:	a376      	add	r3, pc, #472	; (adr r3, 800db80 <__ieee754_acos+0x2c0>)
 800d9a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d9aa:	f7f2 fc15 	bl	80001d8 <__aeabi_dsub>
 800d9ae:	4632      	mov	r2, r6
 800d9b0:	463b      	mov	r3, r7
 800d9b2:	f7f2 fdc9 	bl	8000548 <__aeabi_dmul>
 800d9b6:	a374      	add	r3, pc, #464	; (adr r3, 800db88 <__ieee754_acos+0x2c8>)
 800d9b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d9bc:	f7f2 fc0e 	bl	80001dc <__adddf3>
 800d9c0:	4632      	mov	r2, r6
 800d9c2:	463b      	mov	r3, r7
 800d9c4:	f7f2 fdc0 	bl	8000548 <__aeabi_dmul>
 800d9c8:	a371      	add	r3, pc, #452	; (adr r3, 800db90 <__ieee754_acos+0x2d0>)
 800d9ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d9ce:	f7f2 fc03 	bl	80001d8 <__aeabi_dsub>
 800d9d2:	4632      	mov	r2, r6
 800d9d4:	463b      	mov	r3, r7
 800d9d6:	f7f2 fdb7 	bl	8000548 <__aeabi_dmul>
 800d9da:	4b76      	ldr	r3, [pc, #472]	; (800dbb4 <__ieee754_acos+0x2f4>)
 800d9dc:	2200      	movs	r2, #0
 800d9de:	f7f2 fbfd 	bl	80001dc <__adddf3>
 800d9e2:	4602      	mov	r2, r0
 800d9e4:	460b      	mov	r3, r1
 800d9e6:	4640      	mov	r0, r8
 800d9e8:	4649      	mov	r1, r9
 800d9ea:	f7f2 fed7 	bl	800079c <__aeabi_ddiv>
 800d9ee:	4622      	mov	r2, r4
 800d9f0:	462b      	mov	r3, r5
 800d9f2:	f7f2 fda9 	bl	8000548 <__aeabi_dmul>
 800d9f6:	4602      	mov	r2, r0
 800d9f8:	460b      	mov	r3, r1
 800d9fa:	a167      	add	r1, pc, #412	; (adr r1, 800db98 <__ieee754_acos+0x2d8>)
 800d9fc:	e9d1 0100 	ldrd	r0, r1, [r1]
 800da00:	f7f2 fbea 	bl	80001d8 <__aeabi_dsub>
 800da04:	4602      	mov	r2, r0
 800da06:	460b      	mov	r3, r1
 800da08:	4620      	mov	r0, r4
 800da0a:	4629      	mov	r1, r5
 800da0c:	f7f2 fbe4 	bl	80001d8 <__aeabi_dsub>
 800da10:	4602      	mov	r2, r0
 800da12:	460b      	mov	r3, r1
 800da14:	a162      	add	r1, pc, #392	; (adr r1, 800dba0 <__ieee754_acos+0x2e0>)
 800da16:	e9d1 0100 	ldrd	r0, r1, [r1]
 800da1a:	f7f2 fbdd 	bl	80001d8 <__aeabi_dsub>
 800da1e:	e771      	b.n	800d904 <__ieee754_acos+0x44>
 800da20:	2d00      	cmp	r5, #0
 800da22:	f280 80cb 	bge.w	800dbbc <__ieee754_acos+0x2fc>
 800da26:	ee10 0a10 	vmov	r0, s0
 800da2a:	4b62      	ldr	r3, [pc, #392]	; (800dbb4 <__ieee754_acos+0x2f4>)
 800da2c:	2200      	movs	r2, #0
 800da2e:	4629      	mov	r1, r5
 800da30:	f7f2 fbd4 	bl	80001dc <__adddf3>
 800da34:	4b60      	ldr	r3, [pc, #384]	; (800dbb8 <__ieee754_acos+0x2f8>)
 800da36:	2200      	movs	r2, #0
 800da38:	f7f2 fd86 	bl	8000548 <__aeabi_dmul>
 800da3c:	a342      	add	r3, pc, #264	; (adr r3, 800db48 <__ieee754_acos+0x288>)
 800da3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800da42:	4604      	mov	r4, r0
 800da44:	460d      	mov	r5, r1
 800da46:	f7f2 fd7f 	bl	8000548 <__aeabi_dmul>
 800da4a:	a341      	add	r3, pc, #260	; (adr r3, 800db50 <__ieee754_acos+0x290>)
 800da4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800da50:	f7f2 fbc4 	bl	80001dc <__adddf3>
 800da54:	4622      	mov	r2, r4
 800da56:	462b      	mov	r3, r5
 800da58:	f7f2 fd76 	bl	8000548 <__aeabi_dmul>
 800da5c:	a33e      	add	r3, pc, #248	; (adr r3, 800db58 <__ieee754_acos+0x298>)
 800da5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800da62:	f7f2 fbb9 	bl	80001d8 <__aeabi_dsub>
 800da66:	4622      	mov	r2, r4
 800da68:	462b      	mov	r3, r5
 800da6a:	f7f2 fd6d 	bl	8000548 <__aeabi_dmul>
 800da6e:	a33c      	add	r3, pc, #240	; (adr r3, 800db60 <__ieee754_acos+0x2a0>)
 800da70:	e9d3 2300 	ldrd	r2, r3, [r3]
 800da74:	f7f2 fbb2 	bl	80001dc <__adddf3>
 800da78:	4622      	mov	r2, r4
 800da7a:	462b      	mov	r3, r5
 800da7c:	f7f2 fd64 	bl	8000548 <__aeabi_dmul>
 800da80:	a339      	add	r3, pc, #228	; (adr r3, 800db68 <__ieee754_acos+0x2a8>)
 800da82:	e9d3 2300 	ldrd	r2, r3, [r3]
 800da86:	f7f2 fba7 	bl	80001d8 <__aeabi_dsub>
 800da8a:	4622      	mov	r2, r4
 800da8c:	462b      	mov	r3, r5
 800da8e:	f7f2 fd5b 	bl	8000548 <__aeabi_dmul>
 800da92:	a337      	add	r3, pc, #220	; (adr r3, 800db70 <__ieee754_acos+0x2b0>)
 800da94:	e9d3 2300 	ldrd	r2, r3, [r3]
 800da98:	f7f2 fba0 	bl	80001dc <__adddf3>
 800da9c:	4622      	mov	r2, r4
 800da9e:	462b      	mov	r3, r5
 800daa0:	f7f2 fd52 	bl	8000548 <__aeabi_dmul>
 800daa4:	ec45 4b10 	vmov	d0, r4, r5
 800daa8:	4680      	mov	r8, r0
 800daaa:	4689      	mov	r9, r1
 800daac:	f001 f896 	bl	800ebdc <__ieee754_sqrt>
 800dab0:	a331      	add	r3, pc, #196	; (adr r3, 800db78 <__ieee754_acos+0x2b8>)
 800dab2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dab6:	4620      	mov	r0, r4
 800dab8:	4629      	mov	r1, r5
 800daba:	ec57 6b10 	vmov	r6, r7, d0
 800dabe:	f7f2 fd43 	bl	8000548 <__aeabi_dmul>
 800dac2:	a32f      	add	r3, pc, #188	; (adr r3, 800db80 <__ieee754_acos+0x2c0>)
 800dac4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dac8:	f7f2 fb86 	bl	80001d8 <__aeabi_dsub>
 800dacc:	4622      	mov	r2, r4
 800dace:	462b      	mov	r3, r5
 800dad0:	f7f2 fd3a 	bl	8000548 <__aeabi_dmul>
 800dad4:	a32c      	add	r3, pc, #176	; (adr r3, 800db88 <__ieee754_acos+0x2c8>)
 800dad6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dada:	f7f2 fb7f 	bl	80001dc <__adddf3>
 800dade:	4622      	mov	r2, r4
 800dae0:	462b      	mov	r3, r5
 800dae2:	f7f2 fd31 	bl	8000548 <__aeabi_dmul>
 800dae6:	a32a      	add	r3, pc, #168	; (adr r3, 800db90 <__ieee754_acos+0x2d0>)
 800dae8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800daec:	f7f2 fb74 	bl	80001d8 <__aeabi_dsub>
 800daf0:	4622      	mov	r2, r4
 800daf2:	462b      	mov	r3, r5
 800daf4:	f7f2 fd28 	bl	8000548 <__aeabi_dmul>
 800daf8:	4b2e      	ldr	r3, [pc, #184]	; (800dbb4 <__ieee754_acos+0x2f4>)
 800dafa:	2200      	movs	r2, #0
 800dafc:	f7f2 fb6e 	bl	80001dc <__adddf3>
 800db00:	4602      	mov	r2, r0
 800db02:	460b      	mov	r3, r1
 800db04:	4640      	mov	r0, r8
 800db06:	4649      	mov	r1, r9
 800db08:	f7f2 fe48 	bl	800079c <__aeabi_ddiv>
 800db0c:	4632      	mov	r2, r6
 800db0e:	463b      	mov	r3, r7
 800db10:	f7f2 fd1a 	bl	8000548 <__aeabi_dmul>
 800db14:	a320      	add	r3, pc, #128	; (adr r3, 800db98 <__ieee754_acos+0x2d8>)
 800db16:	e9d3 2300 	ldrd	r2, r3, [r3]
 800db1a:	f7f2 fb5d 	bl	80001d8 <__aeabi_dsub>
 800db1e:	4632      	mov	r2, r6
 800db20:	463b      	mov	r3, r7
 800db22:	f7f2 fb5b 	bl	80001dc <__adddf3>
 800db26:	4602      	mov	r2, r0
 800db28:	460b      	mov	r3, r1
 800db2a:	f7f2 fb57 	bl	80001dc <__adddf3>
 800db2e:	4602      	mov	r2, r0
 800db30:	460b      	mov	r3, r1
 800db32:	a103      	add	r1, pc, #12	; (adr r1, 800db40 <__ieee754_acos+0x280>)
 800db34:	e9d1 0100 	ldrd	r0, r1, [r1]
 800db38:	e76f      	b.n	800da1a <__ieee754_acos+0x15a>
 800db3a:	bf00      	nop
 800db3c:	f3af 8000 	nop.w
 800db40:	54442d18 	.word	0x54442d18
 800db44:	400921fb 	.word	0x400921fb
 800db48:	0dfdf709 	.word	0x0dfdf709
 800db4c:	3f023de1 	.word	0x3f023de1
 800db50:	7501b288 	.word	0x7501b288
 800db54:	3f49efe0 	.word	0x3f49efe0
 800db58:	b5688f3b 	.word	0xb5688f3b
 800db5c:	3fa48228 	.word	0x3fa48228
 800db60:	0e884455 	.word	0x0e884455
 800db64:	3fc9c155 	.word	0x3fc9c155
 800db68:	03eb6f7d 	.word	0x03eb6f7d
 800db6c:	3fd4d612 	.word	0x3fd4d612
 800db70:	55555555 	.word	0x55555555
 800db74:	3fc55555 	.word	0x3fc55555
 800db78:	b12e9282 	.word	0xb12e9282
 800db7c:	3fb3b8c5 	.word	0x3fb3b8c5
 800db80:	1b8d0159 	.word	0x1b8d0159
 800db84:	3fe6066c 	.word	0x3fe6066c
 800db88:	9c598ac8 	.word	0x9c598ac8
 800db8c:	40002ae5 	.word	0x40002ae5
 800db90:	1c8a2d4b 	.word	0x1c8a2d4b
 800db94:	40033a27 	.word	0x40033a27
 800db98:	33145c07 	.word	0x33145c07
 800db9c:	3c91a626 	.word	0x3c91a626
 800dba0:	54442d18 	.word	0x54442d18
 800dba4:	3ff921fb 	.word	0x3ff921fb
 800dba8:	3fefffff 	.word	0x3fefffff
 800dbac:	3fdfffff 	.word	0x3fdfffff
 800dbb0:	3c600000 	.word	0x3c600000
 800dbb4:	3ff00000 	.word	0x3ff00000
 800dbb8:	3fe00000 	.word	0x3fe00000
 800dbbc:	ee10 2a10 	vmov	r2, s0
 800dbc0:	462b      	mov	r3, r5
 800dbc2:	496d      	ldr	r1, [pc, #436]	; (800dd78 <__ieee754_acos+0x4b8>)
 800dbc4:	2000      	movs	r0, #0
 800dbc6:	f7f2 fb07 	bl	80001d8 <__aeabi_dsub>
 800dbca:	4b6c      	ldr	r3, [pc, #432]	; (800dd7c <__ieee754_acos+0x4bc>)
 800dbcc:	2200      	movs	r2, #0
 800dbce:	f7f2 fcbb 	bl	8000548 <__aeabi_dmul>
 800dbd2:	4604      	mov	r4, r0
 800dbd4:	460d      	mov	r5, r1
 800dbd6:	ec45 4b10 	vmov	d0, r4, r5
 800dbda:	f000 ffff 	bl	800ebdc <__ieee754_sqrt>
 800dbde:	a34e      	add	r3, pc, #312	; (adr r3, 800dd18 <__ieee754_acos+0x458>)
 800dbe0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dbe4:	4620      	mov	r0, r4
 800dbe6:	4629      	mov	r1, r5
 800dbe8:	ec59 8b10 	vmov	r8, r9, d0
 800dbec:	f7f2 fcac 	bl	8000548 <__aeabi_dmul>
 800dbf0:	a34b      	add	r3, pc, #300	; (adr r3, 800dd20 <__ieee754_acos+0x460>)
 800dbf2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dbf6:	f7f2 faf1 	bl	80001dc <__adddf3>
 800dbfa:	4622      	mov	r2, r4
 800dbfc:	462b      	mov	r3, r5
 800dbfe:	f7f2 fca3 	bl	8000548 <__aeabi_dmul>
 800dc02:	a349      	add	r3, pc, #292	; (adr r3, 800dd28 <__ieee754_acos+0x468>)
 800dc04:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dc08:	f7f2 fae6 	bl	80001d8 <__aeabi_dsub>
 800dc0c:	4622      	mov	r2, r4
 800dc0e:	462b      	mov	r3, r5
 800dc10:	f7f2 fc9a 	bl	8000548 <__aeabi_dmul>
 800dc14:	a346      	add	r3, pc, #280	; (adr r3, 800dd30 <__ieee754_acos+0x470>)
 800dc16:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dc1a:	f7f2 fadf 	bl	80001dc <__adddf3>
 800dc1e:	4622      	mov	r2, r4
 800dc20:	462b      	mov	r3, r5
 800dc22:	f7f2 fc91 	bl	8000548 <__aeabi_dmul>
 800dc26:	a344      	add	r3, pc, #272	; (adr r3, 800dd38 <__ieee754_acos+0x478>)
 800dc28:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dc2c:	f7f2 fad4 	bl	80001d8 <__aeabi_dsub>
 800dc30:	4622      	mov	r2, r4
 800dc32:	462b      	mov	r3, r5
 800dc34:	f7f2 fc88 	bl	8000548 <__aeabi_dmul>
 800dc38:	a341      	add	r3, pc, #260	; (adr r3, 800dd40 <__ieee754_acos+0x480>)
 800dc3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dc3e:	f7f2 facd 	bl	80001dc <__adddf3>
 800dc42:	4622      	mov	r2, r4
 800dc44:	462b      	mov	r3, r5
 800dc46:	f7f2 fc7f 	bl	8000548 <__aeabi_dmul>
 800dc4a:	a33f      	add	r3, pc, #252	; (adr r3, 800dd48 <__ieee754_acos+0x488>)
 800dc4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dc50:	4682      	mov	sl, r0
 800dc52:	468b      	mov	fp, r1
 800dc54:	4620      	mov	r0, r4
 800dc56:	4629      	mov	r1, r5
 800dc58:	f7f2 fc76 	bl	8000548 <__aeabi_dmul>
 800dc5c:	a33c      	add	r3, pc, #240	; (adr r3, 800dd50 <__ieee754_acos+0x490>)
 800dc5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dc62:	f7f2 fab9 	bl	80001d8 <__aeabi_dsub>
 800dc66:	4622      	mov	r2, r4
 800dc68:	462b      	mov	r3, r5
 800dc6a:	f7f2 fc6d 	bl	8000548 <__aeabi_dmul>
 800dc6e:	a33a      	add	r3, pc, #232	; (adr r3, 800dd58 <__ieee754_acos+0x498>)
 800dc70:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dc74:	f7f2 fab2 	bl	80001dc <__adddf3>
 800dc78:	4622      	mov	r2, r4
 800dc7a:	462b      	mov	r3, r5
 800dc7c:	f7f2 fc64 	bl	8000548 <__aeabi_dmul>
 800dc80:	a337      	add	r3, pc, #220	; (adr r3, 800dd60 <__ieee754_acos+0x4a0>)
 800dc82:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dc86:	f7f2 faa7 	bl	80001d8 <__aeabi_dsub>
 800dc8a:	4622      	mov	r2, r4
 800dc8c:	462b      	mov	r3, r5
 800dc8e:	f7f2 fc5b 	bl	8000548 <__aeabi_dmul>
 800dc92:	4b39      	ldr	r3, [pc, #228]	; (800dd78 <__ieee754_acos+0x4b8>)
 800dc94:	2200      	movs	r2, #0
 800dc96:	f7f2 faa1 	bl	80001dc <__adddf3>
 800dc9a:	4602      	mov	r2, r0
 800dc9c:	460b      	mov	r3, r1
 800dc9e:	4650      	mov	r0, sl
 800dca0:	4659      	mov	r1, fp
 800dca2:	f7f2 fd7b 	bl	800079c <__aeabi_ddiv>
 800dca6:	4642      	mov	r2, r8
 800dca8:	464b      	mov	r3, r9
 800dcaa:	f7f2 fc4d 	bl	8000548 <__aeabi_dmul>
 800dcae:	2600      	movs	r6, #0
 800dcb0:	4682      	mov	sl, r0
 800dcb2:	468b      	mov	fp, r1
 800dcb4:	4632      	mov	r2, r6
 800dcb6:	464b      	mov	r3, r9
 800dcb8:	4630      	mov	r0, r6
 800dcba:	4649      	mov	r1, r9
 800dcbc:	f7f2 fc44 	bl	8000548 <__aeabi_dmul>
 800dcc0:	4602      	mov	r2, r0
 800dcc2:	460b      	mov	r3, r1
 800dcc4:	4620      	mov	r0, r4
 800dcc6:	4629      	mov	r1, r5
 800dcc8:	f7f2 fa86 	bl	80001d8 <__aeabi_dsub>
 800dccc:	4632      	mov	r2, r6
 800dcce:	4604      	mov	r4, r0
 800dcd0:	460d      	mov	r5, r1
 800dcd2:	464b      	mov	r3, r9
 800dcd4:	4640      	mov	r0, r8
 800dcd6:	4649      	mov	r1, r9
 800dcd8:	f7f2 fa80 	bl	80001dc <__adddf3>
 800dcdc:	4602      	mov	r2, r0
 800dcde:	460b      	mov	r3, r1
 800dce0:	4620      	mov	r0, r4
 800dce2:	4629      	mov	r1, r5
 800dce4:	f7f2 fd5a 	bl	800079c <__aeabi_ddiv>
 800dce8:	4602      	mov	r2, r0
 800dcea:	460b      	mov	r3, r1
 800dcec:	4650      	mov	r0, sl
 800dcee:	4659      	mov	r1, fp
 800dcf0:	f7f2 fa74 	bl	80001dc <__adddf3>
 800dcf4:	4632      	mov	r2, r6
 800dcf6:	464b      	mov	r3, r9
 800dcf8:	f7f2 fa70 	bl	80001dc <__adddf3>
 800dcfc:	4602      	mov	r2, r0
 800dcfe:	460b      	mov	r3, r1
 800dd00:	f7f2 fa6c 	bl	80001dc <__adddf3>
 800dd04:	e5fe      	b.n	800d904 <__ieee754_acos+0x44>
 800dd06:	ed9f 0b18 	vldr	d0, [pc, #96]	; 800dd68 <__ieee754_acos+0x4a8>
 800dd0a:	e5ed      	b.n	800d8e8 <__ieee754_acos+0x28>
 800dd0c:	ed9f 0b18 	vldr	d0, [pc, #96]	; 800dd70 <__ieee754_acos+0x4b0>
 800dd10:	e5ea      	b.n	800d8e8 <__ieee754_acos+0x28>
 800dd12:	bf00      	nop
 800dd14:	f3af 8000 	nop.w
 800dd18:	0dfdf709 	.word	0x0dfdf709
 800dd1c:	3f023de1 	.word	0x3f023de1
 800dd20:	7501b288 	.word	0x7501b288
 800dd24:	3f49efe0 	.word	0x3f49efe0
 800dd28:	b5688f3b 	.word	0xb5688f3b
 800dd2c:	3fa48228 	.word	0x3fa48228
 800dd30:	0e884455 	.word	0x0e884455
 800dd34:	3fc9c155 	.word	0x3fc9c155
 800dd38:	03eb6f7d 	.word	0x03eb6f7d
 800dd3c:	3fd4d612 	.word	0x3fd4d612
 800dd40:	55555555 	.word	0x55555555
 800dd44:	3fc55555 	.word	0x3fc55555
 800dd48:	b12e9282 	.word	0xb12e9282
 800dd4c:	3fb3b8c5 	.word	0x3fb3b8c5
 800dd50:	1b8d0159 	.word	0x1b8d0159
 800dd54:	3fe6066c 	.word	0x3fe6066c
 800dd58:	9c598ac8 	.word	0x9c598ac8
 800dd5c:	40002ae5 	.word	0x40002ae5
 800dd60:	1c8a2d4b 	.word	0x1c8a2d4b
 800dd64:	40033a27 	.word	0x40033a27
	...
 800dd70:	54442d18 	.word	0x54442d18
 800dd74:	3ff921fb 	.word	0x3ff921fb
 800dd78:	3ff00000 	.word	0x3ff00000
 800dd7c:	3fe00000 	.word	0x3fe00000

0800dd80 <__ieee754_pow>:
 800dd80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dd84:	ed2d 8b06 	vpush	{d8-d10}
 800dd88:	b08d      	sub	sp, #52	; 0x34
 800dd8a:	ed8d 1b02 	vstr	d1, [sp, #8]
 800dd8e:	e9dd 0702 	ldrd	r0, r7, [sp, #8]
 800dd92:	f027 4600 	bic.w	r6, r7, #2147483648	; 0x80000000
 800dd96:	ea56 0100 	orrs.w	r1, r6, r0
 800dd9a:	ec53 2b10 	vmov	r2, r3, d0
 800dd9e:	f000 84d1 	beq.w	800e744 <__ieee754_pow+0x9c4>
 800dda2:	497f      	ldr	r1, [pc, #508]	; (800dfa0 <__ieee754_pow+0x220>)
 800dda4:	f023 4400 	bic.w	r4, r3, #2147483648	; 0x80000000
 800dda8:	428c      	cmp	r4, r1
 800ddaa:	ee10 8a10 	vmov	r8, s0
 800ddae:	4699      	mov	r9, r3
 800ddb0:	dc09      	bgt.n	800ddc6 <__ieee754_pow+0x46>
 800ddb2:	d103      	bne.n	800ddbc <__ieee754_pow+0x3c>
 800ddb4:	b97a      	cbnz	r2, 800ddd6 <__ieee754_pow+0x56>
 800ddb6:	42a6      	cmp	r6, r4
 800ddb8:	dd02      	ble.n	800ddc0 <__ieee754_pow+0x40>
 800ddba:	e00c      	b.n	800ddd6 <__ieee754_pow+0x56>
 800ddbc:	428e      	cmp	r6, r1
 800ddbe:	dc02      	bgt.n	800ddc6 <__ieee754_pow+0x46>
 800ddc0:	428e      	cmp	r6, r1
 800ddc2:	d110      	bne.n	800dde6 <__ieee754_pow+0x66>
 800ddc4:	b178      	cbz	r0, 800dde6 <__ieee754_pow+0x66>
 800ddc6:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 800ddca:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800ddce:	ea54 0308 	orrs.w	r3, r4, r8
 800ddd2:	f000 84b7 	beq.w	800e744 <__ieee754_pow+0x9c4>
 800ddd6:	4873      	ldr	r0, [pc, #460]	; (800dfa4 <__ieee754_pow+0x224>)
 800ddd8:	b00d      	add	sp, #52	; 0x34
 800ddda:	ecbd 8b06 	vpop	{d8-d10}
 800ddde:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dde2:	f001 bd0d 	b.w	800f800 <nan>
 800dde6:	f1b9 0f00 	cmp.w	r9, #0
 800ddea:	da36      	bge.n	800de5a <__ieee754_pow+0xda>
 800ddec:	496e      	ldr	r1, [pc, #440]	; (800dfa8 <__ieee754_pow+0x228>)
 800ddee:	428e      	cmp	r6, r1
 800ddf0:	dc51      	bgt.n	800de96 <__ieee754_pow+0x116>
 800ddf2:	f1a1 7154 	sub.w	r1, r1, #55574528	; 0x3500000
 800ddf6:	428e      	cmp	r6, r1
 800ddf8:	f340 84af 	ble.w	800e75a <__ieee754_pow+0x9da>
 800ddfc:	1531      	asrs	r1, r6, #20
 800ddfe:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 800de02:	2914      	cmp	r1, #20
 800de04:	dd0f      	ble.n	800de26 <__ieee754_pow+0xa6>
 800de06:	f1c1 0134 	rsb	r1, r1, #52	; 0x34
 800de0a:	fa20 fc01 	lsr.w	ip, r0, r1
 800de0e:	fa0c f101 	lsl.w	r1, ip, r1
 800de12:	4281      	cmp	r1, r0
 800de14:	f040 84a1 	bne.w	800e75a <__ieee754_pow+0x9da>
 800de18:	f00c 0c01 	and.w	ip, ip, #1
 800de1c:	f1cc 0102 	rsb	r1, ip, #2
 800de20:	9100      	str	r1, [sp, #0]
 800de22:	b180      	cbz	r0, 800de46 <__ieee754_pow+0xc6>
 800de24:	e059      	b.n	800deda <__ieee754_pow+0x15a>
 800de26:	2800      	cmp	r0, #0
 800de28:	d155      	bne.n	800ded6 <__ieee754_pow+0x156>
 800de2a:	f1c1 0114 	rsb	r1, r1, #20
 800de2e:	fa46 fc01 	asr.w	ip, r6, r1
 800de32:	fa0c f101 	lsl.w	r1, ip, r1
 800de36:	42b1      	cmp	r1, r6
 800de38:	f040 848c 	bne.w	800e754 <__ieee754_pow+0x9d4>
 800de3c:	f00c 0c01 	and.w	ip, ip, #1
 800de40:	f1cc 0102 	rsb	r1, ip, #2
 800de44:	9100      	str	r1, [sp, #0]
 800de46:	4959      	ldr	r1, [pc, #356]	; (800dfac <__ieee754_pow+0x22c>)
 800de48:	428e      	cmp	r6, r1
 800de4a:	d12d      	bne.n	800dea8 <__ieee754_pow+0x128>
 800de4c:	2f00      	cmp	r7, #0
 800de4e:	da79      	bge.n	800df44 <__ieee754_pow+0x1c4>
 800de50:	4956      	ldr	r1, [pc, #344]	; (800dfac <__ieee754_pow+0x22c>)
 800de52:	2000      	movs	r0, #0
 800de54:	f7f2 fca2 	bl	800079c <__aeabi_ddiv>
 800de58:	e016      	b.n	800de88 <__ieee754_pow+0x108>
 800de5a:	2100      	movs	r1, #0
 800de5c:	9100      	str	r1, [sp, #0]
 800de5e:	2800      	cmp	r0, #0
 800de60:	d13b      	bne.n	800deda <__ieee754_pow+0x15a>
 800de62:	494f      	ldr	r1, [pc, #316]	; (800dfa0 <__ieee754_pow+0x220>)
 800de64:	428e      	cmp	r6, r1
 800de66:	d1ee      	bne.n	800de46 <__ieee754_pow+0xc6>
 800de68:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 800de6c:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 800de70:	ea53 0308 	orrs.w	r3, r3, r8
 800de74:	f000 8466 	beq.w	800e744 <__ieee754_pow+0x9c4>
 800de78:	4b4d      	ldr	r3, [pc, #308]	; (800dfb0 <__ieee754_pow+0x230>)
 800de7a:	429c      	cmp	r4, r3
 800de7c:	dd0d      	ble.n	800de9a <__ieee754_pow+0x11a>
 800de7e:	2f00      	cmp	r7, #0
 800de80:	f280 8464 	bge.w	800e74c <__ieee754_pow+0x9cc>
 800de84:	2000      	movs	r0, #0
 800de86:	2100      	movs	r1, #0
 800de88:	ec41 0b10 	vmov	d0, r0, r1
 800de8c:	b00d      	add	sp, #52	; 0x34
 800de8e:	ecbd 8b06 	vpop	{d8-d10}
 800de92:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800de96:	2102      	movs	r1, #2
 800de98:	e7e0      	b.n	800de5c <__ieee754_pow+0xdc>
 800de9a:	2f00      	cmp	r7, #0
 800de9c:	daf2      	bge.n	800de84 <__ieee754_pow+0x104>
 800de9e:	e9dd 0302 	ldrd	r0, r3, [sp, #8]
 800dea2:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800dea6:	e7ef      	b.n	800de88 <__ieee754_pow+0x108>
 800dea8:	f1b7 4f80 	cmp.w	r7, #1073741824	; 0x40000000
 800deac:	d104      	bne.n	800deb8 <__ieee754_pow+0x138>
 800deae:	4610      	mov	r0, r2
 800deb0:	4619      	mov	r1, r3
 800deb2:	f7f2 fb49 	bl	8000548 <__aeabi_dmul>
 800deb6:	e7e7      	b.n	800de88 <__ieee754_pow+0x108>
 800deb8:	493e      	ldr	r1, [pc, #248]	; (800dfb4 <__ieee754_pow+0x234>)
 800deba:	428f      	cmp	r7, r1
 800debc:	d10d      	bne.n	800deda <__ieee754_pow+0x15a>
 800debe:	f1b9 0f00 	cmp.w	r9, #0
 800dec2:	db0a      	blt.n	800deda <__ieee754_pow+0x15a>
 800dec4:	ec43 2b10 	vmov	d0, r2, r3
 800dec8:	b00d      	add	sp, #52	; 0x34
 800deca:	ecbd 8b06 	vpop	{d8-d10}
 800dece:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ded2:	f000 be83 	b.w	800ebdc <__ieee754_sqrt>
 800ded6:	2100      	movs	r1, #0
 800ded8:	9100      	str	r1, [sp, #0]
 800deda:	ec43 2b10 	vmov	d0, r2, r3
 800dede:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800dee2:	f001 fbf7 	bl	800f6d4 <fabs>
 800dee6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800deea:	ec51 0b10 	vmov	r0, r1, d0
 800deee:	f1b8 0f00 	cmp.w	r8, #0
 800def2:	d12a      	bne.n	800df4a <__ieee754_pow+0x1ca>
 800def4:	b12c      	cbz	r4, 800df02 <__ieee754_pow+0x182>
 800def6:	f8df c0b4 	ldr.w	ip, [pc, #180]	; 800dfac <__ieee754_pow+0x22c>
 800defa:	f029 4e40 	bic.w	lr, r9, #3221225472	; 0xc0000000
 800defe:	45e6      	cmp	lr, ip
 800df00:	d123      	bne.n	800df4a <__ieee754_pow+0x1ca>
 800df02:	2f00      	cmp	r7, #0
 800df04:	da05      	bge.n	800df12 <__ieee754_pow+0x192>
 800df06:	4602      	mov	r2, r0
 800df08:	460b      	mov	r3, r1
 800df0a:	2000      	movs	r0, #0
 800df0c:	4927      	ldr	r1, [pc, #156]	; (800dfac <__ieee754_pow+0x22c>)
 800df0e:	f7f2 fc45 	bl	800079c <__aeabi_ddiv>
 800df12:	f1b9 0f00 	cmp.w	r9, #0
 800df16:	dab7      	bge.n	800de88 <__ieee754_pow+0x108>
 800df18:	9b00      	ldr	r3, [sp, #0]
 800df1a:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 800df1e:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800df22:	4323      	orrs	r3, r4
 800df24:	d108      	bne.n	800df38 <__ieee754_pow+0x1b8>
 800df26:	4602      	mov	r2, r0
 800df28:	460b      	mov	r3, r1
 800df2a:	4610      	mov	r0, r2
 800df2c:	4619      	mov	r1, r3
 800df2e:	f7f2 f953 	bl	80001d8 <__aeabi_dsub>
 800df32:	4602      	mov	r2, r0
 800df34:	460b      	mov	r3, r1
 800df36:	e78d      	b.n	800de54 <__ieee754_pow+0xd4>
 800df38:	9b00      	ldr	r3, [sp, #0]
 800df3a:	2b01      	cmp	r3, #1
 800df3c:	d1a4      	bne.n	800de88 <__ieee754_pow+0x108>
 800df3e:	4602      	mov	r2, r0
 800df40:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800df44:	4610      	mov	r0, r2
 800df46:	4619      	mov	r1, r3
 800df48:	e79e      	b.n	800de88 <__ieee754_pow+0x108>
 800df4a:	ea4f 7cd9 	mov.w	ip, r9, lsr #31
 800df4e:	f10c 35ff 	add.w	r5, ip, #4294967295
 800df52:	950a      	str	r5, [sp, #40]	; 0x28
 800df54:	9d00      	ldr	r5, [sp, #0]
 800df56:	46ac      	mov	ip, r5
 800df58:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 800df5a:	ea5c 0505 	orrs.w	r5, ip, r5
 800df5e:	d0e4      	beq.n	800df2a <__ieee754_pow+0x1aa>
 800df60:	4b15      	ldr	r3, [pc, #84]	; (800dfb8 <__ieee754_pow+0x238>)
 800df62:	429e      	cmp	r6, r3
 800df64:	f340 80fc 	ble.w	800e160 <__ieee754_pow+0x3e0>
 800df68:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 800df6c:	429e      	cmp	r6, r3
 800df6e:	4b10      	ldr	r3, [pc, #64]	; (800dfb0 <__ieee754_pow+0x230>)
 800df70:	dd07      	ble.n	800df82 <__ieee754_pow+0x202>
 800df72:	429c      	cmp	r4, r3
 800df74:	dc0a      	bgt.n	800df8c <__ieee754_pow+0x20c>
 800df76:	2f00      	cmp	r7, #0
 800df78:	da84      	bge.n	800de84 <__ieee754_pow+0x104>
 800df7a:	a307      	add	r3, pc, #28	; (adr r3, 800df98 <__ieee754_pow+0x218>)
 800df7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800df80:	e795      	b.n	800deae <__ieee754_pow+0x12e>
 800df82:	429c      	cmp	r4, r3
 800df84:	dbf7      	blt.n	800df76 <__ieee754_pow+0x1f6>
 800df86:	4b09      	ldr	r3, [pc, #36]	; (800dfac <__ieee754_pow+0x22c>)
 800df88:	429c      	cmp	r4, r3
 800df8a:	dd17      	ble.n	800dfbc <__ieee754_pow+0x23c>
 800df8c:	2f00      	cmp	r7, #0
 800df8e:	dcf4      	bgt.n	800df7a <__ieee754_pow+0x1fa>
 800df90:	e778      	b.n	800de84 <__ieee754_pow+0x104>
 800df92:	bf00      	nop
 800df94:	f3af 8000 	nop.w
 800df98:	8800759c 	.word	0x8800759c
 800df9c:	7e37e43c 	.word	0x7e37e43c
 800dfa0:	7ff00000 	.word	0x7ff00000
 800dfa4:	0800faf8 	.word	0x0800faf8
 800dfa8:	433fffff 	.word	0x433fffff
 800dfac:	3ff00000 	.word	0x3ff00000
 800dfb0:	3fefffff 	.word	0x3fefffff
 800dfb4:	3fe00000 	.word	0x3fe00000
 800dfb8:	41e00000 	.word	0x41e00000
 800dfbc:	4b64      	ldr	r3, [pc, #400]	; (800e150 <__ieee754_pow+0x3d0>)
 800dfbe:	2200      	movs	r2, #0
 800dfc0:	f7f2 f90a 	bl	80001d8 <__aeabi_dsub>
 800dfc4:	a356      	add	r3, pc, #344	; (adr r3, 800e120 <__ieee754_pow+0x3a0>)
 800dfc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dfca:	4604      	mov	r4, r0
 800dfcc:	460d      	mov	r5, r1
 800dfce:	f7f2 fabb 	bl	8000548 <__aeabi_dmul>
 800dfd2:	a355      	add	r3, pc, #340	; (adr r3, 800e128 <__ieee754_pow+0x3a8>)
 800dfd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dfd8:	4606      	mov	r6, r0
 800dfda:	460f      	mov	r7, r1
 800dfdc:	4620      	mov	r0, r4
 800dfde:	4629      	mov	r1, r5
 800dfe0:	f7f2 fab2 	bl	8000548 <__aeabi_dmul>
 800dfe4:	4b5b      	ldr	r3, [pc, #364]	; (800e154 <__ieee754_pow+0x3d4>)
 800dfe6:	4682      	mov	sl, r0
 800dfe8:	468b      	mov	fp, r1
 800dfea:	2200      	movs	r2, #0
 800dfec:	4620      	mov	r0, r4
 800dfee:	4629      	mov	r1, r5
 800dff0:	f7f2 faaa 	bl	8000548 <__aeabi_dmul>
 800dff4:	4602      	mov	r2, r0
 800dff6:	460b      	mov	r3, r1
 800dff8:	a14d      	add	r1, pc, #308	; (adr r1, 800e130 <__ieee754_pow+0x3b0>)
 800dffa:	e9d1 0100 	ldrd	r0, r1, [r1]
 800dffe:	f7f2 f8eb 	bl	80001d8 <__aeabi_dsub>
 800e002:	4622      	mov	r2, r4
 800e004:	462b      	mov	r3, r5
 800e006:	f7f2 fa9f 	bl	8000548 <__aeabi_dmul>
 800e00a:	4602      	mov	r2, r0
 800e00c:	460b      	mov	r3, r1
 800e00e:	2000      	movs	r0, #0
 800e010:	4951      	ldr	r1, [pc, #324]	; (800e158 <__ieee754_pow+0x3d8>)
 800e012:	f7f2 f8e1 	bl	80001d8 <__aeabi_dsub>
 800e016:	4622      	mov	r2, r4
 800e018:	4680      	mov	r8, r0
 800e01a:	4689      	mov	r9, r1
 800e01c:	462b      	mov	r3, r5
 800e01e:	4620      	mov	r0, r4
 800e020:	4629      	mov	r1, r5
 800e022:	f7f2 fa91 	bl	8000548 <__aeabi_dmul>
 800e026:	4602      	mov	r2, r0
 800e028:	460b      	mov	r3, r1
 800e02a:	4640      	mov	r0, r8
 800e02c:	4649      	mov	r1, r9
 800e02e:	f7f2 fa8b 	bl	8000548 <__aeabi_dmul>
 800e032:	a341      	add	r3, pc, #260	; (adr r3, 800e138 <__ieee754_pow+0x3b8>)
 800e034:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e038:	f7f2 fa86 	bl	8000548 <__aeabi_dmul>
 800e03c:	4602      	mov	r2, r0
 800e03e:	460b      	mov	r3, r1
 800e040:	4650      	mov	r0, sl
 800e042:	4659      	mov	r1, fp
 800e044:	f7f2 f8c8 	bl	80001d8 <__aeabi_dsub>
 800e048:	4602      	mov	r2, r0
 800e04a:	460b      	mov	r3, r1
 800e04c:	4680      	mov	r8, r0
 800e04e:	4689      	mov	r9, r1
 800e050:	4630      	mov	r0, r6
 800e052:	4639      	mov	r1, r7
 800e054:	f7f2 f8c2 	bl	80001dc <__adddf3>
 800e058:	2400      	movs	r4, #0
 800e05a:	4632      	mov	r2, r6
 800e05c:	463b      	mov	r3, r7
 800e05e:	4620      	mov	r0, r4
 800e060:	460d      	mov	r5, r1
 800e062:	f7f2 f8b9 	bl	80001d8 <__aeabi_dsub>
 800e066:	4602      	mov	r2, r0
 800e068:	460b      	mov	r3, r1
 800e06a:	4640      	mov	r0, r8
 800e06c:	4649      	mov	r1, r9
 800e06e:	f7f2 f8b3 	bl	80001d8 <__aeabi_dsub>
 800e072:	9b00      	ldr	r3, [sp, #0]
 800e074:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800e076:	3b01      	subs	r3, #1
 800e078:	4313      	orrs	r3, r2
 800e07a:	4682      	mov	sl, r0
 800e07c:	468b      	mov	fp, r1
 800e07e:	f040 81f1 	bne.w	800e464 <__ieee754_pow+0x6e4>
 800e082:	ed9f 7b2f 	vldr	d7, [pc, #188]	; 800e140 <__ieee754_pow+0x3c0>
 800e086:	eeb0 8a47 	vmov.f32	s16, s14
 800e08a:	eef0 8a67 	vmov.f32	s17, s15
 800e08e:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800e092:	2600      	movs	r6, #0
 800e094:	4632      	mov	r2, r6
 800e096:	463b      	mov	r3, r7
 800e098:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e09c:	f7f2 f89c 	bl	80001d8 <__aeabi_dsub>
 800e0a0:	4622      	mov	r2, r4
 800e0a2:	462b      	mov	r3, r5
 800e0a4:	f7f2 fa50 	bl	8000548 <__aeabi_dmul>
 800e0a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800e0ac:	4680      	mov	r8, r0
 800e0ae:	4689      	mov	r9, r1
 800e0b0:	4650      	mov	r0, sl
 800e0b2:	4659      	mov	r1, fp
 800e0b4:	f7f2 fa48 	bl	8000548 <__aeabi_dmul>
 800e0b8:	4602      	mov	r2, r0
 800e0ba:	460b      	mov	r3, r1
 800e0bc:	4640      	mov	r0, r8
 800e0be:	4649      	mov	r1, r9
 800e0c0:	f7f2 f88c 	bl	80001dc <__adddf3>
 800e0c4:	4632      	mov	r2, r6
 800e0c6:	463b      	mov	r3, r7
 800e0c8:	4680      	mov	r8, r0
 800e0ca:	4689      	mov	r9, r1
 800e0cc:	4620      	mov	r0, r4
 800e0ce:	4629      	mov	r1, r5
 800e0d0:	f7f2 fa3a 	bl	8000548 <__aeabi_dmul>
 800e0d4:	460b      	mov	r3, r1
 800e0d6:	4604      	mov	r4, r0
 800e0d8:	460d      	mov	r5, r1
 800e0da:	4602      	mov	r2, r0
 800e0dc:	4649      	mov	r1, r9
 800e0de:	4640      	mov	r0, r8
 800e0e0:	f7f2 f87c 	bl	80001dc <__adddf3>
 800e0e4:	4b1d      	ldr	r3, [pc, #116]	; (800e15c <__ieee754_pow+0x3dc>)
 800e0e6:	4299      	cmp	r1, r3
 800e0e8:	ec45 4b19 	vmov	d9, r4, r5
 800e0ec:	4606      	mov	r6, r0
 800e0ee:	460f      	mov	r7, r1
 800e0f0:	468b      	mov	fp, r1
 800e0f2:	f340 82fe 	ble.w	800e6f2 <__ieee754_pow+0x972>
 800e0f6:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 800e0fa:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 800e0fe:	4303      	orrs	r3, r0
 800e100:	f000 81f0 	beq.w	800e4e4 <__ieee754_pow+0x764>
 800e104:	a310      	add	r3, pc, #64	; (adr r3, 800e148 <__ieee754_pow+0x3c8>)
 800e106:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e10a:	ec51 0b18 	vmov	r0, r1, d8
 800e10e:	f7f2 fa1b 	bl	8000548 <__aeabi_dmul>
 800e112:	a30d      	add	r3, pc, #52	; (adr r3, 800e148 <__ieee754_pow+0x3c8>)
 800e114:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e118:	e6cb      	b.n	800deb2 <__ieee754_pow+0x132>
 800e11a:	bf00      	nop
 800e11c:	f3af 8000 	nop.w
 800e120:	60000000 	.word	0x60000000
 800e124:	3ff71547 	.word	0x3ff71547
 800e128:	f85ddf44 	.word	0xf85ddf44
 800e12c:	3e54ae0b 	.word	0x3e54ae0b
 800e130:	55555555 	.word	0x55555555
 800e134:	3fd55555 	.word	0x3fd55555
 800e138:	652b82fe 	.word	0x652b82fe
 800e13c:	3ff71547 	.word	0x3ff71547
 800e140:	00000000 	.word	0x00000000
 800e144:	bff00000 	.word	0xbff00000
 800e148:	8800759c 	.word	0x8800759c
 800e14c:	7e37e43c 	.word	0x7e37e43c
 800e150:	3ff00000 	.word	0x3ff00000
 800e154:	3fd00000 	.word	0x3fd00000
 800e158:	3fe00000 	.word	0x3fe00000
 800e15c:	408fffff 	.word	0x408fffff
 800e160:	4bd7      	ldr	r3, [pc, #860]	; (800e4c0 <__ieee754_pow+0x740>)
 800e162:	ea03 0309 	and.w	r3, r3, r9
 800e166:	2200      	movs	r2, #0
 800e168:	b92b      	cbnz	r3, 800e176 <__ieee754_pow+0x3f6>
 800e16a:	4bd6      	ldr	r3, [pc, #856]	; (800e4c4 <__ieee754_pow+0x744>)
 800e16c:	f7f2 f9ec 	bl	8000548 <__aeabi_dmul>
 800e170:	f06f 0234 	mvn.w	r2, #52	; 0x34
 800e174:	460c      	mov	r4, r1
 800e176:	1523      	asrs	r3, r4, #20
 800e178:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800e17c:	4413      	add	r3, r2
 800e17e:	9309      	str	r3, [sp, #36]	; 0x24
 800e180:	4bd1      	ldr	r3, [pc, #836]	; (800e4c8 <__ieee754_pow+0x748>)
 800e182:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800e186:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 800e18a:	429c      	cmp	r4, r3
 800e18c:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800e190:	dd08      	ble.n	800e1a4 <__ieee754_pow+0x424>
 800e192:	4bce      	ldr	r3, [pc, #824]	; (800e4cc <__ieee754_pow+0x74c>)
 800e194:	429c      	cmp	r4, r3
 800e196:	f340 8163 	ble.w	800e460 <__ieee754_pow+0x6e0>
 800e19a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e19c:	3301      	adds	r3, #1
 800e19e:	9309      	str	r3, [sp, #36]	; 0x24
 800e1a0:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 800e1a4:	2400      	movs	r4, #0
 800e1a6:	00e3      	lsls	r3, r4, #3
 800e1a8:	930b      	str	r3, [sp, #44]	; 0x2c
 800e1aa:	4bc9      	ldr	r3, [pc, #804]	; (800e4d0 <__ieee754_pow+0x750>)
 800e1ac:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800e1b0:	ed93 7b00 	vldr	d7, [r3]
 800e1b4:	4629      	mov	r1, r5
 800e1b6:	ec53 2b17 	vmov	r2, r3, d7
 800e1ba:	eeb0 8a47 	vmov.f32	s16, s14
 800e1be:	eef0 8a67 	vmov.f32	s17, s15
 800e1c2:	4682      	mov	sl, r0
 800e1c4:	f7f2 f808 	bl	80001d8 <__aeabi_dsub>
 800e1c8:	4652      	mov	r2, sl
 800e1ca:	4606      	mov	r6, r0
 800e1cc:	460f      	mov	r7, r1
 800e1ce:	462b      	mov	r3, r5
 800e1d0:	ec51 0b18 	vmov	r0, r1, d8
 800e1d4:	f7f2 f802 	bl	80001dc <__adddf3>
 800e1d8:	4602      	mov	r2, r0
 800e1da:	460b      	mov	r3, r1
 800e1dc:	2000      	movs	r0, #0
 800e1de:	49bd      	ldr	r1, [pc, #756]	; (800e4d4 <__ieee754_pow+0x754>)
 800e1e0:	f7f2 fadc 	bl	800079c <__aeabi_ddiv>
 800e1e4:	ec41 0b19 	vmov	d9, r0, r1
 800e1e8:	4602      	mov	r2, r0
 800e1ea:	460b      	mov	r3, r1
 800e1ec:	4630      	mov	r0, r6
 800e1ee:	4639      	mov	r1, r7
 800e1f0:	f7f2 f9aa 	bl	8000548 <__aeabi_dmul>
 800e1f4:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800e1f8:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800e1fc:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800e200:	2300      	movs	r3, #0
 800e202:	9304      	str	r3, [sp, #16]
 800e204:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 800e208:	46ab      	mov	fp, r5
 800e20a:	106d      	asrs	r5, r5, #1
 800e20c:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 800e210:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 800e214:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 800e218:	2200      	movs	r2, #0
 800e21a:	4640      	mov	r0, r8
 800e21c:	4649      	mov	r1, r9
 800e21e:	4614      	mov	r4, r2
 800e220:	461d      	mov	r5, r3
 800e222:	f7f2 f991 	bl	8000548 <__aeabi_dmul>
 800e226:	4602      	mov	r2, r0
 800e228:	460b      	mov	r3, r1
 800e22a:	4630      	mov	r0, r6
 800e22c:	4639      	mov	r1, r7
 800e22e:	f7f1 ffd3 	bl	80001d8 <__aeabi_dsub>
 800e232:	ec53 2b18 	vmov	r2, r3, d8
 800e236:	4606      	mov	r6, r0
 800e238:	460f      	mov	r7, r1
 800e23a:	4620      	mov	r0, r4
 800e23c:	4629      	mov	r1, r5
 800e23e:	f7f1 ffcb 	bl	80001d8 <__aeabi_dsub>
 800e242:	4602      	mov	r2, r0
 800e244:	460b      	mov	r3, r1
 800e246:	4650      	mov	r0, sl
 800e248:	4659      	mov	r1, fp
 800e24a:	f7f1 ffc5 	bl	80001d8 <__aeabi_dsub>
 800e24e:	4642      	mov	r2, r8
 800e250:	464b      	mov	r3, r9
 800e252:	f7f2 f979 	bl	8000548 <__aeabi_dmul>
 800e256:	4602      	mov	r2, r0
 800e258:	460b      	mov	r3, r1
 800e25a:	4630      	mov	r0, r6
 800e25c:	4639      	mov	r1, r7
 800e25e:	f7f1 ffbb 	bl	80001d8 <__aeabi_dsub>
 800e262:	ec53 2b19 	vmov	r2, r3, d9
 800e266:	f7f2 f96f 	bl	8000548 <__aeabi_dmul>
 800e26a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800e26e:	ec41 0b18 	vmov	d8, r0, r1
 800e272:	4610      	mov	r0, r2
 800e274:	4619      	mov	r1, r3
 800e276:	f7f2 f967 	bl	8000548 <__aeabi_dmul>
 800e27a:	a37d      	add	r3, pc, #500	; (adr r3, 800e470 <__ieee754_pow+0x6f0>)
 800e27c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e280:	4604      	mov	r4, r0
 800e282:	460d      	mov	r5, r1
 800e284:	f7f2 f960 	bl	8000548 <__aeabi_dmul>
 800e288:	a37b      	add	r3, pc, #492	; (adr r3, 800e478 <__ieee754_pow+0x6f8>)
 800e28a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e28e:	f7f1 ffa5 	bl	80001dc <__adddf3>
 800e292:	4622      	mov	r2, r4
 800e294:	462b      	mov	r3, r5
 800e296:	f7f2 f957 	bl	8000548 <__aeabi_dmul>
 800e29a:	a379      	add	r3, pc, #484	; (adr r3, 800e480 <__ieee754_pow+0x700>)
 800e29c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e2a0:	f7f1 ff9c 	bl	80001dc <__adddf3>
 800e2a4:	4622      	mov	r2, r4
 800e2a6:	462b      	mov	r3, r5
 800e2a8:	f7f2 f94e 	bl	8000548 <__aeabi_dmul>
 800e2ac:	a376      	add	r3, pc, #472	; (adr r3, 800e488 <__ieee754_pow+0x708>)
 800e2ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e2b2:	f7f1 ff93 	bl	80001dc <__adddf3>
 800e2b6:	4622      	mov	r2, r4
 800e2b8:	462b      	mov	r3, r5
 800e2ba:	f7f2 f945 	bl	8000548 <__aeabi_dmul>
 800e2be:	a374      	add	r3, pc, #464	; (adr r3, 800e490 <__ieee754_pow+0x710>)
 800e2c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e2c4:	f7f1 ff8a 	bl	80001dc <__adddf3>
 800e2c8:	4622      	mov	r2, r4
 800e2ca:	462b      	mov	r3, r5
 800e2cc:	f7f2 f93c 	bl	8000548 <__aeabi_dmul>
 800e2d0:	a371      	add	r3, pc, #452	; (adr r3, 800e498 <__ieee754_pow+0x718>)
 800e2d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e2d6:	f7f1 ff81 	bl	80001dc <__adddf3>
 800e2da:	4622      	mov	r2, r4
 800e2dc:	4606      	mov	r6, r0
 800e2de:	460f      	mov	r7, r1
 800e2e0:	462b      	mov	r3, r5
 800e2e2:	4620      	mov	r0, r4
 800e2e4:	4629      	mov	r1, r5
 800e2e6:	f7f2 f92f 	bl	8000548 <__aeabi_dmul>
 800e2ea:	4602      	mov	r2, r0
 800e2ec:	460b      	mov	r3, r1
 800e2ee:	4630      	mov	r0, r6
 800e2f0:	4639      	mov	r1, r7
 800e2f2:	f7f2 f929 	bl	8000548 <__aeabi_dmul>
 800e2f6:	4642      	mov	r2, r8
 800e2f8:	4604      	mov	r4, r0
 800e2fa:	460d      	mov	r5, r1
 800e2fc:	464b      	mov	r3, r9
 800e2fe:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800e302:	f7f1 ff6b 	bl	80001dc <__adddf3>
 800e306:	ec53 2b18 	vmov	r2, r3, d8
 800e30a:	f7f2 f91d 	bl	8000548 <__aeabi_dmul>
 800e30e:	4622      	mov	r2, r4
 800e310:	462b      	mov	r3, r5
 800e312:	f7f1 ff63 	bl	80001dc <__adddf3>
 800e316:	4642      	mov	r2, r8
 800e318:	4682      	mov	sl, r0
 800e31a:	468b      	mov	fp, r1
 800e31c:	464b      	mov	r3, r9
 800e31e:	4640      	mov	r0, r8
 800e320:	4649      	mov	r1, r9
 800e322:	f7f2 f911 	bl	8000548 <__aeabi_dmul>
 800e326:	4b6c      	ldr	r3, [pc, #432]	; (800e4d8 <__ieee754_pow+0x758>)
 800e328:	2200      	movs	r2, #0
 800e32a:	4606      	mov	r6, r0
 800e32c:	460f      	mov	r7, r1
 800e32e:	f7f1 ff55 	bl	80001dc <__adddf3>
 800e332:	4652      	mov	r2, sl
 800e334:	465b      	mov	r3, fp
 800e336:	f7f1 ff51 	bl	80001dc <__adddf3>
 800e33a:	9c04      	ldr	r4, [sp, #16]
 800e33c:	460d      	mov	r5, r1
 800e33e:	4622      	mov	r2, r4
 800e340:	460b      	mov	r3, r1
 800e342:	4640      	mov	r0, r8
 800e344:	4649      	mov	r1, r9
 800e346:	f7f2 f8ff 	bl	8000548 <__aeabi_dmul>
 800e34a:	4b63      	ldr	r3, [pc, #396]	; (800e4d8 <__ieee754_pow+0x758>)
 800e34c:	4680      	mov	r8, r0
 800e34e:	4689      	mov	r9, r1
 800e350:	2200      	movs	r2, #0
 800e352:	4620      	mov	r0, r4
 800e354:	4629      	mov	r1, r5
 800e356:	f7f1 ff3f 	bl	80001d8 <__aeabi_dsub>
 800e35a:	4632      	mov	r2, r6
 800e35c:	463b      	mov	r3, r7
 800e35e:	f7f1 ff3b 	bl	80001d8 <__aeabi_dsub>
 800e362:	4602      	mov	r2, r0
 800e364:	460b      	mov	r3, r1
 800e366:	4650      	mov	r0, sl
 800e368:	4659      	mov	r1, fp
 800e36a:	f7f1 ff35 	bl	80001d8 <__aeabi_dsub>
 800e36e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800e372:	f7f2 f8e9 	bl	8000548 <__aeabi_dmul>
 800e376:	4622      	mov	r2, r4
 800e378:	4606      	mov	r6, r0
 800e37a:	460f      	mov	r7, r1
 800e37c:	462b      	mov	r3, r5
 800e37e:	ec51 0b18 	vmov	r0, r1, d8
 800e382:	f7f2 f8e1 	bl	8000548 <__aeabi_dmul>
 800e386:	4602      	mov	r2, r0
 800e388:	460b      	mov	r3, r1
 800e38a:	4630      	mov	r0, r6
 800e38c:	4639      	mov	r1, r7
 800e38e:	f7f1 ff25 	bl	80001dc <__adddf3>
 800e392:	4606      	mov	r6, r0
 800e394:	460f      	mov	r7, r1
 800e396:	4602      	mov	r2, r0
 800e398:	460b      	mov	r3, r1
 800e39a:	4640      	mov	r0, r8
 800e39c:	4649      	mov	r1, r9
 800e39e:	f7f1 ff1d 	bl	80001dc <__adddf3>
 800e3a2:	9c04      	ldr	r4, [sp, #16]
 800e3a4:	a33e      	add	r3, pc, #248	; (adr r3, 800e4a0 <__ieee754_pow+0x720>)
 800e3a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e3aa:	4620      	mov	r0, r4
 800e3ac:	460d      	mov	r5, r1
 800e3ae:	f7f2 f8cb 	bl	8000548 <__aeabi_dmul>
 800e3b2:	4642      	mov	r2, r8
 800e3b4:	ec41 0b18 	vmov	d8, r0, r1
 800e3b8:	464b      	mov	r3, r9
 800e3ba:	4620      	mov	r0, r4
 800e3bc:	4629      	mov	r1, r5
 800e3be:	f7f1 ff0b 	bl	80001d8 <__aeabi_dsub>
 800e3c2:	4602      	mov	r2, r0
 800e3c4:	460b      	mov	r3, r1
 800e3c6:	4630      	mov	r0, r6
 800e3c8:	4639      	mov	r1, r7
 800e3ca:	f7f1 ff05 	bl	80001d8 <__aeabi_dsub>
 800e3ce:	a336      	add	r3, pc, #216	; (adr r3, 800e4a8 <__ieee754_pow+0x728>)
 800e3d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e3d4:	f7f2 f8b8 	bl	8000548 <__aeabi_dmul>
 800e3d8:	a335      	add	r3, pc, #212	; (adr r3, 800e4b0 <__ieee754_pow+0x730>)
 800e3da:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e3de:	4606      	mov	r6, r0
 800e3e0:	460f      	mov	r7, r1
 800e3e2:	4620      	mov	r0, r4
 800e3e4:	4629      	mov	r1, r5
 800e3e6:	f7f2 f8af 	bl	8000548 <__aeabi_dmul>
 800e3ea:	4602      	mov	r2, r0
 800e3ec:	460b      	mov	r3, r1
 800e3ee:	4630      	mov	r0, r6
 800e3f0:	4639      	mov	r1, r7
 800e3f2:	f7f1 fef3 	bl	80001dc <__adddf3>
 800e3f6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800e3f8:	4b38      	ldr	r3, [pc, #224]	; (800e4dc <__ieee754_pow+0x75c>)
 800e3fa:	4413      	add	r3, r2
 800e3fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e400:	f7f1 feec 	bl	80001dc <__adddf3>
 800e404:	4682      	mov	sl, r0
 800e406:	9809      	ldr	r0, [sp, #36]	; 0x24
 800e408:	468b      	mov	fp, r1
 800e40a:	f7f2 f833 	bl	8000474 <__aeabi_i2d>
 800e40e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800e410:	4b33      	ldr	r3, [pc, #204]	; (800e4e0 <__ieee754_pow+0x760>)
 800e412:	4413      	add	r3, r2
 800e414:	e9d3 8900 	ldrd	r8, r9, [r3]
 800e418:	4606      	mov	r6, r0
 800e41a:	460f      	mov	r7, r1
 800e41c:	4652      	mov	r2, sl
 800e41e:	465b      	mov	r3, fp
 800e420:	ec51 0b18 	vmov	r0, r1, d8
 800e424:	f7f1 feda 	bl	80001dc <__adddf3>
 800e428:	4642      	mov	r2, r8
 800e42a:	464b      	mov	r3, r9
 800e42c:	f7f1 fed6 	bl	80001dc <__adddf3>
 800e430:	4632      	mov	r2, r6
 800e432:	463b      	mov	r3, r7
 800e434:	f7f1 fed2 	bl	80001dc <__adddf3>
 800e438:	9c04      	ldr	r4, [sp, #16]
 800e43a:	4632      	mov	r2, r6
 800e43c:	463b      	mov	r3, r7
 800e43e:	4620      	mov	r0, r4
 800e440:	460d      	mov	r5, r1
 800e442:	f7f1 fec9 	bl	80001d8 <__aeabi_dsub>
 800e446:	4642      	mov	r2, r8
 800e448:	464b      	mov	r3, r9
 800e44a:	f7f1 fec5 	bl	80001d8 <__aeabi_dsub>
 800e44e:	ec53 2b18 	vmov	r2, r3, d8
 800e452:	f7f1 fec1 	bl	80001d8 <__aeabi_dsub>
 800e456:	4602      	mov	r2, r0
 800e458:	460b      	mov	r3, r1
 800e45a:	4650      	mov	r0, sl
 800e45c:	4659      	mov	r1, fp
 800e45e:	e606      	b.n	800e06e <__ieee754_pow+0x2ee>
 800e460:	2401      	movs	r4, #1
 800e462:	e6a0      	b.n	800e1a6 <__ieee754_pow+0x426>
 800e464:	ed9f 7b14 	vldr	d7, [pc, #80]	; 800e4b8 <__ieee754_pow+0x738>
 800e468:	e60d      	b.n	800e086 <__ieee754_pow+0x306>
 800e46a:	bf00      	nop
 800e46c:	f3af 8000 	nop.w
 800e470:	4a454eef 	.word	0x4a454eef
 800e474:	3fca7e28 	.word	0x3fca7e28
 800e478:	93c9db65 	.word	0x93c9db65
 800e47c:	3fcd864a 	.word	0x3fcd864a
 800e480:	a91d4101 	.word	0xa91d4101
 800e484:	3fd17460 	.word	0x3fd17460
 800e488:	518f264d 	.word	0x518f264d
 800e48c:	3fd55555 	.word	0x3fd55555
 800e490:	db6fabff 	.word	0xdb6fabff
 800e494:	3fdb6db6 	.word	0x3fdb6db6
 800e498:	33333303 	.word	0x33333303
 800e49c:	3fe33333 	.word	0x3fe33333
 800e4a0:	e0000000 	.word	0xe0000000
 800e4a4:	3feec709 	.word	0x3feec709
 800e4a8:	dc3a03fd 	.word	0xdc3a03fd
 800e4ac:	3feec709 	.word	0x3feec709
 800e4b0:	145b01f5 	.word	0x145b01f5
 800e4b4:	be3e2fe0 	.word	0xbe3e2fe0
 800e4b8:	00000000 	.word	0x00000000
 800e4bc:	3ff00000 	.word	0x3ff00000
 800e4c0:	7ff00000 	.word	0x7ff00000
 800e4c4:	43400000 	.word	0x43400000
 800e4c8:	0003988e 	.word	0x0003988e
 800e4cc:	000bb679 	.word	0x000bb679
 800e4d0:	0800fb00 	.word	0x0800fb00
 800e4d4:	3ff00000 	.word	0x3ff00000
 800e4d8:	40080000 	.word	0x40080000
 800e4dc:	0800fb20 	.word	0x0800fb20
 800e4e0:	0800fb10 	.word	0x0800fb10
 800e4e4:	a3b5      	add	r3, pc, #724	; (adr r3, 800e7bc <__ieee754_pow+0xa3c>)
 800e4e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e4ea:	4640      	mov	r0, r8
 800e4ec:	4649      	mov	r1, r9
 800e4ee:	f7f1 fe75 	bl	80001dc <__adddf3>
 800e4f2:	4622      	mov	r2, r4
 800e4f4:	ec41 0b1a 	vmov	d10, r0, r1
 800e4f8:	462b      	mov	r3, r5
 800e4fa:	4630      	mov	r0, r6
 800e4fc:	4639      	mov	r1, r7
 800e4fe:	f7f1 fe6b 	bl	80001d8 <__aeabi_dsub>
 800e502:	4602      	mov	r2, r0
 800e504:	460b      	mov	r3, r1
 800e506:	ec51 0b1a 	vmov	r0, r1, d10
 800e50a:	f7f2 faad 	bl	8000a68 <__aeabi_dcmpgt>
 800e50e:	2800      	cmp	r0, #0
 800e510:	f47f adf8 	bne.w	800e104 <__ieee754_pow+0x384>
 800e514:	4aa4      	ldr	r2, [pc, #656]	; (800e7a8 <__ieee754_pow+0xa28>)
 800e516:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800e51a:	4293      	cmp	r3, r2
 800e51c:	f340 810b 	ble.w	800e736 <__ieee754_pow+0x9b6>
 800e520:	151b      	asrs	r3, r3, #20
 800e522:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 800e526:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 800e52a:	fa4a f303 	asr.w	r3, sl, r3
 800e52e:	445b      	add	r3, fp
 800e530:	f3c3 520a 	ubfx	r2, r3, #20, #11
 800e534:	4e9d      	ldr	r6, [pc, #628]	; (800e7ac <__ieee754_pow+0xa2c>)
 800e536:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 800e53a:	4116      	asrs	r6, r2
 800e53c:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 800e540:	2000      	movs	r0, #0
 800e542:	ea23 0106 	bic.w	r1, r3, r6
 800e546:	f1c2 0214 	rsb	r2, r2, #20
 800e54a:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 800e54e:	fa4a fa02 	asr.w	sl, sl, r2
 800e552:	f1bb 0f00 	cmp.w	fp, #0
 800e556:	4602      	mov	r2, r0
 800e558:	460b      	mov	r3, r1
 800e55a:	4620      	mov	r0, r4
 800e55c:	4629      	mov	r1, r5
 800e55e:	bfb8      	it	lt
 800e560:	f1ca 0a00 	rsblt	sl, sl, #0
 800e564:	f7f1 fe38 	bl	80001d8 <__aeabi_dsub>
 800e568:	ec41 0b19 	vmov	d9, r0, r1
 800e56c:	4642      	mov	r2, r8
 800e56e:	464b      	mov	r3, r9
 800e570:	ec51 0b19 	vmov	r0, r1, d9
 800e574:	f7f1 fe32 	bl	80001dc <__adddf3>
 800e578:	2400      	movs	r4, #0
 800e57a:	a379      	add	r3, pc, #484	; (adr r3, 800e760 <__ieee754_pow+0x9e0>)
 800e57c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e580:	4620      	mov	r0, r4
 800e582:	460d      	mov	r5, r1
 800e584:	f7f1 ffe0 	bl	8000548 <__aeabi_dmul>
 800e588:	ec53 2b19 	vmov	r2, r3, d9
 800e58c:	4606      	mov	r6, r0
 800e58e:	460f      	mov	r7, r1
 800e590:	4620      	mov	r0, r4
 800e592:	4629      	mov	r1, r5
 800e594:	f7f1 fe20 	bl	80001d8 <__aeabi_dsub>
 800e598:	4602      	mov	r2, r0
 800e59a:	460b      	mov	r3, r1
 800e59c:	4640      	mov	r0, r8
 800e59e:	4649      	mov	r1, r9
 800e5a0:	f7f1 fe1a 	bl	80001d8 <__aeabi_dsub>
 800e5a4:	a370      	add	r3, pc, #448	; (adr r3, 800e768 <__ieee754_pow+0x9e8>)
 800e5a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e5aa:	f7f1 ffcd 	bl	8000548 <__aeabi_dmul>
 800e5ae:	a370      	add	r3, pc, #448	; (adr r3, 800e770 <__ieee754_pow+0x9f0>)
 800e5b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e5b4:	4680      	mov	r8, r0
 800e5b6:	4689      	mov	r9, r1
 800e5b8:	4620      	mov	r0, r4
 800e5ba:	4629      	mov	r1, r5
 800e5bc:	f7f1 ffc4 	bl	8000548 <__aeabi_dmul>
 800e5c0:	4602      	mov	r2, r0
 800e5c2:	460b      	mov	r3, r1
 800e5c4:	4640      	mov	r0, r8
 800e5c6:	4649      	mov	r1, r9
 800e5c8:	f7f1 fe08 	bl	80001dc <__adddf3>
 800e5cc:	4604      	mov	r4, r0
 800e5ce:	460d      	mov	r5, r1
 800e5d0:	4602      	mov	r2, r0
 800e5d2:	460b      	mov	r3, r1
 800e5d4:	4630      	mov	r0, r6
 800e5d6:	4639      	mov	r1, r7
 800e5d8:	f7f1 fe00 	bl	80001dc <__adddf3>
 800e5dc:	4632      	mov	r2, r6
 800e5de:	463b      	mov	r3, r7
 800e5e0:	4680      	mov	r8, r0
 800e5e2:	4689      	mov	r9, r1
 800e5e4:	f7f1 fdf8 	bl	80001d8 <__aeabi_dsub>
 800e5e8:	4602      	mov	r2, r0
 800e5ea:	460b      	mov	r3, r1
 800e5ec:	4620      	mov	r0, r4
 800e5ee:	4629      	mov	r1, r5
 800e5f0:	f7f1 fdf2 	bl	80001d8 <__aeabi_dsub>
 800e5f4:	4642      	mov	r2, r8
 800e5f6:	4606      	mov	r6, r0
 800e5f8:	460f      	mov	r7, r1
 800e5fa:	464b      	mov	r3, r9
 800e5fc:	4640      	mov	r0, r8
 800e5fe:	4649      	mov	r1, r9
 800e600:	f7f1 ffa2 	bl	8000548 <__aeabi_dmul>
 800e604:	a35c      	add	r3, pc, #368	; (adr r3, 800e778 <__ieee754_pow+0x9f8>)
 800e606:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e60a:	4604      	mov	r4, r0
 800e60c:	460d      	mov	r5, r1
 800e60e:	f7f1 ff9b 	bl	8000548 <__aeabi_dmul>
 800e612:	a35b      	add	r3, pc, #364	; (adr r3, 800e780 <__ieee754_pow+0xa00>)
 800e614:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e618:	f7f1 fdde 	bl	80001d8 <__aeabi_dsub>
 800e61c:	4622      	mov	r2, r4
 800e61e:	462b      	mov	r3, r5
 800e620:	f7f1 ff92 	bl	8000548 <__aeabi_dmul>
 800e624:	a358      	add	r3, pc, #352	; (adr r3, 800e788 <__ieee754_pow+0xa08>)
 800e626:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e62a:	f7f1 fdd7 	bl	80001dc <__adddf3>
 800e62e:	4622      	mov	r2, r4
 800e630:	462b      	mov	r3, r5
 800e632:	f7f1 ff89 	bl	8000548 <__aeabi_dmul>
 800e636:	a356      	add	r3, pc, #344	; (adr r3, 800e790 <__ieee754_pow+0xa10>)
 800e638:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e63c:	f7f1 fdcc 	bl	80001d8 <__aeabi_dsub>
 800e640:	4622      	mov	r2, r4
 800e642:	462b      	mov	r3, r5
 800e644:	f7f1 ff80 	bl	8000548 <__aeabi_dmul>
 800e648:	a353      	add	r3, pc, #332	; (adr r3, 800e798 <__ieee754_pow+0xa18>)
 800e64a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e64e:	f7f1 fdc5 	bl	80001dc <__adddf3>
 800e652:	4622      	mov	r2, r4
 800e654:	462b      	mov	r3, r5
 800e656:	f7f1 ff77 	bl	8000548 <__aeabi_dmul>
 800e65a:	4602      	mov	r2, r0
 800e65c:	460b      	mov	r3, r1
 800e65e:	4640      	mov	r0, r8
 800e660:	4649      	mov	r1, r9
 800e662:	f7f1 fdb9 	bl	80001d8 <__aeabi_dsub>
 800e666:	4604      	mov	r4, r0
 800e668:	460d      	mov	r5, r1
 800e66a:	4602      	mov	r2, r0
 800e66c:	460b      	mov	r3, r1
 800e66e:	4640      	mov	r0, r8
 800e670:	4649      	mov	r1, r9
 800e672:	f7f1 ff69 	bl	8000548 <__aeabi_dmul>
 800e676:	2200      	movs	r2, #0
 800e678:	ec41 0b19 	vmov	d9, r0, r1
 800e67c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800e680:	4620      	mov	r0, r4
 800e682:	4629      	mov	r1, r5
 800e684:	f7f1 fda8 	bl	80001d8 <__aeabi_dsub>
 800e688:	4602      	mov	r2, r0
 800e68a:	460b      	mov	r3, r1
 800e68c:	ec51 0b19 	vmov	r0, r1, d9
 800e690:	f7f2 f884 	bl	800079c <__aeabi_ddiv>
 800e694:	4632      	mov	r2, r6
 800e696:	4604      	mov	r4, r0
 800e698:	460d      	mov	r5, r1
 800e69a:	463b      	mov	r3, r7
 800e69c:	4640      	mov	r0, r8
 800e69e:	4649      	mov	r1, r9
 800e6a0:	f7f1 ff52 	bl	8000548 <__aeabi_dmul>
 800e6a4:	4632      	mov	r2, r6
 800e6a6:	463b      	mov	r3, r7
 800e6a8:	f7f1 fd98 	bl	80001dc <__adddf3>
 800e6ac:	4602      	mov	r2, r0
 800e6ae:	460b      	mov	r3, r1
 800e6b0:	4620      	mov	r0, r4
 800e6b2:	4629      	mov	r1, r5
 800e6b4:	f7f1 fd90 	bl	80001d8 <__aeabi_dsub>
 800e6b8:	4642      	mov	r2, r8
 800e6ba:	464b      	mov	r3, r9
 800e6bc:	f7f1 fd8c 	bl	80001d8 <__aeabi_dsub>
 800e6c0:	460b      	mov	r3, r1
 800e6c2:	4602      	mov	r2, r0
 800e6c4:	493a      	ldr	r1, [pc, #232]	; (800e7b0 <__ieee754_pow+0xa30>)
 800e6c6:	2000      	movs	r0, #0
 800e6c8:	f7f1 fd86 	bl	80001d8 <__aeabi_dsub>
 800e6cc:	e9cd 0100 	strd	r0, r1, [sp]
 800e6d0:	9b01      	ldr	r3, [sp, #4]
 800e6d2:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 800e6d6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800e6da:	da2f      	bge.n	800e73c <__ieee754_pow+0x9bc>
 800e6dc:	4650      	mov	r0, sl
 800e6de:	ed9d 0b00 	vldr	d0, [sp]
 800e6e2:	f001 f921 	bl	800f928 <scalbn>
 800e6e6:	ec51 0b10 	vmov	r0, r1, d0
 800e6ea:	ec53 2b18 	vmov	r2, r3, d8
 800e6ee:	f7ff bbe0 	b.w	800deb2 <__ieee754_pow+0x132>
 800e6f2:	4b30      	ldr	r3, [pc, #192]	; (800e7b4 <__ieee754_pow+0xa34>)
 800e6f4:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 800e6f8:	429e      	cmp	r6, r3
 800e6fa:	f77f af0b 	ble.w	800e514 <__ieee754_pow+0x794>
 800e6fe:	4b2e      	ldr	r3, [pc, #184]	; (800e7b8 <__ieee754_pow+0xa38>)
 800e700:	440b      	add	r3, r1
 800e702:	4303      	orrs	r3, r0
 800e704:	d00b      	beq.n	800e71e <__ieee754_pow+0x99e>
 800e706:	a326      	add	r3, pc, #152	; (adr r3, 800e7a0 <__ieee754_pow+0xa20>)
 800e708:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e70c:	ec51 0b18 	vmov	r0, r1, d8
 800e710:	f7f1 ff1a 	bl	8000548 <__aeabi_dmul>
 800e714:	a322      	add	r3, pc, #136	; (adr r3, 800e7a0 <__ieee754_pow+0xa20>)
 800e716:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e71a:	f7ff bbca 	b.w	800deb2 <__ieee754_pow+0x132>
 800e71e:	4622      	mov	r2, r4
 800e720:	462b      	mov	r3, r5
 800e722:	f7f1 fd59 	bl	80001d8 <__aeabi_dsub>
 800e726:	4642      	mov	r2, r8
 800e728:	464b      	mov	r3, r9
 800e72a:	f7f2 f993 	bl	8000a54 <__aeabi_dcmpge>
 800e72e:	2800      	cmp	r0, #0
 800e730:	f43f aef0 	beq.w	800e514 <__ieee754_pow+0x794>
 800e734:	e7e7      	b.n	800e706 <__ieee754_pow+0x986>
 800e736:	f04f 0a00 	mov.w	sl, #0
 800e73a:	e717      	b.n	800e56c <__ieee754_pow+0x7ec>
 800e73c:	e9dd 0100 	ldrd	r0, r1, [sp]
 800e740:	4619      	mov	r1, r3
 800e742:	e7d2      	b.n	800e6ea <__ieee754_pow+0x96a>
 800e744:	491a      	ldr	r1, [pc, #104]	; (800e7b0 <__ieee754_pow+0xa30>)
 800e746:	2000      	movs	r0, #0
 800e748:	f7ff bb9e 	b.w	800de88 <__ieee754_pow+0x108>
 800e74c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e750:	f7ff bb9a 	b.w	800de88 <__ieee754_pow+0x108>
 800e754:	9000      	str	r0, [sp, #0]
 800e756:	f7ff bb76 	b.w	800de46 <__ieee754_pow+0xc6>
 800e75a:	2100      	movs	r1, #0
 800e75c:	f7ff bb60 	b.w	800de20 <__ieee754_pow+0xa0>
 800e760:	00000000 	.word	0x00000000
 800e764:	3fe62e43 	.word	0x3fe62e43
 800e768:	fefa39ef 	.word	0xfefa39ef
 800e76c:	3fe62e42 	.word	0x3fe62e42
 800e770:	0ca86c39 	.word	0x0ca86c39
 800e774:	be205c61 	.word	0xbe205c61
 800e778:	72bea4d0 	.word	0x72bea4d0
 800e77c:	3e663769 	.word	0x3e663769
 800e780:	c5d26bf1 	.word	0xc5d26bf1
 800e784:	3ebbbd41 	.word	0x3ebbbd41
 800e788:	af25de2c 	.word	0xaf25de2c
 800e78c:	3f11566a 	.word	0x3f11566a
 800e790:	16bebd93 	.word	0x16bebd93
 800e794:	3f66c16c 	.word	0x3f66c16c
 800e798:	5555553e 	.word	0x5555553e
 800e79c:	3fc55555 	.word	0x3fc55555
 800e7a0:	c2f8f359 	.word	0xc2f8f359
 800e7a4:	01a56e1f 	.word	0x01a56e1f
 800e7a8:	3fe00000 	.word	0x3fe00000
 800e7ac:	000fffff 	.word	0x000fffff
 800e7b0:	3ff00000 	.word	0x3ff00000
 800e7b4:	4090cbff 	.word	0x4090cbff
 800e7b8:	3f6f3400 	.word	0x3f6f3400
 800e7bc:	652b82fe 	.word	0x652b82fe
 800e7c0:	3c971547 	.word	0x3c971547
 800e7c4:	00000000 	.word	0x00000000

0800e7c8 <__ieee754_rem_pio2>:
 800e7c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e7cc:	ed2d 8b02 	vpush	{d8}
 800e7d0:	ec55 4b10 	vmov	r4, r5, d0
 800e7d4:	4bca      	ldr	r3, [pc, #808]	; (800eb00 <__ieee754_rem_pio2+0x338>)
 800e7d6:	b08b      	sub	sp, #44	; 0x2c
 800e7d8:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 800e7dc:	4598      	cmp	r8, r3
 800e7de:	4682      	mov	sl, r0
 800e7e0:	9502      	str	r5, [sp, #8]
 800e7e2:	dc08      	bgt.n	800e7f6 <__ieee754_rem_pio2+0x2e>
 800e7e4:	2200      	movs	r2, #0
 800e7e6:	2300      	movs	r3, #0
 800e7e8:	ed80 0b00 	vstr	d0, [r0]
 800e7ec:	e9c0 2302 	strd	r2, r3, [r0, #8]
 800e7f0:	f04f 0b00 	mov.w	fp, #0
 800e7f4:	e028      	b.n	800e848 <__ieee754_rem_pio2+0x80>
 800e7f6:	4bc3      	ldr	r3, [pc, #780]	; (800eb04 <__ieee754_rem_pio2+0x33c>)
 800e7f8:	4598      	cmp	r8, r3
 800e7fa:	dc78      	bgt.n	800e8ee <__ieee754_rem_pio2+0x126>
 800e7fc:	9b02      	ldr	r3, [sp, #8]
 800e7fe:	4ec2      	ldr	r6, [pc, #776]	; (800eb08 <__ieee754_rem_pio2+0x340>)
 800e800:	2b00      	cmp	r3, #0
 800e802:	ee10 0a10 	vmov	r0, s0
 800e806:	a3b0      	add	r3, pc, #704	; (adr r3, 800eac8 <__ieee754_rem_pio2+0x300>)
 800e808:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e80c:	4629      	mov	r1, r5
 800e80e:	dd39      	ble.n	800e884 <__ieee754_rem_pio2+0xbc>
 800e810:	f7f1 fce2 	bl	80001d8 <__aeabi_dsub>
 800e814:	45b0      	cmp	r8, r6
 800e816:	4604      	mov	r4, r0
 800e818:	460d      	mov	r5, r1
 800e81a:	d01b      	beq.n	800e854 <__ieee754_rem_pio2+0x8c>
 800e81c:	a3ac      	add	r3, pc, #688	; (adr r3, 800ead0 <__ieee754_rem_pio2+0x308>)
 800e81e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e822:	f7f1 fcd9 	bl	80001d8 <__aeabi_dsub>
 800e826:	4602      	mov	r2, r0
 800e828:	460b      	mov	r3, r1
 800e82a:	e9ca 2300 	strd	r2, r3, [sl]
 800e82e:	4620      	mov	r0, r4
 800e830:	4629      	mov	r1, r5
 800e832:	f7f1 fcd1 	bl	80001d8 <__aeabi_dsub>
 800e836:	a3a6      	add	r3, pc, #664	; (adr r3, 800ead0 <__ieee754_rem_pio2+0x308>)
 800e838:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e83c:	f7f1 fccc 	bl	80001d8 <__aeabi_dsub>
 800e840:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800e844:	f04f 0b01 	mov.w	fp, #1
 800e848:	4658      	mov	r0, fp
 800e84a:	b00b      	add	sp, #44	; 0x2c
 800e84c:	ecbd 8b02 	vpop	{d8}
 800e850:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e854:	a3a0      	add	r3, pc, #640	; (adr r3, 800ead8 <__ieee754_rem_pio2+0x310>)
 800e856:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e85a:	f7f1 fcbd 	bl	80001d8 <__aeabi_dsub>
 800e85e:	a3a0      	add	r3, pc, #640	; (adr r3, 800eae0 <__ieee754_rem_pio2+0x318>)
 800e860:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e864:	4604      	mov	r4, r0
 800e866:	460d      	mov	r5, r1
 800e868:	f7f1 fcb6 	bl	80001d8 <__aeabi_dsub>
 800e86c:	4602      	mov	r2, r0
 800e86e:	460b      	mov	r3, r1
 800e870:	e9ca 2300 	strd	r2, r3, [sl]
 800e874:	4620      	mov	r0, r4
 800e876:	4629      	mov	r1, r5
 800e878:	f7f1 fcae 	bl	80001d8 <__aeabi_dsub>
 800e87c:	a398      	add	r3, pc, #608	; (adr r3, 800eae0 <__ieee754_rem_pio2+0x318>)
 800e87e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e882:	e7db      	b.n	800e83c <__ieee754_rem_pio2+0x74>
 800e884:	f7f1 fcaa 	bl	80001dc <__adddf3>
 800e888:	45b0      	cmp	r8, r6
 800e88a:	4604      	mov	r4, r0
 800e88c:	460d      	mov	r5, r1
 800e88e:	d016      	beq.n	800e8be <__ieee754_rem_pio2+0xf6>
 800e890:	a38f      	add	r3, pc, #572	; (adr r3, 800ead0 <__ieee754_rem_pio2+0x308>)
 800e892:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e896:	f7f1 fca1 	bl	80001dc <__adddf3>
 800e89a:	4602      	mov	r2, r0
 800e89c:	460b      	mov	r3, r1
 800e89e:	e9ca 2300 	strd	r2, r3, [sl]
 800e8a2:	4620      	mov	r0, r4
 800e8a4:	4629      	mov	r1, r5
 800e8a6:	f7f1 fc97 	bl	80001d8 <__aeabi_dsub>
 800e8aa:	a389      	add	r3, pc, #548	; (adr r3, 800ead0 <__ieee754_rem_pio2+0x308>)
 800e8ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e8b0:	f7f1 fc94 	bl	80001dc <__adddf3>
 800e8b4:	f04f 3bff 	mov.w	fp, #4294967295
 800e8b8:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800e8bc:	e7c4      	b.n	800e848 <__ieee754_rem_pio2+0x80>
 800e8be:	a386      	add	r3, pc, #536	; (adr r3, 800ead8 <__ieee754_rem_pio2+0x310>)
 800e8c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e8c4:	f7f1 fc8a 	bl	80001dc <__adddf3>
 800e8c8:	a385      	add	r3, pc, #532	; (adr r3, 800eae0 <__ieee754_rem_pio2+0x318>)
 800e8ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e8ce:	4604      	mov	r4, r0
 800e8d0:	460d      	mov	r5, r1
 800e8d2:	f7f1 fc83 	bl	80001dc <__adddf3>
 800e8d6:	4602      	mov	r2, r0
 800e8d8:	460b      	mov	r3, r1
 800e8da:	e9ca 2300 	strd	r2, r3, [sl]
 800e8de:	4620      	mov	r0, r4
 800e8e0:	4629      	mov	r1, r5
 800e8e2:	f7f1 fc79 	bl	80001d8 <__aeabi_dsub>
 800e8e6:	a37e      	add	r3, pc, #504	; (adr r3, 800eae0 <__ieee754_rem_pio2+0x318>)
 800e8e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e8ec:	e7e0      	b.n	800e8b0 <__ieee754_rem_pio2+0xe8>
 800e8ee:	4b87      	ldr	r3, [pc, #540]	; (800eb0c <__ieee754_rem_pio2+0x344>)
 800e8f0:	4598      	cmp	r8, r3
 800e8f2:	f300 80d9 	bgt.w	800eaa8 <__ieee754_rem_pio2+0x2e0>
 800e8f6:	f000 feed 	bl	800f6d4 <fabs>
 800e8fa:	ec55 4b10 	vmov	r4, r5, d0
 800e8fe:	ee10 0a10 	vmov	r0, s0
 800e902:	a379      	add	r3, pc, #484	; (adr r3, 800eae8 <__ieee754_rem_pio2+0x320>)
 800e904:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e908:	4629      	mov	r1, r5
 800e90a:	f7f1 fe1d 	bl	8000548 <__aeabi_dmul>
 800e90e:	4b80      	ldr	r3, [pc, #512]	; (800eb10 <__ieee754_rem_pio2+0x348>)
 800e910:	2200      	movs	r2, #0
 800e912:	f7f1 fc63 	bl	80001dc <__adddf3>
 800e916:	f7f2 f8c7 	bl	8000aa8 <__aeabi_d2iz>
 800e91a:	4683      	mov	fp, r0
 800e91c:	f7f1 fdaa 	bl	8000474 <__aeabi_i2d>
 800e920:	4602      	mov	r2, r0
 800e922:	460b      	mov	r3, r1
 800e924:	ec43 2b18 	vmov	d8, r2, r3
 800e928:	a367      	add	r3, pc, #412	; (adr r3, 800eac8 <__ieee754_rem_pio2+0x300>)
 800e92a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e92e:	f7f1 fe0b 	bl	8000548 <__aeabi_dmul>
 800e932:	4602      	mov	r2, r0
 800e934:	460b      	mov	r3, r1
 800e936:	4620      	mov	r0, r4
 800e938:	4629      	mov	r1, r5
 800e93a:	f7f1 fc4d 	bl	80001d8 <__aeabi_dsub>
 800e93e:	a364      	add	r3, pc, #400	; (adr r3, 800ead0 <__ieee754_rem_pio2+0x308>)
 800e940:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e944:	4606      	mov	r6, r0
 800e946:	460f      	mov	r7, r1
 800e948:	ec51 0b18 	vmov	r0, r1, d8
 800e94c:	f7f1 fdfc 	bl	8000548 <__aeabi_dmul>
 800e950:	f1bb 0f1f 	cmp.w	fp, #31
 800e954:	4604      	mov	r4, r0
 800e956:	460d      	mov	r5, r1
 800e958:	dc0d      	bgt.n	800e976 <__ieee754_rem_pio2+0x1ae>
 800e95a:	4b6e      	ldr	r3, [pc, #440]	; (800eb14 <__ieee754_rem_pio2+0x34c>)
 800e95c:	f10b 32ff 	add.w	r2, fp, #4294967295
 800e960:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e964:	4543      	cmp	r3, r8
 800e966:	d006      	beq.n	800e976 <__ieee754_rem_pio2+0x1ae>
 800e968:	4622      	mov	r2, r4
 800e96a:	462b      	mov	r3, r5
 800e96c:	4630      	mov	r0, r6
 800e96e:	4639      	mov	r1, r7
 800e970:	f7f1 fc32 	bl	80001d8 <__aeabi_dsub>
 800e974:	e00f      	b.n	800e996 <__ieee754_rem_pio2+0x1ce>
 800e976:	462b      	mov	r3, r5
 800e978:	4622      	mov	r2, r4
 800e97a:	4630      	mov	r0, r6
 800e97c:	4639      	mov	r1, r7
 800e97e:	f7f1 fc2b 	bl	80001d8 <__aeabi_dsub>
 800e982:	ea4f 5328 	mov.w	r3, r8, asr #20
 800e986:	9303      	str	r3, [sp, #12]
 800e988:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800e98c:	ebc3 5818 	rsb	r8, r3, r8, lsr #20
 800e990:	f1b8 0f10 	cmp.w	r8, #16
 800e994:	dc02      	bgt.n	800e99c <__ieee754_rem_pio2+0x1d4>
 800e996:	e9ca 0100 	strd	r0, r1, [sl]
 800e99a:	e039      	b.n	800ea10 <__ieee754_rem_pio2+0x248>
 800e99c:	a34e      	add	r3, pc, #312	; (adr r3, 800ead8 <__ieee754_rem_pio2+0x310>)
 800e99e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e9a2:	ec51 0b18 	vmov	r0, r1, d8
 800e9a6:	f7f1 fdcf 	bl	8000548 <__aeabi_dmul>
 800e9aa:	4604      	mov	r4, r0
 800e9ac:	460d      	mov	r5, r1
 800e9ae:	4602      	mov	r2, r0
 800e9b0:	460b      	mov	r3, r1
 800e9b2:	4630      	mov	r0, r6
 800e9b4:	4639      	mov	r1, r7
 800e9b6:	f7f1 fc0f 	bl	80001d8 <__aeabi_dsub>
 800e9ba:	4602      	mov	r2, r0
 800e9bc:	460b      	mov	r3, r1
 800e9be:	4680      	mov	r8, r0
 800e9c0:	4689      	mov	r9, r1
 800e9c2:	4630      	mov	r0, r6
 800e9c4:	4639      	mov	r1, r7
 800e9c6:	f7f1 fc07 	bl	80001d8 <__aeabi_dsub>
 800e9ca:	4622      	mov	r2, r4
 800e9cc:	462b      	mov	r3, r5
 800e9ce:	f7f1 fc03 	bl	80001d8 <__aeabi_dsub>
 800e9d2:	a343      	add	r3, pc, #268	; (adr r3, 800eae0 <__ieee754_rem_pio2+0x318>)
 800e9d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e9d8:	4604      	mov	r4, r0
 800e9da:	460d      	mov	r5, r1
 800e9dc:	ec51 0b18 	vmov	r0, r1, d8
 800e9e0:	f7f1 fdb2 	bl	8000548 <__aeabi_dmul>
 800e9e4:	4622      	mov	r2, r4
 800e9e6:	462b      	mov	r3, r5
 800e9e8:	f7f1 fbf6 	bl	80001d8 <__aeabi_dsub>
 800e9ec:	4602      	mov	r2, r0
 800e9ee:	460b      	mov	r3, r1
 800e9f0:	4604      	mov	r4, r0
 800e9f2:	460d      	mov	r5, r1
 800e9f4:	4640      	mov	r0, r8
 800e9f6:	4649      	mov	r1, r9
 800e9f8:	f7f1 fbee 	bl	80001d8 <__aeabi_dsub>
 800e9fc:	9a03      	ldr	r2, [sp, #12]
 800e9fe:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800ea02:	1ad3      	subs	r3, r2, r3
 800ea04:	2b31      	cmp	r3, #49	; 0x31
 800ea06:	dc24      	bgt.n	800ea52 <__ieee754_rem_pio2+0x28a>
 800ea08:	e9ca 0100 	strd	r0, r1, [sl]
 800ea0c:	4646      	mov	r6, r8
 800ea0e:	464f      	mov	r7, r9
 800ea10:	e9da 8900 	ldrd	r8, r9, [sl]
 800ea14:	4630      	mov	r0, r6
 800ea16:	4642      	mov	r2, r8
 800ea18:	464b      	mov	r3, r9
 800ea1a:	4639      	mov	r1, r7
 800ea1c:	f7f1 fbdc 	bl	80001d8 <__aeabi_dsub>
 800ea20:	462b      	mov	r3, r5
 800ea22:	4622      	mov	r2, r4
 800ea24:	f7f1 fbd8 	bl	80001d8 <__aeabi_dsub>
 800ea28:	9b02      	ldr	r3, [sp, #8]
 800ea2a:	2b00      	cmp	r3, #0
 800ea2c:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800ea30:	f6bf af0a 	bge.w	800e848 <__ieee754_rem_pio2+0x80>
 800ea34:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800ea38:	f8ca 3004 	str.w	r3, [sl, #4]
 800ea3c:	f8ca 8000 	str.w	r8, [sl]
 800ea40:	f8ca 0008 	str.w	r0, [sl, #8]
 800ea44:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800ea48:	f8ca 300c 	str.w	r3, [sl, #12]
 800ea4c:	f1cb 0b00 	rsb	fp, fp, #0
 800ea50:	e6fa      	b.n	800e848 <__ieee754_rem_pio2+0x80>
 800ea52:	a327      	add	r3, pc, #156	; (adr r3, 800eaf0 <__ieee754_rem_pio2+0x328>)
 800ea54:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ea58:	ec51 0b18 	vmov	r0, r1, d8
 800ea5c:	f7f1 fd74 	bl	8000548 <__aeabi_dmul>
 800ea60:	4604      	mov	r4, r0
 800ea62:	460d      	mov	r5, r1
 800ea64:	4602      	mov	r2, r0
 800ea66:	460b      	mov	r3, r1
 800ea68:	4640      	mov	r0, r8
 800ea6a:	4649      	mov	r1, r9
 800ea6c:	f7f1 fbb4 	bl	80001d8 <__aeabi_dsub>
 800ea70:	4602      	mov	r2, r0
 800ea72:	460b      	mov	r3, r1
 800ea74:	4606      	mov	r6, r0
 800ea76:	460f      	mov	r7, r1
 800ea78:	4640      	mov	r0, r8
 800ea7a:	4649      	mov	r1, r9
 800ea7c:	f7f1 fbac 	bl	80001d8 <__aeabi_dsub>
 800ea80:	4622      	mov	r2, r4
 800ea82:	462b      	mov	r3, r5
 800ea84:	f7f1 fba8 	bl	80001d8 <__aeabi_dsub>
 800ea88:	a31b      	add	r3, pc, #108	; (adr r3, 800eaf8 <__ieee754_rem_pio2+0x330>)
 800ea8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ea8e:	4604      	mov	r4, r0
 800ea90:	460d      	mov	r5, r1
 800ea92:	ec51 0b18 	vmov	r0, r1, d8
 800ea96:	f7f1 fd57 	bl	8000548 <__aeabi_dmul>
 800ea9a:	4622      	mov	r2, r4
 800ea9c:	462b      	mov	r3, r5
 800ea9e:	f7f1 fb9b 	bl	80001d8 <__aeabi_dsub>
 800eaa2:	4604      	mov	r4, r0
 800eaa4:	460d      	mov	r5, r1
 800eaa6:	e75f      	b.n	800e968 <__ieee754_rem_pio2+0x1a0>
 800eaa8:	4b1b      	ldr	r3, [pc, #108]	; (800eb18 <__ieee754_rem_pio2+0x350>)
 800eaaa:	4598      	cmp	r8, r3
 800eaac:	dd36      	ble.n	800eb1c <__ieee754_rem_pio2+0x354>
 800eaae:	ee10 2a10 	vmov	r2, s0
 800eab2:	462b      	mov	r3, r5
 800eab4:	4620      	mov	r0, r4
 800eab6:	4629      	mov	r1, r5
 800eab8:	f7f1 fb8e 	bl	80001d8 <__aeabi_dsub>
 800eabc:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800eac0:	e9ca 0100 	strd	r0, r1, [sl]
 800eac4:	e694      	b.n	800e7f0 <__ieee754_rem_pio2+0x28>
 800eac6:	bf00      	nop
 800eac8:	54400000 	.word	0x54400000
 800eacc:	3ff921fb 	.word	0x3ff921fb
 800ead0:	1a626331 	.word	0x1a626331
 800ead4:	3dd0b461 	.word	0x3dd0b461
 800ead8:	1a600000 	.word	0x1a600000
 800eadc:	3dd0b461 	.word	0x3dd0b461
 800eae0:	2e037073 	.word	0x2e037073
 800eae4:	3ba3198a 	.word	0x3ba3198a
 800eae8:	6dc9c883 	.word	0x6dc9c883
 800eaec:	3fe45f30 	.word	0x3fe45f30
 800eaf0:	2e000000 	.word	0x2e000000
 800eaf4:	3ba3198a 	.word	0x3ba3198a
 800eaf8:	252049c1 	.word	0x252049c1
 800eafc:	397b839a 	.word	0x397b839a
 800eb00:	3fe921fb 	.word	0x3fe921fb
 800eb04:	4002d97b 	.word	0x4002d97b
 800eb08:	3ff921fb 	.word	0x3ff921fb
 800eb0c:	413921fb 	.word	0x413921fb
 800eb10:	3fe00000 	.word	0x3fe00000
 800eb14:	0800fb30 	.word	0x0800fb30
 800eb18:	7fefffff 	.word	0x7fefffff
 800eb1c:	ea4f 5428 	mov.w	r4, r8, asr #20
 800eb20:	f2a4 4416 	subw	r4, r4, #1046	; 0x416
 800eb24:	ee10 0a10 	vmov	r0, s0
 800eb28:	eba8 5104 	sub.w	r1, r8, r4, lsl #20
 800eb2c:	ee10 6a10 	vmov	r6, s0
 800eb30:	460f      	mov	r7, r1
 800eb32:	f7f1 ffb9 	bl	8000aa8 <__aeabi_d2iz>
 800eb36:	f7f1 fc9d 	bl	8000474 <__aeabi_i2d>
 800eb3a:	4602      	mov	r2, r0
 800eb3c:	460b      	mov	r3, r1
 800eb3e:	4630      	mov	r0, r6
 800eb40:	4639      	mov	r1, r7
 800eb42:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800eb46:	f7f1 fb47 	bl	80001d8 <__aeabi_dsub>
 800eb4a:	4b22      	ldr	r3, [pc, #136]	; (800ebd4 <__ieee754_rem_pio2+0x40c>)
 800eb4c:	2200      	movs	r2, #0
 800eb4e:	f7f1 fcfb 	bl	8000548 <__aeabi_dmul>
 800eb52:	460f      	mov	r7, r1
 800eb54:	4606      	mov	r6, r0
 800eb56:	f7f1 ffa7 	bl	8000aa8 <__aeabi_d2iz>
 800eb5a:	f7f1 fc8b 	bl	8000474 <__aeabi_i2d>
 800eb5e:	4602      	mov	r2, r0
 800eb60:	460b      	mov	r3, r1
 800eb62:	4630      	mov	r0, r6
 800eb64:	4639      	mov	r1, r7
 800eb66:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800eb6a:	f7f1 fb35 	bl	80001d8 <__aeabi_dsub>
 800eb6e:	4b19      	ldr	r3, [pc, #100]	; (800ebd4 <__ieee754_rem_pio2+0x40c>)
 800eb70:	2200      	movs	r2, #0
 800eb72:	f7f1 fce9 	bl	8000548 <__aeabi_dmul>
 800eb76:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800eb7a:	ad04      	add	r5, sp, #16
 800eb7c:	f04f 0803 	mov.w	r8, #3
 800eb80:	46a9      	mov	r9, r5
 800eb82:	2600      	movs	r6, #0
 800eb84:	2700      	movs	r7, #0
 800eb86:	4632      	mov	r2, r6
 800eb88:	463b      	mov	r3, r7
 800eb8a:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
 800eb8e:	46c3      	mov	fp, r8
 800eb90:	3d08      	subs	r5, #8
 800eb92:	f108 38ff 	add.w	r8, r8, #4294967295
 800eb96:	f7f1 ff3f 	bl	8000a18 <__aeabi_dcmpeq>
 800eb9a:	2800      	cmp	r0, #0
 800eb9c:	d1f3      	bne.n	800eb86 <__ieee754_rem_pio2+0x3be>
 800eb9e:	4b0e      	ldr	r3, [pc, #56]	; (800ebd8 <__ieee754_rem_pio2+0x410>)
 800eba0:	9301      	str	r3, [sp, #4]
 800eba2:	2302      	movs	r3, #2
 800eba4:	9300      	str	r3, [sp, #0]
 800eba6:	4622      	mov	r2, r4
 800eba8:	465b      	mov	r3, fp
 800ebaa:	4651      	mov	r1, sl
 800ebac:	4648      	mov	r0, r9
 800ebae:	f000 f993 	bl	800eed8 <__kernel_rem_pio2>
 800ebb2:	9b02      	ldr	r3, [sp, #8]
 800ebb4:	2b00      	cmp	r3, #0
 800ebb6:	4683      	mov	fp, r0
 800ebb8:	f6bf ae46 	bge.w	800e848 <__ieee754_rem_pio2+0x80>
 800ebbc:	f8da 3004 	ldr.w	r3, [sl, #4]
 800ebc0:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800ebc4:	f8ca 3004 	str.w	r3, [sl, #4]
 800ebc8:	f8da 300c 	ldr.w	r3, [sl, #12]
 800ebcc:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800ebd0:	e73a      	b.n	800ea48 <__ieee754_rem_pio2+0x280>
 800ebd2:	bf00      	nop
 800ebd4:	41700000 	.word	0x41700000
 800ebd8:	0800fbb0 	.word	0x0800fbb0

0800ebdc <__ieee754_sqrt>:
 800ebdc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ebe0:	ec55 4b10 	vmov	r4, r5, d0
 800ebe4:	4e56      	ldr	r6, [pc, #344]	; (800ed40 <__ieee754_sqrt+0x164>)
 800ebe6:	43ae      	bics	r6, r5
 800ebe8:	ee10 0a10 	vmov	r0, s0
 800ebec:	ee10 3a10 	vmov	r3, s0
 800ebf0:	4629      	mov	r1, r5
 800ebf2:	462a      	mov	r2, r5
 800ebf4:	d110      	bne.n	800ec18 <__ieee754_sqrt+0x3c>
 800ebf6:	ee10 2a10 	vmov	r2, s0
 800ebfa:	462b      	mov	r3, r5
 800ebfc:	f7f1 fca4 	bl	8000548 <__aeabi_dmul>
 800ec00:	4602      	mov	r2, r0
 800ec02:	460b      	mov	r3, r1
 800ec04:	4620      	mov	r0, r4
 800ec06:	4629      	mov	r1, r5
 800ec08:	f7f1 fae8 	bl	80001dc <__adddf3>
 800ec0c:	4604      	mov	r4, r0
 800ec0e:	460d      	mov	r5, r1
 800ec10:	ec45 4b10 	vmov	d0, r4, r5
 800ec14:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ec18:	2d00      	cmp	r5, #0
 800ec1a:	dc10      	bgt.n	800ec3e <__ieee754_sqrt+0x62>
 800ec1c:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800ec20:	4330      	orrs	r0, r6
 800ec22:	d0f5      	beq.n	800ec10 <__ieee754_sqrt+0x34>
 800ec24:	b15d      	cbz	r5, 800ec3e <__ieee754_sqrt+0x62>
 800ec26:	ee10 2a10 	vmov	r2, s0
 800ec2a:	462b      	mov	r3, r5
 800ec2c:	ee10 0a10 	vmov	r0, s0
 800ec30:	f7f1 fad2 	bl	80001d8 <__aeabi_dsub>
 800ec34:	4602      	mov	r2, r0
 800ec36:	460b      	mov	r3, r1
 800ec38:	f7f1 fdb0 	bl	800079c <__aeabi_ddiv>
 800ec3c:	e7e6      	b.n	800ec0c <__ieee754_sqrt+0x30>
 800ec3e:	1509      	asrs	r1, r1, #20
 800ec40:	d076      	beq.n	800ed30 <__ieee754_sqrt+0x154>
 800ec42:	f3c2 0213 	ubfx	r2, r2, #0, #20
 800ec46:	07ce      	lsls	r6, r1, #31
 800ec48:	f442 1080 	orr.w	r0, r2, #1048576	; 0x100000
 800ec4c:	bf5e      	ittt	pl
 800ec4e:	0fda      	lsrpl	r2, r3, #31
 800ec50:	005b      	lslpl	r3, r3, #1
 800ec52:	eb02 0040 	addpl.w	r0, r2, r0, lsl #1
 800ec56:	0fda      	lsrs	r2, r3, #31
 800ec58:	f2a1 35ff 	subw	r5, r1, #1023	; 0x3ff
 800ec5c:	eb02 0240 	add.w	r2, r2, r0, lsl #1
 800ec60:	2000      	movs	r0, #0
 800ec62:	106d      	asrs	r5, r5, #1
 800ec64:	005b      	lsls	r3, r3, #1
 800ec66:	f04f 0e16 	mov.w	lr, #22
 800ec6a:	4684      	mov	ip, r0
 800ec6c:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800ec70:	eb0c 0401 	add.w	r4, ip, r1
 800ec74:	4294      	cmp	r4, r2
 800ec76:	bfde      	ittt	le
 800ec78:	1b12      	suble	r2, r2, r4
 800ec7a:	eb04 0c01 	addle.w	ip, r4, r1
 800ec7e:	1840      	addle	r0, r0, r1
 800ec80:	0052      	lsls	r2, r2, #1
 800ec82:	f1be 0e01 	subs.w	lr, lr, #1
 800ec86:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 800ec8a:	ea4f 0151 	mov.w	r1, r1, lsr #1
 800ec8e:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800ec92:	d1ed      	bne.n	800ec70 <__ieee754_sqrt+0x94>
 800ec94:	4671      	mov	r1, lr
 800ec96:	2720      	movs	r7, #32
 800ec98:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 800ec9c:	4562      	cmp	r2, ip
 800ec9e:	eb04 060e 	add.w	r6, r4, lr
 800eca2:	dc02      	bgt.n	800ecaa <__ieee754_sqrt+0xce>
 800eca4:	d113      	bne.n	800ecce <__ieee754_sqrt+0xf2>
 800eca6:	429e      	cmp	r6, r3
 800eca8:	d811      	bhi.n	800ecce <__ieee754_sqrt+0xf2>
 800ecaa:	2e00      	cmp	r6, #0
 800ecac:	eb06 0e04 	add.w	lr, r6, r4
 800ecb0:	da43      	bge.n	800ed3a <__ieee754_sqrt+0x15e>
 800ecb2:	f1be 0f00 	cmp.w	lr, #0
 800ecb6:	db40      	blt.n	800ed3a <__ieee754_sqrt+0x15e>
 800ecb8:	f10c 0801 	add.w	r8, ip, #1
 800ecbc:	eba2 020c 	sub.w	r2, r2, ip
 800ecc0:	429e      	cmp	r6, r3
 800ecc2:	bf88      	it	hi
 800ecc4:	f102 32ff 	addhi.w	r2, r2, #4294967295
 800ecc8:	1b9b      	subs	r3, r3, r6
 800ecca:	4421      	add	r1, r4
 800eccc:	46c4      	mov	ip, r8
 800ecce:	0052      	lsls	r2, r2, #1
 800ecd0:	3f01      	subs	r7, #1
 800ecd2:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 800ecd6:	ea4f 0454 	mov.w	r4, r4, lsr #1
 800ecda:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800ecde:	d1dd      	bne.n	800ec9c <__ieee754_sqrt+0xc0>
 800ece0:	4313      	orrs	r3, r2
 800ece2:	d006      	beq.n	800ecf2 <__ieee754_sqrt+0x116>
 800ece4:	1c4c      	adds	r4, r1, #1
 800ece6:	bf13      	iteet	ne
 800ece8:	3101      	addne	r1, #1
 800ecea:	3001      	addeq	r0, #1
 800ecec:	4639      	moveq	r1, r7
 800ecee:	f021 0101 	bicne.w	r1, r1, #1
 800ecf2:	1043      	asrs	r3, r0, #1
 800ecf4:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 800ecf8:	0849      	lsrs	r1, r1, #1
 800ecfa:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 800ecfe:	07c2      	lsls	r2, r0, #31
 800ed00:	bf48      	it	mi
 800ed02:	f041 4100 	orrmi.w	r1, r1, #2147483648	; 0x80000000
 800ed06:	eb03 5705 	add.w	r7, r3, r5, lsl #20
 800ed0a:	460c      	mov	r4, r1
 800ed0c:	463d      	mov	r5, r7
 800ed0e:	e77f      	b.n	800ec10 <__ieee754_sqrt+0x34>
 800ed10:	0ada      	lsrs	r2, r3, #11
 800ed12:	3815      	subs	r0, #21
 800ed14:	055b      	lsls	r3, r3, #21
 800ed16:	2a00      	cmp	r2, #0
 800ed18:	d0fa      	beq.n	800ed10 <__ieee754_sqrt+0x134>
 800ed1a:	02d7      	lsls	r7, r2, #11
 800ed1c:	d50a      	bpl.n	800ed34 <__ieee754_sqrt+0x158>
 800ed1e:	f1c1 0420 	rsb	r4, r1, #32
 800ed22:	fa23 f404 	lsr.w	r4, r3, r4
 800ed26:	1e4d      	subs	r5, r1, #1
 800ed28:	408b      	lsls	r3, r1
 800ed2a:	4322      	orrs	r2, r4
 800ed2c:	1b41      	subs	r1, r0, r5
 800ed2e:	e788      	b.n	800ec42 <__ieee754_sqrt+0x66>
 800ed30:	4608      	mov	r0, r1
 800ed32:	e7f0      	b.n	800ed16 <__ieee754_sqrt+0x13a>
 800ed34:	0052      	lsls	r2, r2, #1
 800ed36:	3101      	adds	r1, #1
 800ed38:	e7ef      	b.n	800ed1a <__ieee754_sqrt+0x13e>
 800ed3a:	46e0      	mov	r8, ip
 800ed3c:	e7be      	b.n	800ecbc <__ieee754_sqrt+0xe0>
 800ed3e:	bf00      	nop
 800ed40:	7ff00000 	.word	0x7ff00000
 800ed44:	00000000 	.word	0x00000000

0800ed48 <__kernel_cos>:
 800ed48:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ed4c:	ec57 6b10 	vmov	r6, r7, d0
 800ed50:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 800ed54:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 800ed58:	ed8d 1b00 	vstr	d1, [sp]
 800ed5c:	da07      	bge.n	800ed6e <__kernel_cos+0x26>
 800ed5e:	ee10 0a10 	vmov	r0, s0
 800ed62:	4639      	mov	r1, r7
 800ed64:	f7f1 fea0 	bl	8000aa8 <__aeabi_d2iz>
 800ed68:	2800      	cmp	r0, #0
 800ed6a:	f000 8088 	beq.w	800ee7e <__kernel_cos+0x136>
 800ed6e:	4632      	mov	r2, r6
 800ed70:	463b      	mov	r3, r7
 800ed72:	4630      	mov	r0, r6
 800ed74:	4639      	mov	r1, r7
 800ed76:	f7f1 fbe7 	bl	8000548 <__aeabi_dmul>
 800ed7a:	4b51      	ldr	r3, [pc, #324]	; (800eec0 <__kernel_cos+0x178>)
 800ed7c:	2200      	movs	r2, #0
 800ed7e:	4604      	mov	r4, r0
 800ed80:	460d      	mov	r5, r1
 800ed82:	f7f1 fbe1 	bl	8000548 <__aeabi_dmul>
 800ed86:	a340      	add	r3, pc, #256	; (adr r3, 800ee88 <__kernel_cos+0x140>)
 800ed88:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ed8c:	4682      	mov	sl, r0
 800ed8e:	468b      	mov	fp, r1
 800ed90:	4620      	mov	r0, r4
 800ed92:	4629      	mov	r1, r5
 800ed94:	f7f1 fbd8 	bl	8000548 <__aeabi_dmul>
 800ed98:	a33d      	add	r3, pc, #244	; (adr r3, 800ee90 <__kernel_cos+0x148>)
 800ed9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ed9e:	f7f1 fa1d 	bl	80001dc <__adddf3>
 800eda2:	4622      	mov	r2, r4
 800eda4:	462b      	mov	r3, r5
 800eda6:	f7f1 fbcf 	bl	8000548 <__aeabi_dmul>
 800edaa:	a33b      	add	r3, pc, #236	; (adr r3, 800ee98 <__kernel_cos+0x150>)
 800edac:	e9d3 2300 	ldrd	r2, r3, [r3]
 800edb0:	f7f1 fa12 	bl	80001d8 <__aeabi_dsub>
 800edb4:	4622      	mov	r2, r4
 800edb6:	462b      	mov	r3, r5
 800edb8:	f7f1 fbc6 	bl	8000548 <__aeabi_dmul>
 800edbc:	a338      	add	r3, pc, #224	; (adr r3, 800eea0 <__kernel_cos+0x158>)
 800edbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800edc2:	f7f1 fa0b 	bl	80001dc <__adddf3>
 800edc6:	4622      	mov	r2, r4
 800edc8:	462b      	mov	r3, r5
 800edca:	f7f1 fbbd 	bl	8000548 <__aeabi_dmul>
 800edce:	a336      	add	r3, pc, #216	; (adr r3, 800eea8 <__kernel_cos+0x160>)
 800edd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800edd4:	f7f1 fa00 	bl	80001d8 <__aeabi_dsub>
 800edd8:	4622      	mov	r2, r4
 800edda:	462b      	mov	r3, r5
 800eddc:	f7f1 fbb4 	bl	8000548 <__aeabi_dmul>
 800ede0:	a333      	add	r3, pc, #204	; (adr r3, 800eeb0 <__kernel_cos+0x168>)
 800ede2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ede6:	f7f1 f9f9 	bl	80001dc <__adddf3>
 800edea:	4622      	mov	r2, r4
 800edec:	462b      	mov	r3, r5
 800edee:	f7f1 fbab 	bl	8000548 <__aeabi_dmul>
 800edf2:	4622      	mov	r2, r4
 800edf4:	462b      	mov	r3, r5
 800edf6:	f7f1 fba7 	bl	8000548 <__aeabi_dmul>
 800edfa:	e9dd 2300 	ldrd	r2, r3, [sp]
 800edfe:	4604      	mov	r4, r0
 800ee00:	460d      	mov	r5, r1
 800ee02:	4630      	mov	r0, r6
 800ee04:	4639      	mov	r1, r7
 800ee06:	f7f1 fb9f 	bl	8000548 <__aeabi_dmul>
 800ee0a:	460b      	mov	r3, r1
 800ee0c:	4602      	mov	r2, r0
 800ee0e:	4629      	mov	r1, r5
 800ee10:	4620      	mov	r0, r4
 800ee12:	f7f1 f9e1 	bl	80001d8 <__aeabi_dsub>
 800ee16:	4b2b      	ldr	r3, [pc, #172]	; (800eec4 <__kernel_cos+0x17c>)
 800ee18:	4598      	cmp	r8, r3
 800ee1a:	4606      	mov	r6, r0
 800ee1c:	460f      	mov	r7, r1
 800ee1e:	dc10      	bgt.n	800ee42 <__kernel_cos+0xfa>
 800ee20:	4602      	mov	r2, r0
 800ee22:	460b      	mov	r3, r1
 800ee24:	4650      	mov	r0, sl
 800ee26:	4659      	mov	r1, fp
 800ee28:	f7f1 f9d6 	bl	80001d8 <__aeabi_dsub>
 800ee2c:	460b      	mov	r3, r1
 800ee2e:	4926      	ldr	r1, [pc, #152]	; (800eec8 <__kernel_cos+0x180>)
 800ee30:	4602      	mov	r2, r0
 800ee32:	2000      	movs	r0, #0
 800ee34:	f7f1 f9d0 	bl	80001d8 <__aeabi_dsub>
 800ee38:	ec41 0b10 	vmov	d0, r0, r1
 800ee3c:	b003      	add	sp, #12
 800ee3e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ee42:	4b22      	ldr	r3, [pc, #136]	; (800eecc <__kernel_cos+0x184>)
 800ee44:	4920      	ldr	r1, [pc, #128]	; (800eec8 <__kernel_cos+0x180>)
 800ee46:	4598      	cmp	r8, r3
 800ee48:	bfcc      	ite	gt
 800ee4a:	4d21      	ldrgt	r5, [pc, #132]	; (800eed0 <__kernel_cos+0x188>)
 800ee4c:	f5a8 1500 	suble.w	r5, r8, #2097152	; 0x200000
 800ee50:	2400      	movs	r4, #0
 800ee52:	4622      	mov	r2, r4
 800ee54:	462b      	mov	r3, r5
 800ee56:	2000      	movs	r0, #0
 800ee58:	f7f1 f9be 	bl	80001d8 <__aeabi_dsub>
 800ee5c:	4622      	mov	r2, r4
 800ee5e:	4680      	mov	r8, r0
 800ee60:	4689      	mov	r9, r1
 800ee62:	462b      	mov	r3, r5
 800ee64:	4650      	mov	r0, sl
 800ee66:	4659      	mov	r1, fp
 800ee68:	f7f1 f9b6 	bl	80001d8 <__aeabi_dsub>
 800ee6c:	4632      	mov	r2, r6
 800ee6e:	463b      	mov	r3, r7
 800ee70:	f7f1 f9b2 	bl	80001d8 <__aeabi_dsub>
 800ee74:	4602      	mov	r2, r0
 800ee76:	460b      	mov	r3, r1
 800ee78:	4640      	mov	r0, r8
 800ee7a:	4649      	mov	r1, r9
 800ee7c:	e7da      	b.n	800ee34 <__kernel_cos+0xec>
 800ee7e:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 800eeb8 <__kernel_cos+0x170>
 800ee82:	e7db      	b.n	800ee3c <__kernel_cos+0xf4>
 800ee84:	f3af 8000 	nop.w
 800ee88:	be8838d4 	.word	0xbe8838d4
 800ee8c:	bda8fae9 	.word	0xbda8fae9
 800ee90:	bdb4b1c4 	.word	0xbdb4b1c4
 800ee94:	3e21ee9e 	.word	0x3e21ee9e
 800ee98:	809c52ad 	.word	0x809c52ad
 800ee9c:	3e927e4f 	.word	0x3e927e4f
 800eea0:	19cb1590 	.word	0x19cb1590
 800eea4:	3efa01a0 	.word	0x3efa01a0
 800eea8:	16c15177 	.word	0x16c15177
 800eeac:	3f56c16c 	.word	0x3f56c16c
 800eeb0:	5555554c 	.word	0x5555554c
 800eeb4:	3fa55555 	.word	0x3fa55555
 800eeb8:	00000000 	.word	0x00000000
 800eebc:	3ff00000 	.word	0x3ff00000
 800eec0:	3fe00000 	.word	0x3fe00000
 800eec4:	3fd33332 	.word	0x3fd33332
 800eec8:	3ff00000 	.word	0x3ff00000
 800eecc:	3fe90000 	.word	0x3fe90000
 800eed0:	3fd20000 	.word	0x3fd20000
 800eed4:	00000000 	.word	0x00000000

0800eed8 <__kernel_rem_pio2>:
 800eed8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800eedc:	ed2d 8b02 	vpush	{d8}
 800eee0:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
 800eee4:	f112 0f14 	cmn.w	r2, #20
 800eee8:	9308      	str	r3, [sp, #32]
 800eeea:	9101      	str	r1, [sp, #4]
 800eeec:	4bc6      	ldr	r3, [pc, #792]	; (800f208 <__kernel_rem_pio2+0x330>)
 800eeee:	99a4      	ldr	r1, [sp, #656]	; 0x290
 800eef0:	9009      	str	r0, [sp, #36]	; 0x24
 800eef2:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800eef6:	9304      	str	r3, [sp, #16]
 800eef8:	9b08      	ldr	r3, [sp, #32]
 800eefa:	f103 33ff 	add.w	r3, r3, #4294967295
 800eefe:	bfa8      	it	ge
 800ef00:	1ed4      	subge	r4, r2, #3
 800ef02:	9306      	str	r3, [sp, #24]
 800ef04:	bfb2      	itee	lt
 800ef06:	2400      	movlt	r4, #0
 800ef08:	2318      	movge	r3, #24
 800ef0a:	fb94 f4f3 	sdivge	r4, r4, r3
 800ef0e:	f06f 0317 	mvn.w	r3, #23
 800ef12:	fb04 3303 	mla	r3, r4, r3, r3
 800ef16:	eb03 0a02 	add.w	sl, r3, r2
 800ef1a:	9b04      	ldr	r3, [sp, #16]
 800ef1c:	9a06      	ldr	r2, [sp, #24]
 800ef1e:	ed9f 8bb6 	vldr	d8, [pc, #728]	; 800f1f8 <__kernel_rem_pio2+0x320>
 800ef22:	eb03 0802 	add.w	r8, r3, r2
 800ef26:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 800ef28:	1aa7      	subs	r7, r4, r2
 800ef2a:	ae20      	add	r6, sp, #128	; 0x80
 800ef2c:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 800ef30:	2500      	movs	r5, #0
 800ef32:	4545      	cmp	r5, r8
 800ef34:	dd18      	ble.n	800ef68 <__kernel_rem_pio2+0x90>
 800ef36:	9b08      	ldr	r3, [sp, #32]
 800ef38:	f8dd 8018 	ldr.w	r8, [sp, #24]
 800ef3c:	aa20      	add	r2, sp, #128	; 0x80
 800ef3e:	ed9f 8bae 	vldr	d8, [pc, #696]	; 800f1f8 <__kernel_rem_pio2+0x320>
 800ef42:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 800ef46:	f1c3 0301 	rsb	r3, r3, #1
 800ef4a:	f50d 7be0 	add.w	fp, sp, #448	; 0x1c0
 800ef4e:	9307      	str	r3, [sp, #28]
 800ef50:	9b07      	ldr	r3, [sp, #28]
 800ef52:	9a04      	ldr	r2, [sp, #16]
 800ef54:	4443      	add	r3, r8
 800ef56:	429a      	cmp	r2, r3
 800ef58:	db2f      	blt.n	800efba <__kernel_rem_pio2+0xe2>
 800ef5a:	ed8d 8b02 	vstr	d8, [sp, #8]
 800ef5e:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 800ef62:	462f      	mov	r7, r5
 800ef64:	2600      	movs	r6, #0
 800ef66:	e01b      	b.n	800efa0 <__kernel_rem_pio2+0xc8>
 800ef68:	42ef      	cmn	r7, r5
 800ef6a:	d407      	bmi.n	800ef7c <__kernel_rem_pio2+0xa4>
 800ef6c:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 800ef70:	f7f1 fa80 	bl	8000474 <__aeabi_i2d>
 800ef74:	e8e6 0102 	strd	r0, r1, [r6], #8
 800ef78:	3501      	adds	r5, #1
 800ef7a:	e7da      	b.n	800ef32 <__kernel_rem_pio2+0x5a>
 800ef7c:	ec51 0b18 	vmov	r0, r1, d8
 800ef80:	e7f8      	b.n	800ef74 <__kernel_rem_pio2+0x9c>
 800ef82:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ef86:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 800ef8a:	f7f1 fadd 	bl	8000548 <__aeabi_dmul>
 800ef8e:	4602      	mov	r2, r0
 800ef90:	460b      	mov	r3, r1
 800ef92:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ef96:	f7f1 f921 	bl	80001dc <__adddf3>
 800ef9a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ef9e:	3601      	adds	r6, #1
 800efa0:	9b06      	ldr	r3, [sp, #24]
 800efa2:	429e      	cmp	r6, r3
 800efa4:	f1a7 0708 	sub.w	r7, r7, #8
 800efa8:	ddeb      	ble.n	800ef82 <__kernel_rem_pio2+0xaa>
 800efaa:	ed9d 7b02 	vldr	d7, [sp, #8]
 800efae:	3508      	adds	r5, #8
 800efb0:	ecab 7b02 	vstmia	fp!, {d7}
 800efb4:	f108 0801 	add.w	r8, r8, #1
 800efb8:	e7ca      	b.n	800ef50 <__kernel_rem_pio2+0x78>
 800efba:	9b04      	ldr	r3, [sp, #16]
 800efbc:	aa0c      	add	r2, sp, #48	; 0x30
 800efbe:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800efc2:	930b      	str	r3, [sp, #44]	; 0x2c
 800efc4:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 800efc6:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800efca:	9c04      	ldr	r4, [sp, #16]
 800efcc:	930a      	str	r3, [sp, #40]	; 0x28
 800efce:	ab98      	add	r3, sp, #608	; 0x260
 800efd0:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800efd4:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 800efd8:	f10d 0b30 	add.w	fp, sp, #48	; 0x30
 800efdc:	f8cd b008 	str.w	fp, [sp, #8]
 800efe0:	4625      	mov	r5, r4
 800efe2:	2d00      	cmp	r5, #0
 800efe4:	dc78      	bgt.n	800f0d8 <__kernel_rem_pio2+0x200>
 800efe6:	ec47 6b10 	vmov	d0, r6, r7
 800efea:	4650      	mov	r0, sl
 800efec:	f000 fc9c 	bl	800f928 <scalbn>
 800eff0:	ec57 6b10 	vmov	r6, r7, d0
 800eff4:	2200      	movs	r2, #0
 800eff6:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 800effa:	ee10 0a10 	vmov	r0, s0
 800effe:	4639      	mov	r1, r7
 800f000:	f7f1 faa2 	bl	8000548 <__aeabi_dmul>
 800f004:	ec41 0b10 	vmov	d0, r0, r1
 800f008:	f000 fb7a 	bl	800f700 <floor>
 800f00c:	4b7f      	ldr	r3, [pc, #508]	; (800f20c <__kernel_rem_pio2+0x334>)
 800f00e:	ec51 0b10 	vmov	r0, r1, d0
 800f012:	2200      	movs	r2, #0
 800f014:	f7f1 fa98 	bl	8000548 <__aeabi_dmul>
 800f018:	4602      	mov	r2, r0
 800f01a:	460b      	mov	r3, r1
 800f01c:	4630      	mov	r0, r6
 800f01e:	4639      	mov	r1, r7
 800f020:	f7f1 f8da 	bl	80001d8 <__aeabi_dsub>
 800f024:	460f      	mov	r7, r1
 800f026:	4606      	mov	r6, r0
 800f028:	f7f1 fd3e 	bl	8000aa8 <__aeabi_d2iz>
 800f02c:	9007      	str	r0, [sp, #28]
 800f02e:	f7f1 fa21 	bl	8000474 <__aeabi_i2d>
 800f032:	4602      	mov	r2, r0
 800f034:	460b      	mov	r3, r1
 800f036:	4630      	mov	r0, r6
 800f038:	4639      	mov	r1, r7
 800f03a:	f7f1 f8cd 	bl	80001d8 <__aeabi_dsub>
 800f03e:	f1ba 0f00 	cmp.w	sl, #0
 800f042:	4606      	mov	r6, r0
 800f044:	460f      	mov	r7, r1
 800f046:	dd70      	ble.n	800f12a <__kernel_rem_pio2+0x252>
 800f048:	1e62      	subs	r2, r4, #1
 800f04a:	ab0c      	add	r3, sp, #48	; 0x30
 800f04c:	9d07      	ldr	r5, [sp, #28]
 800f04e:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 800f052:	f1ca 0118 	rsb	r1, sl, #24
 800f056:	fa40 f301 	asr.w	r3, r0, r1
 800f05a:	441d      	add	r5, r3
 800f05c:	408b      	lsls	r3, r1
 800f05e:	1ac0      	subs	r0, r0, r3
 800f060:	ab0c      	add	r3, sp, #48	; 0x30
 800f062:	9507      	str	r5, [sp, #28]
 800f064:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 800f068:	f1ca 0317 	rsb	r3, sl, #23
 800f06c:	fa40 f303 	asr.w	r3, r0, r3
 800f070:	9302      	str	r3, [sp, #8]
 800f072:	9b02      	ldr	r3, [sp, #8]
 800f074:	2b00      	cmp	r3, #0
 800f076:	dd66      	ble.n	800f146 <__kernel_rem_pio2+0x26e>
 800f078:	9b07      	ldr	r3, [sp, #28]
 800f07a:	2200      	movs	r2, #0
 800f07c:	3301      	adds	r3, #1
 800f07e:	9307      	str	r3, [sp, #28]
 800f080:	4615      	mov	r5, r2
 800f082:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 800f086:	4294      	cmp	r4, r2
 800f088:	f300 8099 	bgt.w	800f1be <__kernel_rem_pio2+0x2e6>
 800f08c:	f1ba 0f00 	cmp.w	sl, #0
 800f090:	dd07      	ble.n	800f0a2 <__kernel_rem_pio2+0x1ca>
 800f092:	f1ba 0f01 	cmp.w	sl, #1
 800f096:	f000 80a5 	beq.w	800f1e4 <__kernel_rem_pio2+0x30c>
 800f09a:	f1ba 0f02 	cmp.w	sl, #2
 800f09e:	f000 80c1 	beq.w	800f224 <__kernel_rem_pio2+0x34c>
 800f0a2:	9b02      	ldr	r3, [sp, #8]
 800f0a4:	2b02      	cmp	r3, #2
 800f0a6:	d14e      	bne.n	800f146 <__kernel_rem_pio2+0x26e>
 800f0a8:	4632      	mov	r2, r6
 800f0aa:	463b      	mov	r3, r7
 800f0ac:	4958      	ldr	r1, [pc, #352]	; (800f210 <__kernel_rem_pio2+0x338>)
 800f0ae:	2000      	movs	r0, #0
 800f0b0:	f7f1 f892 	bl	80001d8 <__aeabi_dsub>
 800f0b4:	4606      	mov	r6, r0
 800f0b6:	460f      	mov	r7, r1
 800f0b8:	2d00      	cmp	r5, #0
 800f0ba:	d044      	beq.n	800f146 <__kernel_rem_pio2+0x26e>
 800f0bc:	4650      	mov	r0, sl
 800f0be:	ed9f 0b50 	vldr	d0, [pc, #320]	; 800f200 <__kernel_rem_pio2+0x328>
 800f0c2:	f000 fc31 	bl	800f928 <scalbn>
 800f0c6:	4630      	mov	r0, r6
 800f0c8:	4639      	mov	r1, r7
 800f0ca:	ec53 2b10 	vmov	r2, r3, d0
 800f0ce:	f7f1 f883 	bl	80001d8 <__aeabi_dsub>
 800f0d2:	4606      	mov	r6, r0
 800f0d4:	460f      	mov	r7, r1
 800f0d6:	e036      	b.n	800f146 <__kernel_rem_pio2+0x26e>
 800f0d8:	4b4e      	ldr	r3, [pc, #312]	; (800f214 <__kernel_rem_pio2+0x33c>)
 800f0da:	2200      	movs	r2, #0
 800f0dc:	4630      	mov	r0, r6
 800f0de:	4639      	mov	r1, r7
 800f0e0:	f7f1 fa32 	bl	8000548 <__aeabi_dmul>
 800f0e4:	f7f1 fce0 	bl	8000aa8 <__aeabi_d2iz>
 800f0e8:	f7f1 f9c4 	bl	8000474 <__aeabi_i2d>
 800f0ec:	4b4a      	ldr	r3, [pc, #296]	; (800f218 <__kernel_rem_pio2+0x340>)
 800f0ee:	2200      	movs	r2, #0
 800f0f0:	4680      	mov	r8, r0
 800f0f2:	4689      	mov	r9, r1
 800f0f4:	f7f1 fa28 	bl	8000548 <__aeabi_dmul>
 800f0f8:	4602      	mov	r2, r0
 800f0fa:	460b      	mov	r3, r1
 800f0fc:	4630      	mov	r0, r6
 800f0fe:	4639      	mov	r1, r7
 800f100:	f7f1 f86a 	bl	80001d8 <__aeabi_dsub>
 800f104:	f7f1 fcd0 	bl	8000aa8 <__aeabi_d2iz>
 800f108:	9b02      	ldr	r3, [sp, #8]
 800f10a:	f843 0b04 	str.w	r0, [r3], #4
 800f10e:	3d01      	subs	r5, #1
 800f110:	9302      	str	r3, [sp, #8]
 800f112:	ab70      	add	r3, sp, #448	; 0x1c0
 800f114:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800f118:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f11c:	4640      	mov	r0, r8
 800f11e:	4649      	mov	r1, r9
 800f120:	f7f1 f85c 	bl	80001dc <__adddf3>
 800f124:	4606      	mov	r6, r0
 800f126:	460f      	mov	r7, r1
 800f128:	e75b      	b.n	800efe2 <__kernel_rem_pio2+0x10a>
 800f12a:	d105      	bne.n	800f138 <__kernel_rem_pio2+0x260>
 800f12c:	1e63      	subs	r3, r4, #1
 800f12e:	aa0c      	add	r2, sp, #48	; 0x30
 800f130:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800f134:	15c3      	asrs	r3, r0, #23
 800f136:	e79b      	b.n	800f070 <__kernel_rem_pio2+0x198>
 800f138:	4b38      	ldr	r3, [pc, #224]	; (800f21c <__kernel_rem_pio2+0x344>)
 800f13a:	2200      	movs	r2, #0
 800f13c:	f7f1 fc8a 	bl	8000a54 <__aeabi_dcmpge>
 800f140:	2800      	cmp	r0, #0
 800f142:	d139      	bne.n	800f1b8 <__kernel_rem_pio2+0x2e0>
 800f144:	9002      	str	r0, [sp, #8]
 800f146:	2200      	movs	r2, #0
 800f148:	2300      	movs	r3, #0
 800f14a:	4630      	mov	r0, r6
 800f14c:	4639      	mov	r1, r7
 800f14e:	f7f1 fc63 	bl	8000a18 <__aeabi_dcmpeq>
 800f152:	2800      	cmp	r0, #0
 800f154:	f000 80b4 	beq.w	800f2c0 <__kernel_rem_pio2+0x3e8>
 800f158:	f104 3bff 	add.w	fp, r4, #4294967295
 800f15c:	465b      	mov	r3, fp
 800f15e:	2200      	movs	r2, #0
 800f160:	9904      	ldr	r1, [sp, #16]
 800f162:	428b      	cmp	r3, r1
 800f164:	da65      	bge.n	800f232 <__kernel_rem_pio2+0x35a>
 800f166:	2a00      	cmp	r2, #0
 800f168:	d07b      	beq.n	800f262 <__kernel_rem_pio2+0x38a>
 800f16a:	ab0c      	add	r3, sp, #48	; 0x30
 800f16c:	f1aa 0a18 	sub.w	sl, sl, #24
 800f170:	f853 302b 	ldr.w	r3, [r3, fp, lsl #2]
 800f174:	2b00      	cmp	r3, #0
 800f176:	f000 80a0 	beq.w	800f2ba <__kernel_rem_pio2+0x3e2>
 800f17a:	ed9f 0b21 	vldr	d0, [pc, #132]	; 800f200 <__kernel_rem_pio2+0x328>
 800f17e:	4650      	mov	r0, sl
 800f180:	f000 fbd2 	bl	800f928 <scalbn>
 800f184:	4f23      	ldr	r7, [pc, #140]	; (800f214 <__kernel_rem_pio2+0x33c>)
 800f186:	ec55 4b10 	vmov	r4, r5, d0
 800f18a:	46d8      	mov	r8, fp
 800f18c:	2600      	movs	r6, #0
 800f18e:	f1b8 0f00 	cmp.w	r8, #0
 800f192:	f280 80cf 	bge.w	800f334 <__kernel_rem_pio2+0x45c>
 800f196:	ed9f 8b18 	vldr	d8, [pc, #96]	; 800f1f8 <__kernel_rem_pio2+0x320>
 800f19a:	465f      	mov	r7, fp
 800f19c:	f04f 0800 	mov.w	r8, #0
 800f1a0:	2f00      	cmp	r7, #0
 800f1a2:	f2c0 80fd 	blt.w	800f3a0 <__kernel_rem_pio2+0x4c8>
 800f1a6:	ab70      	add	r3, sp, #448	; 0x1c0
 800f1a8:	f8df a074 	ldr.w	sl, [pc, #116]	; 800f220 <__kernel_rem_pio2+0x348>
 800f1ac:	ec55 4b18 	vmov	r4, r5, d8
 800f1b0:	eb03 09c7 	add.w	r9, r3, r7, lsl #3
 800f1b4:	2600      	movs	r6, #0
 800f1b6:	e0e5      	b.n	800f384 <__kernel_rem_pio2+0x4ac>
 800f1b8:	2302      	movs	r3, #2
 800f1ba:	9302      	str	r3, [sp, #8]
 800f1bc:	e75c      	b.n	800f078 <__kernel_rem_pio2+0x1a0>
 800f1be:	f8db 3000 	ldr.w	r3, [fp]
 800f1c2:	b955      	cbnz	r5, 800f1da <__kernel_rem_pio2+0x302>
 800f1c4:	b123      	cbz	r3, 800f1d0 <__kernel_rem_pio2+0x2f8>
 800f1c6:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 800f1ca:	f8cb 3000 	str.w	r3, [fp]
 800f1ce:	2301      	movs	r3, #1
 800f1d0:	3201      	adds	r2, #1
 800f1d2:	f10b 0b04 	add.w	fp, fp, #4
 800f1d6:	461d      	mov	r5, r3
 800f1d8:	e755      	b.n	800f086 <__kernel_rem_pio2+0x1ae>
 800f1da:	1acb      	subs	r3, r1, r3
 800f1dc:	f8cb 3000 	str.w	r3, [fp]
 800f1e0:	462b      	mov	r3, r5
 800f1e2:	e7f5      	b.n	800f1d0 <__kernel_rem_pio2+0x2f8>
 800f1e4:	1e62      	subs	r2, r4, #1
 800f1e6:	ab0c      	add	r3, sp, #48	; 0x30
 800f1e8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f1ec:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800f1f0:	a90c      	add	r1, sp, #48	; 0x30
 800f1f2:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 800f1f6:	e754      	b.n	800f0a2 <__kernel_rem_pio2+0x1ca>
	...
 800f204:	3ff00000 	.word	0x3ff00000
 800f208:	0800fcf8 	.word	0x0800fcf8
 800f20c:	40200000 	.word	0x40200000
 800f210:	3ff00000 	.word	0x3ff00000
 800f214:	3e700000 	.word	0x3e700000
 800f218:	41700000 	.word	0x41700000
 800f21c:	3fe00000 	.word	0x3fe00000
 800f220:	0800fcb8 	.word	0x0800fcb8
 800f224:	1e62      	subs	r2, r4, #1
 800f226:	ab0c      	add	r3, sp, #48	; 0x30
 800f228:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f22c:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800f230:	e7de      	b.n	800f1f0 <__kernel_rem_pio2+0x318>
 800f232:	a90c      	add	r1, sp, #48	; 0x30
 800f234:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800f238:	3b01      	subs	r3, #1
 800f23a:	430a      	orrs	r2, r1
 800f23c:	e790      	b.n	800f160 <__kernel_rem_pio2+0x288>
 800f23e:	3301      	adds	r3, #1
 800f240:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 800f244:	2900      	cmp	r1, #0
 800f246:	d0fa      	beq.n	800f23e <__kernel_rem_pio2+0x366>
 800f248:	9a08      	ldr	r2, [sp, #32]
 800f24a:	18e3      	adds	r3, r4, r3
 800f24c:	18a6      	adds	r6, r4, r2
 800f24e:	aa20      	add	r2, sp, #128	; 0x80
 800f250:	1c65      	adds	r5, r4, #1
 800f252:	eb02 06c6 	add.w	r6, r2, r6, lsl #3
 800f256:	9302      	str	r3, [sp, #8]
 800f258:	9b02      	ldr	r3, [sp, #8]
 800f25a:	42ab      	cmp	r3, r5
 800f25c:	da04      	bge.n	800f268 <__kernel_rem_pio2+0x390>
 800f25e:	461c      	mov	r4, r3
 800f260:	e6b5      	b.n	800efce <__kernel_rem_pio2+0xf6>
 800f262:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800f264:	2301      	movs	r3, #1
 800f266:	e7eb      	b.n	800f240 <__kernel_rem_pio2+0x368>
 800f268:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f26a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800f26e:	f7f1 f901 	bl	8000474 <__aeabi_i2d>
 800f272:	e8e6 0102 	strd	r0, r1, [r6], #8
 800f276:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f278:	46b3      	mov	fp, r6
 800f27a:	461c      	mov	r4, r3
 800f27c:	2700      	movs	r7, #0
 800f27e:	f04f 0800 	mov.w	r8, #0
 800f282:	f04f 0900 	mov.w	r9, #0
 800f286:	9b06      	ldr	r3, [sp, #24]
 800f288:	429f      	cmp	r7, r3
 800f28a:	dd06      	ble.n	800f29a <__kernel_rem_pio2+0x3c2>
 800f28c:	ab70      	add	r3, sp, #448	; 0x1c0
 800f28e:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800f292:	e9c3 8900 	strd	r8, r9, [r3]
 800f296:	3501      	adds	r5, #1
 800f298:	e7de      	b.n	800f258 <__kernel_rem_pio2+0x380>
 800f29a:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 800f29e:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 800f2a2:	f7f1 f951 	bl	8000548 <__aeabi_dmul>
 800f2a6:	4602      	mov	r2, r0
 800f2a8:	460b      	mov	r3, r1
 800f2aa:	4640      	mov	r0, r8
 800f2ac:	4649      	mov	r1, r9
 800f2ae:	f7f0 ff95 	bl	80001dc <__adddf3>
 800f2b2:	3701      	adds	r7, #1
 800f2b4:	4680      	mov	r8, r0
 800f2b6:	4689      	mov	r9, r1
 800f2b8:	e7e5      	b.n	800f286 <__kernel_rem_pio2+0x3ae>
 800f2ba:	f10b 3bff 	add.w	fp, fp, #4294967295
 800f2be:	e754      	b.n	800f16a <__kernel_rem_pio2+0x292>
 800f2c0:	ec47 6b10 	vmov	d0, r6, r7
 800f2c4:	f1ca 0000 	rsb	r0, sl, #0
 800f2c8:	f000 fb2e 	bl	800f928 <scalbn>
 800f2cc:	ec57 6b10 	vmov	r6, r7, d0
 800f2d0:	4b9f      	ldr	r3, [pc, #636]	; (800f550 <__kernel_rem_pio2+0x678>)
 800f2d2:	ee10 0a10 	vmov	r0, s0
 800f2d6:	2200      	movs	r2, #0
 800f2d8:	4639      	mov	r1, r7
 800f2da:	f7f1 fbbb 	bl	8000a54 <__aeabi_dcmpge>
 800f2de:	b300      	cbz	r0, 800f322 <__kernel_rem_pio2+0x44a>
 800f2e0:	4b9c      	ldr	r3, [pc, #624]	; (800f554 <__kernel_rem_pio2+0x67c>)
 800f2e2:	2200      	movs	r2, #0
 800f2e4:	4630      	mov	r0, r6
 800f2e6:	4639      	mov	r1, r7
 800f2e8:	f7f1 f92e 	bl	8000548 <__aeabi_dmul>
 800f2ec:	f7f1 fbdc 	bl	8000aa8 <__aeabi_d2iz>
 800f2f0:	4605      	mov	r5, r0
 800f2f2:	f7f1 f8bf 	bl	8000474 <__aeabi_i2d>
 800f2f6:	4b96      	ldr	r3, [pc, #600]	; (800f550 <__kernel_rem_pio2+0x678>)
 800f2f8:	2200      	movs	r2, #0
 800f2fa:	f7f1 f925 	bl	8000548 <__aeabi_dmul>
 800f2fe:	460b      	mov	r3, r1
 800f300:	4602      	mov	r2, r0
 800f302:	4639      	mov	r1, r7
 800f304:	4630      	mov	r0, r6
 800f306:	f7f0 ff67 	bl	80001d8 <__aeabi_dsub>
 800f30a:	f7f1 fbcd 	bl	8000aa8 <__aeabi_d2iz>
 800f30e:	f104 0b01 	add.w	fp, r4, #1
 800f312:	ab0c      	add	r3, sp, #48	; 0x30
 800f314:	f10a 0a18 	add.w	sl, sl, #24
 800f318:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800f31c:	f843 502b 	str.w	r5, [r3, fp, lsl #2]
 800f320:	e72b      	b.n	800f17a <__kernel_rem_pio2+0x2a2>
 800f322:	4630      	mov	r0, r6
 800f324:	4639      	mov	r1, r7
 800f326:	f7f1 fbbf 	bl	8000aa8 <__aeabi_d2iz>
 800f32a:	ab0c      	add	r3, sp, #48	; 0x30
 800f32c:	46a3      	mov	fp, r4
 800f32e:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800f332:	e722      	b.n	800f17a <__kernel_rem_pio2+0x2a2>
 800f334:	ab70      	add	r3, sp, #448	; 0x1c0
 800f336:	eb03 09c8 	add.w	r9, r3, r8, lsl #3
 800f33a:	ab0c      	add	r3, sp, #48	; 0x30
 800f33c:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 800f340:	f7f1 f898 	bl	8000474 <__aeabi_i2d>
 800f344:	4622      	mov	r2, r4
 800f346:	462b      	mov	r3, r5
 800f348:	f7f1 f8fe 	bl	8000548 <__aeabi_dmul>
 800f34c:	4632      	mov	r2, r6
 800f34e:	e9c9 0100 	strd	r0, r1, [r9]
 800f352:	463b      	mov	r3, r7
 800f354:	4620      	mov	r0, r4
 800f356:	4629      	mov	r1, r5
 800f358:	f7f1 f8f6 	bl	8000548 <__aeabi_dmul>
 800f35c:	f108 38ff 	add.w	r8, r8, #4294967295
 800f360:	4604      	mov	r4, r0
 800f362:	460d      	mov	r5, r1
 800f364:	e713      	b.n	800f18e <__kernel_rem_pio2+0x2b6>
 800f366:	e8f9 2302 	ldrd	r2, r3, [r9], #8
 800f36a:	e8fa 0102 	ldrd	r0, r1, [sl], #8
 800f36e:	f7f1 f8eb 	bl	8000548 <__aeabi_dmul>
 800f372:	4602      	mov	r2, r0
 800f374:	460b      	mov	r3, r1
 800f376:	4620      	mov	r0, r4
 800f378:	4629      	mov	r1, r5
 800f37a:	f7f0 ff2f 	bl	80001dc <__adddf3>
 800f37e:	3601      	adds	r6, #1
 800f380:	4604      	mov	r4, r0
 800f382:	460d      	mov	r5, r1
 800f384:	9b04      	ldr	r3, [sp, #16]
 800f386:	429e      	cmp	r6, r3
 800f388:	dc01      	bgt.n	800f38e <__kernel_rem_pio2+0x4b6>
 800f38a:	45b0      	cmp	r8, r6
 800f38c:	daeb      	bge.n	800f366 <__kernel_rem_pio2+0x48e>
 800f38e:	ab48      	add	r3, sp, #288	; 0x120
 800f390:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800f394:	e9c3 4500 	strd	r4, r5, [r3]
 800f398:	3f01      	subs	r7, #1
 800f39a:	f108 0801 	add.w	r8, r8, #1
 800f39e:	e6ff      	b.n	800f1a0 <__kernel_rem_pio2+0x2c8>
 800f3a0:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 800f3a2:	2b02      	cmp	r3, #2
 800f3a4:	dc0b      	bgt.n	800f3be <__kernel_rem_pio2+0x4e6>
 800f3a6:	2b00      	cmp	r3, #0
 800f3a8:	dc6e      	bgt.n	800f488 <__kernel_rem_pio2+0x5b0>
 800f3aa:	d045      	beq.n	800f438 <__kernel_rem_pio2+0x560>
 800f3ac:	9b07      	ldr	r3, [sp, #28]
 800f3ae:	f003 0007 	and.w	r0, r3, #7
 800f3b2:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 800f3b6:	ecbd 8b02 	vpop	{d8}
 800f3ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f3be:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 800f3c0:	2b03      	cmp	r3, #3
 800f3c2:	d1f3      	bne.n	800f3ac <__kernel_rem_pio2+0x4d4>
 800f3c4:	ab48      	add	r3, sp, #288	; 0x120
 800f3c6:	eb03 0acb 	add.w	sl, r3, fp, lsl #3
 800f3ca:	46d0      	mov	r8, sl
 800f3cc:	46d9      	mov	r9, fp
 800f3ce:	f1b9 0f00 	cmp.w	r9, #0
 800f3d2:	f1a8 0808 	sub.w	r8, r8, #8
 800f3d6:	dc64      	bgt.n	800f4a2 <__kernel_rem_pio2+0x5ca>
 800f3d8:	465c      	mov	r4, fp
 800f3da:	2c01      	cmp	r4, #1
 800f3dc:	f1aa 0a08 	sub.w	sl, sl, #8
 800f3e0:	dc7e      	bgt.n	800f4e0 <__kernel_rem_pio2+0x608>
 800f3e2:	2000      	movs	r0, #0
 800f3e4:	2100      	movs	r1, #0
 800f3e6:	f1bb 0f01 	cmp.w	fp, #1
 800f3ea:	f300 8097 	bgt.w	800f51c <__kernel_rem_pio2+0x644>
 800f3ee:	9b02      	ldr	r3, [sp, #8]
 800f3f0:	e9dd 5648 	ldrd	r5, r6, [sp, #288]	; 0x120
 800f3f4:	e9dd 784a 	ldrd	r7, r8, [sp, #296]	; 0x128
 800f3f8:	2b00      	cmp	r3, #0
 800f3fa:	f040 8099 	bne.w	800f530 <__kernel_rem_pio2+0x658>
 800f3fe:	9b01      	ldr	r3, [sp, #4]
 800f400:	e9c3 5600 	strd	r5, r6, [r3]
 800f404:	e9c3 7802 	strd	r7, r8, [r3, #8]
 800f408:	e9c3 0104 	strd	r0, r1, [r3, #16]
 800f40c:	e7ce      	b.n	800f3ac <__kernel_rem_pio2+0x4d4>
 800f40e:	ab48      	add	r3, sp, #288	; 0x120
 800f410:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800f414:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f418:	f7f0 fee0 	bl	80001dc <__adddf3>
 800f41c:	f10b 3bff 	add.w	fp, fp, #4294967295
 800f420:	f1bb 0f00 	cmp.w	fp, #0
 800f424:	daf3      	bge.n	800f40e <__kernel_rem_pio2+0x536>
 800f426:	9b02      	ldr	r3, [sp, #8]
 800f428:	b113      	cbz	r3, 800f430 <__kernel_rem_pio2+0x558>
 800f42a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800f42e:	4619      	mov	r1, r3
 800f430:	9b01      	ldr	r3, [sp, #4]
 800f432:	e9c3 0100 	strd	r0, r1, [r3]
 800f436:	e7b9      	b.n	800f3ac <__kernel_rem_pio2+0x4d4>
 800f438:	2000      	movs	r0, #0
 800f43a:	2100      	movs	r1, #0
 800f43c:	e7f0      	b.n	800f420 <__kernel_rem_pio2+0x548>
 800f43e:	ab48      	add	r3, sp, #288	; 0x120
 800f440:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800f444:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f448:	f7f0 fec8 	bl	80001dc <__adddf3>
 800f44c:	3c01      	subs	r4, #1
 800f44e:	2c00      	cmp	r4, #0
 800f450:	daf5      	bge.n	800f43e <__kernel_rem_pio2+0x566>
 800f452:	9b02      	ldr	r3, [sp, #8]
 800f454:	b1e3      	cbz	r3, 800f490 <__kernel_rem_pio2+0x5b8>
 800f456:	4602      	mov	r2, r0
 800f458:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800f45c:	9c01      	ldr	r4, [sp, #4]
 800f45e:	e9c4 2300 	strd	r2, r3, [r4]
 800f462:	4602      	mov	r2, r0
 800f464:	460b      	mov	r3, r1
 800f466:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	; 0x120
 800f46a:	f7f0 feb5 	bl	80001d8 <__aeabi_dsub>
 800f46e:	ad4a      	add	r5, sp, #296	; 0x128
 800f470:	2401      	movs	r4, #1
 800f472:	45a3      	cmp	fp, r4
 800f474:	da0f      	bge.n	800f496 <__kernel_rem_pio2+0x5be>
 800f476:	9b02      	ldr	r3, [sp, #8]
 800f478:	b113      	cbz	r3, 800f480 <__kernel_rem_pio2+0x5a8>
 800f47a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800f47e:	4619      	mov	r1, r3
 800f480:	9b01      	ldr	r3, [sp, #4]
 800f482:	e9c3 0102 	strd	r0, r1, [r3, #8]
 800f486:	e791      	b.n	800f3ac <__kernel_rem_pio2+0x4d4>
 800f488:	465c      	mov	r4, fp
 800f48a:	2000      	movs	r0, #0
 800f48c:	2100      	movs	r1, #0
 800f48e:	e7de      	b.n	800f44e <__kernel_rem_pio2+0x576>
 800f490:	4602      	mov	r2, r0
 800f492:	460b      	mov	r3, r1
 800f494:	e7e2      	b.n	800f45c <__kernel_rem_pio2+0x584>
 800f496:	e8f5 2302 	ldrd	r2, r3, [r5], #8
 800f49a:	f7f0 fe9f 	bl	80001dc <__adddf3>
 800f49e:	3401      	adds	r4, #1
 800f4a0:	e7e7      	b.n	800f472 <__kernel_rem_pio2+0x59a>
 800f4a2:	e9d8 4500 	ldrd	r4, r5, [r8]
 800f4a6:	e9d8 6702 	ldrd	r6, r7, [r8, #8]
 800f4aa:	4620      	mov	r0, r4
 800f4ac:	4632      	mov	r2, r6
 800f4ae:	463b      	mov	r3, r7
 800f4b0:	4629      	mov	r1, r5
 800f4b2:	f7f0 fe93 	bl	80001dc <__adddf3>
 800f4b6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800f4ba:	4602      	mov	r2, r0
 800f4bc:	460b      	mov	r3, r1
 800f4be:	4620      	mov	r0, r4
 800f4c0:	4629      	mov	r1, r5
 800f4c2:	f7f0 fe89 	bl	80001d8 <__aeabi_dsub>
 800f4c6:	4632      	mov	r2, r6
 800f4c8:	463b      	mov	r3, r7
 800f4ca:	f7f0 fe87 	bl	80001dc <__adddf3>
 800f4ce:	ed9d 7b04 	vldr	d7, [sp, #16]
 800f4d2:	e9c8 0102 	strd	r0, r1, [r8, #8]
 800f4d6:	ed88 7b00 	vstr	d7, [r8]
 800f4da:	f109 39ff 	add.w	r9, r9, #4294967295
 800f4de:	e776      	b.n	800f3ce <__kernel_rem_pio2+0x4f6>
 800f4e0:	e9da 8900 	ldrd	r8, r9, [sl]
 800f4e4:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 800f4e8:	4640      	mov	r0, r8
 800f4ea:	4632      	mov	r2, r6
 800f4ec:	463b      	mov	r3, r7
 800f4ee:	4649      	mov	r1, r9
 800f4f0:	f7f0 fe74 	bl	80001dc <__adddf3>
 800f4f4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800f4f8:	4602      	mov	r2, r0
 800f4fa:	460b      	mov	r3, r1
 800f4fc:	4640      	mov	r0, r8
 800f4fe:	4649      	mov	r1, r9
 800f500:	f7f0 fe6a 	bl	80001d8 <__aeabi_dsub>
 800f504:	4632      	mov	r2, r6
 800f506:	463b      	mov	r3, r7
 800f508:	f7f0 fe68 	bl	80001dc <__adddf3>
 800f50c:	ed9d 7b04 	vldr	d7, [sp, #16]
 800f510:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800f514:	ed8a 7b00 	vstr	d7, [sl]
 800f518:	3c01      	subs	r4, #1
 800f51a:	e75e      	b.n	800f3da <__kernel_rem_pio2+0x502>
 800f51c:	ab48      	add	r3, sp, #288	; 0x120
 800f51e:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800f522:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f526:	f7f0 fe59 	bl	80001dc <__adddf3>
 800f52a:	f10b 3bff 	add.w	fp, fp, #4294967295
 800f52e:	e75a      	b.n	800f3e6 <__kernel_rem_pio2+0x50e>
 800f530:	9b01      	ldr	r3, [sp, #4]
 800f532:	9a01      	ldr	r2, [sp, #4]
 800f534:	601d      	str	r5, [r3, #0]
 800f536:	f106 4400 	add.w	r4, r6, #2147483648	; 0x80000000
 800f53a:	605c      	str	r4, [r3, #4]
 800f53c:	609f      	str	r7, [r3, #8]
 800f53e:	f108 4300 	add.w	r3, r8, #2147483648	; 0x80000000
 800f542:	60d3      	str	r3, [r2, #12]
 800f544:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800f548:	6110      	str	r0, [r2, #16]
 800f54a:	6153      	str	r3, [r2, #20]
 800f54c:	e72e      	b.n	800f3ac <__kernel_rem_pio2+0x4d4>
 800f54e:	bf00      	nop
 800f550:	41700000 	.word	0x41700000
 800f554:	3e700000 	.word	0x3e700000

0800f558 <__kernel_sin>:
 800f558:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f55c:	ed2d 8b04 	vpush	{d8-d9}
 800f560:	eeb0 8a41 	vmov.f32	s16, s2
 800f564:	eef0 8a61 	vmov.f32	s17, s3
 800f568:	ec55 4b10 	vmov	r4, r5, d0
 800f56c:	b083      	sub	sp, #12
 800f56e:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800f572:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 800f576:	9001      	str	r0, [sp, #4]
 800f578:	da06      	bge.n	800f588 <__kernel_sin+0x30>
 800f57a:	ee10 0a10 	vmov	r0, s0
 800f57e:	4629      	mov	r1, r5
 800f580:	f7f1 fa92 	bl	8000aa8 <__aeabi_d2iz>
 800f584:	2800      	cmp	r0, #0
 800f586:	d051      	beq.n	800f62c <__kernel_sin+0xd4>
 800f588:	4622      	mov	r2, r4
 800f58a:	462b      	mov	r3, r5
 800f58c:	4620      	mov	r0, r4
 800f58e:	4629      	mov	r1, r5
 800f590:	f7f0 ffda 	bl	8000548 <__aeabi_dmul>
 800f594:	4682      	mov	sl, r0
 800f596:	468b      	mov	fp, r1
 800f598:	4602      	mov	r2, r0
 800f59a:	460b      	mov	r3, r1
 800f59c:	4620      	mov	r0, r4
 800f59e:	4629      	mov	r1, r5
 800f5a0:	f7f0 ffd2 	bl	8000548 <__aeabi_dmul>
 800f5a4:	a341      	add	r3, pc, #260	; (adr r3, 800f6ac <__kernel_sin+0x154>)
 800f5a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f5aa:	4680      	mov	r8, r0
 800f5ac:	4689      	mov	r9, r1
 800f5ae:	4650      	mov	r0, sl
 800f5b0:	4659      	mov	r1, fp
 800f5b2:	f7f0 ffc9 	bl	8000548 <__aeabi_dmul>
 800f5b6:	a33f      	add	r3, pc, #252	; (adr r3, 800f6b4 <__kernel_sin+0x15c>)
 800f5b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f5bc:	f7f0 fe0c 	bl	80001d8 <__aeabi_dsub>
 800f5c0:	4652      	mov	r2, sl
 800f5c2:	465b      	mov	r3, fp
 800f5c4:	f7f0 ffc0 	bl	8000548 <__aeabi_dmul>
 800f5c8:	a33c      	add	r3, pc, #240	; (adr r3, 800f6bc <__kernel_sin+0x164>)
 800f5ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f5ce:	f7f0 fe05 	bl	80001dc <__adddf3>
 800f5d2:	4652      	mov	r2, sl
 800f5d4:	465b      	mov	r3, fp
 800f5d6:	f7f0 ffb7 	bl	8000548 <__aeabi_dmul>
 800f5da:	a33a      	add	r3, pc, #232	; (adr r3, 800f6c4 <__kernel_sin+0x16c>)
 800f5dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f5e0:	f7f0 fdfa 	bl	80001d8 <__aeabi_dsub>
 800f5e4:	4652      	mov	r2, sl
 800f5e6:	465b      	mov	r3, fp
 800f5e8:	f7f0 ffae 	bl	8000548 <__aeabi_dmul>
 800f5ec:	a337      	add	r3, pc, #220	; (adr r3, 800f6cc <__kernel_sin+0x174>)
 800f5ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f5f2:	f7f0 fdf3 	bl	80001dc <__adddf3>
 800f5f6:	9b01      	ldr	r3, [sp, #4]
 800f5f8:	4606      	mov	r6, r0
 800f5fa:	460f      	mov	r7, r1
 800f5fc:	b9eb      	cbnz	r3, 800f63a <__kernel_sin+0xe2>
 800f5fe:	4602      	mov	r2, r0
 800f600:	460b      	mov	r3, r1
 800f602:	4650      	mov	r0, sl
 800f604:	4659      	mov	r1, fp
 800f606:	f7f0 ff9f 	bl	8000548 <__aeabi_dmul>
 800f60a:	a325      	add	r3, pc, #148	; (adr r3, 800f6a0 <__kernel_sin+0x148>)
 800f60c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f610:	f7f0 fde2 	bl	80001d8 <__aeabi_dsub>
 800f614:	4642      	mov	r2, r8
 800f616:	464b      	mov	r3, r9
 800f618:	f7f0 ff96 	bl	8000548 <__aeabi_dmul>
 800f61c:	4602      	mov	r2, r0
 800f61e:	460b      	mov	r3, r1
 800f620:	4620      	mov	r0, r4
 800f622:	4629      	mov	r1, r5
 800f624:	f7f0 fdda 	bl	80001dc <__adddf3>
 800f628:	4604      	mov	r4, r0
 800f62a:	460d      	mov	r5, r1
 800f62c:	ec45 4b10 	vmov	d0, r4, r5
 800f630:	b003      	add	sp, #12
 800f632:	ecbd 8b04 	vpop	{d8-d9}
 800f636:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f63a:	4b1b      	ldr	r3, [pc, #108]	; (800f6a8 <__kernel_sin+0x150>)
 800f63c:	ec51 0b18 	vmov	r0, r1, d8
 800f640:	2200      	movs	r2, #0
 800f642:	f7f0 ff81 	bl	8000548 <__aeabi_dmul>
 800f646:	4632      	mov	r2, r6
 800f648:	ec41 0b19 	vmov	d9, r0, r1
 800f64c:	463b      	mov	r3, r7
 800f64e:	4640      	mov	r0, r8
 800f650:	4649      	mov	r1, r9
 800f652:	f7f0 ff79 	bl	8000548 <__aeabi_dmul>
 800f656:	4602      	mov	r2, r0
 800f658:	460b      	mov	r3, r1
 800f65a:	ec51 0b19 	vmov	r0, r1, d9
 800f65e:	f7f0 fdbb 	bl	80001d8 <__aeabi_dsub>
 800f662:	4652      	mov	r2, sl
 800f664:	465b      	mov	r3, fp
 800f666:	f7f0 ff6f 	bl	8000548 <__aeabi_dmul>
 800f66a:	ec53 2b18 	vmov	r2, r3, d8
 800f66e:	f7f0 fdb3 	bl	80001d8 <__aeabi_dsub>
 800f672:	a30b      	add	r3, pc, #44	; (adr r3, 800f6a0 <__kernel_sin+0x148>)
 800f674:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f678:	4606      	mov	r6, r0
 800f67a:	460f      	mov	r7, r1
 800f67c:	4640      	mov	r0, r8
 800f67e:	4649      	mov	r1, r9
 800f680:	f7f0 ff62 	bl	8000548 <__aeabi_dmul>
 800f684:	4602      	mov	r2, r0
 800f686:	460b      	mov	r3, r1
 800f688:	4630      	mov	r0, r6
 800f68a:	4639      	mov	r1, r7
 800f68c:	f7f0 fda6 	bl	80001dc <__adddf3>
 800f690:	4602      	mov	r2, r0
 800f692:	460b      	mov	r3, r1
 800f694:	4620      	mov	r0, r4
 800f696:	4629      	mov	r1, r5
 800f698:	f7f0 fd9e 	bl	80001d8 <__aeabi_dsub>
 800f69c:	e7c4      	b.n	800f628 <__kernel_sin+0xd0>
 800f69e:	bf00      	nop
 800f6a0:	55555549 	.word	0x55555549
 800f6a4:	3fc55555 	.word	0x3fc55555
 800f6a8:	3fe00000 	.word	0x3fe00000
 800f6ac:	5acfd57c 	.word	0x5acfd57c
 800f6b0:	3de5d93a 	.word	0x3de5d93a
 800f6b4:	8a2b9ceb 	.word	0x8a2b9ceb
 800f6b8:	3e5ae5e6 	.word	0x3e5ae5e6
 800f6bc:	57b1fe7d 	.word	0x57b1fe7d
 800f6c0:	3ec71de3 	.word	0x3ec71de3
 800f6c4:	19c161d5 	.word	0x19c161d5
 800f6c8:	3f2a01a0 	.word	0x3f2a01a0
 800f6cc:	1110f8a6 	.word	0x1110f8a6
 800f6d0:	3f811111 	.word	0x3f811111

0800f6d4 <fabs>:
 800f6d4:	ec51 0b10 	vmov	r0, r1, d0
 800f6d8:	ee10 2a10 	vmov	r2, s0
 800f6dc:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800f6e0:	ec43 2b10 	vmov	d0, r2, r3
 800f6e4:	4770      	bx	lr

0800f6e6 <finite>:
 800f6e6:	b082      	sub	sp, #8
 800f6e8:	ed8d 0b00 	vstr	d0, [sp]
 800f6ec:	9801      	ldr	r0, [sp, #4]
 800f6ee:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 800f6f2:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 800f6f6:	0fc0      	lsrs	r0, r0, #31
 800f6f8:	b002      	add	sp, #8
 800f6fa:	4770      	bx	lr
 800f6fc:	0000      	movs	r0, r0
	...

0800f700 <floor>:
 800f700:	ec51 0b10 	vmov	r0, r1, d0
 800f704:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f708:	f3c1 570a 	ubfx	r7, r1, #20, #11
 800f70c:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 800f710:	2e13      	cmp	r6, #19
 800f712:	ee10 5a10 	vmov	r5, s0
 800f716:	ee10 8a10 	vmov	r8, s0
 800f71a:	460c      	mov	r4, r1
 800f71c:	dc32      	bgt.n	800f784 <floor+0x84>
 800f71e:	2e00      	cmp	r6, #0
 800f720:	da14      	bge.n	800f74c <floor+0x4c>
 800f722:	a333      	add	r3, pc, #204	; (adr r3, 800f7f0 <floor+0xf0>)
 800f724:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f728:	f7f0 fd58 	bl	80001dc <__adddf3>
 800f72c:	2200      	movs	r2, #0
 800f72e:	2300      	movs	r3, #0
 800f730:	f7f1 f99a 	bl	8000a68 <__aeabi_dcmpgt>
 800f734:	b138      	cbz	r0, 800f746 <floor+0x46>
 800f736:	2c00      	cmp	r4, #0
 800f738:	da57      	bge.n	800f7ea <floor+0xea>
 800f73a:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 800f73e:	431d      	orrs	r5, r3
 800f740:	d001      	beq.n	800f746 <floor+0x46>
 800f742:	4c2d      	ldr	r4, [pc, #180]	; (800f7f8 <floor+0xf8>)
 800f744:	2500      	movs	r5, #0
 800f746:	4621      	mov	r1, r4
 800f748:	4628      	mov	r0, r5
 800f74a:	e025      	b.n	800f798 <floor+0x98>
 800f74c:	4f2b      	ldr	r7, [pc, #172]	; (800f7fc <floor+0xfc>)
 800f74e:	4137      	asrs	r7, r6
 800f750:	ea01 0307 	and.w	r3, r1, r7
 800f754:	4303      	orrs	r3, r0
 800f756:	d01f      	beq.n	800f798 <floor+0x98>
 800f758:	a325      	add	r3, pc, #148	; (adr r3, 800f7f0 <floor+0xf0>)
 800f75a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f75e:	f7f0 fd3d 	bl	80001dc <__adddf3>
 800f762:	2200      	movs	r2, #0
 800f764:	2300      	movs	r3, #0
 800f766:	f7f1 f97f 	bl	8000a68 <__aeabi_dcmpgt>
 800f76a:	2800      	cmp	r0, #0
 800f76c:	d0eb      	beq.n	800f746 <floor+0x46>
 800f76e:	2c00      	cmp	r4, #0
 800f770:	bfbe      	ittt	lt
 800f772:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 800f776:	fa43 f606 	asrlt.w	r6, r3, r6
 800f77a:	19a4      	addlt	r4, r4, r6
 800f77c:	ea24 0407 	bic.w	r4, r4, r7
 800f780:	2500      	movs	r5, #0
 800f782:	e7e0      	b.n	800f746 <floor+0x46>
 800f784:	2e33      	cmp	r6, #51	; 0x33
 800f786:	dd0b      	ble.n	800f7a0 <floor+0xa0>
 800f788:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800f78c:	d104      	bne.n	800f798 <floor+0x98>
 800f78e:	ee10 2a10 	vmov	r2, s0
 800f792:	460b      	mov	r3, r1
 800f794:	f7f0 fd22 	bl	80001dc <__adddf3>
 800f798:	ec41 0b10 	vmov	d0, r0, r1
 800f79c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f7a0:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 800f7a4:	f04f 33ff 	mov.w	r3, #4294967295
 800f7a8:	fa23 f707 	lsr.w	r7, r3, r7
 800f7ac:	4207      	tst	r7, r0
 800f7ae:	d0f3      	beq.n	800f798 <floor+0x98>
 800f7b0:	a30f      	add	r3, pc, #60	; (adr r3, 800f7f0 <floor+0xf0>)
 800f7b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f7b6:	f7f0 fd11 	bl	80001dc <__adddf3>
 800f7ba:	2200      	movs	r2, #0
 800f7bc:	2300      	movs	r3, #0
 800f7be:	f7f1 f953 	bl	8000a68 <__aeabi_dcmpgt>
 800f7c2:	2800      	cmp	r0, #0
 800f7c4:	d0bf      	beq.n	800f746 <floor+0x46>
 800f7c6:	2c00      	cmp	r4, #0
 800f7c8:	da02      	bge.n	800f7d0 <floor+0xd0>
 800f7ca:	2e14      	cmp	r6, #20
 800f7cc:	d103      	bne.n	800f7d6 <floor+0xd6>
 800f7ce:	3401      	adds	r4, #1
 800f7d0:	ea25 0507 	bic.w	r5, r5, r7
 800f7d4:	e7b7      	b.n	800f746 <floor+0x46>
 800f7d6:	2301      	movs	r3, #1
 800f7d8:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 800f7dc:	fa03 f606 	lsl.w	r6, r3, r6
 800f7e0:	4435      	add	r5, r6
 800f7e2:	4545      	cmp	r5, r8
 800f7e4:	bf38      	it	cc
 800f7e6:	18e4      	addcc	r4, r4, r3
 800f7e8:	e7f2      	b.n	800f7d0 <floor+0xd0>
 800f7ea:	2500      	movs	r5, #0
 800f7ec:	462c      	mov	r4, r5
 800f7ee:	e7aa      	b.n	800f746 <floor+0x46>
 800f7f0:	8800759c 	.word	0x8800759c
 800f7f4:	7e37e43c 	.word	0x7e37e43c
 800f7f8:	bff00000 	.word	0xbff00000
 800f7fc:	000fffff 	.word	0x000fffff

0800f800 <nan>:
 800f800:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800f808 <nan+0x8>
 800f804:	4770      	bx	lr
 800f806:	bf00      	nop
 800f808:	00000000 	.word	0x00000000
 800f80c:	7ff80000 	.word	0x7ff80000

0800f810 <rint>:
 800f810:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800f812:	ec51 0b10 	vmov	r0, r1, d0
 800f816:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800f81a:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 800f81e:	2e13      	cmp	r6, #19
 800f820:	ee10 4a10 	vmov	r4, s0
 800f824:	460b      	mov	r3, r1
 800f826:	ea4f 75d1 	mov.w	r5, r1, lsr #31
 800f82a:	dc58      	bgt.n	800f8de <rint+0xce>
 800f82c:	2e00      	cmp	r6, #0
 800f82e:	da2b      	bge.n	800f888 <rint+0x78>
 800f830:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 800f834:	4302      	orrs	r2, r0
 800f836:	d023      	beq.n	800f880 <rint+0x70>
 800f838:	f3c1 0213 	ubfx	r2, r1, #0, #20
 800f83c:	4302      	orrs	r2, r0
 800f83e:	4254      	negs	r4, r2
 800f840:	4314      	orrs	r4, r2
 800f842:	0c4b      	lsrs	r3, r1, #17
 800f844:	0b24      	lsrs	r4, r4, #12
 800f846:	045b      	lsls	r3, r3, #17
 800f848:	f404 2400 	and.w	r4, r4, #524288	; 0x80000
 800f84c:	ea44 0103 	orr.w	r1, r4, r3
 800f850:	4b32      	ldr	r3, [pc, #200]	; (800f91c <rint+0x10c>)
 800f852:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800f856:	e9d3 6700 	ldrd	r6, r7, [r3]
 800f85a:	4602      	mov	r2, r0
 800f85c:	460b      	mov	r3, r1
 800f85e:	4630      	mov	r0, r6
 800f860:	4639      	mov	r1, r7
 800f862:	f7f0 fcbb 	bl	80001dc <__adddf3>
 800f866:	e9cd 0100 	strd	r0, r1, [sp]
 800f86a:	463b      	mov	r3, r7
 800f86c:	e9dd 0100 	ldrd	r0, r1, [sp]
 800f870:	4632      	mov	r2, r6
 800f872:	f7f0 fcb1 	bl	80001d8 <__aeabi_dsub>
 800f876:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800f87a:	ea43 77c5 	orr.w	r7, r3, r5, lsl #31
 800f87e:	4639      	mov	r1, r7
 800f880:	ec41 0b10 	vmov	d0, r0, r1
 800f884:	b003      	add	sp, #12
 800f886:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f888:	4a25      	ldr	r2, [pc, #148]	; (800f920 <rint+0x110>)
 800f88a:	4132      	asrs	r2, r6
 800f88c:	ea01 0702 	and.w	r7, r1, r2
 800f890:	4307      	orrs	r7, r0
 800f892:	d0f5      	beq.n	800f880 <rint+0x70>
 800f894:	0851      	lsrs	r1, r2, #1
 800f896:	ea03 0252 	and.w	r2, r3, r2, lsr #1
 800f89a:	4314      	orrs	r4, r2
 800f89c:	d00c      	beq.n	800f8b8 <rint+0xa8>
 800f89e:	ea23 0201 	bic.w	r2, r3, r1
 800f8a2:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800f8a6:	2e13      	cmp	r6, #19
 800f8a8:	fa43 f606 	asr.w	r6, r3, r6
 800f8ac:	bf0c      	ite	eq
 800f8ae:	f04f 4400 	moveq.w	r4, #2147483648	; 0x80000000
 800f8b2:	2400      	movne	r4, #0
 800f8b4:	ea42 0306 	orr.w	r3, r2, r6
 800f8b8:	4918      	ldr	r1, [pc, #96]	; (800f91c <rint+0x10c>)
 800f8ba:	eb01 05c5 	add.w	r5, r1, r5, lsl #3
 800f8be:	4622      	mov	r2, r4
 800f8c0:	e9d5 4500 	ldrd	r4, r5, [r5]
 800f8c4:	4620      	mov	r0, r4
 800f8c6:	4629      	mov	r1, r5
 800f8c8:	f7f0 fc88 	bl	80001dc <__adddf3>
 800f8cc:	e9cd 0100 	strd	r0, r1, [sp]
 800f8d0:	e9dd 0100 	ldrd	r0, r1, [sp]
 800f8d4:	4622      	mov	r2, r4
 800f8d6:	462b      	mov	r3, r5
 800f8d8:	f7f0 fc7e 	bl	80001d8 <__aeabi_dsub>
 800f8dc:	e7d0      	b.n	800f880 <rint+0x70>
 800f8de:	2e33      	cmp	r6, #51	; 0x33
 800f8e0:	dd07      	ble.n	800f8f2 <rint+0xe2>
 800f8e2:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800f8e6:	d1cb      	bne.n	800f880 <rint+0x70>
 800f8e8:	ee10 2a10 	vmov	r2, s0
 800f8ec:	f7f0 fc76 	bl	80001dc <__adddf3>
 800f8f0:	e7c6      	b.n	800f880 <rint+0x70>
 800f8f2:	f2a2 4213 	subw	r2, r2, #1043	; 0x413
 800f8f6:	f04f 36ff 	mov.w	r6, #4294967295
 800f8fa:	40d6      	lsrs	r6, r2
 800f8fc:	4230      	tst	r0, r6
 800f8fe:	d0bf      	beq.n	800f880 <rint+0x70>
 800f900:	ea14 0056 	ands.w	r0, r4, r6, lsr #1
 800f904:	ea4f 0156 	mov.w	r1, r6, lsr #1
 800f908:	bf1f      	itttt	ne
 800f90a:	ea24 0101 	bicne.w	r1, r4, r1
 800f90e:	f04f 4480 	movne.w	r4, #1073741824	; 0x40000000
 800f912:	fa44 f202 	asrne.w	r2, r4, r2
 800f916:	ea41 0402 	orrne.w	r4, r1, r2
 800f91a:	e7cd      	b.n	800f8b8 <rint+0xa8>
 800f91c:	0800fd08 	.word	0x0800fd08
 800f920:	000fffff 	.word	0x000fffff
 800f924:	00000000 	.word	0x00000000

0800f928 <scalbn>:
 800f928:	b570      	push	{r4, r5, r6, lr}
 800f92a:	ec55 4b10 	vmov	r4, r5, d0
 800f92e:	f3c5 520a 	ubfx	r2, r5, #20, #11
 800f932:	4606      	mov	r6, r0
 800f934:	462b      	mov	r3, r5
 800f936:	b99a      	cbnz	r2, 800f960 <scalbn+0x38>
 800f938:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800f93c:	4323      	orrs	r3, r4
 800f93e:	d036      	beq.n	800f9ae <scalbn+0x86>
 800f940:	4b39      	ldr	r3, [pc, #228]	; (800fa28 <scalbn+0x100>)
 800f942:	4629      	mov	r1, r5
 800f944:	ee10 0a10 	vmov	r0, s0
 800f948:	2200      	movs	r2, #0
 800f94a:	f7f0 fdfd 	bl	8000548 <__aeabi_dmul>
 800f94e:	4b37      	ldr	r3, [pc, #220]	; (800fa2c <scalbn+0x104>)
 800f950:	429e      	cmp	r6, r3
 800f952:	4604      	mov	r4, r0
 800f954:	460d      	mov	r5, r1
 800f956:	da10      	bge.n	800f97a <scalbn+0x52>
 800f958:	a32b      	add	r3, pc, #172	; (adr r3, 800fa08 <scalbn+0xe0>)
 800f95a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f95e:	e03a      	b.n	800f9d6 <scalbn+0xae>
 800f960:	f240 71ff 	movw	r1, #2047	; 0x7ff
 800f964:	428a      	cmp	r2, r1
 800f966:	d10c      	bne.n	800f982 <scalbn+0x5a>
 800f968:	ee10 2a10 	vmov	r2, s0
 800f96c:	4620      	mov	r0, r4
 800f96e:	4629      	mov	r1, r5
 800f970:	f7f0 fc34 	bl	80001dc <__adddf3>
 800f974:	4604      	mov	r4, r0
 800f976:	460d      	mov	r5, r1
 800f978:	e019      	b.n	800f9ae <scalbn+0x86>
 800f97a:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800f97e:	460b      	mov	r3, r1
 800f980:	3a36      	subs	r2, #54	; 0x36
 800f982:	4432      	add	r2, r6
 800f984:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800f988:	428a      	cmp	r2, r1
 800f98a:	dd08      	ble.n	800f99e <scalbn+0x76>
 800f98c:	2d00      	cmp	r5, #0
 800f98e:	a120      	add	r1, pc, #128	; (adr r1, 800fa10 <scalbn+0xe8>)
 800f990:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f994:	da1c      	bge.n	800f9d0 <scalbn+0xa8>
 800f996:	a120      	add	r1, pc, #128	; (adr r1, 800fa18 <scalbn+0xf0>)
 800f998:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f99c:	e018      	b.n	800f9d0 <scalbn+0xa8>
 800f99e:	2a00      	cmp	r2, #0
 800f9a0:	dd08      	ble.n	800f9b4 <scalbn+0x8c>
 800f9a2:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800f9a6:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800f9aa:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800f9ae:	ec45 4b10 	vmov	d0, r4, r5
 800f9b2:	bd70      	pop	{r4, r5, r6, pc}
 800f9b4:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800f9b8:	da19      	bge.n	800f9ee <scalbn+0xc6>
 800f9ba:	f24c 3350 	movw	r3, #50000	; 0xc350
 800f9be:	429e      	cmp	r6, r3
 800f9c0:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 800f9c4:	dd0a      	ble.n	800f9dc <scalbn+0xb4>
 800f9c6:	a112      	add	r1, pc, #72	; (adr r1, 800fa10 <scalbn+0xe8>)
 800f9c8:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f9cc:	2b00      	cmp	r3, #0
 800f9ce:	d1e2      	bne.n	800f996 <scalbn+0x6e>
 800f9d0:	a30f      	add	r3, pc, #60	; (adr r3, 800fa10 <scalbn+0xe8>)
 800f9d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f9d6:	f7f0 fdb7 	bl	8000548 <__aeabi_dmul>
 800f9da:	e7cb      	b.n	800f974 <scalbn+0x4c>
 800f9dc:	a10a      	add	r1, pc, #40	; (adr r1, 800fa08 <scalbn+0xe0>)
 800f9de:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f9e2:	2b00      	cmp	r3, #0
 800f9e4:	d0b8      	beq.n	800f958 <scalbn+0x30>
 800f9e6:	a10e      	add	r1, pc, #56	; (adr r1, 800fa20 <scalbn+0xf8>)
 800f9e8:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f9ec:	e7b4      	b.n	800f958 <scalbn+0x30>
 800f9ee:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800f9f2:	3236      	adds	r2, #54	; 0x36
 800f9f4:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800f9f8:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 800f9fc:	4620      	mov	r0, r4
 800f9fe:	4b0c      	ldr	r3, [pc, #48]	; (800fa30 <scalbn+0x108>)
 800fa00:	2200      	movs	r2, #0
 800fa02:	e7e8      	b.n	800f9d6 <scalbn+0xae>
 800fa04:	f3af 8000 	nop.w
 800fa08:	c2f8f359 	.word	0xc2f8f359
 800fa0c:	01a56e1f 	.word	0x01a56e1f
 800fa10:	8800759c 	.word	0x8800759c
 800fa14:	7e37e43c 	.word	0x7e37e43c
 800fa18:	8800759c 	.word	0x8800759c
 800fa1c:	fe37e43c 	.word	0xfe37e43c
 800fa20:	c2f8f359 	.word	0xc2f8f359
 800fa24:	81a56e1f 	.word	0x81a56e1f
 800fa28:	43500000 	.word	0x43500000
 800fa2c:	ffff3cb0 	.word	0xffff3cb0
 800fa30:	3c900000 	.word	0x3c900000

0800fa34 <_init>:
 800fa34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fa36:	bf00      	nop
 800fa38:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800fa3a:	bc08      	pop	{r3}
 800fa3c:	469e      	mov	lr, r3
 800fa3e:	4770      	bx	lr

0800fa40 <_fini>:
 800fa40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fa42:	bf00      	nop
 800fa44:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800fa46:	bc08      	pop	{r3}
 800fa48:	469e      	mov	lr, r3
 800fa4a:	4770      	bx	lr
